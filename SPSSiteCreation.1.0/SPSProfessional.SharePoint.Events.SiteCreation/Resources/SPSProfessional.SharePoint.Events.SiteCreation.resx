<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="chkOptAttachDeleteText" xml:space="preserve">
    <value>Delete Site when delete item?</value>
  </data>
  <data name="chkOptForceCreationText" xml:space="preserve">
    <value>Creating a site with the same url than other, add a number to force the site creation.</value>
  </data>
  <data name="chkOptLogErrorText" xml:space="preserve">
    <value>Log error in the Url description field</value>
  </data>
  <data name="chkOptOnQuickLaunchText" xml:space="preserve">
    <value>Display this site on the Quick Launch of the parent site?</value>
  </data>
  <data name="chkOptUniquePermissonsText" xml:space="preserve">
    <value>Use unique permissions</value>
  </data>
  <data name="chkOptUseSharedNavBarText" xml:space="preserve">
    <value>Specify whether this site shares the same top link bar as the parent. This setting may also determine the starting element of the breadcrumb.</value>
  </data>
  <data name="DeleteSite" xml:space="preserve">
    <value>Delete Site</value>
  </data>
  <data name="DeleteSiteDescription" xml:space="preserve">
    <value>Attach another event handler to delete the site when the item is deleted.</value>
  </data>
  <data name="ErrorManagement" xml:space="preserve">
    <value>Error Management</value>
  </data>
  <data name="ErrorManagementDescription" xml:space="preserve">
    <value>Actions to take when an error occurs when creating a new site.</value>
  </data>
  <data name="Fields" xml:space="preserve">
    <value>Fields</value>
  </data>
  <data name="FieldsDescription" xml:space="preserve">
    <value>Select the three fields that the event handler needs.</value>
  </data>
  <data name="idAddKeyButtonText" xml:space="preserve">
    <value>Attach new list</value>
  </data>
  <data name="idAddKeyButtonToolTip" xml:space="preserve">
    <value>Attach the SiteCreation event to a new list</value>
  </data>
  <data name="listID" xml:space="preserve">
    <value>List Id</value>
  </data>
  <data name="listName" xml:space="preserve">
    <value>List Name</value>
  </data>
  <data name="LogError" xml:space="preserve">
    <value>Log Error</value>
  </data>
  <data name="NewSiteNavigation" xml:space="preserve">
    <value>New Site Navigation</value>
  </data>
  <data name="NewSiteNavigationDescription" xml:space="preserve">
    <value>Creating a site with the same url than other, add a number to force the site creation.</value>
  </data>
  <data name="NewSitePermissions" xml:space="preserve">
    <value>New Site Permissions</value>
  </data>
  <data name="NewSitePermissionsDescription" xml:space="preserve">
    <value>You can create a site with the same permissions as the parent site or a site with unique permissions breaking the inheritance role. Additionally you can specify a list of groups that you want to add to the new site. Use the next syntax, 
 GROUP:Description;OTHERGROUP:Description</value>
  </data>
  <data name="Permissions" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="siteCreationPageDescription" xml:space="preserve">
    <value>Use this page to attach the SPSProfessional Site Creation Event handler to any list in your site.</value>
  </data>
  <data name="SiteNameField" xml:space="preserve">
    <value>Site Name Field</value>
  </data>
  <data name="SiteUrlField" xml:space="preserve">
    <value>Site Url Field</value>
  </data>
  <data name="TemplateField" xml:space="preserve">
    <value>Template Field</value>
  </data>
  <data name="Templates" xml:space="preserve">
    <value>Templates</value>
  </data>
  <data name="TemplatesDescription" xml:space="preserve">
    <value>Build the template map, select a template for each option that you have defined in the choice field.</value>
  </data>
  <data name="txtOptNewPermissionsTitle" xml:space="preserve">
    <value>Groups to Add to the new site</value>
  </data>
  <data name="BtnNextTitle" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="ForceCreation" xml:space="preserve">
    <value>Force creation</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="ListDescription" xml:space="preserve">
    <value>Select a list to attach the event handler. The list must have at least three fields. A text field which will contain the web name, a hyperlink field which will store the new created web Url and a choice field which will select a template</value>
  </data>
  <data name="SelectList" xml:space="preserve">
    <value>Select List</value>
  </data>
  <data name="ErrBadTemplateDefinition" xml:space="preserve">
    <value>Value specified for template not defined in TemplateMap</value>
  </data>
  <data name="ErrSiteCantBeEmpty" xml:space="preserve">
    <value>Site title can´t be empty.</value>
  </data>
  <data name="chkOptHideTemplateField" xml:space="preserve">
    <value>Hide Template Field</value>
  </data>
</root>