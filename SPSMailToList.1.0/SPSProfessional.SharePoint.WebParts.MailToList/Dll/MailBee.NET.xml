<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MailBee.NET</name>
    </assembly>
    <members>
        <member name="T:MailBee.LogFormatOptions">
            <summary>
            Provides flags which can be used to change formatting of log messages produced
            by MailBee.
            </summary>
            <example>This sample demonstrates the effect of different <see cref="T:MailBee.LogFormatOptions"/> flags.
            <note>The actual values can be different in your case.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// LogNewEntry event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLogNewEntry(<span style="color: blue;">object</span> sender, LogNewEntryEventArgs e)
            	{
            		<span style="color: green;">// For readability, reduce the number of log entries displayed.</span>
            		<span style="color: blue;">if</span> (e.NewEntry.MessageType != LogMessageType.Recv)
            		{
            			e.NewEntry.AddThisEntry = <span style="color: blue;">false</span>;
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		mailer.SmtpServers.Add("smtp.domain.com");
            
            		<span style="color: green;">// Enable logging the SMTP session into memory.</span>
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.MemoryLog = <span style="color: blue;">true</span>;
            
            		<span style="color: green;">// Subscribe to the LogNewEntry event.</span>
            		mailer.LogNewEntry += <span style="color: blue;">new</span> LogNewEntryEventHandler(OnLogNewEntry);
            
            		mailer.Log.Clear();
            		mailer.Connect();
            		Console.WriteLine("Format is None");
            		Console.WriteLine(mailer.Log.GetMemoryLog());
            
            		mailer.Log.Clear();
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Hello();
            		Console.WriteLine("Format is AddContextInfo");
            		Console.WriteLine(mailer.Log.GetMemoryLog());
            
            		mailer.Log.Clear();
            		mailer.Log.Format = LogFormatOptions.AddDate;
            		mailer.Noop();
            		Console.WriteLine("Format is AddDate");
            		Console.WriteLine(mailer.Log.GetMemoryLog());
            
            		mailer.Log.Clear();
            		mailer.Log.Format = LogFormatOptions.AddContextInfo | LogFormatOptions.AddDate;
            		mailer.Disconnect();
            		Console.WriteLine("Format is AddContextInfo | AddDate");
            		Console.WriteLine(mailer.Log.GetMemoryLog());	
            	}
            }
            
            <span style="color: green;">// The output (the actual content will be different for your case).</span>
            Format is None
            [18:55:15.26] [RECV] 220 smtp.domain.com: please say hello\r\n
            
            Format is AddContextInfo
            [18:55:15.30] [RECV] [0020] [SMTP-00................] 250-smtp.domain.com: EHLO NOTEBOOK1 accepted\r\n250
            
            Format is AddDate
            [11/08/2005 18:55:15.31] [RECV] 250 OK\r\n
            
            Format is AddContextInfo | AddDate
            [11/08/2005 18:55:15.32] [RECV] [000A] [SMTP-00................] 221 smtp.domain.com: see you later\r\n
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' LogNewEntry event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLogNewEntry(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LogNewEntryEventArgs)
            		<span style="color: green;">' For readability, reduce the number of log entries displayed</span>
            		<span style="color: blue;">If</span> e.NewEntry.MessageType &lt;&gt; LogMessageType.Recv <span style="color: blue;">Then</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">False</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		mailer.SmtpServers.Add("smtp.domain.com")
            
            		<span style="color: green;">' Enable logging the SMTP session into memory.</span>
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.MemoryLog = <span style="color: blue;">True</span>
            
            		<span style="color: green;">' Subscribe to the LogNewEntry event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.LogNewEntry, <span style="color: blue;">AddressOf</span> OnLogNewEntry
            
            		mailer.Log.Clear()
            		mailer.Connect()
            		Console.WriteLine("Format is None")
            		Console.WriteLine(mailer.Log.GetMemoryLog())
            
            		mailer.Log.Clear()
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Hello()
            		Console.WriteLine("Format is AddContextInfo")
            		Console.WriteLine(mailer.Log.GetMemoryLog())
            
            		mailer.Log.Clear()
            		mailer.Log.Format = LogFormatOptions.AddDate
            		mailer.Noop()
            		Console.WriteLine("Format is AddDate")
            		Console.WriteLine(mailer.Log.GetMemoryLog())
            
            		mailer.Log.Clear()
            		mailer.Log.Format = LogFormatOptions.AddContextInfo <span style="color: blue;">Or</span> LogFormatOptions.AddDate
            		mailer.Disconnect()
            		Console.WriteLine("Format is AddContextInfo Or AddDate")
            		Console.WriteLine(mailer.Log.GetMemoryLog())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            
            <span style="color: green;">' The output (the actual content will be different for your case).</span>
            Format is None
            [18:55:15.26] [RECV] 220 smtp.domain.com: please say hello\r\n
            
            Format is AddContextInfo
            [18:55:15.30] [RECV] [0020] [SMTP-00................] 250-smtp.domain.com: EHLO NOTEBOOK1 accepted\r\n250
            
            Format is AddDate
            [11/08/2005 18:55:15.31] [RECV] 250 OK\r\n
            
            Format is AddContextInfo | AddDate
            [11/08/2005 18:55:15.32] [RECV] [000A] [SMTP-00................] 221 smtp.domain.com: see you later\r\n
            </code>
            </example>
        </member>
        <member name="F:MailBee.LogFormatOptions.None">
            <summary>
            Use default formatting.
            </summary>
        </member>
        <member name="F:MailBee.LogFormatOptions.AddDate">
            <summary>
            Include the current date in the timestamp.
            </summary>
        </member>
        <member name="F:MailBee.LogFormatOptions.AddContextInfo">
            <summary>
            Include the information about the current thread ID and the current context (such as DNSQ (DNS Query), SMTP, POP3,
            SEND). Useful in multi-thread mode (when log messages, produced by different threads, overlap).
            </summary>
        </member>
        <member name="F:MailBee.LogFormatOptions.BinaryAsText">
            <summary>
            Disable base64 encoding of binary data (usually, in DNS MX lookup queries).
            </summary>
        </member>
        <member name="T:MailBee.LogMessageType">
            <summary>
            Specifies the type of the log entry.
            </summary>
        </member>
        <member name="F:MailBee.LogMessageType.Info">
            <summary>
            The log entry is an informational or error message.
            </summary>
        </member>
        <member name="F:MailBee.LogMessageType.Recv">
            <summary>
            The log entry contains data received from the network.
            </summary>
        </member>
        <member name="F:MailBee.LogMessageType.Send">
            <summary>
            The log entry contains data sent to the network.
            </summary>
        </member>
        <member name="F:MailBee.LogMessageType.User">
            <summary>
            This log entry is a result of <see cref="M:MailBee.Logger.WriteLine(System.String)"/> method called
            by the application. MailBee itself never calls this method.
            </summary>
        </member>
        <member name="T:MailBee.LogEntry">
            <summary>
            Represents an entry to be added into the log file or memory log buffer. 
            </summary>
            <remarks>
            The instance of this class is passed as <see cref="P:MailBee.LogNewEntryEventArgs.NewEntry"/>
            property value of <b>LogNewEntry</b> event which can be raised by <see cref="T:MailBee.SmtpMail.Smtp"/>,
            <see cref="T:MailBee.Pop3Mail.Pop3"/>, and <see cref="T:MailBee.ImapMail.Imap"/> components.
            <note>The developer can set <see cref="P:MailBee.LogEntry.AddThisEntry"/> property value to <b>false</b>
            to cancel adding a particular entry into the log.</note></remarks>
        </member>
        <member name="P:MailBee.LogEntry.Time">
            <summary>
            Gets the date and time when this log entry was created.
            </summary>
            <value>A <see cref="T:System.DateTime"/> value specifying the date and time of the
            moment when the log entry was created.</value>
        </member>
        <member name="P:MailBee.LogEntry.MessageType">
            <summary>
            Gets the type of the log entry.
            </summary>
            <value>A <see cref="T:MailBee.LogMessageType"/> value specifying the type of the log entry
            (such as user-defined log message, informational message, etc).</value>
            <remarks>Since user-defined log entries (<see cref="F:MailBee.LogMessageType.User"/>), which
            are produced when the developer explicitly adds an entry to the log using <see cref="M:MailBee.Logger.WriteLine(System.String)"/>
            method, do not cause <b>LogNewEntry</b> events to occur, the <see cref="T:MailBee.LogMessageType"/>
            property never returns <see cref="F:MailBee.LogMessageType.User"/>.</remarks>
        </member>
        <member name="P:MailBee.LogEntry.ContextInfo">
            <summary>
            Gets the string containing fully-qualified name of the current context.
            </summary>
            <value>The string containing dot-separated names of all MailBee contexts
            which participate in the current operation.
            </value>
            <remarks>
            <para>This property is useful when using the <see cref="T:MailBee.SmtpMail.Smtp"/> component.
            Unlike <see cref="T:MailBee.Pop3Mail.Pop3"/> and <see cref="T:MailBee.ImapMail.Imap"/> components, <see cref="T:MailBee.SmtpMail.Smtp"/> component can operate
            in multiple contexts</para>
            <para>When <see cref="T:MailBee.Pop3Mail.Pop3"/> component is used, the context is always POP3.</para>
            <para>However, when <see cref="T:MailBee.SmtpMail.Smtp"/> component is used, the context may be somewhat
            like SEND-00.SMTP-04, which indicates the component is sending a mail message using multiple
            threads, and the current log entry corresponds to thread #4 (starting from zero).
            Another example is SEND-00.SMTP-00.POP3 which means the component currently operates in send mail
            mode, the connection to SMTP server on thread #0 is in progress, and POP-before-SMTP authentication
            is currently performed as a part of this connection procedure.</para>
            <para><see cref="P:MailBee.LogEntry.ContextInfo"/> value is especially useful when <see cref="T:MailBee.SmtpMail.Smtp"/>
            component operates in multi-thread mode (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is not 1).
            In this case, many log entries are simultaneously added into the log by multiple threads. In this case,
            <see cref="P:MailBee.LogEntry.ContextInfo"/> allows the person who's viewing the log to group the log entries
            by their <see cref="P:MailBee.LogEntry.ContextInfo"/> values.
            </para>
            </remarks>
        </member>
        <member name="P:MailBee.LogEntry.MessageText">
            <summary>
            Gets or sets the string containing the message text or data.
            </summary>
            <value>The string containing the texual or binary data representing the information
            this log entry is about.</value>
            <remarks>
            <para>This property value contains either data received from or sent to the network
            (when <see cref="P:MailBee.LogEntry.MessageType"/> is <see cref="F:MailBee.LogMessageType.Send"/> or <see cref="F:MailBee.LogMessageType.Recv"/>)
            or informational/error/warning messages from MailBee.</para>
            <para>In the following example, the message text is marked bold:</para>
            <para>[18:28:34.22] [SEND] [SEND-00.SMTP-00........] <b>MAIL FROM:&lt;user@domain.com&gt;\r\n</b></para>
            </remarks>
        </member>
        <member name="P:MailBee.LogEntry.MessageComment">
            <summary>
            Gets or sets the string containing any additional information about the message text or data.
            </summary>
            <value>The string containing any additional information about the message text or data, or an empty
            string if no additional information is available.</value>
            <remarks>
            <para>The comment is usually added if <see cref="P:MailBee.LogEntry.MessageText"/> contains incomplete
            information. For instance, if large block of data has been received from the network so
            only the part of this data has been placed into <see cref="P:MailBee.LogEntry.MessageText"/>, <see cref="P:MailBee.LogEntry.MessageComment"/>
            will return the string specifying the entire length of the received data.</para>
            <para>In the log file or memory log, the comment (if any) is enclosed in [].</para>
            <para>In the following example, the message comment is marked bold:</para>
            <para>[21:13:32.92] [RECV] +OK 117 messages\r\n [<b>Total 1074 bytes received.</b>]</para>
            </remarks>
        </member>
        <member name="P:MailBee.LogEntry.AddThisEntry">
            <summary>
            Gets or sets whether this log entry must be added into the log.
            </summary>
            <value>A boolean value specifying whether this log entry must be added into the log. The default value
            is <b>true</b>.</value>
            <remarks>The developer may set it to <b>false</b> to force MailBee ignore this log entry
            and do not put it into the log.</remarks>
        </member>
        <member name="T:MailBee.Logger">
            <summary>
            Provides logging facilities for MailBee components such as <see cref="T:MailBee.SmtpMail.Smtp"/>,
            <see cref="T:MailBee.Pop3Mail.Pop3"/>, and <see cref="T:MailBee.ImapMail.Imap"/>.
            </summary>
            <remarks>
            <para>The logging is the first tool to use for troubleshooting. If you
            encounter any problems with <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/> or
            <see cref="T:MailBee.ImapMail.Imap"/> component, please enable the logging first, and try again.</para>
            <para>The log provides a lot of useful and detailed information on how MailBee communicates
            with mail or DNS servers. The logs keeps track of all occurred network connection and protocol errors as well.</para>
            <para><see cref="T:MailBee.Logger"/> class also supports logging into memory buffer instead of a file
            (useful for those ASP.NET applications which have no permissions to write to disk).</para>
            <para>To prevent unlimited growth of the log file/memory buffer, the maximum size of
            the log can be restricted to certain value (see <see cref="P:MailBee.Logger.MaxSize"/> property).</para>
            <para>The developer has control of adding log messages. Each time the log entry is to
            be added into the log, MailBee components raise <b>LogNewEntry</b> event
            (see <see cref="E:MailBee.SmtpMail.Smtp.LogNewEntry">Smtp.LogNewEntry</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry">Pop3.LogNewEntry</see>, and
            <see cref="E:MailBee.ImapMail.Imap.LogNewEntry">Imap.LogNewEntry</see>). Also, the developer
            can explicitly put new entries into the log using <see cref="M:MailBee.Logger.WriteLine(System.String)"/> method.</para>
            </remarks>
            <example>This sample enables logging POP3 session into C:\pop3_log.txt file. The maximum size of
            the log file is restricted to 4 Kbytes. If the log file is going to exceed this size, it's renamed
            into C:\pop3_log-bak.txt, and new C:\pop3_log.txt log is started.
            <note>If C:\pop3_log.txt gets full again, it's again renamed to C:\pop3_log-bak.txt
            (old C:\pop3_log-bak.txt contents will be lost). Thus, the log will always reflect
            the latest activity, however, older data may be lost.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            <span style="color: green;">// Set logging parameters.</span>
            pop.Log.Enabled = <span style="color: blue;">true</span>;
            pop.Log.Filename = @"C:\pop3_log.txt";
            pop.Log.MaxSize = 4096;
            pop.Log.OldFilename = @"C:\pop3_log-bak.txt";
            
            <span style="color: green;">// Download all message headers to produce some log messages.</span>
            pop.Connect("mail.domain.com");
            pop.Login("user@domain.com", "password");
            MailMessageCollection msgs = pop.DownloadMessageHeaders();
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            <span style="color: green;">' Set logging parameters.</span>
            pop.Log.Enabled = <span style="color: blue;">True</span>
            pop.Log.Filename = "C:\pop3_log.txt"
            pop.Log.MaxSize = 4096
            pop.Log.OldFilename = "C:\pop3_log-bak.txt"
            
            <span style="color: green;">' Download all message headers to produce some log messages.</span>
            pop.Connect("mail.domain.com")
            pop.Login("user@domain.com", "password")
            
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            msgs = pop.DownloadMessageHeaders()
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Logger.GetMemoryLog">
            <summary>
            Returns the string containing the memory log contents.
            </summary>
            <returns>The return value is the string containing the memory log contents if memory logging is enabled;
            otherwise, the return value is an empty string.</returns>
        </member>
        <member name="M:MailBee.Logger.Clear">
            <summary>
            Clears the log contents if logging is enabled.
            </summary>
            <remarks>If memory logging is used (<see cref="P:MailBee.Logger.MemoryLog"/> is <b>true</b>),
            the memory buffer length is set to 0. If file logging is used (<see cref="P:MailBee.Logger.MemoryLog"/> is <b>false</b>),
            the log file denoted by <see cref="P:MailBee.Logger.Filename"/> property value is cleared.</remarks>
        </member>
        <member name="M:MailBee.Logger.WriteLine(System.String)">
            <summary>
            Adds a new log entry containing user-defined message into the log.
            </summary>
            <param name="messageText">The string to be added in the log as a part of the log entry.</param>
            <remarks>
            <para>The developer can use this method to add custom messages in the log.
            These messages will be formatted to the same rules as any other messages placed into the log.
            However, MailBee components (such as <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, and <see cref="T:MailBee.ImapMail.Imap"/>)
            do not raise <b>LogNewEntry</b> event when the log entry is added using this method.
            This allows the developer to call this method even inside <b>LogNewEntry</b> event handlers
            without getting endless recursion in the code.</para>
            <para>Entries added with <see cref="M:MailBee.Logger.WriteLine(System.String)"/> method are marked as <i>[USER]</i> in the log
            (as compared to <i>[INFO]</i>, <i>[SEND]</i>, or <i>[RECV]</i> entries produced by MailBee itself).</para>
            </remarks>
            <example>This sample adds user-defined message into the file log.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            <span style="color: green;">// Set logging parameters.</span>
            pop.Log.Enabled = <span style="color: blue;">true</span>;
            pop.Log.Filename = @"C:\pop3_log.txt";
            pop.Log.Clear();
            
            <span style="color: green;">// Print Hello.</span>
            pop.Log.WriteLine("Hello");
            
            <span style="color: green;">// After running this code, C:\pop3_log.txt file should look like below.</span>
            [00:05:34.79] [USER] Hello
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            <span style="color: green;">' Set logging parameters.</span>
            pop.Log.Enabled = <span style="color: blue;">True</span>
            pop.Log.Filename = "C:\pop3_log.txt"
            pop.Log.Clear()
            
            <span style="color: green;">' Print Hello.</span>
            pop.Log.WriteLine("Hello")
            
            <span style="color: green;">' After running this code, C:\pop3_log.txt file should look like below.</span>
            [00:05:34.79] [USER] Hello
            </code>
            </example>
        </member>
        <member name="P:MailBee.Logger.Enabled">
            <summary>
            Gets or sets whether the logging into a file or memory buffer is enabled.
            </summary>
            <value><b>true</b> if logging into a file or memory buffer is enabled; otherwise, <b>false</b>.
            The default value is <b>false</b>.</value>
            <remarks>Use logging only when it's needed. Logging is expensive operation,
            it might considerably degrade performance in some cases.</remarks>
        </member>
        <member name="P:MailBee.Logger.DisableOnException">
            <summary>
            Gets or sets whether the logging should be automatically disabled instead of throwing exception when logging error occurs.
            </summary>
            <value><b>true</b> if logging should be silently disabled when any logging error occurs; <b>false</b> if any logging error should cause an exception to be thrown.
            The default value is <b>false</b>.</value>
            <remarks>Since logging exists primarily for debug purposes, it's possible to tell MailBee to ignore errors which occur in logging itself.
            When <see cref="P:MailBee.Logger.DisableOnException"/> is <b>true</b>, the developer can still determine
            if logging error occurred by examining <see cref="P:MailBee.Logger.Enabled"/> property value. If it's now
            <b>false</b>, the logging error occurred and the logging was disabled.
            </remarks>
        </member>
        <member name="P:MailBee.Logger.FileEncoding">
            <summary>
            Gets or sets <see cref="T:System.Text.Encoding"/> to be used when writing into
            the log file.
            </summary>
            <value>A reference to the <see cref="T:System.Text.Encoding"/> object specifying
            which character encoding to use when writing data into the log file. The default
            value is <see cref="P:MailBee.Global.DefaultEncoding"/>.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>If log strings contain international characters which are replaced with ? characters
            in the log file, consider setting this property to the appropriate encoding
            (such as <see cref="P:System.Text.Encoding.UTF8"/>).
            <note>This property is ignored when memory log is used (because no character-to-byte
            conversion needs to be performed for memory log).</note></remarks>
        </member>
        <member name="P:MailBee.Logger.Filename">
            <summary>
            Gets or sets the log file name.
            </summary>
            <value>The full path and file name of the log file. The default
            value is <i>log.txt</i>.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is an empty string or a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Logger.OldFilename">
            <summary>
            Gets or sets the name of a backup file the log must be renamed into when its size
            exceeds the maximum allowed limit.
            </summary>
            <value>The full path and file name of a backup file the log must be renamed into when
            its size exceeds the limit set by <see cref="P:MailBee.Logger.MaxSize"/> property value, or a null reference
            (<b>Nothing</b> in Visual Basic) to indicate no backup must be created. The default
            value is a null reference (the backup file won't be created).
            </value>
            <remarks>This property makes sense only when using logging into a file is enabled and <see cref="P:MailBee.Logger.MaxSize"/>
            property value is non-zero (i.e. log size quota is on).</remarks>
        </member>
        <member name="P:MailBee.Logger.MemoryLog">
            <summary>
            Gets or sets whether the logging must be performed into a log file or into a memory buffer.
            </summary>
            <value><b>true</b> if logging is performed into the memory buffer; <b>false</b>
            if logging is performed into the file. The default value is <b>false</b>.</value>
            <remarks>To enable logging (either into memory or into a file), the logging itself
            must be enabled as well (<see cref="P:MailBee.Logger.Enabled"/> property value must be set to <b>true</b>).</remarks>
        </member>
        <member name="P:MailBee.Logger.KeepLogFileOpen">
            <summary>
            Gets or sets whether the log file must be kept open during MailBee session.
            </summary>
            <value><b>true</b> if the component (such as <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/> or
            <see cref="T:MailBee.ImapMail.Imap"/>) will keep the file open during the lifetime of
            the instance of the component); <b>false</b> if the component re-opens the log file
            and then closes it on each writing into the log. The default value is <b>false</b>.</value>
            <remarks>Keeping the log file open increases performance, although it's less reliable
            (operating system may cache log data so they might not be placed into the log if some
            kind of critical hardware or operating system error occurs). Also, the log contents
            won't be available for other applications while the log is still open.
            <note>The developer can close the opened log (to make sure all the data
            is actually saved) just by setting <see cref="P:MailBee.Logger.KeepLogFileOpen"/> to <b>false</b>.
            Then, <see cref="P:MailBee.Logger.KeepLogFileOpen"/> can be set back to <b>true</b> if desired.</note></remarks>
        </member>
        <member name="P:MailBee.Logger.HidePasswords">
            <summary>
            Gets or sets whether the actual password data may appear in the log or not.
            </summary>
            <value><b>true</b> if passwords must be replaced with "********"-like patterns;
            <b>false</b> if password data must be preserved. The default value is <b>false</b>.</value>
            <remarks>Only unencrypted passwords get hidden. These include passwords used with regular
            POP3 or POP-before-SMTP authentications, SASL LOGIN, and SASL PLAIN authentication methods.
            Secure authentication methods (such as APOP or SASL NTLM) do not transmit passwords
            over the network, so the password data never appear in the log anyway.
            <note type="caution">Setting this property to <b>false</b> may expose security problems.
            Anybody who has access to the log file might be able to see the actual password data which
            was trasmitted by the component to the mail server.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Logger.LogDnsQueryBody">
            <summary>
            Gets or sets whether DNS MX lookup query binary data must be added into the log.
            </summary>
            <value><b>true</b> if log entries containing DNS MX lookup query data are added
            into the log; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
            <remarks>The developer may set this property to <b>true</b> for debug purposes
            (for instance, to keep track of DNS queries sent by <see cref="T:MailBee.SmtpMail.Smtp"/>
            component in direct send mode.</remarks>
        </member>
        <member name="P:MailBee.Logger.MaxSize">
            <summary>
            Gets or sets the maximum allowed length (in characters) of the file or memory log.
            </summary>
            <value>If <paramref name="value"/> is a positive integer, it specifies the maximum
            length (in characters) of the log; if 0 or negative, the log size is unlimited. The default value is 0.</value>
            <remarks>
            <para>This property can be set to prevent unlimited growth of the log file. When
            <see cref="P:MailBee.Logger.MaxSize"/> is set to certain positive integer value, the log size will never
            exceed this value (unless it's not too small so that even one log entry would not fit).</para>
            <para>If the memory log is used and the log size is going to exceed <see cref="P:MailBee.Logger.MaxSize"/> value,
            the oldest half of the log is removed (the removal occurs on the entry boundaries so that individual
            entries are not splitted).</para>
            <para>If the file log is used and the log size is going to exceed <see cref="P:MailBee.Logger.MaxSize"/> value,
            the log file is renamed into <see cref="P:MailBee.Logger.OldFilename"/> name and then cleared (or just cleared if
            <see cref="P:MailBee.Logger.OldFilename"/> property is not set).</para>
            <para>The developer may also call <see cref="M:MailBee.Logger.Clear"/> method to clear the log.</para>
            <note>The log size limitation is a character count, not byte count. When using
            logging into a file, some characters can be converted into multi-byte sequences
            (especially, if UTF8 encoding is used), so that the log file size in bytes may
            get larger than <see cref="P:MailBee.Logger.MaxSize"/> value.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Logger.Format">
            <summary>
            Gets or sets flags which specify formatting of log entries placed into the log.
            </summary>
            <value>A <see cref="T:MailBee.LogFormatOptions"/> value containing bitwise combination
            of flags specifying formatting of log entries placed into the log. The default value
            is <see cref="F:MailBee.LogFormatOptions.None"/>.</value>
        </member>
        <member name="P:MailBee.Logger.SyncRoot">
            <summary>
            Gets or sets the object to be used for synchronized access to the log file.
            </summary>
            <value>A reference to the object to be used for synchronized access to the log file.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>The developer may need to set this value if the application is multi-threaded
            and there are multiple instances of MailBee components which attempt to write to the same log file.
            In this case, <see cref="P:MailBee.Logger.SyncRoot"/> should be set to the same object reference for all such instances
            of MailBee components.</remarks>
        </member>
        <member name="T:MailBee.Security.CryptoServiceProvider">
            <summary>
            Provides methods and properties for accessing or examining Cryptographic Service Providers (CSPs)
            registered in the system.
            </summary>
            <remarks>
            CSP is an independent software module which performs cryptographic algorithms for authentication, encoding
            and encryption procedures. Each CSP supports its own set of algorithms.
            <note>MailBee handles CSPs automatically. Usually there is no need to use <see cref="T:MailBee.Security.CryptoServiceProvider"/> class
            unless you need to use specific CSP.</note>
            </remarks>
            <example>This sample displays the details of the default CSP to be used by MailBee, then changes the default CSP and displays its details,
            then creates a new CSP and displays its details.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespace at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: green;">// Use default CSP.</span>
            Console.WriteLine(objSmime.Provider.GetProviderName());
            Console.WriteLine(objSmime.Provider.GetProviderVersion());
            Console.WriteLine(objSmime.Provider.GetKeyContainer());
            Console.WriteLine("-----------------------------------");
            
            <span style="color: green;">// Set new default for CSP.</span>
            objSmime.Provider = <span style="color: blue;">new</span> CryptoServiceProvider(CryptoServiceProvider.Enhanced);
            
            <span style="color: green;">// Use the new default CSP.</span>
            Console.WriteLine(objSmime.Provider.GetProviderName());
            Console.WriteLine(objSmime.Provider.GetProviderVersion());
            Console.WriteLine(objSmime.Provider.GetKeyContainer());
            Console.WriteLine("-----------------------------------");
            
            <span style="color: green;">// Set new default for CSP.</span>
            CryptoServiceProvider strongProvider = <span style="color: blue;">new</span> CryptoServiceProvider(CryptoServiceProvider.Strong);
            objSmime.Provider = strongProvider;
            
            <span style="color: green;">// Use another CSP.</span>
            Console.WriteLine(objSmime.Provider.GetProviderName());
            Console.WriteLine(objSmime.Provider.GetProviderVersion());
            Console.WriteLine(objSmime.Provider.GetKeyContainer());
            Console.WriteLine("-----------------------------------");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smime
            
            <span style="color: green;">' Use default CSP.</span>
            Console.WriteLine(objSmime.Provider.GetProviderName())
            Console.WriteLine(objSmime.Provider.GetProviderVersion())
            Console.WriteLine(objSmime.Provider.GetKeyContainer())
            Console.WriteLine("-----------------------------------")
            
            <span style="color: green;">' Set new default for CSP.</span>
            objSmime.Provider = <span style="color: blue;">New</span> CryptoServiceProvider(CryptoServiceProvider.Enhanced)
            
            <span style="color: green;">' Use the new default CSP.</span>
            Console.WriteLine(objSmime.Provider.GetProviderName())
            Console.WriteLine(objSmime.Provider.GetProviderVersion())
            Console.WriteLine(objSmime.Provider.GetKeyContainer())
            Console.WriteLine("-----------------------------------")
            
            <span style="color: green;">' Set new default for CSP.</span>
            <span style="color: blue;">Dim</span> strongProvider <span style="color: blue;">As</span> <span style="color: blue;">New</span> CryptoServiceProvider(CryptoServiceProvider.Strong)
            objSmime.Provider = strongProvider
            
            <span style="color: green;">' Use another CSP.</span>
            Console.WriteLine(objSmime.Provider.GetProviderName())
            Console.WriteLine(objSmime.Provider.GetProviderVersion())
            Console.WriteLine(objSmime.Provider.GetKeyContainer())
            Console.WriteLine("-----------------------------------")
            </code>
            </example>
        </member>
        <member name="F:MailBee.Security.CryptoServiceProvider.Base">
            <summary>
            Gets Microsoft Base Cryptographic Provider name.
            <seealso cref="M:MailBee.Security.CryptoServiceProvider.#ctor(System.String)"/>
            </summary>
            <remarks>This is the default CSP used by MailBee.</remarks>
        </member>
        <member name="F:MailBee.Security.CryptoServiceProvider.Enhanced">
            <summary>
            Gets Microsoft Enhanced Cryptographic Provider name.
            <seealso cref="M:MailBee.Security.CryptoServiceProvider.#ctor(System.String)"/>
            </summary>
        </member>
        <member name="F:MailBee.Security.CryptoServiceProvider.Strong">
            <summary>
            Gets Microsoft Strong Cryptographic Provider name.
            <seealso cref="M:MailBee.Security.CryptoServiceProvider.#ctor(System.String)"/>
            </summary>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:MailBee.Security.CryptoServiceProvider"/> class.
            </summary>
            <param name="name">The name of the Cryptographic Service Provider to be represented by this instance.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">An error occurred and <see cref="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks><see cref="T:MailBee.Security.CryptoServiceProvider"/> class provides several string constants which contain names of most widely used CSPs:
            <list type="bullet">
            <item><see cref="F:MailBee.Security.CryptoServiceProvider.Base"/></item>
            <item><see cref="F:MailBee.Security.CryptoServiceProvider.Strong"/></item>
            <item><see cref="F:MailBee.Security.CryptoServiceProvider.Enhanced"/></item>
            </list>
            <see cref="M:MailBee.Security.CryptoServiceProvider.GetSystemProviders"/> method can be used to obtain the list of all CSPs supported by the operating system.
            </remarks>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MailBee.Security.CryptoServiceProvider"/> class.
            </summary>
            <remarks>This overload creates a new instance of <see cref="T:MailBee.Security.CryptoServiceProvider"/> class which represents <see cref="F:MailBee.Security.CryptoServiceProvider.Base"/> CSP.</remarks>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.GetProviderName">
            <summary>
            Gets the name of the CSP represented by this object.
            </summary>
            <returns>The name of the CSP if succeeded; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">An error occurred and <see cref="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>The example is available in <see cref="T:MailBee.Security.CryptoServiceProvider"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.GetProviderVersion">
            <summary>
            Gets the version of the CSP represented by this object.
            </summary>
            <returns>The version string of the CSP if succeeded; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">An error occurred and <see cref="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>The example is available in <see cref="T:MailBee.Security.CryptoServiceProvider"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.GetKeyContainer">
            <summary>
            Gets the name of the key container.
            </summary>
            <returns>The key container string of the CSP if succeeded; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">An error occurred and <see cref="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The name of the current user is usually used as a key container name.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.CryptoServiceProvider"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.GetSupportedAlgorithms">
            <summary>
            Gets the array of all cryptographic algorithms supported by the CSP.
            </summary>
            <returns>
            A reference to the array of <see cref="T:MailBee.Security.Algorithm"/> objects representing all algorithms supported by this CSP if succeeded;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).
            </returns>
            <exception cref="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">An error occurred and <see cref="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>The example is available in <see cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.GetSystemProviders">
            <summary>
            Gets the list of all CPSs that are registered in the operating system.
            <seealso cref="M:MailBee.Security.CryptoServiceProvider.#ctor(System.String)"/>
            </summary>
            <returns>A reference to the array of string names of all CSPs supported by the operating system.</returns>
            <example>This sample displays the names of all supported CSPs.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            <span style="color: blue;">string</span>[] cryptoProviderNames = CryptoServiceProvider.GetSystemProviders();
            
            <span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> name <span style="color: blue;">in</span> cryptoProviderNames)
            {
            	Console.WriteLine(name);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> cryptoProviderNames <span style="color: blue;">As</span> <span style="color: blue;">String</span>() = CryptoServiceProvider.GetSystemProviders()
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> name <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> cryptoProviderNames
            	Console.WriteLine(name)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CryptoServiceProvider.Dispose">
            <summary>
            Releases the resources associated with the current <see cref="T:MailBee.Security.CryptoServiceProvider"/> object.
            </summary>
        </member>
        <member name="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the object will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the object methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Security.CryptoServiceProvider.LastResult"/> members to get more information about the error.
            <note>
            Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee.NET usage will still be thrown.
            <para>
            Typical example of such errors is passing invalid arguments to methods. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be supressed.
            </para>
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.Security.CryptoServiceProvider.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="P:MailBee.Security.CryptoServiceProvider.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is the one of the constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="T:MailBee.SortableByPriorityCollection">
            <summary>
            Represents an abstract parent for all MailBee collections sorted by
            <see cref="P:MailBee.ISortableByPriority.Priority"/> value of their elements.
            <seealso cref="T:MailBee.DnsMX.DnsServerCollection"/>
            <seealso cref="T:MailBee.SmtpMail.SmtpServerCollection"/>
            </summary>
            <remarks>
            <para>Sorting by priority is used to sort <see cref="T:MailBee.DnsMX.DnsServer"/>
            and <see cref="T:MailBee.SmtpMail.SmtpServer"/> objects in their corresponding collections
            so that servers with higher priority (also called preference) would be used first.
            </para>
            <para>In send mail scenarios, having servers sorted by the priority value allows MailBee
            to send mails to high-priority servers while low priority servers are used as backup
            servers in the case if the primary servers fail.</para>
            </remarks>
        </member>
        <member name="M:MailBee.SortableByPriorityCollection.SortByPriority">
            <summary>
            Sorts the items in the collection by their priority value.
            </summary>
            <remarks>
            <para>Lower values are preferred. For instance, if the collection had
            4 elements with the following priority values: 1, 0, 3, 0, then after calling
            this method, the elements would be reordered as: 0, 0, 1, 3.</para>
            <para>If this method detects the collection is already sorted, no elements will be
            reordered. In other words, this method performs stable sort (in contrast to
            unstable sort when equal elements may be reordered).</para>
            <para>This method can be used if the developer changes priority of elements already
            added to the collection and wants to get the collection re-ordered accordingly new
            values of priority.</para>
            </remarks>
        </member>
        <member name="T:MailBee.ImapMail.EnvelopeCollection">
            <summary>
            Provides properties and methods for examining, extending, and reversing the collection of the <see cref="T:MailBee.ImapMail.Envelope"/> objects.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
        </member>
        <member name="M:MailBee.ImapMail.EnvelopeCollection.Add(MailBee.ImapMail.Envelope)">
            <summary>
            Adds the specified <see cref="T:MailBee.ImapMail.Envelope"/> object to the collection.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
            <param name="item">The <see cref="T:MailBee.ImapMail.Envelope"/> object that should be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="item"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.ImapMail.EnvelopeCollection.Add(MailBee.ImapMail.EnvelopeCollection)">
            <summary>
            Adds another <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> to the current collection.
            </summary>
            <param name="items">The <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> object whose items should be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="items"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.ImapMail.EnvelopeCollection.Reverse">
            <summary>
            Reverses the order of the list of the messages that are stored in the collection.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <remarks>
            <para>
            For instance, this method can be used to display the list of message envelopes received from mail server
            in descending order (from new to old ones). By default, mail server returns message envelopes in ascending order
            (from old to new ones). This method allows the developer to have this collection re-sorted in descending order.
            </para>
            <para>This method is a counterpart of the similar <see cref="M:MailBee.Mime.MailMessageCollection.Reverse"/> method
            of <see cref="T:MailBee.Mime.MailMessageCollection"/> class.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.EnvelopeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.ImapMail.Envelope"/> object at the specified zero-based index in the collection.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
            <param name="index">The zero-based index of the <see cref="T:MailBee.ImapMail.Envelope"/> object in the collection.</param>
            <value>
            A <see cref="T:MailBee.ImapMail.Envelope"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.Global">
            <summary>
            Provides properties specifying default values and parameter settings which apply to instances of all MailBee classes.
            </summary>
            <remarks>
            Changes of the property values of this class affect all MailBee classes
            in the current application domain. For instance, if <see cref="P:MailBee.Global.DnsPort"/> is set to 42,
            all subsequent DNS MX lookup queries will be initiated on port 42. Or, if <see cref="P:MailBee.Global.DefaultTimeout"/>
            is set to 500, all subsequent connections will use 0.5 seconds as a timeout value
            (however, any connections which are already open will still use their current timeout settings).
            </remarks>
        </member>
        <member name="P:MailBee.Global.DefaultTimeout">
            <summary>
            Gets or sets the default timeout value (in milliseconds)
            of all MailBee classes which allow the developer to set timeout value.
            </summary>
            <value>An integer value which will be used as an initial value of
            <b>Timeout</b> property during creating instances of any MailBee class which implements <b>Timeout</b> property.
            The default value is 20000 (20 seconds).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is negative.</exception>
            <remarks>If set to zero, the default timeout setting will be "wait indefinitely". 
            <note><see cref="P:MailBee.Global.DefaultTimeout"/> field has no effect on UDP timeout default value (<see cref="P:MailBee.DnsMX.DnsServer.UdpTimeout"/> property).</note>
            </remarks>
        </member>
        <member name="P:MailBee.Global.PrivateDataCover">
            <summary>
            Gets or sets the string to be used instead of the actual password data in the log when
            <see cref="P:MailBee.Logger.HidePasswords"/> is <b>true</b>.
            </summary>
            <value>The string to replace the actual password data in the log file or memory log.
            The default value is "********".</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Global.MaxMultiLineDataLength">
            <summary>
            Gets or sets the maximum length (in bytes) of the multi-line data (request to a server or response from a server)
            which will be inserted into the log without truncation.
            </summary>
            <value>An integer value containing the maximum length (in bytes) of the multi-line data (request to a server or response from a server)
            which will be inserted into the log without truncation. The default value is 256.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is negative.</exception>
            <remarks>This property allows the developer to limit the maximum length of large
            textual data (such as client requests and server responses) to be inserted in the log.
            This parameter has no effect if logging is not used.
            <note>POP3 requests and SMTP responses are always printed into the log completely. This is because
            POP3 requests and SMTP responses are small, and all the information in this data
            is very important and should not be truncated.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Global.DnsPort">
            <summary>
            Gets or sets the port on which to communicate with DNS servers.
            </summary>
            <value>The integer value containing the port number to connect to DNS servers on. The default value is 53 (Domain Name Server port).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> does not denote a valid port number.</exception>
            <remarks> In some rare cases, the developer may need to set it to 42 (Host Name Server port).</remarks>
        </member>
        <member name="P:MailBee.Global.DnsMaxFailureCount">
            <summary>
            Gets or sets the maximum number of seriated failures of the DNS server required in order to consider
            the DNS server down.
            </summary>
            <value>The number of seriated failures of the DNS server which needs to be achieved in order to consider this server down.
            The default value is 3.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is less than 1.</exception>
            <remarks>
            <para>When making DNS MX lookup queries, it's normal that the DNS server does not
            respond in appropriate time frame sometimes. In this case, the query is sent second
            time. If the second (or <i>n-th</i>, if <see cref="P:MailBee.DnsMX.DnsServer.UdpRetryCount"/> is <i>n</i>) attempt fails too, the DNS server is put aside (set in quarantine)
            and another DNS server is tried (however, if no more servers available, an error occurs).
            The amount of time the DNS server spends in quarantine is set by <see cref="P:MailBee.Global.DnsNextAttemptInterval"/> field.
            Once this time is over, the DNS server is returned back to the working servers set,
            and can be used again. If the DNS server again did not responded to two (or <i>n</i>) queries
            one by one, it's set in quarantine again. When the number of settings in quarantine
            is going to reach <see cref="P:MailBee.Global.DnsMaxFailureCount"/>, the server is considered completely down,
            and will not be tried any longer (or at least until the application explicitly calls
            <see cref="M:MailBee.DnsMX.DnsServer.Reset"/> method).</para>
            <para>If, however, the DNS server having non-zero number of failures does respond
            to any query, the failure counter is reset (i.e. only "one by one" failures are counted).
            Thus, temporary DNS failures are discarded while permanent or long-term downs
            are recognized correctly.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Global.DnsNextAttemptInterval">
            <summary>
            Gets or sets the amount of time (in milliseconds) the failed DNS server spends in quarantine.
            </summary>
            <value>The length of the period (in milliseconds) the failed DNS server spends in quarantine. The default value is 1000 (1 second).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is negative.</exception>
            <remarks>
            If the DNS server didn't responded <see cref="P:MailBee.DnsMX.DnsServer.UdpRetryCount"/> running,
            it's set in quarantine for <see cref="P:MailBee.Global.DnsNextAttemptInterval"/> milliseconds. During this interval,
            the server is not used (other servers used if any, or an error occurs if all the servers are in
            quarantine). If the number of quarantines reaches <see cref="P:MailBee.Global.DnsMaxFailureCount"/>,
            the server is disabled instead of being set in quarantine (see <see cref="P:MailBee.Global.DnsMaxFailureCount"/> field
            for details).
            </remarks>
        </member>
        <member name="P:MailBee.Global.DefaultCulture">
            <summary>
            Gets or sets the default <see cref="T:System.Globalization.CultureInfo"/> to be used for string comparisons and conversions.
            </summary>
            <value>A reference to the <see cref="T:System.Globalization.CultureInfo"/> object
            to be used for string comparisons and conversions. The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Global.DefaultEncoding">
            <summary>
            Gets or sets the default <see cref="T:System.Text.Encoding"/> to be used for byte-to-string and string-to-byte conversions when
            no encoding is specified.
            </summary>
            <value>A reference to the <see cref="T:System.Text.Encoding"/> object to be used for byte-to-string and string-to-byte conversions when
            no encoding is specified. The default value is <see cref="P:System.Text.Encoding.Default"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Global.DefaultServerName">
            <summary>
            Gets or sets the default mail server name to be used when no server name specified.
            </summary>
            <value>The string containing the default mail server name to be used when no server name specified. The default value is "localhost".</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Global.TcpBufSize">
            <summary>
            Gets or sets the default size (in bytes) of TCP buffer.
            </summary>
            <value>The default size (in bytes) of TCP buffer. The default value is 8192.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is less than 1.</exception>
            <remarks>
            <para>The developer may consider to reduce this value to make MailBee raise <b>DateReceived</b>, <b>DateSent</b>,
            and similar events more often.</para>
            <para>Increasing this property value will slightly increase performance because MailBee will send and receive
            data in larger chunks.</para></remarks>
        </member>
        <member name="P:MailBee.Global.Pipelining">
            <summary>
            Gets or sets whether pipelining (joining commands in batches) must be enabled by default.
            </summary>
            <value>If <b>true</b>, the pipelining will be enabled by default; otherwise, disabled. The default value is <b>true</b>.</value>
            <remarks>If this property value is <b>true</b> and pipelining was not explicitly disabled
            and the mail server supports pipelining, it will be used. Using pipelining greatly
            increases performance of communication with the mail server.
            <note>If <see cref="P:MailBee.Global.SafeMode"/> is <b>false</b>, <see cref="P:MailBee.Global.Pipelining"/> value will be <b>false</b> too
            and the pipelining will be disabled.</note>
            The developer, however, may still connect to the mail server with pipelining
            enabled using <b>Connect</b> method overload which explicitly
            specifies whether pipelining should be used or not. For instance, for <see cref="T:MailBee.Pop3Mail.Pop3"/> class, such
            overload is <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:MailBee.Global.SafeMode">
            <summary>
            Gets or sets whether safe mode (prefer compatibility instead of performance) must be ENABLED by default.
            </summary>
            <value>If <b>true</b>, many performance extensions (including <see cref="P:MailBee.Global.Pipelining"/>) will be DISABLED by default;
            otherwise, they will be enabled (unless they have not been explicitly disabled via their
            corresponding options). The default value is <b>false</b> (safe mode is off and the extensions are enabled).</value>
            <remarks>
            <para>
            The purpose of this property is to troubleshoot various issues with incorrect
            implementations of mail protocols on some servers. When <see cref="P:MailBee.Global.SafeMode"/> is enabled,
            MailBee downgrades its capabilities to the level which still provides all the features
            but with reduced performance.</para>
            <para>Another effect of <see cref="P:MailBee.Global.SafeMode"/> enabled is changing the order
            in which authentication methods are tried for availibility. By default, MailBee attempts to
            use secure methods and downgrades to non-secure ones only if secure methods are not available.
            In <see cref="P:MailBee.Global.SafeMode"/>, this behavior is reversed. However, if the list of desired methods
            is limited to secure methods only (for instance, <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods)"/>
            was called with <i>authMethods</i> parameter set to <see cref="F:MailBee.AuthenticationMethods.Apop"/>),
            MailBee will NOT attempt to use non-secure methods even in safe mode.</para>
            <para>Setting <see cref="P:MailBee.Global.SafeMode"/> to <b>true</b> changes the defaults as follows:
            <list type="bullet">
            <item><description>Pipelining is disabled (<see cref="P:MailBee.Global.Pipelining"/> will return <b>false</b>)</description></item>
            <item><description><see cref="F:MailBee.AuthenticationOptions.PreferSimpleMethods"/> is enabled</description></item>
            <item><description>All ESMTP extensions except AUTH (SMTP authentication) are disabled (<see cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/> is 7)</description></item>
            </list>
            </para>
            <note>
            <see cref="P:MailBee.Global.SafeMode"/> property specifies defaults only for newly created connection settings objects.
            Thus, it must be set BEFORE creating instances of MailBee classes which are containers of the
            connection settings (i.e. <see cref="T:MailBee.SmtpMail.SmtpServer"/>). The property value does not have any effect on
            <see cref="T:MailBee.SmtpMail.SmtpServer"/> objects already created.
            </note>
            However, even if certain connection settings object was created AFTER <see cref="P:MailBee.Global.SafeMode"/> property had already
            been set, its effect can be overridden using such object's properties or method parameters which explicitly
            control the corresponding options. For instance, the developer may manually change
            <see cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/> value after it was set during construction
            of the object.
            </remarks>
        </member>
        <member name="P:MailBee.Global.LocalSmtpMXServerName">
            <summary>
            Gets or sets the default SMTP MX server name to be used to send mail in direct send mode
            to the recipients whose e-mail address contains no domain part.
            </summary>
            <value>The name of SMTP server to relay mail in direct send mode when it's impossible
            to determine recipient's own SMTP MX server because domain is missing in e-mail address,
            or a null reference (<b>Nothing</b> in Visual Basic) to use local machine name as SMTP server
            name.</value>
            <remarks>
            <para>When this property is a null reference (default value),
            the local machine name will be used as the name of SMTP MX server for sending mail to e-mail addresses
            like <i>jdoe</i> (as opposed to <i>jdoe@domain</i>) in direct send mode.</para>
            <para>When sending to a relay SMTP server, all the recipients are submitted to the relay
            server, and <see cref="P:MailBee.Global.LocalSmtpMXServerName"/> value is not used.</para>
            <note>If <see cref="P:MailBee.Global.LocalSmtpMXServerName"/> is set to an empty string (<see cref="F:System.String.Empty"/>)
            rather than to a null reference, MailBee will attempt to perform MX lookup query for
            an empty domain name on direct send attempt, which would result in an error.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Global.Version">
            <summary>
            Gets the version of the MailBee assembly.
            </summary>
            <value>The MailBee assembly version string as MajorVersion.MinorVersion.Revision.Build, such as "3.0.0.35".</value>
        </member>
        <member name="T:MailBee.BounceMail.DsnRecipientCollection">
            <summary>
            Represents a collection of delivery status information objects for all recipients listed
            in the DSN attachment.
            <seealso cref="T:MailBee.BounceMail.DsnRecipient"/>
            </summary>
            <remarks>
            <para>Because an e-mail message can be addressed to multiple recipients,
            a DSN attachment may contain more than one delivery status notification.</para>
            <para>Because some DSN messages do not contain any DSN attachment, it's more reliable to use
            <see cref="T:MailBee.BounceMail.RecipientStatusCollection"/> as the list of the recipients in the DSN.</para>
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipientCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.BounceMail.DsnRecipient"/> object at the specified
            zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index number of the element in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index does not exist.
            </exception>
            <returns>An <see cref="T:MailBee.BounceMail.DsnRecipient"/> object having the specified zero-based index
            in the collection.</returns>
        </member>
        <member name="T:MailBee.SaslMethod">
            <summary>
            Provides a framework for developing custom SASL authentication mechanisms.
            <seealso cref="T:MailBee.AuthenticationOptions"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/>
            </summary>
            <remarks>
            <para>Instances of derived classes can be used with mailer classes such as
            <see cref="T:MailBee.Pop3Mail.Pop3"/>, <see cref="T:MailBee.ImapMail.Imap"/> or <see cref="T:MailBee.SmtpMail.Smtp"/>
            for employing non-standard login mechanisms.</para>
            <para>Implementation of SASL authentication mechanism requires the developer
            to override the following methods:
            <list type="bullet">
            <item><description><see cref="M:MailBee.SaslMethod.CreateNextClientAnswer"/></description></item>
            <item><description><see cref="M:MailBee.SaslMethod.GetSaslID"/></description></item>
            <item><description><see cref="M:MailBee.SaslMethod.IsSecure"/></description></item>
            </list></para>
            Also, the developer can override <see cref="M:MailBee.SaslMethod.RequiresCredentials"/> method which returns <b>true</b> by default.
            This can be used for implementing an authentication method which can obtain user credentials itself
            and does not require <see cref="P:MailBee.SaslMethod.AccountName"/> and <see cref="P:MailBee.SaslMethod.Password"/> properties be set. For instance,
            MailBee implementation of NTLM method can obtain user credentials from the operating system when they are not supplied
            in <see cref="P:MailBee.SaslMethod.AccountName"/> and <see cref="P:MailBee.SaslMethod.Password"/> properties.
            </remarks>
            <example>This sample shows the entire implementation of SASL LOGIN authentication method.
            Although SASL LOGIN method is already built into MailBee, you can use this sample for
            developing your own SASL authentication methods.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// User-defined SASL LOGIN method implementation</span>
            <span style="color: blue;">public</span> <span style="color: blue;">class</span> SaslLoginMethod : SaslMethod
            {
            	<span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">string</span> GetSaslID()
            	{
            		<span style="color: blue;">return</span> "LOGIN";
            	}
            
            	<span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">void</span> CreateNextClientAnswer() 
            	{
            		<span style="color: blue;">switch</span> (Stage)
            		{
            			<span style="color: blue;">case</span> 0:
            				ClientAnswer = ClientAnswerEncoding.GetBytes(AccountName);
            				Stage++;
            				<span style="color: blue;">break</span>;
            			<span style="color: blue;">case</span> 1:
            				ClientAnswer = ClientAnswerEncoding.GetBytes(Password);
            				Stage++;
            				<span style="color: blue;">break</span>;
            		}
            	}
            	
            	<span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">bool</span> IsSecure() { <span style="color: blue;">return</span> <span style="color: blue;">false</span>; }
            }
            
            <span style="color: green;">// User-defined SASL LOGIN method usage (put this code into an existing class of your application)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret", AuthenticationMethods.SaslUserDefined, AuthenticationOptions.None, <span style="color: blue;">new</span> SaslLoginMethod());
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' User-defined SASL LOGIN method implementation</span>
            <span style="color: blue;">Public</span> <span style="color: blue;">Class</span> SaslLoginMethod
            	<span style="color: blue;">Inherits</span> SaslMethod
            	<span style="color: blue;">Public</span> <span style="color: blue;">Overloads</span> <span style="color: blue;">Overrides</span> <span style="color: blue;">Function</span> GetSaslID() <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		<span style="color: blue;">Return</span> "LOGIN"
            	<span style="color: blue;">End</span> <span style="color: blue;">Function</span>
            
            	<span style="color: blue;">Public</span> <span style="color: blue;">Overloads</span> <span style="color: blue;">Overrides</span> <span style="color: blue;">Sub</span> CreateNextClientAnswer()
            		<span style="color: blue;">Select</span> <span style="color: blue;">Case</span> Stage
            			<span style="color: blue;">Case</span> 0
            				ClientAnswer = ClientAnswerEncoding.GetBytes(AccountName)
            				Stage += 1
            			<span style="color: blue;">Case</span> 1
            				ClientAnswer = ClientAnswerEncoding.GetBytes(Password)
            				Stage += 1
            		<span style="color: blue;">End</span> <span style="color: blue;">Select</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Public</span> <span style="color: blue;">Overloads</span> <span style="color: blue;">Overrides</span> <span style="color: blue;">Function</span> IsSecure() <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span>
            		<span style="color: blue;">Return</span> <span style="color: blue;">False</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Function</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            
            <span style="color: green;">' User-defined SASL LOGIN method usage (put this code into an existing class of your application)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret", AuthenticationMethods.SaslUserDefined, AuthenticationOptions.None, <span style="color: blue;">New</span> SaslLoginMethod)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SaslMethod.GetSaslID">
            <summary>
            When overridden in a derived class, returns uppercase name of
            a SASL method implemented by that class (such as "LOGIN", "NTLM", etc).
            </summary>
            <returns>Uppercase name of a SASL method.</returns>
        </member>
        <member name="M:MailBee.SaslMethod.CreateNextClientAnswer">
            <summary>
            When overridden in a derived class, generates client's next answer in the
            authentication protocol exchange series. 
            </summary>
            <remarks>
            <para>This method must implement SASL authentication mechanism as generating
            answer to the server challenge. The server challenge must be read from
            <see cref="P:MailBee.SaslMethod.ServerChallenge"/> property. The resulting answer must be put in
            <see cref="P:MailBee.SaslMethod.ClientAnswer"/> property value.</para>
            <para>If SASL mechanism being implemented requires more than one client answer
            in the series, <see cref="P:MailBee.SaslMethod.Stage"/> property can be read and modified by this
            method in order to keep track of the authentication protocol exchange progress.</para>
            </remarks>
            <example>This sample shows <b>CreateNextClientAnswer</b> implementation for SASL PLAIN
            authentication method.
            <code lang="C#">
            <span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">void</span> CreateNextClientAnswer()
            {
            	<span style="color: blue;">switch</span> (Stage)
            	{
            		<span style="color: blue;">case</span> 0:
            			ClientAnswer = ClientAnswerEncoding.GetBytes("\0" + AccountName + "\0" + Password);
            			Stage++;
            			<span style="color: blue;">break</span>;
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Public</span> <span style="color: blue;">Overloads</span> <span style="color: blue;">Overrides</span> <span style="color: blue;">Sub</span> CreateNextClientAnswer()
            	<span style="color: blue;">Select</span> <span style="color: blue;">Case</span> Stage
            		<span style="color: blue;">Case</span> 0
            			ClientAnswer = ClientAnswerEncoding.GetBytes(<span style="color: blue;">String</span>.Format("\0{0}\0{1}", AccountName, Password))
            			Stage += 1
            	<span style="color: blue;">End</span> <span style="color: blue;">Select</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SaslMethod.IsSecure">
            <summary>
            When overridden in a derived class, designates whether the implemented SASL mechanism
            is secure or not.
            </summary>
            <remarks>Secure methods do not transmit passwords over the network as clear-text or Base64.</remarks>
            <returns><b>true</b> if the implemented SASL mechanism is secure; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:MailBee.SaslMethod.RequiresCredentials">
            <summary>
            Designates whether or not the implemented SASL mechanism can operate without user credentials
            passed in <see cref="P:MailBee.SaslMethod.AccountName"/> and <see cref="P:MailBee.SaslMethod.Password"/> property values.
            </summary>
            <returns>By default, returns <b>true</b>.</returns>
            <remarks>The developer should override this method if the implemented SASL mechanism
            can obtain credentials in some other way when they are not supplied by the caller. For instance,
            MailBee NTLM implementation can get the credentials from the operating system.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.ExpectBase64Challenge">
            <summary>
            Gets or sets the status of whether Base64-encoded data is expected in the pending
            response from the server.
            </summary>
            <value>The boolean status of whether Base64-encoded data is expected in the pending
            response from the server. The default value is <b>true</b>.</value>
            <remarks>The developer should set this property to <b>false</b> (usually in the derived
            class constructor) if the server returns non-base64 data in the first challenge, and
            then set it back to <b>true</b> in overridden <see cref="M:MailBee.SaslMethod.CreateNextClientAnswer"/>
            method. This is required when implementing a method such as NTLM.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.ServerChallenge">
            <summary>
            Gets or sets an array of bytes which represents a server challenge.
            </summary>
            <value>The challenge data sent by the server to the client.</value>
            <remarks>MailBee will assign a server challenge value to this property during
            the authentication protocol exchange. Although the server sends challenge data
            as Base64 string, MailBee decodes this data from Base64 first, and then assigns
            the decoded data value to this property.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.ClientAnswer">
            <summary>
            Gets or sets an array of bytes which represents a client answer to a server challenge.
            </summary>
            <value>The client answer data to be sent by the client to the server.</value>
            <remarks>MailBee will use the value of this property as a client answer to the server
            challenge. MailBee gets this property value, converts the data into Base64, and then
            sends it to the server.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.AccountName">
            <summary>
            Gets or sets a user account name on the mail server.
            </summary>
            <value>The name of the user account on the mail server.</value>
            <remarks>To the moment when the authentication protocol exchange starts,
            this property is already set, so you can use it in <see cref="M:MailBee.SaslMethod.CreateNextClientAnswer"/>
            implementation.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.Password">
            <summary>
            Gets or sets a user account password on the mail server.
            </summary>
            <value>The password of the user account on the mail server.</value>
            <remarks>To the moment when the authentication protocol exchange starts,
            this property is already set, so you can use it in <see cref="M:MailBee.SaslMethod.CreateNextClientAnswer"/>
            implementation.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.AccountDomain">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="P:MailBee.SaslMethod.ServerChallengeEncoding">
            <summary>
            Gets or sets an encoding of the server challenge data.
            </summary>
            <value>By default, the value of <b>ResponseEncoding</b> property of the mailer component
            (such as <see cref="P:MailBee.Pop3Mail.Pop3.ResponseEncoding">Pop3.ResponseEncoding</see>,
            <see cref="P:MailBee.ImapMail.Imap.ResponseEncoding">Imap.ResponseEncoding</see> or
            <see cref="P:MailBee.SmtpMail.Smtp.ResponseEncoding">Smtp.ResponseEncoding</see>).</value>
            <remarks>
            You can use this encoding to convert portions of the server challenge
            from bytes to strings if required by your algorithm.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.ClientAnswerEncoding">
            <summary>
            Gets or sets an encoding of the client answer data.
            </summary>
            <value>By default, the value of <b>RequestEncoding</b> property of the mailer component
            (such as <see cref="P:MailBee.Pop3Mail.Pop3.RequestEncoding">Pop3.RequestEncoding</see>,
            such as <see cref="P:MailBee.ImapMail.Imap.RequestEncoding">Imap.RequestEncoding</see> or
            <see cref="P:MailBee.SmtpMail.Smtp.RequestEncoding">Smtp.RequestEncoding</see>).</value>
            <remarks>
            You can use this encoding to convert string data (such as account names, passwords, etc)
            into bytes if required by your algorithm.</remarks>
        </member>
        <member name="P:MailBee.SaslMethod.Stage">
            <summary>
            Gets or sets the current stage of the authentication protocol exchange.
            </summary>
            <value>The default value is 0.</value>
            <remarks>
            <para>Some SASL authentication mechanisms require several "server challenge - client request"
            iterations. In order to keep track of the current stage, you can use this property.</para>
            <para>Also, you should update this property value when required by your algorithm. Most algorithms
            assume incrementing the current stage value each time new answer from the client is ready
            (i.e. on each <see cref="M:MailBee.SaslMethod.CreateNextClientAnswer"/> method call).</para>
            </remarks>
        </member>
        <member name="P:MailBee.SaslMethod.ServerName">
            <summary>
            Gets the domain name of the mail server.
            </summary>
            <value>The domain name or IP address string of the mail server to which the connection has been made.</value>
        </member>
        <member name="P:MailBee.SaslMethod.ServiceName">
            <summary>
            Gets the upper-case name of the protocol being used.
            </summary>
            <value>The upper-case name of the protocol being used (such as <i>POP3</i>, <i>SMTP</i>, or <i>IMAP</i>).</value>
        </member>
        <member name="T:MailBee.Tnef.MailBeeTnefException">
            <summary>
            An abstract parent for all exceptions which can be thrown during parsing an MS-TNEF file.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeLocalException">
            <summary>
            The exception that is thrown when an error occurs due to user actions or problems
            with accessing local (not network) resources.
            </summary>
            <remarks>Examples of local errors are: file not found, database error, aborted by user, license error, etc.</remarks>
        </member>
        <member name="T:MailBee.MailBeeException">
            <summary>
            An abstract parent for all exceptions which can be thrown by MailBee library.
            </summary>
        </member>
        <member name="P:MailBee.MailBeeException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <remarks>The error code returned by this property is the one of field values defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="T:MailBee.Tnef.MailBeeTnefNotFoundException">
            <summary>
            The exception that is thrown on an attempt to parse a file which is not MS-TNEF.
            </summary>
        </member>
        <member name="T:MailBee.Tnef.MailBeeTnefParsingException">
            <summary>
            The exception that is thrown when the MS-TNEF parsing error occurs.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.DsnNotifyCondition">
            <summary>
            Specifies events that trigger ESMTP server to send delivery status notification
            back to the sender of the message.
            </summary>
            <remarks>
            <para>If the SMTP server the message it submitted to supports ESMTP DSN (Delivery Status
            Notification) extension, it's possible to tell the server to send notifications
            on message delivery (successful, failed, or both) to the message sender.</para>
            <para>If the SMTP server does not support ESMTP DSN, this value is ignored.</para>
            </remarks>
        </member>
        <member name="F:MailBee.SmtpMail.DsnNotifyCondition.Default">
            <summary>
            Send notificaton at the server discretion. Usually, this is equivalent to either
            <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Failure"/> or bitwise combination of <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Failure"/> and
            <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Delay"/>.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnNotifyCondition.Failure">
            <summary>
            Notify if message delivery fails.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnNotifyCondition.Delay">
            <summary>
            Notify if message delivery is delayed.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnNotifyCondition.Success">
            <summary>
            Notify if the message delivery succeeds.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnNotifyCondition.Always">
            <summary>
            Notify always. This value is a bitwise combination of <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Failure"/>,
            <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Delay"/>, and <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Success"/>.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnNotifyCondition.Never">
            <summary>
            Do not send notification under any circumstances.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.DsnReturnPortion">
            <summary>
            Specifies how much of the original message is returned with the delivery status notification
            when the message delivery fails.
            </summary>
            <remarks>If the message delivery succeeds and delivery status notification on succesful
            delivery is enabled (i.e. <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Success"/> bit is set in
            <see cref="T:MailBee.SmtpMail.DsnNotifyCondition"/>), this value is not used, and only the message header
            is returned.</remarks>
        </member>
        <member name="F:MailBee.SmtpMail.DsnReturnPortion.Default">
            <summary>
            Let the server decide. By default, most servers return only the message header.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnReturnPortion.Header">
            <summary>
            Return only the message header.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.DsnReturnPortion.FullMessage">
            <summary>
            Return the entire message.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.DeliveryNotificationOptions">
            <summary>
            Provides properties and methods which control how and when ESMTP
            Delivery Status Notifications (DSN) are sent.
            </summary>
            <remarks>
            <para>To access <see cref="T:MailBee.SmtpMail.DeliveryNotificationOptions"/> object,
            use <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification">Smtp.DeliveryNotification</see> property.</para>
            <note>If the SMTP server does not support DSN, the values of all the properties
            of this class are ignored.</note>
            </remarks>
            <example>This sample checks whether the server supports DSN's, submits a message
            to the server, and tells the server to send DSN on any outcome (sent successfully,
            failed, or delayed). The DSN message will include the header of the original message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Set Delivery Status Notification settings:</span>
            
            <span style="color: green;">// Notify always.</span>
            mailer.DeliveryNotification.NotifyCondition = DsnNotifyCondition.Always;
            
            <span style="color: green;">// Notification message will include the message header of the original messsage.</span>
            mailer.DeliveryNotification.ReturnPortion = DsnReturnPortion.Header;
            
            <span style="color: green;">// Specify some unique string which will be added to notification messages.</span>
            <span style="color: green;">// It can then be used to match notification message with the original message.</span>
            mailer.DeliveryNotification.TrackingID = "UNQIUE_STRING_q8sdf74d";
            
            <span style="color: green;">// Set the message fields.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain1.com&gt;";
            mailer.To.AsString = "Bill Smith &lt;b.smith@domain2.com&gt;";
            mailer.Subject = "Test message";
            
            <span style="color: green;">// Specify SMTP server to use. If your server does not require authentication,</span>
            <span style="color: green;">// just remove last 2 parameters.</span>
            mailer.SmtpServers.Add("smtp.domain1.com", "jdoe", "secret");
            
            <span style="color: green;">// Connect to the server and say hello. We need this in order to learn the server</span>
            <span style="color: green;">// capabilities (such as DSN support).</span>
            <span style="color: green;">// Alternatively, we could not call Hello() and move DSN status check after Send(),</span>
            <span style="color: green;">// since Send() method would automatically call Hello() if needed.</span>
            mailer.Connect();
            mailer.Hello();
            
            <span style="color: green;">// Learn if delivery status notifications are supported by the server.</span>
            <span style="color: blue;">if</span> (mailer.GetExtension("DSN") != <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The message will be submitted with DSN support");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("The message will be submitted without DSN support");
            }
            
            <span style="color: green;">// Send the message.</span>
            mailer.Send();
            
            Console.WriteLine("The message was successfully submitted to the server.");
            
            <span style="color: green;">// Close the connection.</span>
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Set Delivery Status Notification settings:</span>
            
            <span style="color: green;">' Notify always.</span>
            mailer.DeliveryNotification.NotifyCondition = DsnNotifyCondition.Always
            
            <span style="color: green;">' Notification message will include the message header of the original messsage.</span>
            mailer.DeliveryNotification.ReturnPortion = DsnReturnPortion.Header
            
            <span style="color: green;">' Specify some unique string which will be added to notification messages.</span>
            <span style="color: green;">' It can then be used to match notification message with the original message.</span>
            mailer.DeliveryNotification.TrackingID = "UNQIUE_STRING_q8sdf74d"
            
            <span style="color: green;">' Set the message fields.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain1.com&gt;;"
            mailer.To.AsString = "Bill Smith &lt;b.smith@domain2.com&gt;"
            mailer.Subject = "Test message"
            
            <span style="color: green;">' Specify SMTP server to use. If your server does not require authentication,</span>
            <span style="color: green;">' just remove last 2 parameters.</span>
            mailer.SmtpServers.Add("smtp.domain1.com", "jdoe", "secret")
            
            <span style="color: green;">' Connect to the server and say hello. We need this in order to learn the server</span>
            <span style="color: green;">' capabilities (such as DSN support).</span>
            <span style="color: green;">' Alternatively, we could not call Hello() and move DSN status check after Send(),</span>
            <span style="color: green;">' since Send() method would automatically call Hello() if needed.</span>
            mailer.Connect()
            mailer.Hello()
            
            <span style="color: green;">' Learn if delivery status notifications are supported by the server.</span>
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> mailer.GetExtension("DSN") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The message will be submitted with DSN support")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("The message will be submitted without DSN support")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            <span style="color: green;">' Send the message.</span>
            mailer.Send()
            
            Console.WriteLine("The message was successfully submitted to the server.")
            
            <span style="color: green;">' Close the connection.</span>
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.DeliveryNotificationOptions.Reset">
            <summary>
            Resets all Delivery Status Notification settings back to defaults.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">
            <summary>
            Gets or sets the unique string (called <i>message transmission envelope</i>)
            which will be returned with delivery status notification messages.
            </summary>
            <value>The string which will be returned with delivery status notification messages.
            The default value is <see cref="F:System.String.Empty"/>.</value>
            <remarks>The developer can set this property in order to be able to match
            notification messages with original messages. This is useful if many messages
            being sent and many delivery notifications being returned, and often used in
            bounced mail processing. For instance,
            this value will be available through <see cref="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID"/> property
            of the delivery status notification message which will be sent by the destination
            mail server upon delivery (or not delivery) of your e-mail message.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.DeliveryNotificationOptions.NotifyCondition">
            <summary>
            Gets or sets the events that trigger ESMTP server to send
            delivery status notification back to the sender of the message.
            </summary>
            <value>A set of flags specifying the events that trigger the server to send
            delivery status notification (the server must support DSN extension). The default
            value is <see cref="F:MailBee.SmtpMail.DsnNotifyCondition.Default"/>.</value>
        </member>
        <member name="P:MailBee.SmtpMail.DeliveryNotificationOptions.ReturnPortion">
            <summary>
            Gets or sets how much of the original message is returned with
            the delivery status notification when the message delivery fails.
            </summary>
            <value>A <see cref="T:MailBee.SmtpMail.DsnReturnPortion"/> value which specifies how much
            of the original message is returned with the delivery status notification
            when the message delivery fails (the server must support DSN extension). The default
            value is <see cref="F:MailBee.SmtpMail.DsnReturnPortion.Default"/>.</value>
        </member>
        <member name="T:MailBee.Pop3Mail.Pop3">
            <summary>
            Provides properties and methods for connecting to a POP3 server and
            downloading and deleting e-mail messages from a user account inbox.
            </summary>
            <remarks>You can perform the following operations using this class:
            <list type="bullet">
            <item><description>Download entire messages with body and attachments</description></item>
            <item><description>Download message headers (and optionally, the part of message bodies)</description></item>
            <item><description>Delete messages from the POP3 server</description></item>
            <item><description>Send user-defined commands to the POP3 server</description></item>
            <item><description>Login to a user account using a number of authentication methods (including secure methods)</description></item>
            <item><description>Take advantage of POP3 pipelining which dramatically speeds up batch retrieval or deleting messages</description></item>
            <item><description>Collect inbox statistics like number of messages and total size of all messages</description></item>
            <item><description>Download entire messages or message headers with a single line of code (using static methods)</description></item>
            <item><description>Establish secure connection with TLS/SSL enabled POP3 server</description></item>
            <item><description>Establish connection via a proxy server (SOCKS4, SOCKS5, and HTTP proxy are supported)</description></item>
            </list>
            </remarks>
            <example>This sample connects to a POP3 server, logs in using the most secure method
            supported by this server, downloads headers for the first 10 messages in the inbox, and prints From:, To:, and
            Subject: field values for every message into Console.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            MailMessageCollection msgs = pop.DownloadMessageHeaders(1, 10);
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	Console.WriteLine("From: " + msg.From.Email + ", To: " + msg.To.AsString + ", Subject: " + msg.Subject);
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = pop.DownloadMessageHeaders(1, 10)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	Console.WriteLine("From: " &amp; msg.From.Email &amp; ", To: " &amp; msg.To.AsString &amp; ", Subject: " &amp; msg.Subject)
            <span style="color: blue;">Next</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="T:MailBee.InternalUse.Pop3EventSink">
            <summary>
            This class is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:MailBee.InternalUse.SessionProtocolEventSink">
            <summary>
            This class is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:MailBee.InternalUse.SocketEventSink">
            <summary>
            This class is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:MailBee.InternalUse.LengthyTaskEventSink">
            <summary>
            This class is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.LengthyTaskEventSink.OnErrorOccurred(MailBee.ErrorEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.LengthyTaskEventSink.OnLogNewEntry(MailBee.LogNewEntryEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SocketEventSink.OnDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SocketEventSink.OnDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SocketEventSink.OnLowLevelDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SocketEventSink.OnLowLevelDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SessionProtocolEventSink.OnHostResolved(MailBee.HostResolvedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SessionProtocolEventSink.OnSocketConnected(MailBee.SocketConnectedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SessionProtocolEventSink.OnConnected(MailBee.ConnectedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SessionProtocolEventSink.OnDisconnected(MailBee.DisconnectedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SessionProtocolEventSink.OnTlsStarted(MailBee.TlsStartedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SessionProtocolEventSink.OnLoggedIn(MailBee.LoggedInEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.Pop3EventSink.OnMessageDownloaded(MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.Pop3EventSink.OnMessageDataChunkReceived(MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Dispose">
            <summary>
            Closes opened network connections (if any) and releases any used system resources.
            </summary>
            <remarks>Usually, the developer does not need to call this method. It's recommended
            to call <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method to close the connections and free the resources.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, must release unmananged and optionally managed
            resources used by the component.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.</param>
            <remarks>If the derived class does not use any additional resources, this method
            does not need to be overridden. If, however, it's overridden, the developer must also
            call <see cref="M:MailBee.Pop3Mail.Pop3.Dispose"/> method of the base class.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnErrorOccurred(MailBee.ErrorEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnLogNewEntry(MailBee.LogNewEntryEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Abort">
            <summary>
            Forces MailBee to cancel all pending operations and close all opened connections
            as soon as possible.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.IsAborted"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.ResetState"/>
            </summary>
            <remarks>A method which was in progress when <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> method has been called
            will throw <see cref="T:MailBee.MailBeeUserAbortException"/>
            (unless <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is not <b>false</b>).
            If the component was not doing any work at the moment (<see cref="P:MailBee.Pop3Mail.Pop3.IsBusy"/> was <b>false</b>),
            the connection is aborted but no exception is thrown.
            <note>No events will be raised after this method has been called.</note>
            To restore the component from the aborted state, the developer can use <see cref="M:MailBee.Pop3Mail.Pop3.ResetState"/>
            method.
            </remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Wait">
            <summary>
            Waits until the currently running (if any) asynchronous method is finished.
            </summary>
            <exception cref="T:MailBee.MailBeeInvalidStateException"><see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/> is <b>true</b></exception>
            <remarks>This method should only be used in WinForms applications in the scenarios when the application message loop
            is blocked and events raised by asynchronous methods get no chance to be processed.
            <note type="caution"><see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/> property
            must be set to <b>false</b> prior to using this method. This is required in order
            to switch event marshalling mechanism from sending events to the application message loop
            to the internal thread-independent event processor.</note>
            <para>Usually, when the developer uses asynchronous methods which might raise events,
            it's not possible to use methods like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/>,
            since they would block the message loop and thus prevent events (which are raised
            on the message loop thread) from getting processed. <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method provides an alternative
            approach which addresses the problem.</para>
            <para>Another alternative (in WinForms application) to using <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method
            is to never block the application message loop. See <see cref="M:MailBee.Pop3Mail.Pop3.BeginExecuteCustomCommand(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            method for the code example.</para>
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.Pop3Mail.Pop3"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note>
            </remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Wait(System.Int32)">
            <summary>
            Waits the completion of the currently running (if any) asynchronous method
            for the specified amount of time.
            </summary>
            <param name="timeoutInterval">The amount of time (in milliseconds) the method will wait
            completion of the currently running asynchronous method before returning <b>false</b>.</param>
            <returns><b>true</b> if the asynchronous method has finished execution during the specified
            amount of time, <b>false</b> if it's still running.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException"><see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/> is <b>true</b></exception>
            <remarks>This method should only be used in WinForms applications in the scenarios when the application message loop
            is blocked and events raised by asynchronous methods get no chance to be processed.
            <note type="caution"><see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/> property
            must be set to <b>false</b> prior to using this method. This is required in order
            to switch event marshalling mechanism from sending events to the application message loop
            to the internal thread-independent event processor.</note>
            Usually, when the developer wants to use asynchronous methods which might raise events
            in a WinForm application,
            it's not possible to use methods like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/>,
            since they would block the message loop and thus prevent events (which are raised
            on the message loop thread) from getting processed. <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method provides an alternative
            approach which addresses the problem.
            <note>The developer can also use this method with <paramref name="timeoutInterval"/> set to 0 in
            order to process currently pending MailBee events. This is useful if some lengthy work
            is performed on the message loop thread, and the developer wants to periodically
            let MailBee events get processed and then continue the lengthy work without waiting
            for the completion of the asynchronous method. See <see cref="M:MailBee.Pop3Mail.Pop3.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)"/> method
            for examples.</note>
            Another alternative (in WinForms application) to using <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method
            is to never block the application message loop. See <see cref="M:MailBee.Pop3Mail.Pop3.BeginExecuteCustomCommand(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            method for the code example.
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.Pop3Mail.Pop3"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note> 
            </remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetErrorDescription">
            <summary>
            Returns a textual description of the last error.
            </summary>
            <returns>A string value containing a textual description of the last error.</returns>
            <remarks>Error descriptions can be localized or edited by deriving from <see cref="T:MailBee.Resources"/>
            class.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.DataSent"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.DataSent"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetSocket">
            <summary>
            Returns the underlying <see cref="T:System.Net.Sockets.Socket"/> MailBee uses for the
            current network connection.
            </summary>
            <returns>A reference to the underlying <see cref="T:System.Net.Sockets.Socket"/> MailBee uses for the
            current network connection, or a null reference if there is no active connection.</returns>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetSocketError">
            <summary>
            Returns a Win32 error code of the last socket-related error.
            </summary>
            <returns>An integer value containing the last socket-related error code, or 0 if there is no error.</returns>
            <remarks>This error code is obtained from <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnLowLevelDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnLowLevelDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnHostResolved(MailBee.HostResolvedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.HostResolved"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.HostResolved"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnSocketConnected(MailBee.SocketConnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.SocketConnected"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.SocketConnected"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.Connected"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>
            <para>When <see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/> is <b>true</b> (i.e. default value),
            MailBee uses this method to raise <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/> event. In WinForms application,
            the event will be raised on the message loop thread. In other applications (such as
            web or console applications), threading is not a concern, and the current thread
            MailBee is running on will be used.</para>
            <para>You can override this method in a derived class to force MailBee execute your own code
            instead of raising <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/> event. This may help to avoid threading issues
            in WinForms applications (because events may not be raised if the message loop thread
            is blocked for some reason, while calling overridden methods does not depend on the message
            loop thread state).</para>
            <para>Another solution of this problem is setting <see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/> to <b>false</b>
            and using <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method to block the message loop thread if needed. This way, you do not need
            to derive any descendant class from <see cref="T:MailBee.Pop3Mail.Pop3"/> class.</para>
            </remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnDisconnected(MailBee.DisconnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.Disconnected"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.Disconnected"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnTlsStarted(MailBee.TlsStartedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.TlsStarted"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.TlsStarted"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnLoggedIn(MailBee.LoggedInEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.LoggedIn"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.LoggedIn"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Disconnect">
            <summary>
            Disconnects from the POP3 server and releases any used resources.
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>On successful completion of this method, all the messages marked as deleted
            during the POP3 session are physically deleted by the server. If this method fails,
            the connection is still closed and all network resources are freed, but it's undefined
            whether the messages marked for deletion were really deleted or not.</remarks>
            <example>This sample deletes the first message in the inbox.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            pop.DeleteMessage(1);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            pop.DeleteMessage(1)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a disconnection from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous disconnection.</returns>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/>.</remarks>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndDisconnect">
            <summary>
            Ends a pending asynchronous disconnection request.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDisconnect(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Noop">
            <summary>
            Sends a NOOP command to the server.
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method is useful for keeping the connection alive when there is no real activity.
            However, some POP3 servers may ignore this command and still close the connection.
            If this is the case, you may use <see cref="M:MailBee.Pop3Mail.Pop3.Noop2"/> method instead.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.ResetState">
            <summary>
            Resets the internal state of the component.
            </summary>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method will close the connection if it's open, and will remove <see cref="P:MailBee.Pop3Mail.Pop3.IsAborted"/>
            status if <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> method was previously called. Typically, the developer may use this
            method to reuse the component after it went into aborted state due to <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> method call.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetExtensions">
            <summary>
            Returns a reference to the key-value list of the server capabilities.
            </summary>
            <returns>The key-value list of the server capabilities, or a null reference
            (<b>Nothing</b> in Visual Basic) if the capabilities list is not available.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            You should already be connected to the POP3 server in order to use this method.
            If the server does not support CAPA command, the capabilities list will not be
            available. In this case, you can still try to call <see cref="M:MailBee.Pop3Mail.Pop3.GetSupportedAuthMethods"/> to get at least
            the list of supported authentication methods (AUTH command responsible
            for this is more widely supported than CAPA).
            <note>If CAPA command has already been issued (for instance, this
            method has already been called or MailBee downloaded this list for its own purpose
            (such as to determine whether pipelining is supported by the server), this method
            will immediately return the cached results.</note>
            <para>In the returned <see cref="T:System.Collections.Specialized.StringDictionary"/>,
            each key is a capability name (always lowercase). Its value is either empty string
            (if the capability has no parameters) or space-delimited list of the parameters.</para>
            </remarks>
            <example>This sample displays the list of all capabilities supported by the server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            System.Collections.Specialized.StringDictionary caps = pop.GetExtensions();
            <span style="color: blue;">if</span> (caps == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The given POP3 server does not support CAPA command");
            }
            <span style="color: blue;">else</span>
            {
            	<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> cap <span style="color: blue;">in</span> caps.Keys)
            	{
            		<span style="color: blue;">string</span> val = caps[cap];
            		<span style="color: blue;">if</span> (val != <span style="color: blue;">string</span>.Empty)
            		{
            			<span style="color: green;">// Print capability name and parameters</span>
            			Console.WriteLine(cap + " " + val);
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// For parameterless capabilities, print capability name only</span>
            			Console.WriteLine(cap);
            		}
            	}
            }
            pop.Disconnect();
            
            <span style="color: green;">// The output (the actual content will be different for a particular mail server).</span>
            user
            top
            stls
            last
            sasl LOGIN PLAIN CRAM-MD5 DIGEST-MD5 MSN NTLM
            uidl
            pipelining
            
            In the output above, only "sasl" capability has parameters.
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            <span style="color: blue;">Dim</span> caps <span style="color: blue;">As</span> System.Collections.Specialized.StringDictionary = pop.GetExtensions()
            <span style="color: blue;">If</span> caps <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The given POP3 server does not support CAPA command")
            <span style="color: blue;">Else</span>
            	<span style="color: blue;">Dim</span> cap <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            	<span style="color: blue;">Dim</span> val <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> cap <span style="color: blue;">In</span> caps.Keys
            		val = caps(cap)
            		<span style="color: blue;">If</span> val &lt;&gt; <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            			<span style="color: green;">' Print capability name and parameters.</span>
            			Console.WriteLine(cap &amp; " " &amp; val)
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' For parameterless capabilities, print capability name only.</span>
            			Console.WriteLine(cap)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            pop.Disconnect()
            
            <span style="color: green;">' The output (the actual content will be different for a particular mail server).</span>
            user
            top
            stls
            last
            sasl LOGIN PLAIN CRAM-MD5 DIGEST-MD5 MSN NTLM
            uidl
            pipelining
            
            In the output above, only "sasl" capability has parameters.
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetExtension(System.String)">
            <summary>
            Returns the name or parameters of the specified POP3 capability.
            </summary>
            <param name="name">The name of the capability.</param>
            <returns>If the specified capability is parameterless, the return value is the name
            of the capability itself. If the capability has parameters, the return value
            is a string which contains the parameters list as returned by the server.
            If the server does not support CAPA command (see <see cref="M:MailBee.Pop3Mail.Pop3.GetExtensions"/> for
            more information) or the given capability is not supported, the return value is a
            null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The POP3 server (if supports CAPA command) always returns the list of all
            capabilities at once. Thus, all subsequent calls to <see cref="M:MailBee.Pop3Mail.Pop3.GetExtension(System.String)"/>,
            <see cref="M:MailBee.Pop3Mail.Pop3.GetExtensions"/>, or <see cref="M:MailBee.Pop3Mail.Pop3.GetExtensionValue(System.String)"/> methods will use
            the cached version of the capability data, and no round-trips to the server will be
            made.
            </remarks>
            <example>This sample displays whether the server supports POP3 pipelining.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            <span style="color: blue;">string</span> ext = pop.GetExtension("pipelining");
            <span style="color: blue;">if</span> (ext == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The given POP3 server does not support pipelining");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("Pipelining is supported");
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            <span style="color: blue;">Dim</span> ext <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            ext = pop.GetExtension("pipelining")
            <span style="color: blue;">If</span> ext <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The given POP3 server does not support pipelining")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("Pipelining is supported")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetExtensionValue(System.String)">
            <summary>
            Returns the parameters of the specified POP3 capability, or an empty string
            if the capability has no parameters.
            </summary>
            <param name="name">The name of the capability.</param>
            <returns>If the specified capability is parameterless, the return value is
            <see cref="F:System.String.Empty"/>. If the capability has parameters, the return value
            is a string which contains the parameters list as returned by the server.
            If the server does not support CAPA command (see <see cref="M:MailBee.Pop3Mail.Pop3.GetExtensions"/> for
            more information) or the given capability is not supported, the return value is a
            null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method can be used to retrieve additional information about the given
            capability. However, if you wish to get the list of SASL authentication methods
            supported by the server, you may also use <see cref="M:MailBee.Pop3Mail.Pop3.GetSupportedAuthMethods"/> method
            for this. <see cref="M:MailBee.Pop3Mail.Pop3.GetSupportedAuthMethods"/> method can succeed even if the server does
            not support CAPA command but supports AUTH command (which is often the case).</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetServerResponse">
            <summary>
            Returns the last response from the server.
            </summary>
            <returns>A string value which contains the last response from the server, or a null
            reference (<b>Nothing</b> in Visual Basic) if not connected to the server.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetSupportedAuthMethods">
            <summary>
            Returns a set of flags indicating which authentication methods are supported by the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.GetExtensions"/>
            </summary>
            <returns>A set of flags indicating which authentication methods are supported by the server.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method performs round-trip to the server only if the list of authentication
            methods has not already been downloaded. Since this list is a part of the server capabilities,
            it will already be available in the local cache if the server capabilities have already been
            downloaded during this connection (for instance, due to <see cref="M:MailBee.Pop3Mail.Pop3.GetExtensions"/> method call).
            If the list of supported authentication methods is already available in the local cache,
            this method will immediately return the cached results.
            <note>If the POP3 server does not support CAPA command and the client already logged in the mailbox, it's not possible
            to get the list of supported authentication methods (unless it has already been downloaded prior to logging in). This is because
            AUTH command (which returns the list of authentication methods available) cannot be issued once the client has logged in.</note>
            </remarks>
            <example>This sample indicates whether APOP authentication is supported by the server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            AuthenticationMethods authMethods = pop.GetSupportedAuthMethods();
            
            <span style="color: blue;">if</span> ((authMethods &amp; AuthenticationMethods.Apop) &gt; 0)
            {
            	Console.WriteLine("APOP secure authentication is supported");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("The POP3 server does not support APOP");
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            <span style="color: blue;">Dim</span> authMethods <span style="color: blue;">As</span> AuthenticationMethods = pop.GetSupportedAuthMethods()
            
            <span style="color: blue;">If</span> ((authMethods <span style="color: blue;">And</span> AuthenticationMethods.Apop) &gt; 0) <span style="color: blue;">Then</span>
            	Console.WriteLine("APOP secure authentication is supported")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("The POP3 server does not support APOP")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to a POP3 server.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="port">The port on which to communicate with the server. The standard POP3 port is 110. For TLS/SSL connections, dedicated port is 995
            (however, TLS/SSL connections via regular port are possible too, see <see cref="P:MailBee.Pop3Mail.Pop3.SslMode"/> and <see cref="M:MailBee.Pop3Mail.Pop3.StartTls"/> topics).</param>
            <param name="pipelining">Specifies whether to use commands pipelining if it's supported by the server.</param>
            <returns><b>true</b> if a connection attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>If <paramref name="pipelining"/> is <b>true</b> and the server supports pipelining,
            MailBee will join POP3 commands in batches whenever possible, providing major performance
            boost in scenarios when multiple messages are downloaded or deleted at once. The methods
            which take advantage of pipelining are: <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>,
            <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)"/>, <see cref="M:MailBee.Pop3Mail.Pop3.DeleteMessages(System.Int32,System.Int32)"/>, and their
            asynchronous versions (<see cref="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessages(System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>, <see cref="M:MailBee.Pop3Mail.Pop3.BeginDeleteMessages(System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>).
            The performance may increase 10+ times if many messages (20 and more) are processed.</remarks>
            <example>This sample connects to the POP3 server, downloads headers for the first 5 messages, and
            displays them. If the server supports pipelining, all 5 message headers will be downloaded
            in a single round-trip to the server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com", 110, <span style="color: blue;">true</span>);
            pop.Login("jdoe", "secret");
            MailMessageCollection msgHeaders = pop.DownloadMessageHeaders(1, 5);
            <span style="color: blue;">foreach</span> (MailMessage msgHeader <span style="color: blue;">in</span> msgHeaders)
            {
            	Console.WriteLine("Message #" + msgHeader.IndexOnServer + ":\r\n" + msgHeader.RawHeader);
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As Pop3</span>
            pop.Connect("mail.domain.com", 110, <span style="color: blue;">True</span>)
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msgHeaders <span style="color: blue;">As</span> MailMessageCollection
            msgHeaders = pop.DownloadMessageHeaders(1, 5)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msgHeader <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgHeaders
            	Console.WriteLine("Message #" &amp; msgHeader.IndexOnServer &amp; ":\r\n" &amp; msgHeader.RawHeader)
            <span style="color: blue;">Next</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32)">
            <summary>
            Connects to a POP3 server.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="port">The port on which to communicate with the server. The standard POP3 port is 110. For TLS/SSL connections, dedicated port is 995
            (however, TLS/SSL connections via regular port are possible too, see <see cref="P:MailBee.Pop3Mail.Pop3.SslMode"/> and <see cref="M:MailBee.Pop3Mail.Pop3.StartTls"/> topics).</param>
            <returns><b>true</b> if a connection attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>If <see cref="P:MailBee.Global.Pipelining"/> is <b>true</b> and the server supports pipelining,
            MailBee will use it and join POP3 commands in batches whenever possible (see
            <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> overload for more information).</remarks>
            <example>This sample connects to the POP3 server, downloads the last message entirely,
            and displays filenames of all attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com", 110);
            pop.Login("jdoe", "secret");
            MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	Console.WriteLine(attach.Filename);
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com", 110)
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            msg = pop.DownloadEntireMessage(pop.InboxMessageCount)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	Console.WriteLine(attach.Filename)
            <span style="color: blue;">Next</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Connect(System.String)">
            <summary>
            Connects to a POP3 server on the standard POP3 port (110).
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <returns><b>true</b> if a connection attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>If <see cref="P:MailBee.Global.Pipelining"/> is <b>true</b> and the server supports pipelining,
            MailBee will use it and join POP3 commands in batches whenever possible (see
            <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> overload for more information).</remarks>
            <example>This sample connects to the POP3 server, downloads the last message entirely,
            and displays its body text. If the message is HTML formatted, plain-text version is displayed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            Console.WriteLine(msg.BodyPlainText);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            msg = pop.DownloadEntireMessage(pop.InboxMessageCount)
            Console.WriteLine(msg.BodyPlainText)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
             <summary>
             Begins an asynchronous request for a connecting to a POP3 server.
             <seealso cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/>
             <seealso cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/>
             <seealso cref="M:MailBee.Pop3Mail.Pop3.Wait"/>
             </summary>
             <param name="serverName">The name or IP address of the POP3 server.</param>
             <param name="port">The port on which to communicate with the server. The standard POP3 port is 110.</param>
             <param name="pipelining">Specifies whether to use commands pipelining if it's supported by the server.</param>
             <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
             (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
             <param name="state">An object that contains state information for this request.
             You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
             <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
             <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
             <remarks>
             <para>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/>.</para>
             <para>A reference to the <paramref name="state"/> object will be available in the events raised
             by this method through the <see cref="P:MailBee.CommonEventArgs.State"/> property value. This is also valid
             for the rest of asynchronous methods in MailBee.</para>
             </remarks>
             <example>Asynchronous connecting to a POP3 server in WinForms application. This sample
             also handles <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/> event. <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method is used to wait
             for the asynchronous method completion, since .NET's standard
             <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/> cannot process events.
             <code lang="C#">
             <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
             <span style="color: blue;">using</span> MailBee;
             <span style="color: blue;">using</span> MailBee.Pop3Mail;
             
             <span style="color: green;">// Put the code below inside your class</span>
             
             <span style="color: green;">// "Connected" event handler</span>
             <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
             {
             	MessageBox.Show("Connected to the server");
             }
             
             <span style="color: green;">// The actual code</span>
             <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
             {
             	Pop3 pop = <span style="color: blue;">new</span> Pop3();
             
             	<span style="color: green;">// Let MailBee process events</span>
             	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
             
             	pop.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
             
             	<span style="color: green;">// Initiate an asynchronous connection</span>
             	pop.BeginConnect("pop.somehost.com", 110, <span style="color: blue;">true</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
             
             	<span style="color: green;">// Simulate some lengthy work here...</span>
             	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
             	{
             		<span style="color: green;">// Make a portion of the work</span>
             		System.Threading.Thread.Sleep(10);
             
             		<span style="color: green;">// Process events which were raised during execution of the work above</span>
             		pop.Wait(0);
             	}
             
             	<span style="color: green;">// If the connection was not established during execution of the lengthy </span>
             	<span style="color: green;">// work, wait until it's established</span>
             	pop.Wait();
             
             	<span style="color: green;">// End the connection request</span>
             	pop.EndConnect();
             
             	<span style="color: green;">// Connected to the server!</span>
             
             	<span style="color: green;">// Disconnect from the server</span>
             	pop.Disconnect();
             }
             </code>
             <code lang="Visual Basic">
             <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
             <span style="color: blue;">Imports</span> MailBee
             <span style="color: blue;">Imports</span> MailBee.Pop3Mail
             
             <span style="color: green;">' Put the code below inside your class.</span>
             
             <span style="color: green;">' "Connected" event handler</span>
             <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> System.Object, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
             	MsgBox("Connected to the server")
             <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
             
             <span style="color: green;">' The actual code</span>
             <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> System.Object, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
             	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
             	<span style="color: green;">' Let MailBee process events</span>
             	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
             
             	<span style="color: blue;">AddHandler</span> pop.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
             	<span style="color: green;">' Initiate an asynchronous connection</span>
             	pop.BeginConnect("pop.somehost.com", 110, <span style="color: blue;">True</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
             
             	<span style="color: green;">' Simulate some lengthy work here...</span>
             	<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
             	<span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 100
             		<span style="color: green;">' Make a portion of the work</span>
             		System.Threading.Thread.Sleep(10)
             		
             		<span style="color: green;">' Process events which were raised during execution of the work above</span>
             		pop.Wait(0)
             	<span style="color: blue;">Next</span>
             	
             	<span style="color: green;">' If the connection was not established during execution of the lengthy </span>
             	<span style="color: green;">' work, wait until it's established</span>
             	pop.Wait()
             	
             	<span style="color: green;">' End the connection request</span>
             	pop.EndConnect()
             	
             	<span style="color: green;">' Connected to the server!</span>
             	
             	<span style="color: green;">' Disconnect from the server</span>
             	pop.Disconnect()
             <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
             </code>
             </example>
             <example>Asynchronous connecting to a POP3 server in non-WinForms application.
             Applications which do not have message loop (such as console or web applications)
             can raise events on any thread and do not require any special events processing.
             <code lang="C#">
             <span style="color: blue;">using</span> System;
             <span style="color: blue;">using</span> MailBee;
             <span style="color: blue;">using</span> MailBee.Pop3Mail;
             <span style="color: blue;">using</span> MailBee.Mime;
             
             <span style="color: blue;">class</span> Sample
             {
             	<span style="color: green;">// "Connected" event handler</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
             	{
             		Console.WriteLine("Connected to the server");
             	}
             
             	<span style="color: green;">// The actual code</span>
             	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
             	{
             		Pop3 pop = <span style="color: blue;">new</span> Pop3();
             
             		pop.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
             
             		<span style="color: green;">// Initiate an asynchronous connection</span>
             		pop.BeginConnect("pop.somehost.com", 110, <span style="color: blue;">true</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
             
             		<span style="color: green;">// Simulate some lengthy work here...</span>
             		System.Threading.Thread.Sleep(1000);
             
             		<span style="color: green;">// If the connection was not established during execution of the lengthy work,</span>
             		<span style="color: green;">// wait until it's established, and end the connection request</span>
             		pop.EndConnect();
             
             		<span style="color: green;">// Connected to the server!</span>
             
             		<span style="color: green;">// Disconnect from the server</span>
             		pop.Disconnect();
             	}
             }
             </code>
             <code lang="Visual Basic">
             <span style="color: blue;">Imports</span> System
             <span style="color: blue;">Imports</span> MailBee
             <span style="color: blue;">Imports</span> MailBee.Pop3Mail
             <span style="color: blue;">Imports</span> MailBee.Mime
             
             <span style="color: blue;">Public</span> <span style="color: blue;">Class</span> Sample
             	<span style="color: green;">' "Connected" event handler</span>
             	<span style="color: blue;">Public</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> System.Object, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
             		Console.WriteLine("Connected to the server")
             	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
             	
             	<span style="color: green;">' The actual code</span>
             	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
             		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
             		<span style="color: blue;">AddHandler</span> pop.Connected, <span style="color: blue;">AddressOf</span> OnConnected
             
             		<span style="color: green;">' Initiate an asynchronous connection</span>
             		pop.BeginConnect("pop.somehost.com", 110, <span style="color: blue;">True</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
             
             		<span style="color: green;">' Simulate some lengthy work here...</span>
             		System.Threading.Thread.Sleep(1000)
             
             		<span style="color: green;">' If the connection was not established during execution of the lengthy work,</span>
             		<span style="color: green;">' wait until it's established, and end the connection request</span>
             		pop.EndConnect()
             
             		<span style="color: green;">' Connected to the server!</span>
             
             		<span style="color: green;">' Disconnect from the server</span>
             		pop.Disconnect()
             	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
             <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
             </code>
             </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndConnect">
            <summary>
            Ends the pending asynchronous connection request.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.StartTls">
            <summary>
            Requests the mail server to start TLS/SSL negotiation and protect the connection with
            security layer.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.SslMode"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.SslProtocol"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginStartTls(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if TLS/SSL negotiation succeeded and the connection is now secured with TLS/SSL layer; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            As alternative to calling <see cref="M:MailBee.Pop3Mail.Pop3.StartTls"/> method, the developer can ask MailBee to start
            TLS/SSL negotiation automatically by setting <see cref="P:MailBee.Pop3Mail.Pop3.SslMode"/> property value to <see cref="F:MailBee.Security.SslStartupMode.OnConnect"/>
            or <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/>.
            <note>Not all mail servers support TLS/SSL functionality.</note>
            </remarks>
            <example>
            This sample attempts to establish TLS/SSL connection with the POP3 server and displays the number
            of messages in the inbox on success.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.StartTls();
            pop.Login("jdoe", "secret");
            Console.WriteLine(pop.InboxMessageCount);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3 
            pop.Connect("mail.domain.com")
            pop.StartTls()
            pop.Login("jdoe", "secret")
            Console.WriteLine(pop.InboxMessageCount)
            pop.Disconnect()
            </code>		
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginStartTls(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to start TLS/SSL negotiation with the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.StartTls"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous TLS/SSL negotiation.</returns>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.StartTls"/>.</remarks>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <example>
            Asynchronous TLS/SSL negotiation with the POP3 server in WinForms application. This sample
            also handles <see cref="E:MailBee.Pop3Mail.Pop3.TlsStarted"/> event. <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method is used to wait
            for the asynchronous method completion, since .NET's standard
            <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/> cannot process events.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// Put the code below inside your class</span>
            
            <span style="color: green;">// TlsStarted event handler</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnTlsStarted(<span style="color: blue;">object</span> sender, TlsStartedEventArgs e)
            {
            	MessageBox.Show("TLS/SSL negotiation complete. Secure connection is ready.");
            }
            
            <span style="color: green;">// The actual code</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            	<span style="color: green;">// Let MailBee process events</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	pop.TlsStarted += <span style="color: blue;">new</span> TlsStartedEventHandler(OnTlsStarted);
            
            	pop.Connect("mail.domain.com");
            
            	<span style="color: green;">// Initiate an asynchronous TLS/SSL negotiation</span>
            	pop.BeginStartTls(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above</span>
            		pop.Wait(0);
            	}
            
            	<span style="color: green;">// If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">// work, wait until it's established</span>
            	pop.Wait();
            
            	<span style="color: green;">// End the connection request</span>
            	pop.EndStartTls();
            
            	<span style="color: green;">// The connection is now under TLS/SSL layer!</span>
            	<span style="color: green;">// Disconnect from the server</span>
            	pop.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail;
            
            <span style="color: green;">' Put the code below inside your class</span>
            
            <span style="color: green;">' TlsStarted event handler</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnTlsStarted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> TlsStartedEventArgs)
            	MsgBox("TLS/SSL negotiation complete. Secure connection is ready.")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            	<span style="color: green;">' Let MailBee process events</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	<span style="color: blue;">AddHandler</span> pop.TlsStarted, <span style="color: blue;">AddressOf</span> OnTlsStarted
            
            	pop.Connect("mail.domain.com")
            
            	<span style="color: green;">' Initiate an asynchronous TLS/SSL negotiation</span>
            	pop.BeginStartTls(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above</span>
            		pop.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">' work, wait until it's established.</span>
            	pop.Wait()
            
            	<span style="color: green;">' End the connection request.</span>
            	pop.EndStartTls()
            
            	<span style="color: green;">' The connection is now under TLS/SSL layer!</span>
            	<span style="color: green;">' Disconnect from the server</span>
            	pop.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndStartTls">
            <summary>
            Ends a pending asynchronous TLS/SSL negotiation request.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginStartTls(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)">
            <summary>
            Logs in a mailbox on the POP3 server.
            <seealso cref="T:MailBee.SaslMethod"/>
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when logging in a mailbox.</param>
            <param name="authOptions">Specifies the options which affect login process.</param>
            <param name="authUserDefined">A reference to the instance of user defined authentication method,
            or a null reference (<b>Nothing</b> in Visual Basic) if user defined authentication is not used.</param>
            <returns><b>true</b> if a login attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>By default, MailBee won't even try to use authentication methods which are not
            listed by the server in its capabilities. This behavior can be changed by setting
            <see cref="F:MailBee.AuthenticationOptions.TryUnsupportedMethods"/> bit in <paramref name="authOptions"/>.
            If, during the authentication attempt, the server reports that the method is unsupported,
            MailBee will try the next method in <paramref name="authMethods"/> until the compatible
            method is found or no more methods left. This behavior can be changed by setting
            <see cref="F:MailBee.AuthenticationOptions.UseSingleMethodOnly"/> bit in <paramref name="authOptions"/>.</para>
            <para>Authentication methods are tried from more secure to less secure. If <paramref name="authMethods"/>
            is set to <see cref="F:MailBee.AuthenticationMethods.Auto"/> and <paramref name="authOptions"/> is
            <see cref="F:MailBee.AuthenticationOptions.None"/>, MailBee will try to use the most secure method
            supported by the server but will downgrade to less secure methods (to the simplest
            USER/PASS authentication in the worst case) if better methods are not available.</para>
            </remarks>
            <example>This sample connects to a POP3 server and attempts to log in a user account
            using SASL NTLM method in Windows Integrated Authentication mode (passing credentials of the currently logged Windows user) even if
            NTLM is not listed in the server capabilities (the server may still support NTLM while not advertizing this).
            Use of other authentication methods is not allowed by this sample (they do not support obtaining
            the current Windows user's credentials and thus will raise exception is empty credentials are supplied by the caller).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, AuthenticationMethods.SaslNtlm, 
            	AuthenticationOptions.TryUnsupportedMethods, <span style="color: blue;">null</span>);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, AuthenticationMethods.SaslNtlm, _
            	AuthenticationOptions.TryUnsupportedMethods, <span style="color: blue;">Nothing</span>)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods)">
            <summary>
            Logs in a mailbox on the POP3 server.
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when logging in a mailbox.</param>
            <returns><b>true</b> if a login attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            Authentication methods are tried from more secure to less secure. If <paramref name="authMethods"/>
            is set to <see cref="F:MailBee.AuthenticationMethods.Auto"/>, MailBee will try to use the most secure method
            supported by the server but will downgrade to less secure methods (to the simplest
            USER/PASS authentication in the worst case) if better methods are not available.
            </remarks>
            <example>This sample connects to a POP3 server and logs in a user account
            using secure authentication methods only. Use of insecure methods is not allowed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret",
            	AuthenticationMethods.Apop | AuthenticationMethods.SaslCramMD5 | AuthenticationMethods.SaslNtlm);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret", _
            	AuthenticationMethods.Apop <span style="color: blue;">Or</span> AuthenticationMethods.SaslCramMD5 <span style="color: blue;">Or</span> AuthenticationMethods.SaslNtlm)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String)">
            <summary>
            Logs in a mailbox on the POP3 server.
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <returns><b>true</b> if a login attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method will try to authenticate using the best (the most secure) authentication method
            supported by the server, but will downgrade to less secure methods (to the simplest
            USER/PASS authentication in the worst case) if better methods are not available.
            <note>If <see cref="P:MailBee.Global.SafeMode"/> is <b>true</b>, MailBee will use the simplest USER/PASS authentication
            by default. This can often help to troubleshoot login problems (many mail servers implement
            secure authentication methods incorrectly).</note>
            </remarks>
            <example>This sample connects to a POP3 server, logs in a user account, and displays
            the total number of messages in an inbox.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            Console.WriteLine(pop.InboxMessageCount + " message(s) in inbox");
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            Console.WriteLine(pop.InboxMessageCount &amp; " message(s) in inbox")
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginLogin(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a logging in an account on a POP3 server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="T:MailBee.SaslMethod"/>
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when logging in a mailbox.</param>
            <param name="authOptions">Specifies the options which affect login process.</param>
            <param name="authUserDefined">A reference to the instance of user defined authentication method,
            or a null reference (<b>Nothing</b> in Visual Basic) if user defined authentication is not used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous login process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>.</remarks>
            <example>This sample demonstrates asynchronous logging in a mailbox and use of a callback function
            in a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// A callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> LoginCallback(IAsyncResult result)
            	{
            		Pop3 pop = (Pop3)result.AsyncState;
            		pop.EndLogin();
            		Console.WriteLine("Overall size of all messages in the inbox is " +
            			pop.InboxSize + " bytes");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		pop.Connect("pop.somehost.com");
            
            		<span style="color: green;">// Initiate an asynchronous login attempt.</span>
            		IAsyncResult ar = pop.BeginLogin("jdoe", "secret",
            			AuthenticationMethods.Auto, AuthenticationOptions.None,
            			<span style="color: blue;">null</span>, <span style="color: blue;">new</span> AsyncCallback(LoginCallback), pop);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// login is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the login attempt is still in progress, then wait until it's finished.</span>
            		<span style="color: blue;">while</span> (pop.IsBusy) ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' A callback function.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> LoginCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            		pop = result.AsyncState
            		pop.EndLogin()
            		Console.WriteLine("Overall size of all messages in the inbox is " &amp; _
            			pop.InboxSize &amp; " bytes")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            		pop.Connect("pop.somehost.com")
            
            		<span style="color: green;">' Initiate an asynchronous login attempt.</span>
            		<span style="color: blue;">Dim</span> ar = pop.BeginLogin("jdoe", "secret", _
            			AuthenticationMethods.Auto, AuthenticationOptions.None, _
            			<span style="color: blue;">Nothing</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> LoginCallback), pop)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time </span>
            		<span style="color: green;">' login is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' If the login attempt is still in progress, then wait until it's finished.</span>
            		<span style="color: blue;">While</span> pop.IsBusy
            			ar.AsyncWaitHandle.WaitOne()
            		<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndLogin">
            <summary>
            Ends the pending asynchronous login request.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginLogin(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnMessageDownloaded(MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.MessageDownloaded"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.MessageDownloaded"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.OnMessageDataChunkReceived(MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.Pop3Mail.Pop3.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DeleteMessage(System.Int32)">
            <summary>
            Flags the specified message for deletion from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DeleteMessages(System.Int32,System.Int32)"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <returns><b>true</b> if the message has been flagged for deletion; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If more than one message is deleted, it's recommended to use <see cref="M:MailBee.Pop3Mail.Pop3.DeleteMessages(System.Int32,System.Int32)"/>
            method when possible, since it can operate much faster if the server
            supports pipelining.
            <note>Messages flagged for deletion are actually removed from the server
            on <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method call. Until this moment, the developer can remove
            the deletion status for all messages flagged as deleted by calling
            <see cref="M:MailBee.Pop3Mail.Pop3.ResetDeletes"/> method.</note></remarks>
            <example>This sample deletes the first message from a user account on a POP3 server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            pop.DeleteMessage(1);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            pop.DeleteMessage(1)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginDeleteMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for flagging the specified message for deletion from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DeleteMessage(System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDeleteMessages(System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous flagging the message for deletion.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.DeleteMessage(System.Int32)"/>.</remarks>
            <example>This WinForms sample demonstrates asynchronous flagging the last message for deletion
            and use of a callback function.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// A callback function.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> DeleteMessageCallback(IAsyncResult result)
            {
            	Pop3 pop = (Pop3)result.AsyncState;
            	pop.EndDeleteMessage();
            	MessageBox.Show("Last message flagged as deleted");
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	pop.Connect("pop.somehost.com");
            	pop.Login("jdoe", "secret");
            
            	<span style="color: green;">// Initiate an asynchronous deletion attempt.</span>
            	pop.BeginDeleteMessage(pop.InboxMessageCount, _
            		<span style="color: blue;">new</span> AsyncCallback(DeleteMessageCallback), pop);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		pop.Wait(0);
            	}
            
            	<span style="color: green;">// If flagging the message is still in progress, wait until it's done.</span>
            	pop.Wait();
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	pop.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' A callback function.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> DeleteMessageCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            	pop = result.AsyncState
            	pop.EndDeleteMessage()
            	MsgBox("Last message flagged as deleted")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            	
            	<span style="color: green;">' Let MailBee process events.</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	pop.Connect("pop.somehost.com")
            	pop.Login("jdoe", "secret")
            
            	<span style="color: green;">' Initiate an asynchronous deletion attempt.</span>
            	pop.BeginDeleteMessage(pop.InboxMessageCount, _
            		<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> DeleteMessageCallback), pop)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above.</span>
            		pop.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' If flagging the message is still in progress, wait until it's done.</span>
            	pop.Wait()
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	pop.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndDeleteMessage">
            <summary>
            Ends the pending asynchronous request for flagging the message for deletion.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDeleteMessage(System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DeleteMessages(System.Int32,System.Int32)">
            <summary>
            Flags the specified range of messages for deletion from the server.
            </summary>
            <param name="startIndex">The ordinal position (in the inbox) of the first message
            in the range being deleted.</param>
            <param name="count">Number of messages to be flagged for deletion, or -1 to
            indicate that all messages in the range <paramref name="startIndex"/> to
            <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/> must be flagged for deletion.</param>
            <returns><b>true</b> if the messages have been flagged for deletion
            or <paramref name="count"/> is 0; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the POP3 server supports pipelining, this method will flag all the messages in the
            specified range in a single network operation, which greatly increases performance
            and reduces network traffic.
            <note>Messages flagged for deletion are actually removed from the server
            on <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method call. Until this moment, the developer can remove
            the deletion status for all messages flagged as deleted by calling
            <see cref="M:MailBee.Pop3Mail.Pop3.ResetDeletes"/> method.</note></remarks>
            <example>This sample deletes all the messages in the inbox starting at message #10.
            The messages in the range 1 to 9 are not affected.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            pop.DeleteMessages(10, -1);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            pop.DeleteMessages(10, -1)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DeleteMessages">
            <summary>
            Flags all the messages in the inbox for deletion from the server.
            </summary>
            <returns><b>true</b> if the messages have been flagged for deletion or the inbox
            is empty; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the POP3 server supports pipelining, this method will flag all the messages in a single network operation,
            which greatly increases performance and reduces network traffic.
            <note>Messages flagged for deletion are actually removed from the server
            on <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method call. Until this moment, the developer can remove
            the deletion status for all messages flagged as deleted by calling
            <see cref="M:MailBee.Pop3Mail.Pop3.ResetDeletes"/> method.</note></remarks>
            <example>This sample deletes all the messages in the inbox.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            pop.DeleteMessages();
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            pop.DeleteMessages()
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginDeleteMessages(System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for flagging the specified range of messages for deletion from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DeleteMessages(System.Int32,System.Int32)"/>
            </summary>
            <param name="startIndex">The ordinal position (in the inbox) of the first message
            in the range being deleted.</param>
            <param name="count">Number of messages to be flagged for deletion, or -1 to
            indicate that all messages in the range <paramref name="startIndex"/> to
            <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/> must be flagged for deletion.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous flagging the messages for deletion.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.DeleteMessages(System.Int32,System.Int32)"/>.</remarks>
            <example>This WinForms sample demonstrates asynchronous flagging 5 last messages in the inbox for deletion.
            No callback function is used.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	pop.Connect("pop.somehost.com");
            	pop.Login("jdoe", "secret");
            
            	<span style="color: green;">// Initiate an asynchronous deletion attempt.</span>
            	pop.BeginDeleteMessages(pop.InboxMessageCount - 4, 5, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		pop.Wait(0);
            	}
            
            	<span style="color: green;">// End the message flagging operation. If it's in progress at the moment </span>
            	<span style="color: green;">// this method starts, it will wait until it's done first.</span>
            	pop.EndDeleteMessages();
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	pop.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            	<span style="color: green;">' Let MailBee process events.</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	pop.Connect("pop.somehost.com")
            	pop.Login("jdoe", "secret")
            
            	<span style="color: green;">' Initiate an asynchronous deletion attempt.</span>
            	pop.BeginDeleteMessages(pop.InboxMessageCount - 4, 5, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above.</span>
            		pop.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' End the message flagging operation. If it's in progress at the moment </span>
            	<span style="color: green;">' this method starts, it will wait until it's done first.</span>
            	pop.EndDeleteMessages()
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	pop.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndDeleteMessages">
            <summary>
            Ends the pending asynchronous request for flagging the range of messages for deletion.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDeleteMessages(System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)">
            <summary>
            Completely downloads the specified message from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessage"/> object containing the entire message, including
            the message header, all the body parts and attachments;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If more than one message is downloaded, it's recommended to use <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)"/>
            method when possible, since it can operate faster if the server
            supports pipelining and many small messages are downloaded.
            </remarks>
            <example>This sample downloads the last message from an inbox on a POP3 server,
            saves it as index.htm file, and also saves the embedded pictures and other linked
            objects, making it possible to open index.htm file in a browser and have the message
            being correctly displayed (including all the graphics, styles, etc).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml;
            msg.SaveHtmlAndRelatedFiles(@"C:\Temp\index.htm");
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            msg = pop.DownloadEntireMessage(pop.InboxMessageCount)
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml
            msg.SaveHtmlAndRelatedFiles("C:\Temp\index.htm")
            pop.Disconnect()
            </code>		
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeader(System.Int32)">
            <summary>
            Downloads the header of the specified message from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessage"/> object containing the downloaded message header;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If more than one message header is downloaded, it's recommended to use <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            method when possible, since it can operate much faster if the server supports pipelining.
            </remarks>
            <example>This sample downloads header of the last message from an inbox on a POP3 server,
            and prints e-mail addresses of all the recipients of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            MailMessage msg = pop.DownloadMessageHeader(pop.InboxMessageCount);
            EmailAddressCollection recipients = msg.GetAllRecipients();
            <span style="color: blue;">foreach</span> (EmailAddress address <span style="color: blue;">in</span> recipients)
            {
            	Console.WriteLine(address.Email);
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            msg = pop.DownloadMessageHeader(pop.InboxMessageCount)
            <span style="color: blue;">Dim</span> recipients <span style="color: blue;">As</span> EmailAddressCollection
            recipients = msg.GetAllRecipients()
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> address <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> recipients
            	Console.WriteLine(address.Email)
            <span style="color: blue;">Next</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeader(System.Int32,System.Int32)">
            <summary>
            Downloads the header and the specified number of body lines of the message on the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <param name="bodyLineCount">Number of lines of the message source body to download
            in addition to the message source header, or -1 to download the entire message.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessage"/> object containing the downloaded partial message;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>When <paramref name="bodyLineCount"/> is 0, only the message header is downloaded. When
            <paramref name="bodyLineCount"/> is -1, this method is equivalent to <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/>
            method.</para>
            <para>Setting <paramref name="bodyLineCount"/> to a positive value allows the developer
            to implement message body preview feature. In this case, it's recommended
            to set <paramref name="bodyLineCount"/> &gt;= 20 since the first 5-15 lines of the message source body
            are often filled with the special information and do not contain the actual body text.</para>
            <para>If <paramref name="bodyLineCount"/> is set to a certain value (such as 100),
            small messages having less than 100 lines in the message source body will be downloaded
            completely. Larger messages will be parsed partially. For instance, if 100 body lines of the
            message have been received, and the message contains an attachment which starts at 80-th line
            and ends at 150-th line of the message source body (so it has not fitted in the 100 lines received),
            MailBee will still add this attachment into <see cref="P:MailBee.Mime.MailMessage.Attachments"/>
            collection, but the attachment binary data will obviously be incomplete.</para>
            <note>If more than one message header is downloaded, it's recommended to use <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            method when possible, since it can operate much faster if the server supports pipelining.</note>
            </remarks>
            <example>This sample downloads the header and 20 lines of the message source body for the last message in an inbox
            on a POP3 server, and prints the message body text (if any) MailBee managed to extract
            from the downloaded 20 lines of the message source body.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            MailMessage msg = pop.DownloadMessageHeader(pop.InboxMessageCount, 20);
            Console.WriteLine(msg.BodyPlainText);
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            msg = pop.DownloadMessageHeader(pop.InboxMessageCount, 20)
            Console.WriteLine(msg.BodyPlainText)
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessage(System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for downloading the specified message header or entire message from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeader(System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessages(System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <param name="bodyLineCount">Number of lines of the message source body to download
            in addition to the message source header, or -1 to download the entire message.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous downloading the message.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>
            <para>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeader(System.Int32)"/>.</para>
            <para>If multiple messages or message headers are downloaded, it's recommended to use
            <see cref="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessages(System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method, since it can operate much faster if the server supports pipelining.</para>
            </remarks>
            <example>This WinForms sample demonstrates asynchronous downloading of the first message in the inbox.
            No callback function is used. Once the message is downloaded, all the attachments to
            the message are saved into C:\Temp folder.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	pop.Connect("pop.somehost.com");
            	pop.Login("jdoe", "secret");
            
            	<span style="color: green;">// Initiate an asynchronous download attempt.</span>
            	<span style="color: green;">// bodyLineCount = -1 to indicate the entire message must be downloaded.</span>
            	pop.BeginDownloadMessage(1, -1, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		pop.Wait(0);
            	}
            
            	<span style="color: green;">// End the message download operation and return MailMessage object.</span>
            	<span style="color: green;">// If the operation is still in progress at the moment when </span>
            	<span style="color: green;">// this method starts, the method will wait until the operation completion.</span>
            	MailMessage msg = pop.EndDownloadMessage();
            
            	<span style="color: green;">// Save all attachments into C:\Temp folder.</span>
            	msg.Attachments.SaveAll(@"C:\Temp");
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	pop.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            	<span style="color: green;">' Let MailBee process events.</span>
            	pop.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	pop.Connect("pop.somehost.com")
            	pop.Login("jdoe", "secret")
            
            	<span style="color: green;">' Initiate an asynchronous download attempt.</span>
            	<span style="color: green;">' bodyLineCount = -1 to indicate the entire message must be downloaded.</span>
            	pop.BeginDownloadMessage(1, -1, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above.</span>
            		pop.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' End the message download operation and return MailMessage object.</span>
            	<span style="color: green;">' If the operation is still in progress at the moment when </span>
            	<span style="color: green;">' this method starts, the method will wait until the operation completion.</span>
            	<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            	msg = pop.EndDownloadMessage()
            
            	<span style="color: green;">' Save all attachments into C:\Temp folder.</span>
            	msg.Attachments.SaveAll("C:\Temp")
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	pop.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndDownloadMessage">
            <summary>
            Ends the pending asynchronous request for downloading the message and returns
            the downloaded message.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessage(System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessage"/> object representing the downloaded message;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)">
            <summary>
            Completely downloads the messages in the specified range from the server.
            </summary>
            <param name="startIndex">The ordinal position (in the inbox) of the first message
            in the range to be downloaded.</param>
            <param name="count">Number of messages to be downloaded, or -1 to
            indicate that all messages in the range <paramref name="startIndex"/> to
            <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/> must be downloaded.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> containing the downloaded messages;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the POP3 server supports pipelining, this method will download all the messages in a single network operation,
            which greatly increases performance and reduces network traffic.
            </remarks>
            <example>This sample completely downloads the last 10 messages from the inbox, and displays the number
            of attachments for each downloaded message. <see cref="E:MailBee.Pop3Mail.Pop3.MessageDownloaded"/> event is used
            to track the download progress. The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageDownloaded event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDownloaded(<span style="color: blue;">object</span> sender, Pop3MessageDownloadedEventArgs e)
            	{
            		Console.WriteLine("Message #" + e.MessageNumber + " downloaded");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            
            		<span style="color: green;">// Subscribe to the MessageDownloaded event.</span>
            		pop.MessageDownloaded += <span style="color: blue;">new</span> Pop3MessageDownloadedEventHandler(OnMessageDownloaded);
            
            		<span style="color: green;">// Download the messages.</span>
            		MailMessageCollection msgs = pop.DownloadEntireMessages(pop.InboxMessageCount - 9, 10);
            
            		<span style="color: green;">// Display some information about downloaded messages.</span>
            		<span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            		{
            			Console.WriteLine("Message #" + msg.IndexOnServer +
            				" contains " + msg.Attachments.Count + " attachment(s)");
            		}
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageDownloaded event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDownloaded(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> Pop3MessageDownloadedEventArgs)
            		Console.WriteLine("Message #" &amp; e.MessageNumber &amp; " downloaded")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> Pop3
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: green;">' Subscribe to the MessageDownloaded event.</span>
            		<span style="color: blue;">AddHandler</span> pop.MessageDownloaded, <span style="color: blue;">AddressOf</span> OnMessageDownloaded
            
            		<span style="color: green;">' Download the messages.</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            		msgs = pop.DownloadEntireMessages(pop.InboxMessageCount - 9, 10)
            
            		<span style="color: green;">' Display some information about downloaded messages.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            			Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; _
            				" contains " &amp; msg.Attachments.Count &amp; " attachment(s)")
            		<span style="color: blue;">Next</span>
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages">
            <summary>
            Completely downloads all the messages from the inbox on the server.
            </summary>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> containing the downloaded messages;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the POP3 server supports pipelining, this method will download all the messages in a single network operation,
            which greatly increases performance and reduces network traffic.
            </remarks>
            <example>This sample completely downloads all the messages from the inbox, and displays the filename and data size
            for each of the attachments of each downloaded message. <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event is used
            to track the download progress. The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageDataChunkReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDataChunkReceived(<span style="color: blue;">object</span> sender,
            		Pop3MessageDataChunkReceivedEventArgs e)
            	{
            		Console.WriteLine(e.BytesJustReceived +
            			" bytes of the message #" + e.MessageNumber + " received");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            
            		<span style="color: green;">// Subscribe to the MessageDataChunkReceived event.</span>
            		pop.MessageDataChunkReceived +=
            			<span style="color: blue;">new</span> Pop3MessageDataChunkReceivedEventHandler(OnMessageDataChunkReceived);
            
            		<span style="color: green;">// Download the messages.</span>
            		MailMessageCollection msgs = pop.DownloadEntireMessages();
            
            		<span style="color: green;">// Display some information about downloaded messages.</span>
            		<span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            		{
            			<span style="color: blue;">string</span> attachFilenames = <span style="color: blue;">string</span>.Empty;
            			<span style="color: blue;">if</span> (msg.Attachments.Count == 0)
            			{
            				attachFilenames = "no";
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            				{
            					<span style="color: blue;">if</span> (attachFilenames != <span style="color: blue;">string</span>.Empty)
            					{
            						attachFilenames += "; ";
            					}
            					attachFilenames += attach.Filename;
            				}
            			}
            			Console.WriteLine("Message #" + msg.IndexOnServer +
            				" contains " + attachFilenames + " attachment(s)");
            		}
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageDataChunkReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDataChunkReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> Pop3MessageDataChunkReceivedEventArgs)
            		Console.WriteLine(e.BytesJustReceived &amp; _
            			" bytes of the message #" &amp; e.MessageNumber &amp; " received")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> Pop3
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: green;">' Subscribe to the MessageDataChunkReceived event.</span>
            		<span style="color: blue;">AddHandler</span> pop.MessageDataChunkReceived, <span style="color: blue;">AddressOf</span> OnMessageDataChunkReceived
            
            		<span style="color: green;">' Download the messages</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            		msgs = pop.DownloadEntireMessages()
            
            		<span style="color: green;">' Display some information about downloaded messages.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            			<span style="color: blue;">Dim</span> attachFilenames <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            			attachFilenames = <span style="color: blue;">String</span>.Empty
            			<span style="color: blue;">If</span> msg.Attachments.Count = 0 <span style="color: blue;">Then</span>
            				attachFilenames = "no"
            			<span style="color: blue;">Else</span>
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            					<span style="color: blue;">If</span> attachFilenames &lt;&gt; <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            						attachFilenames &amp;= "; "
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            					attachFilenames &amp;= attach.Filename
            				<span style="color: blue;">Next</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; _
            				" contains " &amp; msg.Attachments.Count &amp; " attachment(s)")
            		<span style="color: blue;">Next</span>
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)">
            <summary>
            Downloads the header and the specified number of body lines of each message in the specified range from the server.
            </summary>
            <param name="startIndex">The ordinal position (in the inbox) of the first message
            in the range to be downloaded.</param>
            <param name="count">Number of messages to be downloaded, or -1 to
            indicate that all messages in the range <paramref name="startIndex"/> to
            <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/> must be downloaded.</param>
            <param name="bodyLineCount">Number of lines of the message source body to download
            in addition to the message source header, or -1 to download the entire messages.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded partial messages;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>When <paramref name="bodyLineCount"/> is 0, only the message header is downloaded. When
            <paramref name="bodyLineCount"/> is -1, this method is equivalent to <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/>
            method.</para>
            <para>Setting <paramref name="bodyLineCount"/> to a positive value allows the developer
            to implement message body preview feature. In this case, it's recommended
            to set <paramref name="bodyLineCount"/> &gt;= 20 since the first 5-15 lines of the message source body
            are often filled with the special information and do not contain the actual body text.</para>
            <para>If <paramref name="bodyLineCount"/> is set to a certain value (such as 100),
            small messages having less than 100 lines in the message source body will be downloaded
            completely. Larger messages will be parsed partially. For instance, if 100 body lines of the
            message have been received, and the message contains an attachment which starts at 80-th line
            and ends at 150-th line of the message source body (so it has not fitted in the 100 lines received),
            MailBee will still add this attachment into <see cref="P:MailBee.Mime.MailMessage.Attachments"/>
            collection, but the attachment binary data will obviously be incomplete.</para>
            <note>If the POP3 server supports pipelining, this method will download all the messages in a single
            network operation, which greatly increases performance and reduces network traffic.</note>
            </remarks>
            <example>This sample downloads the header and 300 lines (approx. 20-30 KBytes) of the message source body for every message in an inbox
            on a POP3 server, and displays whether the messages probably contain attachments or not.
            <note>If no attachment is found in a partial message, there is still no guarantee
            the message would not contain attachments if was downloaded completely; the message may just have
            a large body text section which spans more than 300 lines in the entire message.
            If more body lines (such as 1000) are downloaded with the header, 
            attachment detection quality will be higher, but at the cost of increased network traffic with the server.
            Another approach is to use <see cref="P:MailBee.Mime.MailMessage.HasAttachments"/> property, however, it's still
            not 100% accurate, because it may indicate the message does have attachments if it actually doesn't but the message
            header reports the message has at least one attachment.</note> 
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            MailMessageCollection msgs = pop.DownloadMessageHeaders(1, -1, 300);
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	<span style="color: blue;">string</span> attachmentStatus = msg.Attachments.Count == 0 ? "no" : "some";
            	Console.WriteLine("Message #" + msg.IndexOnServer + " probably contains " + attachmentStatus + " attachment(s)");
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            msgs = pop.DownloadMessageHeaders(1, -1, 300)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	<span style="color: blue;">Dim</span> attachmentStatus <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            	<span style="color: blue;">If</span> msg.Attachments.Count = 0 <span style="color: blue;">Then</span>
            		attachmentStatus = "no"
            	<span style="color: blue;">Else</span>
            		attachmentStatus = "some"
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; " probably contains " &amp; _
            		attachmentStatus &amp; " attachment(s)")
            <span style="color: blue;">Next</span>
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32)">
            <summary>
            Downloads the header of each message in the specified range from the server.
            </summary>
            <param name="startIndex">The ordinal position (in the inbox) of the first message
            in the range to be downloaded.</param>
            <param name="count">Number of messages to be downloaded, or -1 to
            indicate that all messages in the range <paramref name="startIndex"/> to
            <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/> must be downloaded.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded message headers;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the POP3 server supports pipelining, this method will download all the messages in a single
            network operation, which greatly increases performance and reduces network traffic.
            </remarks>
            <example>This sample downloads headers of the last 10 messages in the mailbox, and displays
            the following information for each message:
            <list type="bullet">
            <item><description>Subject: field</description></item>
            <item><description>Date and time when the message was created</description></item>
            <item><description>Date and time when the message was delivered to the mailbox</description></item>
            </list>
            The message information is displayed in descending order (from newer messages to older ones).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            
            <span style="color: green;">// Download headers of the last 10 messages.</span>
            MailMessageCollection msgs = pop.DownloadMessageHeaders(pop.InboxMessageCount - 9, 10);
            
            <span style="color: green;">// Reverse the order of the elements to make newer messages appear first in the collection.</span>
            msgs.Reverse();
            
            <span style="color: green;">// Display Date, DateReceived, and Subject.</span>
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	Console.WriteLine("Message #" + msg.IndexOnServer + ", created at " + msg.Date + " and received at " + msg.DateReceived + ", has Subject: " + msg.Subject);
            }
            
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            
            <span style="color: green;">' Download headers of the last 10 messages.</span>
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = pop.DownloadMessageHeaders(pop.InboxMessageCount - 9, 10)
            
            <span style="color: green;">' Reverse the order of the elements to make newer messages appear first in the collection.</span>
            msgs.Reverse()
            
            <span style="color: green;">' Display Date, DateReceived, and Subject.</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; ", created at " &amp; msg.Date &amp; " and received at " &amp; msg.DateReceived &amp; ", has Subject: " &amp; msg.Subject)
            <span style="color: blue;">Next</span>
            
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders">
            <summary>
            Downloads headers of all messages in the inbox on the server.
            </summary>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded message headers;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the POP3 server supports pipelining, this method will download all the messages in a single
            network operation, which greatly increases performance and reduces network traffic.
            </remarks>
            <example>This sample downloads headers of all the messages in the mailbox, and displays
            the following information for each message:
            <list type="bullet">
            <item><description>The display name of the sender (or the e-mail address if the display name is not available)</description></item>
            <item><description>The display names of the recipients (or the e-mail address when the particular display name is not available)</description></item>
            </list>
            The message information is displayed in descending order (from newer messages to older ones).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            
            <span style="color: green;">// Download headers of all the messages in the inbox.</span>
            MailMessageCollection msgs = pop.DownloadMessageHeaders();
            
            <span style="color: green;">// Reverse the order of the elements to make newer messages appear first in the collection.</span>
            msgs.Reverse();
            
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	<span style="color: green;">// Get the sender.</span>
            	<span style="color: blue;">string</span> sender = msg.From.DisplayName;
            	<span style="color: blue;">if</span> (sender == <span style="color: blue;">string</span>.Empty)
            	{
            		sender = msg.From.Email;
            	}
            
            	<span style="color: green;">// Get the list of recipients.</span>
            	<span style="color: blue;">string</span> s = <span style="color: blue;">string</span>.Empty;
            	<span style="color: blue;">foreach</span> (EmailAddress address <span style="color: blue;">in</span> msg.GetAllRecipients())
            	{
            		<span style="color: blue;">string</span> recipient = address.DisplayName;
            		<span style="color: blue;">if</span> (recipient == <span style="color: blue;">string</span>.Empty)
            		{
            			recipient = address.Email; 
            		}
            
            		<span style="color: blue;">if</span> (recipients == <span style="color: blue;">string</span>.Empty)
            		{
            			recipients += recipient;
            		}
            		<span style="color: blue;">else</span>
            		{
            			recipients += ", " + recipient;
            		}
            	}
            
            	Console.WriteLine("Message #" + msg.IndexOnServer + " was originally sent by " + sender + " to " + recipients);
            }
            
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            
            <span style="color: green;">' Download headers of all the messages in the inbox.</span>
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            msgs = pop.DownloadMessageHeaders()
            
            <span style="color: green;">' Reverse the order of the elements to make newer messages appear first in the collection.</span>
            msgs.Reverse()
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	<span style="color: green;">' Get the sender.</span>
            	<span style="color: blue;">Dim</span> sender <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            	sender = msg.From.DisplayName
            	<span style="color: blue;">If</span> sender = <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            		sender = msg.From.Email
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            	<span style="color: green;">' Get the list of recipients.</span>
            	<span style="color: blue;">Dim</span> recipients <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            	recipients = <span style="color: blue;">String</span>.Empty
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> address <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> msg.GetAllRecipients()
            		<span style="color: blue;">Dim</span> recipient <span style="color: blue;">As</span> <span style="color: blue;">String</span> = address.DisplayName
            		<span style="color: blue;">If</span> recipient = <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            			recipient = address.Email
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: blue;">If</span> recipients = <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            			recipients = recipients &amp; recipient
            		<span style="color: blue;">Else</span>
            			recipients = recipients &amp; ", " &amp; recipient
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">Next</span>
            
            	Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; " was originally sent by " &amp; sender &amp; " to " &amp; recipients)
            <span style="color: blue;">Next</span>
            
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessages(System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for downloading the entire or partial messages in the specified range from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="startIndex">The ordinal position (in the inbox) of the first message
            in the range to be downloaded.</param>
            <param name="count">Number of messages to be downloaded, or -1 to
            indicate that all messages in the range <paramref name="startIndex"/> to
            <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/> must be downloaded.</param>
            <param name="bodyLineCount">Number of lines of the message source body to download
            in addition to the message source header, or -1 to download the entire messages.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous downloading the message.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>.</remarks>
            <example>This sample asynchronously downloads headers of all the messages in the inbox. Then,
            it displays the following information about each message:
            <list type="bullet">
            <item><description>The length in bytes of the downloaded header data</description></item>
            <item><description>The length in bytes of the actual message data on the server (it would be the length
            of the message if the entire message was downloaded)</description></item>
            </list>
            <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event is handled in order to track the download progress.
            No callback function is used. The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageDataChunkReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDataChunkReceived(<span style="color: blue;">object</span> sender,
            		Pop3MessageDataChunkReceivedEventArgs e)
            	{
            		Console.WriteLine(e.BytesJustReceived + " bytes of the message #" +
            			e.MessageNumber + " received");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            		pop.Connect("pop.somehost.com");
            		pop.Login("jdoe", "secret");
            
            		<span style="color: green;">// Subscribe to MessageDataChunkReceived event.</span>
            		pop.MessageDataChunkReceived +=
            			<span style="color: blue;">new</span> Pop3MessageDataChunkReceivedEventHandler(OnMessageDataChunkReceived);
            
            		<span style="color: green;">// Initiate an asynchronous download attempt.</span>
            		pop.BeginDownloadMessages(1, -1, 0, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// the messages are downloaded on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// End the messages download operation and return MailMessageCollection object.</span>
            		<span style="color: green;">// If the operation is still in progress at the moment when </span>
            		<span style="color: green;">// this method starts, the method will wait until the operation completion.</span>
            		MailMessageCollection msgs = pop.EndDownloadMessages();
            
            		<span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            		{
            			Console.WriteLine("Message #" + msg.IndexOnServer +
            				": the length of the entire message is " + msg.SizeOnServer +
            				" bytes, the length of the downloaded header is " + msg.Size + " bytes.");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageDataChunkReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDataChunkReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> Pop3MessageDataChunkReceivedEventArgs)
            		Console.WriteLine(e.BytesJustReceived &amp; " bytes of the message #" &amp; _
            			e.MessageNumber &amp; " received")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            	
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> Pop3
            		pop.Connect("pop.somehost.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: green;">' Subscribe to MessageDataChunkReceived event.</span>
            		<span style="color: blue;">AddHandler</span> pop.MessageDataChunkReceived, <span style="color: blue;">AddressOf</span> OnMessageDataChunkReceived
            
            		<span style="color: green;">' Initiate an asynchronous download attempt.</span>
            		pop.BeginDownloadMessages(1, -1, 0, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">' the messages are downloaded on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' End the messages download operation and return MailMessageCollection object.</span>
            		<span style="color: green;">' If the operation is still in progress at the moment when </span>
            		<span style="color: green;">' this method starts, the method will wait until the operation completion.</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            		msgs = pop.EndDownloadMessages()
            		
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            			Console.WriteLine("Message #" + msg.IndexOnServer &amp; _
            				": the length of the entire message is " &amp; msg.SizeOnServer &amp; _
            				" bytes, the length of the downloaded header is " &amp; msg.Size &amp; " bytes.")
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndDownloadMessages">
            <summary>
            Ends the pending asynchronous request for downloading the messages and returns
            the downloaded messages.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginDownloadMessages(System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> object representing
            the downloaded messages; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.ExecuteCustomCommand(System.String,System.Boolean)">
            <summary>
            Sends user-defined command to the server and receives the server response to this command.
            </summary>
            <param name="commandString">User-defined command text (including line terminator).</param>
            <param name="multiLineResponse"><b>true</b> if the given command returns multi-line response
            on success; <b>false</b> if the given command always produces single-line response.</param>
            <returns><b>true</b> if the command was executed successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The developer can use <see cref="M:MailBee.Pop3Mail.Pop3.GetServerResponse"/> method to obtain the response
            data returned by the server.</remarks>
            <example>This sample connects to the POP3 server, issues HELP command, and displays
            the server response to this command. If HELP command is not supported by the server,
            MailBee will throw <see cref="T:MailBee.Pop3Mail.MailBeePop3NegativeResponseException"/>. It's caught in
            the sample code, and the proper error message is displayed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Send HELP command (it produces a single-line response).</span>
            	pop.ExecuteCustomCommand("HELP\r\n", <span style="color: blue;">false</span>);
            	Console.WriteLine(pop.GetServerResponse());
            }
            <span style="color: blue;">catch</span> (MailBeePop3NegativeResponseException e)
            {
            	<span style="color: green;">// The given POP3 server does not support HELP command.</span>
            	Console.WriteLine(e.Message);
            	Console.WriteLine("Server response is: " + pop.GetServerResponse());
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Send HELP command (it produces a single-line response).</span>
            	pop.ExecuteCustomCommand("HELP" &amp; vbCrLf, <span style="color: blue;">False</span>)
            <span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeePop3NegativeResponseException
            	<span style="color: green;">' The given POP3 server does not support HELP command.</span>
            	Console.WriteLine(e.Message)
            	Console.WriteLine("Server response is: " &amp; pop.GetServerResponse())
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            pop.Disconnect()
            </code>
            </example> 
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.BeginExecuteCustomCommand(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for sending the specified user-defined command to the server and getting the response.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.ExecuteCustomCommand(System.String,System.Boolean)"/>
            </summary>
            <param name="commandString">User-defined command text (including line terminator).</param>
            <param name="multiLineResponse"><b>true</b> if the given command returns multi-line response
            on success; <b>false</b> if the given command always produces single-line response.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous user-defined command execution.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.Pop3Mail.Pop3.ExecuteCustomCommand(System.String,System.Boolean)"/>.</remarks>
            <example>Sending a mail message to the POP3 server in WinForms application
            (the POP3 server must support XTND XMIT extension). Sending itself is performed in a few stages:
            <list type="number">
            <item><description>Send XTND XMIT command</description></item>
            <item><description>If the server returned positive response indicating XTND XMIT extension
            is supported, send message source data (encoded as multi-line POP3 request)</description></item>
            <item><description>If the server returned positive response, the message was accepted for delivery</description></item>
            </list>
            Callback functions are actively used, and the application message loop never gets blocked
            (no waiting for an asynchronous method completion is used). Thus, we do need to care about
            dead-locks which would occur if an event was raised while the message loop was blocked
            by somewhat like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/> method call.
            This sample's code does not handle any events, but it's safe to use them if needed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// XTND XMIT callback function.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> XtndXmitCallback(IAsyncResult result)
            {
            	Pop3 pop = (Pop3)result.AsyncState;
            
            	<span style="color: green;">// Process the results of XTND XMIT command.</span>
            	<span style="color: blue;">try</span>
            	{
            		pop.EndExecuteCustomCommand();
            	}
            	<span style="color: blue;">catch</span> (MailBeePop3NegativeResponseException)
            	{
            		MessageBox.Show("XTND XMIT command is not supported. The server responded: " +
            			pop.GetServerResponse());
            		pop.Disconnect();
            		<span style="color: blue;">return</span>;
            	}
            
            	<span style="color: green;">// Create a mail message to be sent.</span>
            	MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            	msg.From.Email = "jdoe@mydomain.com";
            	msg.To.AsString = "kathy@herdomain.com";
            	msg.Subject = "Meeting request";
            	msg.BodyPlainText = "Hi, Kathy,\r\nCan we meet tomorrow?\r\n\r\nRegards,\r\nJohn";
            
            	<span style="color: green;">// Encode the mail message source as multi-line POP3 request.</span>
            	<span style="color: blue;">string</span> messageSource = System.Text.Encoding.Default.GetString(msg.GetMessageRawData());
            	messageSource = messageSource.Replace("\r\n.", "\r\n..");
            
            	<span style="color: green;">// Send the mail message asynchronously.</span>
            	pop.BeginExecuteCustomCommand(messageSource + "\r\n.\r\n",
            		<span style="color: blue;">false</span>, <span style="color: blue;">new</span> AsyncCallback(SubmissionCallback), pop);
            }
            
            <span style="color: green;">// Mail message submission callback function.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> SubmissionCallback(IAsyncResult result)
            {
            	Pop3 pop = (Pop3)result.AsyncState;
            
            	<span style="color: green;">// Process the results of the mail message submission.</span>
            	<span style="color: blue;">try</span>
            	{
            		pop.EndExecuteCustomCommand();
            		MessageBox.Show("Message submitted for delivery");
            	}
            	<span style="color: blue;">catch</span> (MailBeePop3NegativeResponseException)
            	{
            		MessageBox.Show("Message was not submitted. The server responded: " +
            			pop.GetServerResponse());
            	}
            
            	pop.Disconnect();
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            	pop.Connect("pop.mydomain.com");
            	pop.Login("jdoe", "secret");
            
            	<span style="color: green;">// Issue XTND XMIT command asynchronously.</span>
            	pop.BeginExecuteCustomCommand("XTND XMIT\r\n", <span style="color: blue;">false</span>,
            		<span style="color: blue;">new</span> AsyncCallback(XtndXmitCallback), pop);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' XTND XMIT callback function.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> XtndXmitCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            	pop = result.AsyncState
            
            	<span style="color: green;">' Process the results of XTND XMIT command.</span>
            	<span style="color: blue;">Try</span>
            		pop.EndExecuteCustomCommand()
            	<span style="color: blue;">Catch</span> MailBeePop3NegativeResponseException <span style="color: blue;">As</span> Exception
            		MsgBox("XTND XMIT command is not supported. The server responded: " &amp; _
            			pop.GetServerResponse())
            		pop.Disconnect()
            		<span style="color: blue;">Return</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            	<span style="color: green;">' Create a mail message to be sent.</span>
            	<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            	msg.From.Email = "jdoe@mydomain.com"
            	msg.To.AsString = "kathy@herdomain.com"
            	msg.Subject = "Meeting request"
            	msg.BodyPlainText = "Hi, Kathy,\r\nCan we meet tomorrow?\r\n\r\nRegards,\r\nJohn"
            	
            	<span style="color: green;">' Encode the mail message source as multi-line POP3 request.</span>
            	<span style="color: blue;">Dim</span> messageSource <span style="color: blue;">As</span> <span style="color: blue;">String</span> = System.Text.Encoding.Default.GetString(msg.GetMessageRawData())
            	messageSource = messageSource.Replace("\r\n.", "\r\n..")
            
            	<span style="color: green;">' Send the mail message asynchronously.</span>
            	pop.BeginExecuteCustomCommand(messageSource + "\r\n.\r\n", <span style="color: blue;">False</span>, _
            		<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> SubmissionCallback), pop)
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Mail message submission callback function.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> SubmissionCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            	pop = result.AsyncState
            
            	<span style="color: green;">' Process the results of the mail message submission.</span>
            	<span style="color: blue;">Try</span>
            		pop.EndExecuteCustomCommand()
            		MsgBox("Message submitted for delivery")
            	<span style="color: blue;">Catch</span> MailBeePop3NegativeResponseException <span style="color: blue;">As</span> Exception
            		MsgBox("Message was not submitted. The server responded: " &amp; _
            			pop.GetServerResponse())
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	
            	pop.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form11_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            	pop.Connect("pop.mydomain.com")
            	pop.Login("jdoe", "secret")
            
            	<span style="color: green;">' Issue XTND XMIT command asynchronously.</span>
            	pop.BeginExecuteCustomCommand("XTND XMIT\r\n", <span style="color: blue;">False</span>, _
            		<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> XtndXmitCallback), pop)
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.EndExecuteCustomCommand">
            <summary>
            Ends the pending asynchronous request for sending user-defined command to the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.BeginExecuteCustomCommand(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Noop2">
            <summary>
            Sends a command to the POP3 server to keep the connection alive.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Noop"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The developer can use this method to keep the POP3 server from timing out the connection
            when there is no real activity. This method actually sends STAT command to the server.
            This seems to be more reliable solution than the standard NOOP command which is ignored
            by some POP3 servers.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.ResetDeletes">
            <summary>
            Resets the POP3 session, and cancels the deleted status for all messages
            flagged for deletion in the inbox.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DeleteMessage(System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The developer can use this method to cancel purging messages which were
            flagged for deletion during the current POP3 session. Normally, messages flagged for
            deletion are purged (permanently deleted) when <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method is called
            and the POP3 session is closed.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.Last">
            <summary>
            Gets the message number of the last message ever accessed in this mailbox during actual
            or all prior POP3 sessions.
            </summary>
            <returns>On success, the message number of the last message ever accessed, or 0 if no messages have ever
            been accessed in the mailbox; on failure, -1.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>Although LAST command was originally intended for locating new messages,
            it was deprecated in subsequent revisions of the POP3 protocol due. Use of this
            command is not recommended.</remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetMessageSize(System.Int32)">
            <summary>
            Gets the length (in bytes) of the specified message in the inbox.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.GetMessageSizes"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            </summary>
            <param name="index">The ordinal position of the message in the inbox.
            It must be in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</param>
            <returns>The length (in bytes) of the specified message in the inbox.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">The message index is not in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetMessageSizes">
            <summary>
            Gets the array of lengths (in bytes) of all messages in the inbox. The array is zero-based.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.GetMessageSize(System.Int32)"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            </summary>
            <returns>A zero-based array of lengths (in bytes) of all messages in the inbox.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>Since the lower index in a .NET array is 0 while the lower message number in the inbox is 1,
            indices in the lengths array are -1 to the message numbers.</remarks>
            <example>This sample displays the size in bytes of the first and the last message in the inbox.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            
            <span style="color: blue;">int</span>[] lengths = pop.GetMessageSizes();
            Console.WriteLine("Message #1 is the size of " + lengths[0] + " bytes");
            Console.WriteLine("Message #" + pop.InboxMessageCount +
            	" is the size of " + lengths[pop.InboxMessageCount - 1] + " bytes");
            
            pop.Disconnect();
            </code> 
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            
            <span style="color: blue;">Dim</span> lengths <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>() = pop.GetMessageSizes()
            Console.WriteLine("Message #1 is the size of " &amp; lengths(0) &amp; " bytes")
            Console.WriteLine("Message #" &amp; pop.InboxMessageCount &amp; _
            	" is the size of " &amp; lengths(pop.InboxMessageCount - 1) &amp; " bytes")
            
            pop.Disconnect()
            </code> 
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetMessageIndexFromUid(System.String)">
            <summary>
            Gets the message number of the message to which the specified Unique-ID is assigned.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.GetMessageUidFromIndex(System.Int32)"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            </summary>
            <param name="uid">Unique-ID string assigned to the message in the inbox.</param>
            <returns>The message number (in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>)
            of the message to which the server has assigned the specified Unique-ID,
            or 0 if the inbox does not contain the message with the given Unique-ID.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">The <paramref name="uid"/>
            is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks><note>Unique-ID values are case-sensitive. <i>SomeValue</i> and <i>SOMEVALUE</i>
            are NOT equivalent.</note></remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetMessageUidFromIndex(System.Int32)">
            <summary>
            Gets the Unique-ID string assigned to the specified message in the inbox on the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.GetMessageIndexFromUid(System.String)"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            </summary>
            <param name="index">The message number (in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>) of the message.</param>
            <returns>The Unique-ID string assigned to the specified message in the inbox on the server.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">The message index is not in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Unique-ID is not the same value as <see cref="P:MailBee.Mime.MailMessage.MessageID"/>.
            Unique-ID is assigned to each message in the inbox by the POP3 server, while
            <see cref="P:MailBee.Mime.MailMessage.MessageID"/> value is assigned to the message by
            the mail composing program. For instance, if the same message was placed into the inbox
            twice, both copies will have the same <see cref="P:MailBee.Mime.MailMessage.MessageID"/> value, but
            Unique-ID values will be different.</para>
            <para>Unique-ID's is the preferred way of implementation of downloading new mails
            mechanism.</para>
            <note type="caution">Some old POP3 servers have no support for Unique-ID's
            and thus do not implement the POP3 protocol's UIDL command.</note>
            </remarks>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.GetMessageUids">
            <summary>
            Gets the array of Unique-ID's of all messages in the inbox. The array is zero-based.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.GetMessageUidFromIndex(System.Int32)"/>
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            </summary>
            <returns>A zero-based array of Unique-ID strings of all messages in the inbox.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>Since the lower index in a .NET array is 0 while the lower message number in the inbox is 1,
            indices in the Unique-ID's array are -1 to the message numbers.</remarks>
            <example>This sample displays Unique-ID values of the first and the last message in the inbox.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            
            <span style="color: blue;">string</span>[] uids = pop.GetMessageUids();
            Console.WriteLine("Unique-ID of message #1 is " + uids[0]);
            Console.WriteLine("Unique-ID of message #" + pop.InboxMessageCount +
            	" is " + uids[pop.InboxMessageCount - 1]);
            
            pop.Disconnect();
            </code> 
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            
            <span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> <span style="color: blue;">String</span>() = pop.GetMessageUids()
            Console.WriteLine("Unique-ID of message #1 is " &amp; uids(0))
            Console.WriteLine("Unique-ID of message #" &amp; pop.InboxMessageCount &amp; _
            	" is " &amp; uids(pop.InboxMessageCount - 1))
            
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Downloads the specified message (entire message or message header only) from the server,
            in a single line of code.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessages(System.String,System.String,System.String,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="index">The ordinal position of the message in the inbox, starting at 1.</param>
            <param name="bodyLineCount">Number of lines of the message source body to download
            in addition to the message source header, or -1 to download the entire message,
            or 0 to download the message header only.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessage"/> object containing the downloaded message.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the inbox.</para>
            <para>The common use of this method is to quickly receive the message or its part when its index
            in the inbox is already known. For instance, <see cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessages(System.String,System.String,System.String,System.Int32)"/> method was
            used to download headers for all messages in the inbox and build the message list where
            the user can click a particular message to view it in more detail. Once the user selected
            the message to be viewed, the application passes its index in the message list as
            a value of <paramref name="index"/> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32,System.Int32)"/> method
            to download the selected message or its part (if the message list index is zero-based,
            the developer should also add 1 to the <paramref name="index"/> value).</para>
            <note>Static methods still require the valid license key to be assigned to <see cref="P:MailBee.Pop3Mail.Pop3.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>
            <para>This sample partially downloads the first message in the inbox (the header and
            the first 100 lines of the message source body are downloaded), and displays preview of
            the plain-text body of the message. This may be useful if the entire message is very large,
            and the user wants to take a look at the beginning of the body text in order
            to decide whether to download the entire message.</para>
            <para>If the message has HTML part but does not have plain-text part, the plain-text version will be generated automatically.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = Pop3.QuickDownloadMessage("pop.server.com",
            	"login", "password", 1, 100);
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain;
            Console.WriteLine(msg.BodyPlainText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop.server.com", _
            	"login", "password", 1, 100)
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain
            Console.WriteLine(msg.BodyPlainText)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32)">
            <summary>
            Completely downloads the specified message from the server,
            in a single line of code.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessages(System.String,System.String,System.String,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="index">The ordinal position of the message in the inbox, starting at 1.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessage"/> object containing the downloaded message (including the header
            and all the body parts and attachments).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the inbox.</para>
            <para>The common use of this method is to quickly receive the message when its index
            in the inbox is already known. For instance, <see cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessages(System.String,System.String,System.String,System.Int32)"/> method was
            used to download headers for all messages in the inbox and build the message list where
            the user can click a particular message to view it completely. Once the user selected
            the message to be viewed, the application passes its index in the message list as
            a value of <paramref name="index"/> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32,System.Int32)"/> method
            to download the selected message (if the message list index is zero-based, the developer
            should also add 1 to the <paramref name="index"/> value).</para>
            <note>Static methods still require the valid license key be assigned to <see cref="P:MailBee.Pop3Mail.Pop3.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>This sample downloads the first message in the inbox and saves it as .EML file to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = Pop3.QuickDownloadMessage("pop.server.com",
            	"login", "password", 1);
            msg.SaveMessage(@"C:\Temp\message.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop.server.com", _
            	"login", "password", 1)
            msg.SaveMessage("C:\Temp\message.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessages(System.String,System.String,System.String,System.Int32)">
            <summary>
            Downloads all the messages (entire messages or message headers only) in the inbox on the server,
            in a single line of code.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="bodyLineCount">Number of lines of a message source body to download
            in addition to a message source header, or -1 to download entire messages,
            or 0 to download message headers only.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded messages.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the inbox.</para>
            <para>If the POP3 server supports pipelining, this method will download all the messages in a single network operation,
            which greatly increases performance and reduces network traffic.</para>
            <note>Static methods still require the valid license key be assigned to <see cref="P:MailBee.Pop3Mail.Pop3.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>This sample downloads headers of all the messages in the inbox, and
            displays indices (ordinal positions in the inbox) of all messages which likely
            have any attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessageCollection msgs = Pop3.QuickDownloadMessages("pop.server.com",
            	"login", "password", 0);
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	<span style="color: blue;">if</span> (msg.HasAttachments)
            	{
            		Console.WriteLine("Message #" + msg.IndexOnServer +
            			" seems to have any attachments");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = Pop3.QuickDownloadMessages("pop.server.com", _
            	"login", "password", 0)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	<span style="color: blue;">If</span> msg.HasAttachments <span style="color: blue;">Then</span>
            		Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; _
            			" seems to have any attachments")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>	
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessages(System.String,System.String,System.String)">
            <summary>
            Completely downloads all the messages in the inbox on the server,
            in a single line of code.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded messages.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the inbox.</para>
            <para>If the POP3 server supports pipelining, this method will download all the messages in a single network operation,
            which greatly increases performance and reduces network traffic.</para>
            <note>Static methods still require the valid license key be assigned to <see cref="P:MailBee.Pop3Mail.Pop3.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>This sample downloads all the messages in the inbox, and
            displays the index (an ordinal position in the inbox) and the attachments
            count of each message which has any attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessageCollection msgs = Pop3.QuickDownloadMessages("pop.server.com",
            	"login", "password");
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	<span style="color: blue;">if</span> (msg.HasAttachments)
            	{
            		Console.WriteLine("Message #" + msg.IndexOnServer +
            			" has " + msg.Attachments.Count + " attachment(s)");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = Pop3.QuickDownloadMessages("pop.server.com", _
            	"login", "password")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	<span style="color: blue;">If</span> msg.HasAttachments <span style="color: blue;">Then</span>
            		Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; _
            			" has " &amp; msg.Attachments.Count &amp; " attachment(s)")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.LicenseKey">
            <summary>
            Sets the license key.
            </summary>
            <value>A string value which contains the license key which unlocks the component.
            This property is write-only.</value>
            <exception cref="T:MailBee.MailBeeLicenseException">The license key is invalid.</exception>
            <remarks>
            <para>You can unlock the component by either setting this property to the valid
            permanent or trial license key or by adding MailBee.Pop3Mail.Pop3.LicenseKey key
            in app.config, web.config, or machine.config file.</para>
            <para>This property is static (<b>Shared</b> in Visual Basic). If not set in the
            config file, this property must be set before creating any instances of
            <see cref="T:MailBee.Pop3Mail.Pop3"/> class.</para>
            </remarks>
            <example>Setting this property and connecting to a POP3 server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3.LicenseKey = "Permanent or trial license key here";
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            Pop3.LicenseKey = "Permanent or trial license key here"
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Disconnect()
            </code>
            </example>
            <example>Setting the license key in the config file and connecting to a POP3 server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("mail.domain.com");
            pop.Disconnect();
            
            <span style="color: green;">// XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.Pop3Mail.Pop3.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">// In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Connect("mail.domain.com")
            pop.Disconnect()
            
            <span style="color: green;">' XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.Pop3Mail.Pop3.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">' In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.TrialDaysLeft">
            <summary>
            Gets the number of days left to the date of the trial license key expiration.
            </summary>
            <value>An integer value which contains the number of days left to the date of
            the trial license key expiration, or -1 if the permanent license key is used.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the calls of the event handlers.
            </summary>
            <value>A reference to the object on whose thread the events should be raised.
            The default value is a null reference (<b>Nothing</b> in Visual Basic) which tells
            MailBee to determine the appropriate marshalling object automatically.</value>
            <remarks>Usually, you do not need to set this property because MailBee can
            automatically marshal events to proper threads.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.Version">
            <summary>
            Gets the version of the MailBee assembly.
            </summary>
            <value>A string which contains the version of the MailBee assembly in
            MajorVersion.MinorVersion.Revision.Build format (like "3.0.0.35").</value>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.Disposed">
            <summary>
            Occurs after the component was disposed.
            </summary>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.Site">
            <summary>
            Gets or sets the object to be used as a site for the component.
            </summary>
            <value>A reference to the object to be used as a site for the component.
            The default value is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>The developer does not need to set this property. It's used by RAD
            tools such as form designers.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.IsBusy">
            <summary>
            Indicates whether the component is performing a lengthy operation.
            </summary>
            <value>A bool value indicating whether the component is busy because it's doing
            some work.</value>
            <remarks>When the component is busy, it's not possible to start another lengthy operation.
            For instance, if the component connects to the server or transfers data over the network,
            no other network operation can be started at this time. Any attempt to do
            so will result in <see cref="T:MailBee.MailBeeInvalidStateException"/>.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.IsAborted">
            <summary>
            Indicates whether <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> method has been called for the component.
            </summary>
            <value><b>true</b> if <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> method has already been called;
            otherwise, <b>false</b>. The default value is <b>false</b>.</value>
            <remarks>
            <para>In aborted state, the component does not raise any events, and most methods, if called,
            will immediately return an error or throw an exception.</para>
            <para><see cref="M:MailBee.Pop3Mail.Pop3.ResetState"/> method can be used to restore the component
            back to operational state.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.LastResult">
            <summary>
            Gets a numeric code of the last error.
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.Log">
            <summary>
            Gets the object used for logging MailBee activities into a file or memory buffer.
            </summary>
            <value>A reference to the object used for logging MailBee activities into a file or memory buffer.</value>
            <remarks>This property is never a null reference (<b>Nothing</b> in Visual Basic)
            even if logging is not used.</remarks>
            <example>This sample sets file logging on and sets the filename of the log file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Log.Enabled = <span style="color: blue;">true</span>;
            pop.Log.Filename = @"C:\log.txt";
            pop.Connect("mail.domain.com");
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.Log.Enabled = <span style="color: blue;">True</span>
            pop.Log.Filename = "C:\log.txt"
            pop.Connect("mail.domain.com")
            pop.Disconnect()
            </code>
            </example>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.RaiseEvents">
            <summary>
            Gets or sets whether the component will raise any events. 
            </summary>
            <value>A bool value indicating whether the component will raise any events.
            The default value is <b>true</b>.</value>
            <remarks>If this propery is <b>false</b>, <i>OnEventName</i> methods will also not be called.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop">
            <summary>
            Gets or sets whether the events will be raised on the message loop of the application
            or not.
            </summary>
            <value>A bool value indicating whether the events will be raised on the message loop
            of the application or not. The default value is <b>true</b>.</value>
            <remarks>This property is only meaningful in WinForms applications where events and
            asynchronous methods are used, and the developer needs to block the message loop for some reason
            (usually, to wait for completion of an asynchronous method). In this case, you should set
            this property to <b>false</b> and use <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method to wait until
            asynchronous MailBee method is finished. See <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method for more information.
            <para>The above also applies to synchronous methods if they are called on worker (non-UI) threads.
            If, however, the application does not use asynchronous methods of MailBee (and never calls its
            synchronous methods on non-UI threads), it should NOT attempt to set <see cref="P:MailBee.Pop3Mail.Pop3.RaiseEventsViaMessageLoop"/>
            to <b>false</b> or use <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method.</para>
            <note>If you develop non-WinForms application (such as web or console application),
            you do not need to set this property or use <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method regardless
            if the application uses worker threads or not.</note>
            Another alternative (in WinForms application) to using <see cref="M:MailBee.Pop3Mail.Pop3.Wait"/> method
            is to never block the application message loop. See <see cref="M:MailBee.Pop3Mail.Pop3.BeginExecuteCustomCommand(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            method for the code example.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.RequestEncoding">
            <summary>
            Gets or sets the encoding used to convert a string into a bytes stream
            which is then sent to the server.
            </summary>
            <value>A reference to the encoding object used to convert a string into a bytes stream
            which is then sent to the server. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.ResponseEncoding">
            <summary>
            Gets or sets the encoding used to convert a byte data received from the server into a string.
            </summary>
            <value>A reference to the encoding object used to convert a byte data received from the server
            into a string. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.ThrowExceptions">
            <summary>
            Gets or sets whether the component will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the component will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the component methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Pop3Mail.Pop3.LastResult"/>,
            <see cref="M:MailBee.Pop3Mail.Pop3.GetErrorDescription"/>, <see cref="M:MailBee.Pop3Mail.Pop3.GetServerResponse"/>,
            <see cref="M:MailBee.Pop3Mail.Pop3.GetSocketError"/> members to get more information about the error.
            <note>Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee usage will still be thrown. Typical examples of such
            errors are: passing invalid arguments to methods, calling methods or settings
            properties in illegal state (for instance, an attempt to start an asynchronous
            method while another asynchronous method is not yet finished), etc. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be
            supressed.</note>
            <para>
            <see cref="P:MailBee.Pop3Mail.Pop3.ThrowExceptions"/> property does not control whether to throw exceptions which occur due to
            logging errors (such as "log file cannot be written to", etc). To control whether logging
            exceptions should be thrown, the developer can use <see cref="P:MailBee.Logger.DisableOnException">Log.DisableOnException</see>
            property.
            </para>
            </remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.SslMode">
            <summary>
            Gets or sets how the component should establish TLS/SSL connection with the mail server.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.SslProtocol"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.StartTls"/>
            </summary>
            <value>One of <see cref="T:MailBee.Security.SslStartupMode"/> values specifying if and how
            the component should establish TLS/SSL connection with the mail server. The default value is
            <see cref="F:MailBee.Security.SslStartupMode.Manual"/> which means the connection won't be established
            in TLS/SSL mode unless the developer manually calls <see cref="M:MailBee.Pop3Mail.Pop3.StartTls"/> method.</value>
            <remarks>
            <note>Not all mail servers support TLS/SSL functionality. Also, some servers support only TLS or only SSL
            (see <see cref="P:MailBee.Pop3Mail.Pop3.SslProtocol"/> topic for details).</note>
            </remarks>
            <example>This sample connects to the mail server on regular port 110, then switches
            the connection into TLS/SSL mode using STLS command, logs in the mail account and downloads the
            first mail message in this account.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Security;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.SslMode = SslStartupMode.UseStartTls;
            pop.Connect("mail.domain.com");
            pop.Login("jdoe", "secret");
            <span style="color: blue;">if</span> (pop.InboxMessageCount &gt; 0)
            {
            	MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            	Console.WriteLine(msg.Attachments.Count + " attachment(s) in the message.");
            }
            pop.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Security
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            pop.SslMode = SslStartupMode.UseStartTls
            pop.Connect("mail.domain.com")
            pop.Login("jdoe", "secret")
            <span style="color: blue;">If</span> pop.InboxMessageCount &gt; 0 <span style="color: blue;">Then</span>
            	MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            	Console.WriteLine(msg.Attachments.Count &amp; " attachment(s) in the message.");
            <span style="color: blue;">End If</span>
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.SslProtocol">
            <summary>
            Gets or sets the security protocol to be used for performing TLS/SSL negotiation and data encryption.
            </summary>
            <value>One of <see cref="T:MailBee.Security.SecurityProtocol"/> values specifying the security protocol to be used for performing TLS/SSL negotiation and data encryption.
            The default value is <see cref="F:MailBee.Security.SecurityProtocol.Auto"/>.</value>
            <remarks>The default value allows MailBee to select the best (the mosy secure) protocol supported by
            the mail server. However, if the mail server does not support automatic protocol negotiation,
            it will likely close the connection (<see cref="T:MailBee.MailBeeSocketResetException"/> will be thrown). In this case,
            the application should set this property to non-<see cref="F:MailBee.Security.SecurityProtocol.Auto"/> value (such as
            <see cref="F:MailBee.Security.SecurityProtocol.Tls1"/>).</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.SslCertificates">
            <summary>
            Provides access to the client and server SSL certificate settings.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="T:MailBee.Security.CertificateStore"/>
            </summary>
            <value>A reference to the client and server SSL certificate settings.</value>
            <remarks>
            <para>The following code should be used to access the server certificate (assuming <c>pop</c> is
            a <see cref="T:MailBee.Pop3Mail.Pop3"/> component instance): <c>pop.SslCertificates.Server</c>. To set the client
            certificate, the developer should assign <c>pop.SslCertificates.Client</c> property.</para>
            <note>Prior to starting using certificates, the developer must set <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property of
            <see cref="T:MailBee.Security.Powerup"/> class (this can be accomplished in the code, in the config file such as app.config,
            or in the registry).</note>
            </remarks>
            <example>
            This console sample establishes secure connection with the mail server using the private certificate
            of the client and then displays various information about the server certificate. The client certificate
            is taken from a file (MailBee can also read certificates from the registry, see <see cref="T:MailBee.Security.CertificateStore"/> class description for
            details).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            		pop.SslMode = SslStartupMode.OnConnect;
            		pop.SslCertificates.Client = <span style="color: blue;">new</span> Certificate(@"C:\my.pfx", CertFileType.Pfx, "secret");
            		pop.Connect("mail.domain.com", 995);
            		Console.WriteLine("The server certificate info");
            		Console.WriteLine("===========================");
            		Console.WriteLine("Issued by:	" + pop.SslCertificates.Server.IssuedBy);
            		Console.WriteLine("Issued to:	" + pop.SslCertificates.Server.IssuedTo);
            		Console.WriteLine("Valid from:	" + pop.SslCertificates.Server.ValidFromDate);
            		Console.WriteLine("Valid to:	" + pop.SslCertificates.Server.ValidToDate);
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            		pop.SslMode = SslStartupMode.OnConnect
            		pop.SslCertificates.Client = <span style="color: blue;">New</span> Certificate("C:\my.pfx", CertFileType.Pfx, "secret")
            		pop.Connect("mail.domain.com", 995)
            		Console.WriteLine("The server certificate info")
            		Console.WriteLine("===========================")
            		Console.WriteLine("Issued by:	" &amp; pop.SslCertificates.Server.IssuedBy)
            		Console.WriteLine("Issued to:	" &amp; pop.SslCertificates.Server.IssuedTo)
            		Console.WriteLine("Valid from:	" &amp; pop.SslCertificates.Server.ValidFromDate)
            		Console.WriteLine("Valid to:	" &amp; pop.SslCertificates.Server.ValidToDate)
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.Proxy">
            <summary>
            Provides access to the settings which allow MailBee to connect to a mail server via a proxy server.
            <seealso cref="T:MailBee.Proxy.ProxyServer"/>
            </summary>
            <value>A reference to the proxy server settings.</value>
            <remarks>
            By default, proxy server is not used. The developer can change this to make MailBee use SOCKS4, SOCKS5, or HTTP proxy server.
            This is useful when a firewall prohibits direct connections with a mail server but permits connections via a proxy.
            </remarks>
            <example>
            This console sample establishes connection with the mail server via an HTTP proxy server which requires clients to authenticate themselves.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Proxy;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            		pop.Proxy.Name = "proxy.server.com";
            		pop.Proxy.Protocol = ProxyProtocol.Http;
            		pop.Proxy.Port = 808;
            		pop.Proxy.AccountName = "jdoe";
            		pop.Proxy.Password = "secret";
            		pop.Connect("mail.company.com");
            		Console.WriteLine("Connected via a proxy server");
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Proxy
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            		pop.Proxy.Name = "proxy.server.com"
            		pop.Proxy.Protocol = ProxyProtocol.Http
            		pop.Proxy.Port = 808
            		pop.Proxy.AccountName = "jdoe"
            		pop.Proxy.Password = "secret"
            		pop.Connect("mail.company.com")
            		Console.WriteLine("Connected via a proxy server")
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.IsConnected">
            <summary>
            Indicates whether the component is connected to the server.
            </summary>
            <value><b>true</b> if the component is connected to the server; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.IsSslConnection">
            <summary>
            Indicates whether the current connection (if any) if secured with TLS/SSL layer.
            </summary>
            <value><b>true</b> if the current connection is TLS/SSL; <b>false</b> if the connection is not secure.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.IsLoggedIn">
            <summary>
            Indicates whether the component has already successfully authenticated on the server
            and logged in the user account.
            </summary>
            <value><b>true</b> if already logged in the user account on the server; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.Timeout">
            <summary>
            Gets or sets the amount of time (in milliseconds) the component will wait for a response from the server.
            </summary>
            <value>The amount of time (in milliseconds) the component will wait for data to be received from the server
            before returning an error, or zero to wait indefinitely. The default value is <see cref="P:MailBee.Global.DefaultTimeout"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><see cref="P:MailBee.Pop3Mail.Pop3.Timeout"/> is negative.</exception>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.InboxSize">
            <summary>
            Gets the total size (in bytes) occupied by all the messages in the inbox.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>
            </summary>
            <value>The total size (in bytes) occupied by all the messages in the inbox, or
            0 if not yet logged in the user account on the server.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.InboxMessageCount">
            <summary>
            Gets the number of messages in the inbox.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxSize"/>
            </summary>
            <value>The number of messages in the inbox, or
            0 if not yet logged in the user account on the server.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions">
            <summary>
            Gets or sets the status of whether MailBee will download the list of message
            sizes and/or the list of message lengths during logging in the inbox.
            </summary>
            <value>A set of flags indicating which elements of the inbox statistics must be
            downloaded immediately after the successful login operation. The default value is
            <see cref="F:MailBee.Pop3Mail.Pop3InboxPreloadOptions.None"/>.</value>
            <remarks>By default, MailBee automatically download the required elements
            the inbox statistics when appropriate. However, in some special cases, the developer
            may prefer to have this data preloaded. In such situation, this property must be set
            prior to <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method call.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.EnableLastDownloaded">
            <summary>
            Gets or sets whether MailBee should save currently downloaded messages in <see cref="P:MailBee.Pop3Mail.Pop3.LastDownloadedMessages"/> property.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.LastDownloadedMessages"/>
            </summary>
            <value>If <b>true</b>, any method of <see cref="T:MailBee.Pop3Mail.Pop3"/> component which receives mail messages or message headers (RETR or TOP responses) from the server
            (like <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)"/>, <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>, <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/>, and <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeader(System.Int32)"/>) will populate
            <see cref="P:MailBee.Pop3Mail.Pop3.LastDownloadedMessages"/> collection with <see cref="T:MailBee.Mime.MailMessage"/> objects received and parsed during the method execution;
            if <b>false</b>, <see cref="P:MailBee.Pop3Mail.Pop3.LastDownloadedMessages"/> property will always return a null reference (<b>Nothing</b> in Visual Basic).
            The default value is <b>false</b>.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3.LastDownloadedMessages">
            <summary>
            Gets the collection of the messages downloaded to the current moment.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.EnableLastDownloaded"/>
            </summary>
            <value>A reference to the collection of the mail messages downloaded to the current moment
            by the corresponding method of <see cref="T:MailBee.Pop3Mail.Pop3"/> component, or a null reference (<b>Nothing</b> in Visual Basic)
            if <see cref="P:MailBee.Pop3Mail.Pop3.EnableLastDownloaded"/> is <b>false</b> or no method receiving mail messages has already been called
            (or if such method failed prior to starting receiving messages).</value>
            <remarks>
            <note>This is an advanced property which serves special purposes. It's activated via setting
            <see cref="P:MailBee.Pop3Mail.Pop3.EnableLastDownloaded"/> prior to calling a method which requests mail messages from the server.</note>
            <para>This property can be used to get downloaded mail messages in the case if the
            corresponding method failed. <see cref="T:MailBee.Pop3Mail.Pop3"/> methods throw an exception or return
            a null reference on failure. Sometimes, however, the developer still wishes to get messages which
            had already been received to the moment of failure (for instance, if 100 messages had been received
            and error occured for message #101). In this case, the developer can use this property to get messages
            which had already been received and parsed to the moment of the failure.</para>
            <para>When this collection is not needed any longer, the developer should set <see cref="P:MailBee.Pop3Mail.Pop3.EnableLastDownloaded"/>
            to <b>false</b> to free the resources. Also, <see cref="P:MailBee.Pop3Mail.Pop3.LastDownloadedMessages"/> will be reset to a null reference
            with a new call of any method requesting mail messages from the server.</para>
            </remarks>
            <example>
            <para>This sample demonstrates reliable approach to downloading messages from a POP3 account.
            The code tolerates disconnections and other errors which may occur during downloading messages.
            If any problem occurs, the code reconnects to the server if needed and attempts to download the
            remaining messages (already downloaded messages are not downloaded again, however).
            Also, the code execution won't end up in an endless loop in the case of permanent errors
            (if no messages had been downloaded at all, the code won't try again).</para>
            <para>To simulate connection drops during the POP3 session, the code suddenly closes the connection
            during getting message data from the server.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">int</span>  traffic;
            	<span style="color: blue;">static</span> <span style="color: blue;">bool</span> downloadingMsgs;
            
            	<span style="color: green;">// We use Pop3.DataReceived event to simulate connection drop during</span>
            	<span style="color: green;">// getting message data from the server. We do this through closing</span>
            	<span style="color: green;">// the connection after 50000 bytes of message data has been received from the</span>
            	<span style="color: green;">// server. This may occur multiple times (for instance, if there is 1MB of mail</span>
            	<span style="color: green;">// in the inbox, the connection will be dropped about 20 times).</span>
            	<span style="color: green;">// If, however, there is a message larger than 50KB in the inbox, the download process</span>
            	<span style="color: green;">// will stop because it would otherwise end up in an endless loop (because this code</span>
            	<span style="color: green;">// always disconnects on getting 50-th KB of the data and it would never have received</span>
            	<span style="color: green;">// such message completely).</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> pop_DataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: blue;">if</span> (downloadingMsgs)
            		{
            			traffic += e.Data.Length;
            
            			<span style="color: green;">// Increase 50000 to a larger value if you wish to test this code with</span>
            			<span style="color: green;">// a mailbox containing large messages (larger than 50KB).</span>
            			<span style="color: blue;">if</span> (traffic &gt; 50000)
            			{
            				((Pop3)sender).Log.WriteLine("SIMULATE CONNECTION DROP");
            				((Pop3)sender).GetSocket().Close();
            			}
            		}
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Initialize Pop3 object and make it automatically load UIDs of all messages on the server.</span>
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            		pop.InboxPreloadOptions = Pop3InboxPreloadOptions.Uidl;
            
            		<span style="color: green;">// Enable logging POP3 session into a file. Useful for troubleshooting.</span>
            		<span style="color: green;">// Also, this log can be used to track the history of disconnections and</span>
            		<span style="color: green;">// reconnections during downloading messages.</span>
            		pop.Log.Filename = @"C:\log.txt";
            		pop.Log.Enabled = <span style="color: blue;">true</span>;
            		pop.Log.Clear();
            
            		<span style="color: green;">// Attach to a DataReceived event which will be used for simulating</span>
            		<span style="color: green;">// connection failures.</span>
            		pop.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(pop_DataReceived);
            
            		<span style="color: green;">// Will set it to true once either everything has been downloaded</span>
            		<span style="color: green;">// or a permanent error has occurred.</span>
            		<span style="color: blue;">bool</span> finished = <span style="color: blue;">false</span>;
            
            		<span style="color: green;">// Remember UID of the last message which had already been downloaded.</span>
            		<span style="color: green;">// After reconnecting, we'll download messages with UIDs corresponding to</span>
            		<span style="color: green;">// subsequent messages. For the first time, set it to null to indicate no</span>
            		<span style="color: green;">// messages had already been downloaded.</span>
            		<span style="color: blue;">string</span> lastUid = <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// We'll collect downloaded messages in this collection.</span>
            		MailMessageCollection msgs = <span style="color: blue;">new</span> MailMessageCollection();
            
            		<span style="color: green;">// Because we catch exceptions in this code but still want to know</span>
            		<span style="color: green;">// which error has occurred in the case of permanent failure, we remember</span>
            		<span style="color: green;">// the reason of it.</span>
            		MailBeeException permanentException = <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// Enable cache of messages downloaded during execution of the last method.</span>
            		pop.EnableLastDownloaded = <span style="color: blue;">true</span>;
            
            		<span style="color: blue;">do</span>
            		{
            			<span style="color: green;">// Prevent connection drop simulation when not downloading messages.</span>
            			downloadingMsgs = <span style="color: blue;">false</span>;
            
            			<span style="color: green;">// Connect or reconnect to the server if required (and login/select inbox).</span>
            			<span style="color: blue;">if</span> (!pop.IsConnected)
            			{
            				pop.Connect("pop.company.com");
            			}
            			<span style="color: blue;">if</span> (!pop.IsLoggedIn)
            			{
            				pop.Login("jdoe", "secret");
            			}
            
            			traffic = 0;
            
            			<span style="color: blue;">try</span>
            			{
            				<span style="color: green;">// Enable connection drop simulation.</span>
            				downloadingMsgs = <span style="color: blue;">true</span>;
            
            				<span style="color: blue;">int</span> lastMsgNumber = 0;
            				<span style="color: blue;">if</span> (lastUid != <span style="color: blue;">null</span>)
            				{
            					lastMsgNumber = pop.GetMessageIndexFromUid(lastUid);
            				}
            
            				<span style="color: blue;">if</span> (lastMsgNumber &lt; pop.InboxMessageCount)
            				{
            					<span style="color: green;">// Download the remaining messages.</span>
            					pop.DownloadEntireMessages(lastMsgNumber + 1, -1);
            					msgs.Add(pop.LastDownloadedMessages);
            				}
            
            				<span style="color: green;">// Disable connection drop simulation.</span>
            				downloadingMsgs = <span style="color: blue;">false</span>;
            
            				<span style="color: green;">// All's done.</span>
            				finished = <span style="color: blue;">true</span>;
            			}
            			<span style="color: blue;">catch</span> (MailBeeException e)
            			{
            				downloadingMsgs = <span style="color: blue;">false</span>;
            
            				<span style="color: blue;">if</span> (pop.LastDownloadedMessages == <span style="color: blue;">null</span> ||
            					pop.LastDownloadedMessages.Count == 0)
            				{
            					<span style="color: green;">// Haven't got any messages. Assume this is permanent error</span>
            					<span style="color: green;">// (otherwise, we could get endless loop).</span>
            					finished = <span style="color: blue;">true</span>;
            					permanentException = e;
            				}
            				<span style="color: blue;">else</span>
            				{
            					<span style="color: green;">// Error has occurred but some messages have still been</span>
            					<span style="color: green;">// downloaded. We'll proceed with getting the rest of messages.</span>
            					msgs.Add(pop.LastDownloadedMessages);
            
            					<span style="color: green;">// Get last UID from the value of UID of the last downloaded message.</span>
            					lastUid = (<span style="color: blue;">string</span>)pop.LastDownloadedMessages[pop.LastDownloadedMessages.Count - 1].UidOnServer;
            				}
            			}
            		} <span style="color: blue;">while</span> (!finished);
            
            		<span style="color: green;">// Clear and disable the cache of the last downloaded messages.</span>
            		pop.EnableLastDownloaded = <span style="color: blue;">false</span>;
            
            		<span style="color: blue;">if</span> (pop.IsConnected)
            		{
            			<span style="color: green;">// Attempt to disconnect (we need to catch MailBeeSocketObjectDisposedException</span>
            			<span style="color: green;">// here because we simulated connection drop bypassing MailBee (using Socket.Close()</span>
            			<span style="color: green;">// method) and Pop3.IsConnected could remain true). In real world apps, this</span>
            			<span style="color: green;">// is not required and Pop3.IsConnected always reflects the actual state of</span>
            			<span style="color: green;">// the connection.</span>
            			<span style="color: blue;">try</span>
            			{
            				pop.Disconnect();
            			}
            			<span style="color: blue;">catch</span> (MailBeeSocketObjectDisposedException) {}
            		}
            
            		<span style="color: green;">// Display UIDs of the downloaded messages.</span>
            		<span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            		{
            			Console.Write((<span style="color: blue;">string</span>)msg.UidOnServer + " ");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> traffic <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">Shared</span> downloadingMsgs <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span>
            
            	<span style="color: green;">' We use Pop3.DataReceived event to simulate connection drop during</span>
            	<span style="color: green;">' getting message data from the server. We do this through closing</span>
            	<span style="color: green;">' the connection after 50000 bytes of message data has been received from the</span>
            	<span style="color: green;">' server. This may occur multiple times (for instance, if there is 1MB of mail</span>
            	<span style="color: green;">' in the inbox, the connection will be dropped about 20 times).</span>
            	<span style="color: green;">' If, however, there is a message larger than 50KB in the inbox, the download process</span>
            	<span style="color: green;">' will stop because it would otherwise end up in an endless loop (because this code</span>
            	<span style="color: green;">' always disconnects on getting 50-th KB of the data and it would never have received</span>
            	<span style="color: green;">' such message completely).</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> pop_DataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: blue;">If</span> downloadingMsgs <span style="color: blue;">Then</span>
            			traffic += e.Data.Length
            
            			<span style="color: green;">' Increase 50000 to a larger value if you wish to test this code with</span>
            			<span style="color: green;">' a mailbox containing large messages (larger than 50KB).</span>
            			<span style="color: blue;">If</span> traffic &gt; 50000 <span style="color: blue;">Then</span>
            				<span style="color: blue;">CType</span>(sender, Pop3).Log.WriteLine("SIMULATE CONNECTION DROP")
            				<span style="color: blue;">CType</span>(sender, Pop3).GetSocket().Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Initialize Pop3 object and make it automatically load UIDs of all messages on the server.</span>
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> Pop3 = <span style="color: blue;">New</span> Pop3
            		pop.InboxPreloadOptions = Pop3InboxPreloadOptions.Uidl
            
            		<span style="color: green;">' Enable logging POP3 session into a file. Useful for troubleshooting.</span>
            		<span style="color: green;">' Also, this log can be used to track the history of disconnections and</span>
            		<span style="color: green;">' reconnections during downloading messages.</span>
            		pop.Log.Filename = "C:\log.txt"
            		pop.Log.Enabled = <span style="color: blue;">True</span>
            		pop.Log.Clear()
            
            		<span style="color: green;">' Attach to a DataReceived event which will be used for simulating</span>
            		<span style="color: green;">' connection failures.</span>
            		<span style="color: blue;">AddHandler</span> pop.DataReceived, <span style="color: blue;">AddressOf</span> pop_DataReceived
            
            		<span style="color: green;">' Will set it to true once either everything has been downloaded</span>
            		<span style="color: green;">' or a permanent error has occurred.</span>
            		<span style="color: blue;">Dim</span> finished <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            		<span style="color: green;">' Remember UID of the last message which had already been downloaded.</span>
            		<span style="color: green;">' After reconnecting, we'll download messages with UIDs corresponding to</span>
            		<span style="color: green;">' subsequent messages. For the first time, set it to null to indicate no</span>
            		<span style="color: green;">' messages had already been downloaded.</span>
            		<span style="color: blue;">Dim</span> lastUid <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">Nothing</span>
            
            		<span style="color: green;">' We'll collect downloaded messages in this collection.</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = <span style="color: blue;">New</span> MailMessageCollection
            
            		<span style="color: green;">' Because we catch exceptions in this code but still want to know</span>
            		<span style="color: green;">' which error has occurred in the case of permanent failure, we remember</span>
            		<span style="color: green;">' the reason of it.</span>
            		<span style="color: blue;">Dim</span> permanentException <span style="color: blue;">As</span> MailBeeException = <span style="color: blue;">Nothing</span>
            
            		<span style="color: green;">' Enable cache of messages downloaded during execution of the last method.</span>
            		pop.EnableLastDownloaded = <span style="color: blue;">True</span>
            
            		<span style="color: blue;">Do</span>
            			<span style="color: green;">' Prevent connection drop simulation when not downloading messages.</span>
            			downloadingMsgs = <span style="color: blue;">False</span>
            
            			<span style="color: green;">' Connect or reconnect to the server if required (and login/select inbox).</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> pop.IsConnected <span style="color: blue;">Then</span>
            				pop.Connect("pop.company.com")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> pop.IsLoggedIn <span style="color: blue;">Then</span>
            				pop.Login("jdoe", "secret")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            			traffic = 0
            
            			<span style="color: blue;">Try</span>
            				<span style="color: green;">' Enable connection drop simulation.</span>
            				downloadingMsgs = <span style="color: blue;">True</span>
            
            				<span style="color: blue;">Dim</span> lastMsgNumber <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            				<span style="color: blue;">If</span> <span style="color: blue;">Not</span> lastUid <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            					lastMsgNumber = pop.GetMessageIndexFromUid(lastUid)
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: blue;">If</span> lastMsgNumber &lt; pop.InboxMessageCount <span style="color: blue;">Then</span>
            					<span style="color: green;">' Download the remaining messages.</span>
            					pop.DownloadEntireMessages(lastMsgNumber + 1, -1)
            					msgs.Add(pop.LastDownloadedMessages)
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: green;">' Disable connection drop simulation.</span>
            				downloadingMsgs = <span style="color: blue;">False</span>
            
            				<span style="color: green;">' All's done.</span>
            				finished = <span style="color: blue;">True</span>
            			<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            				downloadingMsgs = <span style="color: blue;">False</span>
            
            				<span style="color: blue;">If</span> pop.LastDownloadedMessages <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Or</span> pop.LastDownloadedMessages.Count = 0 <span style="color: blue;">Then</span>
            					<span style="color: green;">' Haven't got any messages. Assume this is permanent error</span>
            					<span style="color: green;">' (otherwise, we could get endless loop).</span>
            					finished = <span style="color: blue;">True</span>
            					permanentException = e
            				<span style="color: blue;">Else</span>
            					<span style="color: green;">' Error has occurred but some messages have still been</span>
            					<span style="color: green;">' downloaded. We'll proceed with getting the rest of messages.</span>
            					msgs.Add(pop.LastDownloadedMessages)
            
            					<span style="color: green;">' Get last UID from the value of UID of the last downloaded message.</span>
            					lastUid = <span style="color: blue;">CType</span>(pop.LastDownloadedMessages(pop.LastDownloadedMessages.Count - 1).UidOnServer, <span style="color: blue;">String</span>)
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            		<span style="color: blue;">Loop</span> <span style="color: blue;">While</span> <span style="color: blue;">Not</span> finished
            
            		<span style="color: green;">' Clear and disable the cache of the last downloaded messages.</span>
            		pop.EnableLastDownloaded = <span style="color: blue;">False</span>
            
            		<span style="color: blue;">If</span> pop.IsConnected <span style="color: blue;">Then</span>
            			<span style="color: green;">' Attempt to disconnect (we need to catch MailBeeSocketObjectDisposedException</span>
            			<span style="color: green;">' here because we simulated connection drop bypassing MailBee (using Socket.Close()</span>
            			<span style="color: green;">' method) and Pop3.IsConnected could remain true). In real world apps, this</span>
            			<span style="color: green;">' is not required and Pop3.IsConnected always reflects the actual state of</span>
            			<span style="color: green;">' the connection.</span>
            			<span style="color: blue;">Try</span>
            				pop.Disconnect()
            			<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeSocketObjectDisposedException
            			<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Display UIDs of the downloaded messages.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">In</span> msgs
            			Console.Write(<span style="color: blue;">CType</span>(msg.UidOnServer, <span style="color: blue;">String</span>) &amp; " ")
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.ErrorOccurred">
            <summary>
            Occurs when the <see cref="T:MailBee.MailBeeException"/> is thrown.
            </summary>
            <remarks>
            <para>When MailBee encounters any error, it throws the <see cref="T:MailBee.MailBeeException"/>.
            However, MailBee can trap this exception if the error was not critical. For instance,
            if the POP3 server responds with a negative reply to an optional POP3 command (such as
            CAPA), the <see cref="T:MailBee.MailBeeException"/> will be thrown and then trapped by MailBee itself,
            but no exception will be thrown to the application code. Such errors are called <i>warnings</i>.</para>
            <para><see cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred"/> event allows the developer to track both warnings and critical
            errors because it's raised for a particular exception even if MailBee will trap this
            exception and do not pass it to the application code.</para>
            </remarks>
            <example>This sample logs all the warnings and critical errors issued during the POP3 session into the console.
            If the connection succeeds and the POP3 server does support CAPA command, no output will be produced.
            The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: green;">// Check whether the error is critical or not.</span>
            		<span style="color: blue;">if</span> (e.IsFinalError)
            		{
            			<span style="color: green;">// Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">// After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">// throw the same exception to the application code.</span>
            			Console.WriteLine("CRITICAL ERROR: " + e.Reason.Message);
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">// After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">// try another methods to accomplish the current task.</span>
            			Console.WriteLine("WARNING: " + e.Reason.Message);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the ErrorOccurred event.</span>
            		pop.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		<span style="color: green;">// Connect to the server.</span>
            		pop.Connect("mail.domain.com");
            
            		<span style="color: green;">// Request any data which needs CAPA command to be issued </span>
            		<span style="color: green;">// in order to obtain the required information. The list of supported </span>
            		<span style="color: green;">// authentication methods can serve this purpose. If CAPA command </span>
            		<span style="color: green;">// fails (but the server responds, i.e. the connection itself is still valid),</span>
            		<span style="color: green;">// MailBee will not throw any exception to the application code  </span>
            		<span style="color: green;">// (but ErrorOccurred event will still be raised) and will try to issue </span>
            		<span style="color: green;">// AUTH command to get the list of supported authentication methods.</span>
            		<span style="color: green;">// If AUTH command fails too, it's still not a critical error. SASL </span>
            		<span style="color: green;">// authentication methods will just not be available.</span>
            		AuthenticationMethods authMethods = pop.GetSupportedAuthMethods();
            
            		<span style="color: green;">// Close the connection</span>
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> Pop3Mail
            
            <span style="color: blue;">Public Class</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: green;">' Check whether the error is critical or not</span>
            		<span style="color: blue;">If</span> e.IsFinalError <span style="color: blue;">Then</span>
            			<span style="color: green;">' Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">' After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">' throw the same exception to the application code.</span>
            			Console.WriteLine("CRITICAL ERROR: " &amp; e.Reason.Message)
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">' After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">' try another methods to accomplish the current task.</span>
            			Console.WriteLine("WARNING: " &amp; e.Reason.Message)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the ErrorOccurred event.</span>
            		<span style="color: blue;">AddHandler</span> pop.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: green;">' Connect to the server.</span>
            		pop.Connect("mail.domain.com")
            
            		<span style="color: green;">' Request any data which needs CAPA command to be issued </span>
            		<span style="color: green;">' in order to obtain the required information. The list of supported </span>
            		<span style="color: green;">' authentication methods can serve this purpose. If CAPA command </span>
            		<span style="color: green;">' fails (but the server responds, i.e. the connection itself is still valid),</span>
            		<span style="color: green;">' MailBee will not throw any exception to the application code </span>
            		<span style="color: green;">' (but ErrorOccurred event will still be raised) and will try to issue </span>
            		<span style="color: green;">' AUTH command to get the list of supported authentication methods.</span>
            		<span style="color: green;">' If AUTH command fails too, it's still not a critical error. SASL </span>
            		<span style="color: green;">' authentication methods will just not be available.</span>
            		<span style="color: blue;">Dim</span> authMethodrs <span style="color: blue;">As</span> AuthenticationMethods = pop.GetSupportedAuthMethods()
            
            		<span style="color: green;">' Close the connection.</span>
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.LogNewEntry">
            <summary>
            Occurs when an entry is written into the log file (or into the memory buffer
            if <see cref="P:MailBee.Pop3Mail.Pop3.Log">Pop3.Log</see>.<see cref="P:MailBee.Logger.MemoryLog"/> is <b>true</b>).
            </summary>
            <remarks>
            <para>This event is raised only if logging is turned on (<see cref="P:MailBee.Logger.Enabled"/> is <b>true</b>).</para>
            <para>MailBee raises this event BEFORE adding the entry into the the log. Since many
            properties of <see cref="P:MailBee.LogNewEntryEventArgs.NewEntry"/> object are editable, the
            developer can change the data MailBee will put into the log or even cancel logging the current
            entry at all. This may be useful the developer wishes to log only those entires
            which meet certain criteria.</para>
            <note>Entries added by the developer (through <see cref="M:MailBee.Logger.WriteLine(System.String)"/>
            method call) do not cause this event to be raised. Thus, it's safe to add user-defined log entries
            even in the <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry"/> event handler itself. This does not cause endless recursion which
            would otherwise occur if <see cref="M:MailBee.Logger.WriteLine(System.String)"/> method called in
            <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry"/> event handler raised this event again.</note>
            </remarks>
            <example>This sample enables logging the POP3 session into a file, and logs only
            those entries which indicate any data traffic between the client (MailBee) and the server.
            Other entries are discarded, and user-defined log entry is added instead.
            The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// LogNewEntry event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLogNewEntry(<span style="color: blue;">object</span> sender, LogNewEntryEventArgs e)
            	{
            		<span style="color: blue;">if</span> ( !(e.NewEntry.MessageType == LogMessageType.Recv ||
            			e.NewEntry.MessageType == LogMessageType.Send) )
            		{
            			<span style="color: green;">// Do not add this entry if it does not indicate any data transfer,</span>
            			<span style="color: green;">// and put our own message instead.</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">false</span>;
            			((Pop3)sender).Log.WriteLine("UNWANTED MESSAGE REMOVED");
            
            			<span style="color: green;">// Note: we could produce similar results just by writing new values</span>
            			<span style="color: green;">// into MessageText and MessageComment properties of the original entry.</span>
            			<span style="color: green;">// The code above uses Log.WriteLine method just to show how to add new</span>
            			<span style="color: green;">// entries in the event handler itself. You may comment 2 code lines above</span>
            			<span style="color: green;">// and uncomment 2 code lines below to use the alternate approach.</span>
            			<span style="color: green;">//</span>
            			<span style="color: green;">// e.NewEntry.MessageText = "UNWANTED MESSAGE REMOVED";</span>
            			<span style="color: green;">// e.NewEntry.MessageComment = string.Empty;</span>
            		}
            	}
            
            	<span style="color: green;">// The actual code</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Enable logging the POP3 session into a file.</span>
            		pop.Log.Enabled = <span style="color: blue;">true</span>;
            		pop.Log.Filename = @"C:\Temp\log.txt";
            		pop.Log.Clear();
            
            		<span style="color: green;">// Subscribe to the LogNewEntry event.</span>
            		pop.LogNewEntry += <span style="color: blue;">new</span> LogNewEntryEventHandler(OnLogNewEntry);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Public</span> <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' LogNewEntry event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLogNewEntry(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LogNewEntryEventArgs)
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> (e.NewEntry.MessageType = LogMessageType.Recv <span style="color: blue;">Or</span> _
            			e.NewEntry.MessageType = LogMessageType.Send) <span style="color: blue;">Then</span>
            			<span style="color: green;">' Do not add this entry if it does not indicate any data transfer,</span>
            			<span style="color: green;">' and put our own message instead.</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">False</span>
            			sender.Log.WriteLine("UNWANTED MESSAGE REMOVED");
            
            			<span style="color: green;">' Note: we could produce similar results just by writing new values</span>
            			<span style="color: green;">' into MessageText and MessageComment properties of the original entry.</span>
            			<span style="color: green;">' The code above uses Log.WriteLine method just to show how to add new</span>
            			<span style="color: green;">' entries in the event handler itself. You may comment 2 code lines above</span>
            			<span style="color: green;">' and uncomment 2 code lines below to use the alternate approach.</span>
            			<span style="color: green;">'</span>
            			<span style="color: green;">' e.NewEntry.MessageText = "UNWANTED MESSAGE REMOVED"</span>
            			<span style="color: green;">' e.NewEntry.MessageComment = String.Empty</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Enable logging the POP3 session into a file.</span>
            		pop.Log.Enabled = <span style="color: blue;">True</span>
            		pop.Log.Filename = "C:\Temp\log.txt"
            		pop.Log.Clear()
            
            		<span style="color: green;">' Subscribe to the LogNewEntry event.</span>
            		<span style="color: blue;">AddHandler</span> pop.LogNewEntry, <span style="color: blue;">AddressOf</span> OnLogNewEntry
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.DataReceived">
            <summary>
            Occurs when data is received from the POP3 server.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/>
            <seealso cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/>
            </summary>
            <remarks>
            <para>Unlike <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/> event, occurrence of this event
            indicates receiving POP3-related data only. For instance, if the transmission channel
            is SSL-encrypted, <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/> event indicates receiving
            of encrypted data, while <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> will be raised later
            (after decrypting the data). If the transmission channel is not encrypted or otherwise
            scrambled, <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> and <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/> are equivalent.</para>
            <para>Unlike <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event, <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/>
            will be raised when any POP3-related data is received, while <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/>
            event is raised only when message header or entire message data is downloaded.</para>
            <note>This event is also raised when zero-length data is received from the server.
            When the server sends zero-length data portion, it means the server closed the connection.
            This normally happens after <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method was called.</note>
            </remarks>
            <example>This sample prints all the data received from the server during POP3 session
            into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine("[" + System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the DataReceived event.</span>
            		pop.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' DataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine("[" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the DataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> pop.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.DataSent">
            <summary>
            Occurs when data is sent to the POP3 server.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/>
            </summary>
            <remarks>Unlike <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/> event, occurrence of this event
            indicates sending POP3-related data only. For instance, if the transmission channel
            is SSL-encrypted, <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/> event indicates sending
            of any portion of encrypted data, while <see cref="E:MailBee.Pop3Mail.Pop3.DataSent"/> will be raised later
            to indicate the entire request (which was previously sent as one or several encrypted
            data chunks) has been sent. If the transmission channel is not encrypted or otherwise
            scrambled, <see cref="E:MailBee.Pop3Mail.Pop3.DataSent"/> and <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/> are equivalent.</remarks>
            <example>This sample prints all the data sent to the server during POP3 session
            into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine("[" + System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the DataSent event.</span>
            		pop.DataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataSent);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' DataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine("[" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the DataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> pop.DataReceived, <span style="color: blue;">AddressOf</span> OnDataSent
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived">
            <summary>
            Occurs when data is received from the connected socket.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/>
            </summary>
            <remarks>
            <para>If the transmission channel is encrypted, this event will be raised
            when any encrypted chunk of data is received. Thus, this event can be used to
            record the data which is actually received from the network.</para>
            <para>The typical use of this property is to calculate the network traffic
            produced during the POP3 session. SSL encryption increases the length of the
            transmitted data blocks, thus it's more accurate to calculate traffic by counting
            the length of data actually transmitted over the network.</para>
            <para>If the transmission channel is not encrypted or otherwise scrambled, this property
            is equivalent to <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/>.</para>
            </remarks>
            <example>This sample calculates all incoming traffic from the server during the POP3 session,
            and prints the result into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Total bytes received counter.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytes = 0;
            
            	<span style="color: green;">// LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataReceived(<span style="color: blue;">object</span> sender,
            		DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Increment the counter.</span>
            		_totalBytes += e.Data.Length;
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the LowLevelDataReceived event.</span>
            		pop.LowLevelDataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            		MailMessageCollection msgs = pop.DownloadMessageHeaders();
            		pop.Disconnect();
            
            		<span style="color: green;">// Print the total number of bytes previously received from the server.</span>
            		Console.WriteLine(_totalBytes + " bytes received in all");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Total bytes received counter.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> _totalBytes = 0
            
            	<span style="color: green;">' LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Increment the counter.</span>
            		_totalBytes += e.Data.Length
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the LowLevelDataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> pop.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		pop.Connect("pop.somehost.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            		msgs = pop.DownloadMessageHeaders()
            		pop.Disconnect()
            
            		<span style="color: green;">' Print the total number of bytes previously received from the server.</span>
            		Console.WriteLine(_totalBytes &amp; " bytes received in all")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent">
            <summary>
            Occurs when data is sent to the connected socket.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.DataSent"/>
            </summary>
            <remarks>
            <para>If the transmission channel is encrypted, this event will be raised
            each time an encrypted chunk of data is successfully sent. Thus, this event
            can be used to record the data which is actually sent to the network.</para>
            <para>The typical use of this property is to calculate the network traffic
            produced during the POP3 session. SSL encryption increases the length of the
            transmitted data blocks, thus it's more accurate to calculate traffic by counting
            the length of data actually transmitted over the network.</para>
            <para>If the transmission channel is not encrypted or otherwise scrambled, this property
            is equivalent to <see cref="E:MailBee.Pop3Mail.Pop3.DataSent"/>.</para>
            </remarks>
            <example>This sample calculates all outgoing traffic to the server during the POP3 session,
            and prints the result into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Total bytes sent counter.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytes = 0;
            
            	<span style="color: green;">// LowLevelDataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataSent(<span style="color: blue;">object</span> sender,
            		DataTransferEventArgs e)
            	{
            		_totalBytes += e.Data.Length;
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the LowLevelDataSent event.</span>
            		pop.LowLevelDataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataSent);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            		MailMessageCollection msgs = pop.DownloadMessageHeaders();
            		pop.Disconnect();
            
            		<span style="color: green;">// Print the total number of bytes previously sent to the server.</span>
            		Console.WriteLine(_totalBytes + " bytes sent in all");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Total bytes sent counter.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> _totalBytes = 0
            
            	<span style="color: green;">' LowLevelDataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		_totalBytes += e.Data.Length
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the LowLevelDataSent event.</span>
            		<span style="color: blue;">AddHandler</span> pop.LowLevelDataSent, <span style="color: blue;">AddressOf</span> OnLowLevelDataSent
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		pop.Connect("pop.somehost.com")
            		pop.Login("jdoe", "secret")
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection
            		msgs = pop.DownloadMessageHeaders()
            		pop.Disconnect()
            
            		<span style="color: green;">' Print the total number of bytes previously received from the server.</span>
            		Console.WriteLine(_totalBytes &amp; " bytes received in all")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.HostResolved">
            <summary>
            Occurs when the POP3 server name is successully resolved into IP address(es).
            <seealso cref="E:MailBee.Pop3Mail.Pop3.SocketConnected"/>
            <seealso cref="E:MailBee.Pop3Mail.Pop3.Connected"/>
            </summary>
            <remarks>If the POP3 server name (<paramref name="serverName"/> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> method)
            was already specified as an IP address, this event is still raised.
            <note>No checking if performed on whether the resolved IP address points to the live host.</note>
            </remarks>
            <example>This sample connects to the POP3 server host and prints all the IP addresses
            of this host into console. Most hosts, however, have only one IP address assigned.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// HostResolved event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnHostResolved(<span style="color: blue;">object</span> sender, HostResolvedEventArgs e)
            	{
            		<span style="color: blue;">foreach</span> (System.Net.IPAddress ip <span style="color: blue;">in</span> e.RemoteHost.AddressList)
            		{
            			Console.WriteLine(ip.ToString());
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the HostResolved event.</span>
            		pop.HostResolved += <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            
            		pop.Connect("mail.domain.com");
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' HostResolved event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnHostResolved(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> HostResolvedEventArgs)
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> ip <span style="color: blue;">As</span> System.Net.IPAddress <span style="color: blue;">In</span> e.RemoteHost.AddressList
            			Console.WriteLine(ip.ToString())
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            		
            		<span style="color: green;">' Subscribe to the LowLevelDataSent event.</span>
            		<span style="color: blue;">AddHandler</span> pop.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            		
            		pop.Connect("mail.domain.com")
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.SocketConnected">
            <summary>
            Occurs when the POP3 server accepts the connection attempt and opens the transmission
            channel between the remote host (POP3 server) and the client (MailBee).
            <seealso cref="E:MailBee.Pop3Mail.Pop3.Connected"/>
            </summary>
            <remarks>This event is raised immediately after <see cref="T:System.Net.Sockets.Socket"/>
            successfully connected to the POP3 server host. After the socket itself has been connected
            and this event raised, the client needs to receive some data from the server in order to
            complete the procedure of establishing connection with the POP3 server. If the connection
            must be SSL-encrypted, a few additional round-trips to the server required in order
            to completely establish the connection. Then, once the connection is fully initialized and
            ready for sending POP3 commands to the server, <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/> event is raised.
            </remarks>
            <example>This sample demonstrates the order in which events are raised during
            <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> method call. The events used in this sample occur in the following order:
            <list type="number">
            <item><description><see cref="E:MailBee.Pop3Mail.Pop3.HostResolved"/></description></item>
            <item><description><see cref="E:MailBee.Pop3Mail.Pop3.SocketConnected"/></description></item>
            <item><description><see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/></description></item>
            <item><description><see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/></description></item>
            <item><description><see cref="E:MailBee.Pop3Mail.Pop3.Connected"/></description></item>
            </list>
            <para>
            Once <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> method finishes, all event handlers are removed in the code, thus
            <see cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/> method does not generate any events (but it would do if we didn't
            remove <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataReceived"/> and <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> handlers).
            </para>
            <para><see cref="E:MailBee.Pop3Mail.Pop3.DataSent"/> and <see cref="E:MailBee.Pop3Mail.Pop3.LowLevelDataSent"/> events are not used in
            this sample because <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> method does not send any data to the server.
            However, it would be different if SSL-encrypted connection was used.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// HostResolved event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnHostResolved(<span style="color: blue;">object</span> sender, HostResolvedEventArgs e)
            	{
            		Console.WriteLine("The host name of the server was resolved into IP address.");
            	}
            
            	<span style="color: green;">// SocketConnected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnSocketConnected(<span style="color: blue;">object</span> sender, SocketConnectedEventArgs e)
            	{
            		Console.WriteLine("The server accepted the connection.");
            	}
            
            	<span style="color: green;">// LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Since SSL connection is not used, OnDataReceived and OnLowLevelDataReceived </span>
            		<span style="color: green;">// routines will produce the same output. This sample handles both events just </span>
            		<span style="color: green;">// to demonstrate that LowLevelDataReceived event is raised before the </span>
            		<span style="color: green;">// corresponding DataReceived event.</span>
            		<span style="color: green;">// But in SSL case, DataReceived and LowLevelDataReceived event data would be </span>
            		<span style="color: green;">// completely different, and some LowLevelDataReceived events (such as ones </span>
            		<span style="color: green;">// occurred during the SSL handshake) would not be followed by DataReceived </span>
            		<span style="color: green;">// events at all, because the data sent or received during the SSL handshake </span>
            		<span style="color: green;">// does not relate to POP3 protocol and cannot be decoded into textual form.</span>
            		Console.WriteLine("Low level data received: [" +
            			System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine("Data received: [" +
            			System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// Connected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Successfully connected to the server.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the events.</span>
            		pop.HostResolved += <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            		pop.SocketConnected += <span style="color: blue;">new</span> SocketConnectedEventHandler(OnSocketConnected);
            		pop.LowLevelDataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            		pop.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            		pop.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		<span style="color: green;">// Connect to the server and make the events get raised.</span>
            		pop.Connect("mail.domain.com");
            
            		<span style="color: green;">// Unsubscribe from the events.</span>
            		pop.HostResolved -= <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            		pop.SocketConnected -= <span style="color: blue;">new</span> SocketConnectedEventHandler(OnSocketConnected);
            		pop.LowLevelDataReceived -= <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            		pop.DataReceived -= <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            		pop.Connected -= <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' HostResolved event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnHostResolved(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> HostResolvedEventArgs)
            		Console.WriteLine("The host name of the server was resolved into IP address.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnSocketConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SocketConnectedEventArgs)
            		<span style="color: green;">' SocketConnected event handler.</span>
            		Console.WriteLine("The server accepted the connection.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Since SSL connection is not used, OnDataReceived and OnLowLevelDataReceived </span>
            		<span style="color: green;">' routines will produce the same output. This sample handles both events just </span>
            		<span style="color: green;">' to demonstrate that LowLevelDataReceived event is raised before the </span>
            		<span style="color: green;">' corresponding DataReceived event.</span>
            		<span style="color: green;">' But in SSL case, DataReceived and LowLevelDataReceived event data would be </span>
            		<span style="color: green;">' completely different, and some LowLevelDataReceived events (such as ones </span>
            		<span style="color: green;">' occurred during the SSL handshake) would not be followed by DataReceived </span>
            		<span style="color: green;">' events at all, because the data sent or received during the SSL handshake </span>
            		<span style="color: green;">' does not relate to POP3 protocol and cannot be decoded into textual form.</span>
            		Console.WriteLine("Low level data received: [" &amp; _
            			System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' DataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine("Data received: [" &amp; _
            			System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Successfully connected to the server.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            		
            		<span style="color: green;">' Subscribe to the LowLevelDataSent event.</span>
            		<span style="color: blue;">AddHandler</span> pop.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            		<span style="color: blue;">AddHandler</span> pop.SocketConnected, <span style="color: blue;">AddressOf</span> OnSocketConnected
            		<span style="color: blue;">AddHandler</span> pop.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            		<span style="color: blue;">AddHandler</span> pop.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            		<span style="color: blue;">AddHandler</span> pop.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		<span style="color: green;">' Connect to the server and make the events get raised.</span>
            		pop.Connect("mail.domain.com")
            
            		<span style="color: green;">' Unsubscribe from the events.</span>
            		<span style="color: blue;">RemoveHandler</span> pop.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            		<span style="color: blue;">RemoveHandler</span> pop.SocketConnected, <span style="color: blue;">AddressOf</span> OnSocketConnected
            		<span style="color: blue;">RemoveHandler</span> pop.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            		<span style="color: blue;">RemoveHandler</span> pop.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            		<span style="color: blue;">RemoveHandler</span> pop.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
             <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.Connected">
            <summary>
            <seealso cref="E:MailBee.Pop3Mail.Pop3.SocketConnected"/>
            Occurs when the connection with the server is successfully established.
            </summary>
            <remarks>This event indicates successful completion of the connection procedure, while
            <see cref="E:MailBee.Pop3Mail.Pop3.SocketConnected"/> event (occurs before <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/>) indicates
            the connection request from MailBee was accepted by the server, and the POP3
            connection procedure will now begin.</remarks>
            <example>This sample uses <see cref="E:MailBee.Pop3Mail.Pop3.Connected"/> event to report
            the successful connection status into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Connected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Successfully connected to the server.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to Connected event.</span>
            		pop.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		pop.Connect("mail.domain.com");
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Successfully connected to the server.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to Connected event.</span>
            		<span style="color: blue;">AddHandler</span> pop.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		pop.Connect("mail.domain.com")
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.Disconnected">
            <summary>
            Occurs when the connection with the server gets closed.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Disconnect"/>
            </summary>
            <remarks>This event is raised in all the cases when the connection gets closed, including
            normal shutdown and failures.
            <note>If <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> method is called, the connection is immediately
            closed, but no events (including <see cref="E:MailBee.Pop3Mail.Pop3.Disconnected"/>) are raised any longer.</note>
            </remarks>
            <example>This sample demonstrates that <see cref="E:MailBee.Pop3Mail.Pop3.Disconnected"/> event raises even
            on failures (when <see cref="T:MailBee.MailBeeException"/> is thrown). The sample connects to the
            POP3 server and then sends invalid data to the server. The server does not
            respond and the network operation times out.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Disconnected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDisconnected(<span style="color: blue;">object</span> sender, DisconnectedEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.IsNormalShutdown)
            		{
            			<span style="color: green;">// QUIT command was sent to POP3 server.</span>
            			Console.WriteLine("Normally disconnected from the server.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Rough disconnect (due to failure). If any messages have been </span>
            			<span style="color: green;">// flagged for deletion, they will possibly not be deleted.</span>
            			Console.WriteLine("The connection was terminated.");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to Disconnected event.</span>
            		pop.Disconnected += <span style="color: blue;">new</span> DisconnectedEventHandler(OnDisconnected);
            
            		pop.Connect("mail.domain.com");
            
            		<span style="color: green;">// We do not want to wait too long. Set one second as timeout value.</span>
            		pop.Timeout = 1000;
            
            		<span style="color: green;">// Simulate connection error by sending a request to which the POP3</span>
            		<span style="color: green;">// server will never respond (due to a lack of "\r\n" in the request data).</span>
            		<span style="color: green;">// This will cause MailBee to terminate the connection and raise </span>
            		<span style="color: green;">// Disconnected event, and then throw MailBeeException (exceptions are </span>
            		<span style="color: green;">// enabled by default).</span>
            		pop.ExecuteCustomCommand("NONSENSE", <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// This line will probably never execute (unless the server </span>
            		<span style="color: green;">// suddenly responds to NONSENSE sequence of bytes).</span>
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Disconnected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDisconnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DisconnectedEventArgs)
            		<span style="color: blue;">If</span> e.IsNormalShutdown <span style="color: blue;">Then</span>
            			<span style="color: green;">' QUIT command was sent to POP3 server.</span>
            			Console.WriteLine("Normally disconnected from the server.")
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Rough disconnect (due to failure). If any messages have been </span>
            			<span style="color: green;">' flagged for deletion, they will possibly not be deleted.</span>
            			Console.WriteLine("The connection was terminated.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the LoggedIn event.</span>
            		<span style="color: blue;">AddHandler</span> pop.Disconnected, <span style="color: blue;">AddressOf</span> OnDisconnected
            
            		pop.Connect("mail.domain.com")
            
            		<span style="color: green;">' We do not want to wait too long. Set one second as timeout value.</span>
            		pop.Timeout = 1000
            
            		<span style="color: green;">' Simulate connection error by sending a request to which the POP3 </span>
            		<span style="color: green;">' server will never respond (due to a lack of "\r\n" in the request data).</span>
            		<span style="color: green;">' This will cause MailBee to terminate the connection and raise </span>
            		<span style="color: green;">' Disconnected event, and then throw MailBeeException (exceptions are </span>
            		<span style="color: green;">' enabled by default).</span>
            		pop.ExecuteCustomCommand("NONSENSE", <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' This line will probably never execute (unless the server </span>
            		<span style="color: green;">' suddenly responds to NONSENSE sequence of bytes).</span>
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.TlsStarted">
            <summary>
            Occurs when the connection with the server becomes secure.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.SslMode"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.StartTls"/>
            </summary>
            <remarks>This event is raised when TLS/SSL negotiation completes and TLS session successfully
            starts. Usually, this happens as a result of successful completion of <see cref="M:MailBee.Pop3Mail.Pop3.StartTls"/>
            method or if automatic TLS/SSL negotiation was requested via setting <see cref="P:MailBee.Pop3Mail.Pop3.SslMode"/> property
            to non-<see cref="F:MailBee.Security.SslStartupMode.Manual"/> value.
            </remarks>
            <example>This console sample demonstrates that <see cref="E:MailBee.Pop3Mail.Pop3.TlsStarted"/> event is raised during executing <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method
            when <see cref="P:MailBee.Pop3Mail.Pop3.SslMode"/> property is set to <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/> value.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// TlsStarted event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnTlsStarted(<span style="color: blue;">object</span> sender, TlsStartedEventArgs e)
            	{
            		<span style="color: green;">// This will happen during Login method execution.</span>
            		Console.WriteLine("TLS/SSL session started.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to TlsStarted event.</span>
            		pop.TlsStarted += <span style="color: blue;">new</span> TlsStartedEventHandler(OnTlsStarted);
            
            		<span style="color: green;">// Notify MailBee it should start TLS/SSL session when appropriate.</span>
            		<span style="color: green;">// The connection is made to the regular port so that STLS command</span>
            		<span style="color: green;">// will be used to start TLS/SSL session.</span>
            		pop.SslMode = SslStartupMode.UseStartTls;
            
            		pop.Connect("mail.domain.com");
            
            		Console.WriteLine("Connected to the server. Will login now...");
            
            		<span style="color: green;">// TLS/SSL negotiation will take place here. Thus, user credentials</span>
            		<span style="color: green;">// will be sent to the mail server already under secure TLS/SSL layer.</span>
            		pop.Login("jdoe@domain.com", "secret");
            
            		Console.WriteLine("Logged in successfully.");
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Public</span> <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' TlsStarted event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnTlsStarted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> TlsStartedEventArgs)
            		<span style="color: green;">' This will happen during Login method execution.</span>
            		Console.WriteLine("TLS/SSL session started.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to TlsStarted event.</span>
            		<span style="color: blue;">AddHandler</span> pop.TlsStarted, <span style="color: blue;">AddressOf</span> OnTlsStarted
            
            		<span style="color: green;">' Notify MailBee it should start TLS/SSL session when appropriate.</span>
            		<span style="color: green;">' The connection is made to the regular port so that STLS command</span>
            		<span style="color: green;">' will be used to start TLS/SSL session.</span>
            		pop.SslMode = SslStartupMode.UseStartTls
            
            		pop.Connect("mail.domain.com")
            
            		Console.WriteLine("Connected to the server. Will login now...")
            
            		<span style="color: green;">' TLS/SSL negotiation will take place here. Thus, user credentials</span>
            		<span style="color: green;">' will be sent to the mail server already under secure TLS/SSL layer.</span>
            		pop.Login("jdoe@domain.com", "secret")
            		
            		Console.WriteLine("Logged in successfully.")
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.LoggedIn">
            <summary>
            Occurs when the component successfully authenticates the user on the server and logs
            in the user account.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            </summary>
            <remarks>After raising this event, the component will download the mailbox statistics
            from the mail server (number of messages in the mailbox, and other information as
            specified by <see cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/> property setting.</remarks>
            <example>This sample connects to the POP3 server, logs in the user account, and downloads
            the complete mailbox statistics. The sample demonstrates there is a delay between
            <see cref="E:MailBee.Pop3Mail.Pop3.LoggedIn"/> event occurence and <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method completion,
            which is the amount of time spent on downloading the mailbox statistics after
            completion of the authentication process.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// LoggedIn event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLoggedIn(<span style="color: blue;">object</span> sender, LoggedInEventArgs e)
            	{
            		Console.WriteLine("Successfully logged in the user account at " +
            			(DateTime.Now - DateTime.Today));
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the LoggedIn event.</span>
            		pop.LoggedIn += <span style="color: blue;">new</span> LoggedInEventHandler(OnLoggedIn);
            
            		pop.Connect("mail.domain.com");
            
            		<span style="color: green;">// Set "download the complete mailbox statistics" mode to increase the delay </span>
            		<span style="color: green;">// between LoggedIn event and Login method completion </span>
            		pop.InboxPreloadOptions = Pop3InboxPreloadOptions.List | Pop3InboxPreloadOptions.Uidl;
            
            		<span style="color: green;">// Authenticate the user, log in the mailbox, and download the mailbox statistics.</span>
            		pop.Login("jdoe", "secret");
            
            		Console.WriteLine("The user account statistics received at " +
            			(DateTime.Now - DateTime.Today));
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' LoggedIn event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLoggedIn(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LoggedInEventArgs)
            		<span style="color: blue;">Dim</span> DNow <span style="color: blue;">As</span> DateTime = DateTime.Now
            		<span style="color: blue;">Dim</span> DToday <span style="color: blue;">As</span> DateTime = DateTime.Today
            		Console.WriteLine("Successfully logged in the user account at " &amp; _
            			DateDiff(DateInterval.Hour, DateTime.Now, DateTime.Today))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the LoggedIn event.</span>
            		<span style="color: blue;">AddHandler</span> pop.LoggedIn, <span style="color: blue;">AddressOf</span> OnLoggedIn
            
            		pop.Connect("mail.domain.com")
            
            		<span style="color: green;">' Set "download the complete mailbox statistics" mode to increase the delay </span>
            		<span style="color: green;">' between LoggedIn event and Login method completion.</span>
            		pop.InboxPreloadOptions = Pop3InboxPreloadOptions.List <span style="color: blue;">Or</span> Pop3InboxPreloadOptions.Uidl
            
            		<span style="color: green;">' Authenticate the user, log in the mailbox, and download the mailbox statistics.</span>
            		pop.Login("jdoe", "secret")
            
            		Console.WriteLine("The user account statistics received at " &amp; _
            			DateDiff(DateInterval.Hour, DateTime.Now, DateTime.Today))
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.MessageDownloaded">
            <summary>
            Occurs when a message was downloaded from the server.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessages(System.Int32,System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeader(System.Int32)"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <remarks>
            <para>If only message headers were requested for download (e.g. <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/> method
            was called), this event is raised when a message header is downloaded.</para>
            <para>When multiple messages are downloaded, this event is raised for every message
            (or message header) which was downloaded.</para>
            </remarks>
            <example>This sample downloads headers of the last 10 messages in the inbox.
            For each downloaded header, the corresponding status message is displayed.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageDownloaded event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDownloaded(<span style="color: blue;">object</span> sender,
            		Pop3MessageDownloadedEventArgs e)
            	{
            		Console.WriteLine("The header of the message #" + e.MessageNumber +
            			" has been downloaded");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the MessageDownloaded event.</span>
            		pop.MessageDownloaded +=
            			<span style="color: blue;">new</span> Pop3MessageDownloadedEventHandler(OnMessageDownloaded);
            
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            
            		<span style="color: green;">// Download headers of the last 10 messages in the inbox.</span>
            		MailMessageCollection msgs = pop.DownloadMessageHeaders(pop.InboxMessageCount - 9, 10);
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageDownloaded event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDownloaded(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> Pop3MessageDownloadedEventArgs)
            		Console.WriteLine("The header of the message #" &amp; e.MessageNumber &amp; _
            			" has been downloaded")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the MessageDownloaded event.</span>
            		<span style="color: blue;">AddHandler</span> pop.MessageDownloaded, <span style="color: blue;">AddressOf</span> OnMessageDownloaded
            
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: green;">' Download headers of the last 10 messages in the inbox.</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = pop.DownloadMessageHeaders(pop.InboxMessageCount - 9, 10)
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived">
            <summary>
            Occurs on progress of downloading message source data from the server.
            <seealso cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/>
            </summary>
            <remarks>
            <para>This event is a special case of <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> event. While
            <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> event occurs when any data is received,
            <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event indicates message data is being received.
            In other words, <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event is a filtered version
            of more general <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> event.</para>
            <para>When both <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> and <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/>
            events are used, <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> is raised first.</para>
            </remarks>
            <example>This sample completely downloads the last message in the inbox, and deletes
            it from the server. Both <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> and
            <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> events are handled, and the corresponding
            messages are printed into console when each of these events is raised. This sample
            demonstrates that <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived"/> is raised more often than
            <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/>.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine(e.Data.Length + " bytes received");
            	}
            
            	<span style="color: green;">// MessageDataChunkReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDataChunkReceived(<span style="color: blue;">object</span> sender,
            		Pop3MessageDataChunkReceivedEventArgs e)
            	{
            		Console.WriteLine(e.BytesJustReceived + " bytes of the message #" + 
            			e.MessageNumber + " received");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to events.</span>
            		pop.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            		pop.MessageDataChunkReceived +=
            			<span style="color: blue;">new</span> Pop3MessageDataChunkReceivedEventHandler(OnMessageDataChunkReceived);
            
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            
            		<span style="color: green;">// Completely download the last message in the inbox.</span>
            		MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            
            		pop.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine(e.Data.Length &amp; " bytes received")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDataChunkReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> Pop3MessageDataChunkReceivedEventArgs)
            		Console.WriteLine(e.BytesJustReceived &amp; " bytes of the message #" &amp; _
            			e.MessageNumber &amp; " received")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to events.</span>
            		<span style="color: blue;">AddHandler</span> pop.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            		<span style="color: blue;">AddHandler</span> pop.MessageDataChunkReceived, _
            			<span style="color: blue;">AddressOf</span> OnMessageDataChunkReceived
            
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: green;">' Completely download the last message in the inbox.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage
            		msg = pop.DownloadEntireMessage(pop.InboxMessageCount)
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.ImapMail.ImapBodyStructure">
            <summary>
            Represents a structure of a MIME part of a mail message.
            </summary>
            <remarks>
            <para>The IMAP4 protocol allows the client to query information about all MIME parts
            of a mail message without downloading the entire message. The server returns this information
            as a tree of body structures, where each body structure describes the corresponding MIME part and
            contains a list of nested body structures if the corresponding MIME part is multipart.</para>
            <para>The common use of body structures is to list attachments of a mail message (see the sample code in
            <see cref="T:MailBee.ImapMail.Envelope"/> topic). Another case is processing envelopes of international messages, because body structures
            contain charset settings of mail messages. When a body structure of a certain message is available,
            MailBee is able to decode the message envelope fields containing international characters more correctly.</para>
            <para>When an entire message is downloaded, there is no need to download its body structure since all the required information is
            already available in the message data.</para>
            <para>To access body structure information, the developer should request receiving body structures from the server
            when calling <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method by setting <see cref="F:MailBee.ImapMail.EnvelopeParts.BodyStructure"/>
            flag in <i>parts</i> parameter value. A reference to the <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> object representing the root MIME part
            of the mail message can then be obtained via <see cref="P:MailBee.ImapMail.Envelope.BodyStructure"/> property value.</para>
            <para>By default, MailBee represents the body structure tree as a branching linked list. This reflects
            nested nature of MIME parts. However, it's often more convenient to get this tree as a simple collection.
            MailBee provides <see cref="M:MailBee.ImapMail.ImapBodyStructure.GetAllParts"/> method for this.</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.ImapBodyStructure.GetAllParts">
            <summary>
            Returns this MIME part and all its subparts as a flat list.
            </summary>
            <returns>A reference to the <see cref="T:MailBee.ImapMail.ImapBodyStructureCollection"/> object
            containing body structures of the MIME part and all its sub-parts (including sub-sub-parts, etc).</returns>
            <remarks>The developer can use this method to get flat representation of the MIME parts tree.
            This is useful when it's required to quickly iterate through all of the MIME parts (for instance,
            to count all the attachments of the mail message).</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.ContentType">
            <summary>
            Gets the content-type of the MIME part.
            </summary>
            <value>The string value in the "media type/media sub type" format.</value>
            <remarks>
            <para>Examples: "text/plain", "TEXT/HTML", "multipart/mixed", "Multipart/Related",
            "message/rfc822", "application/octet-stream".</para>
            <note>If the entire "Content-Type" message header contains some additional parameters (such
            as "charset", "name", etc), the developer can examine <see cref="P:MailBee.ImapMail.ImapBodyStructure.BodyParams"/> list
            to obtain the parameter names and values.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Charset">
            <summary>
            Gets the charset of the MIME part.
            </summary>
            <value>The string containing the charset of the MIME part contents, or a null reference
            (<b>Nothing</b> in Visual Basic) if no charset information is available.</value>
            <remarks>
            <para>Examples: "us-ascii", "ISO-8859-1", "gb2312", "shift-jis", "Windows-1252".</para>
            <para>MailBee obtains the charset from the value of "charset" parameter of <see cref="P:MailBee.ImapMail.ImapBodyStructure.BodyParams"/>.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.BodyParams">
            <summary>
            Gets the name-value list of body parameters.
            </summary>
            <value>A reference to the <see cref="T:System.Collections.Specialized.StringDictionary"/> object containing name-value
            pairs representing all parameters of "Content-Type" header.</value>
            <remarks>All parameter names are lowercased, while parameter values remain unchanged.
            This is the specifics of <see cref="T:System.Collections.Specialized.StringDictionary"/> object.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.ContentID">
            <summary>
            Gets the Content-ID value of the MIME part.
            </summary>
            <value>The string containing "Content-ID" header value, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part does not have Content-ID.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Description">
            <summary>
            Gets the description of the MIME part.
            </summary>
            <value>The string containing "Content-Description" header value, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part does not have "Content-Description" header set.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.MailEncodingName">
            <summary>
            Get the name of content transfer encoding the MIME part body is encoded to.
            </summary>
            <value>The string containing "Content-Transfer-Encoding" header value, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part does not have "Content-Transfer-Encoding" header set.</value>
            <remarks>
            <para>Examples: "base64", "Quoted-Printable", "X-UUE", "7bit", "binary".</para>
            <para>If this value is missing, the MIME part body is not encoded. This is the same
            as "7bit", "8bit", or "binary".</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Disposition">
            <summary>
            Get the disposition (attachment or inline) of the MIME part.
            </summary>
            <value>The string containing "Content-Disposition" header value, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part does not have "Content-Disposition" header set.</value>
            <remarks>
            <para>Examples: "attachment", "INLINE".</para>
            <para>If this header is missing, the application should assume "inline" by default.</para>
            <note>If the entire "Content-Disposition" message header contains some additional parameters (such
            as "filename"), the developer can examine <see cref="P:MailBee.ImapMail.ImapBodyStructure.DispositionParams"/> list
            to obtain the parameter names and values.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.DispositionParams">
            <summary>
            Gets the name-value list of disposition parameters.
            </summary>
            <value>A reference to the <see cref="T:System.Collections.Specialized.StringDictionary"/> object containing name-value
            pairs representing all parameters of "Content-Disposition" header.</value>
            <remarks>All parameter names are lowercased, while parameter values remain unchanged.
            This is the specifics of <see cref="T:System.Collections.Specialized.StringDictionary"/> object.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Filename">
            <summary>
            Get the filename of the MIME part.
            </summary>
            <value>The string containing the filename of the MIME part, or a null reference
            (<b>Nothing</b> in Visual Basic) if no filename is available.</value>
            <remarks>MailBee obtains the filename from the value of "filename" parameter of <see cref="P:MailBee.ImapMail.ImapBodyStructure.DispositionParams"/>.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Language">
            <summary>
            Get the language of the MIME part body.
            </summary>
            <value>The string containing the language of the MIME part body, or a null reference
            (<b>Nothing</b> in Visual Basic) if this information is available.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Location">
            <summary>
            Gets the body content URI of the MIME part.
            </summary>
            <value>The string containing "Content-Location" header value, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part does not have "Content-Location" header set.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.Size">
            <summary>
            Gets the length of encoded body of the MIME part.
            </summary>
            <value>The integer value containing the length of encoded body of the MIME part, or 0
            if the MIME part is multipart and thus does not have its own body, or -1 if the body size
            parameter value in the IMAP4 response could not be parsed.</value>
            <remarks>This is the size of the MIME part body in its encoded state. For instance,
            if the body is base64 encoded, the encoded data length is approximately 33% larger than the actual
            data length.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.TextLineCount">
            <summary>
            Gets the count of text lines of the MIME part of text type.
            </summary>
            <value>The integer value containing the number of text lines of the MIME part of text type, or 0
            if the MIME part is not of text type, or -1 if this
            parameter value in the IMAP4 response could not be parsed.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.PartID">
            <summary>
            Gets the IMAP4 identifier of this MIME part.
            </summary>
            <value>The string containing the identifier which can be used to request the body or header sections of
            this MIME part from the server.</value>
            <remarks>
            <para>The developer can use this property to obtain the identifier of the part which can then be passed
            as one of elements of <i>extraItems</i> parameter of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method. Once
            <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method succeeds, the developer can then obtain the requested data using
            <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)"/> method.</para>
            <para>The exact syntax of the value to be passed as element of <i>extraItems</i> array depends on which portion
            of the MIME part the developer needs to obtain. Also, the name of the requested item to
            be passed to <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)"/> method may differ from the name passed as <i>extraItems</i>
            element. See <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)"/> method topic for more information.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.SubParts">
            <summary>
            Gets the collection of nested parts of the multipart MIME part.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.ImapBodyStructureCollection"/> object containing
            the immediate sub-parts of the given multipart MIME part, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part is not multipart.</value>
            <remarks>Certain sub-parts can also be multipart. The maximum number of nesting levels is not limited
            (although it's usually is not larger than 5).</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.EncapsulatedBodyStructure">
            <summary>
            Gets the body structure of the attached mail message.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> object containing
            the body structure of the MIME part which is an attached mail message, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part is not a mail message.</value>
            <remarks>
            The developer can use this property to access the body structure information of forwarded or attached
            mail messages.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.EncapsulatedEnvelope">
            <summary>
            Gets the envelope information of the attached mail message.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.Envelope"/> object containing
            the envelope information of the MIME part which is an attached mail message, or a null reference
            (<b>Nothing</b> in Visual Basic) if the part is not a mail message.</value>
            <remarks>
            The developer can use this property to access the envelope information of forwarded or attached
            mail messages.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructure.IsMultipart">
            <summary>
            Indicates if the MIME part is multipart.
            </summary>
            <value><b>true</b> if the MIME part is multipart; otherwise, <b>false</b>.</value>
            <remarks>If the part is multipart, the developer can use <see cref="P:MailBee.ImapMail.ImapBodyStructure.SubParts"/> property
            to access nested parts of this part.</remarks>
        </member>
        <member name="T:MailBee.Html.TagAttributeCollection">
            <summary>
            Provides properties and methods for managing and examining the collection of <see cref="T:MailBee.Html.TagAttribute"/> objects.
            </summary>
            <remarks>
            <para>To access attributes of an HTML <see cref="T:MailBee.Html.Element"/>, use <see cref="P:MailBee.Html.Element.Attributes"/> property.</para>
            <para>To define a list of HTML attributes (for instance, when creating an HTML processing rule using <see cref="T:MailBee.Html.RuleSet"/>
            class methods), use <see cref="M:MailBee.Html.TagAttributeCollection.#ctor"/> constructor to create the collection,
            then create attributes using <see cref="M:MailBee.Html.TagAttribute.#ctor"/> constructor, set their definitions or names with
            <see cref="P:MailBee.Html.TagAttribute.Definition"/> or <see cref="P:MailBee.Html.TagAttribute.Name"/> properties, and add them to the collection
            using <see cref="M:MailBee.Html.TagAttributeCollection.Add(MailBee.Html.TagAttribute)"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,System.Boolean)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.Add(MailBee.Html.TagAttribute)">
            <summary>
            Adds the specified <see cref="T:MailBee.Html.TagAttribute"/> object to the collection.
            </summary>
            <param name="attr">The <see cref="T:MailBee.Html.TagAttribute"/> object to be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attr"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.Add(MailBee.Html.TagAttribute,System.Int32)">
            <summary>
            Adds the specified <see cref="T:MailBee.Html.TagAttribute"/> object to the collection at the specified index.
            </summary>
            <param name="attr">The <see cref="T:MailBee.Html.TagAttribute"/> object to be added to the collection.</param>
            <param name="index">The zero-based index where to insert the specified <see cref="T:MailBee.Html.TagAttribute"/> object in the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attr"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not valid.</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.AddRange(MailBee.Html.TagAttributeCollection)">
            <overloads> Adds multiple attributes to the collection.</overloads>
            <summary>
            Adds all attributes from the <see cref="T:MailBee.Html.TagAttributeCollection"/> object.
            </summary>
            <param name="attrs">The attributes from <see cref="T:MailBee.Html.TagAttributeCollection"/> object to be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attrs"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.AddRange(MailBee.Html.TagAttributeCollection,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds elements from the <see cref="T:MailBee.Html.TagAttributeCollection"/> object with specified range.
            </summary>
            <param name="attrs">The source <see cref="T:MailBee.Html.TagAttributeCollection"/> to add elements from.</param>
            <param name="srcIndex">The zero-based index in <paramref name="attrs"/> collection from which to
            copy the attributes.</param>
            <param name="count">Number of attributes to be added from <paramref name="attrs"/> collection.</param>
            <param name="destIndex">The zero-based index in the current collection where to insert the first attribute
            from the copied range.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attrs"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not valid.</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.Remove(MailBee.Html.TagAttribute)">
            <summary>
            Removes the specified <see cref="T:MailBee.Html.TagAttribute"/> object from the collection.
            <seealso cref="M:MailBee.Html.TagAttributeCollection.RemoveAt(System.Int32)"/>
            <seealso cref="M:MailBee.Html.TagAttributeCollection.RemoveByName(System.String)"/>
            </summary>
            <param name="attr">The <see cref="T:MailBee.Html.TagAttribute"/> to be removed from the collection.</param>
            <returns><b>true</b> if the specified <see cref="T:MailBee.Html.TagAttribute"/> was found and removed; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attr"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:MailBee.Html.TagAttribute"/> object having the the specified zero-based index from the collection.
            <seealso cref="M:MailBee.Html.TagAttributeCollection.Remove(MailBee.Html.TagAttribute)"/>
            <seealso cref="M:MailBee.Html.TagAttributeCollection.RemoveByName(System.String)"/>
            </summary>
            <param name="index">The zero-based index of <see cref="T:MailBee.Html.TagAttribute"/> to be removed from the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.RemoveByName(System.String)">
            <summary>
            Removes all attributes having the specified name from the collection.
            <seealso cref="M:MailBee.Html.TagAttributeCollection.Remove(MailBee.Html.TagAttribute)"/>
            <seealso cref="M:MailBee.Html.TagAttributeCollection.RemoveAt(System.Int32)"/>
            </summary>
            <param name="attrName">The name of the attribute (case-insensitive) to be removed from the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attrName"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.TagAttributeCollection.RemoveAll">
            <summary>
            Removes all attributes from the collection.
            </summary>
        </member>
        <member name="P:MailBee.Html.TagAttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Html.TagAttribute"/> object at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index number of the attribute in the collection.</param>
            <value>
            A <see cref="T:MailBee.Html.TagAttribute"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="T:MailBee.SmtpMail.IMailBeeNegativeSmtpResponseException">
            <summary>
            When implemented by an exception class, indicates the SMTP server returned negative response.
            The response data is available in text (i.e. string) form, and SMTP response status code is also available.
            </summary>
        </member>
        <member name="T:MailBee.IMailBeeNegativeTextResponseException">
            <summary>
            When implemented by an exception class, indicates the server returned negative response,
            and the response data is available in text (i.e. string) form.
            </summary>
        </member>
        <member name="T:MailBee.IMailBeeNegativeResponseException">
            <summary>
            When implemented by an exception class, indicates the server returned negative response,
            and the response data is available.
            </summary>
        </member>
        <member name="P:MailBee.IMailBeeNegativeTextResponseException.ResponseEncoding">
            <summary>
            Gets the encoding which was used to convert response bytes received from the server
            into a string.
            </summary>
            <value>The <see cref="T:System.Text.Encoding"/> which was used to convert response bytes received from the server
            into a string.</value>
            <remarks>This encoding is taken from <b>ResponseEncoding</b> property value (such as
            <see cref="P:MailBee.Pop3Mail.Pop3.ResponseEncoding">Pop3.ResponseEncoding</see>,
            <see cref="P:MailBee.ImapMail.Imap.ResponseEncoding">Imap.ResponseEncoding</see> or
            <see cref="P:MailBee.SmtpMail.Smtp.ResponseEncoding">Smtp.ResponseEncoding</see>).</remarks>
        </member>
        <member name="P:MailBee.IMailBeeNegativeTextResponseException.ResponseString">
            <summary>
            Gets the string which contains the negative response data.
            </summary>
            <value>The string which contains the negative response data.</value>
        </member>
        <member name="P:MailBee.SmtpMail.IMailBeeNegativeSmtpResponseException.ResponseCode">
            <summary>
            Gets a 3-digit SMTP response status code. 
            </summary>
            <value>An integer value in the range 400 to 599 returned by the SMTP server
            to indicate failure of the requested operation.</value>
        </member>
        <member name="P:MailBee.SmtpMail.IMailBeeNegativeSmtpResponseException.IsTransientError">
            <summary>
            Gets the status of whether the failure is permanent (the client should not retry
            later) or transient (the client may retry later).
            </summary>
            <value><b>true</b> if the failure is transient, and the client may try
            again at a later time; <b>false</b> if the client should not try to send the same
            command with the same parameters later.</value>
            <remarks>
            <para>Transient errors correspond to <i>4xx</i> status code, while permanent errors - to
            <i>5xx</i>.</para>
            <para>Typical case of a transient error is "Server is busy, try later". "Account does
            not exist" is a typical example of a permanent error. "Account is over quota"
            can be both permanent or transient error, depending on the mail server implementation.</para>
            </remarks>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpNegativeResponseException">
            <summary>
            The exception that is thrown when the SMTP server responds with a negative reply
            (<i>4xx</i> or <i>5xx</i>, such as <i>501</i>).
            </summary>
        </member>
        <member name="T:MailBee.MailBeeEmailProtocolNegativeResponseException">
            <summary>
            An abstract parent for all exceptions which indicate that the mail server returned negative response,
            and the response data is available in text (i.e. string) form.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeEmailProtocolException">
            <summary>
            An abstract parent for all exceptions which indicate that an e-mail protocol
            (such as POP3, IMAP4 or SMTP) error has occurred.
            </summary>
            <remarks>Typical example of the application-level protocol error is a negative server response.</remarks>
        </member>
        <member name="T:MailBee.MailBeeProtocolException">
            <summary>
            An abstract parent for all exceptions which indicate that an application-level protocol
            error has occurred.
            </summary>
            <remarks>Typical example of the application-level protocol error is a negative server response.</remarks>
        </member>
        <member name="T:MailBee.MailBeeRemoteHostException">
            <summary>
            An abstract parent for all exceptions which occur when MailBee attempts to establish
            connection or send/receive data to/from the server at the given IP address and port number.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeNetworkException">
            <summary>
            An abstract parent for all exceptions that are thrown when network errors occur.
            </summary>
        </member>
        <member name="P:MailBee.MailBeeRemoteHostException.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the server host.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection with the server.</value>
        </member>
        <member name="P:MailBee.MailBeeRemoteHostException.RemoteHostName">
            <summary>
            Gets the host name of the server.
            </summary>
            <value>A string indicating the host name of the server.</value>
        </member>
        <member name="P:MailBee.MailBeeRemoteHostException.Protocol">
            <summary>
            Gets application-level protocol of the current connection.
            </summary>
            <value>The protocol of the current connection, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection is used for.</remarks>
        </member>
        <member name="P:MailBee.MailBeeEmailProtocolNegativeResponseException.ResponseString">
            <summary>
            Gets the string which contains the negative response data.
            </summary>
            <value>The string which contains the negative response data.</value>
        </member>
        <member name="P:MailBee.MailBeeEmailProtocolNegativeResponseException.ResponseEncoding">
            <summary>
            Gets the encoding which was used to convert response bytes received from the server
            into a string.
            </summary>
            <value>The <see cref="T:System.Text.Encoding"/> which was used to convert response bytes received from the server
            into a string.</value>
            <remarks>This encoding is taken from <b>ResponseEncoding</b> property value (such as
            <see cref="P:MailBee.Pop3Mail.Pop3.ResponseEncoding">Pop3.ResponseEncoding</see>,
            <see cref="P:MailBee.ImapMail.Imap.ResponseEncoding">Imap.ResponseEncoding</see> or
            <see cref="P:MailBee.SmtpMail.Smtp.ResponseEncoding">Smtp.ResponseEncoding</see>).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpNegativeResponseException.ResponseCode">
            <summary>
            Gets a 3-digit SMTP response status code. 
            </summary>
            <value>An integer value in the range 400 to 599 returned by the SMTP server
            to indicate failure of the requested operation.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpNegativeResponseException.IsTransientError">
            <summary>
            Gets the status of whether the failure is permanent (the client should not retry
            later) or transient (the client may retry later).
            </summary>
            <value><b>true</b> if the failure is transient, and the client may try
            again at a later time; <b>false</b> if the client should not try to send the same
            command with the same parameters later.</value>
            <remarks>
            <para>Transient errors correspond to <i>4xx</i> status code, while permanent errors - to
            <i>5xx</i>.</para>
            <para>Typical case of a transient error is "Server is busy, try later". "Account does
            not exist" is a typical example of a permanent error. "Account is over quota"
            can be both permanent or transient error, depending on the mail server implementation.</para>
            </remarks>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpOptionalCommandNotSupportedException">
            <summary>
            The exception that is thrown when the SMTP server responds with a negative reply to
            an optional SMTP command.
            </summary>
            <remarks>
            <para>This exception is never thrown in the application code. Instead, MailBee catches
            it, and raises <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event passing the exception instance as
            the <i>Reason</i> parameter value.</para>
            <para>This exception indicates the SMTP server does not support an optional SMTP command which
            was sent to the server by MailBee. For instance, MailBee may try to send <i>EHLO</i> command
            in order to to initiate SMTP session and learn the server capabilities. The SMTP server, however, may not support it.
            In this case, MailBee continues normal execution and tries regular <i>HELO</i> command to
            initiate SMTP session (although ESMTP extensions, which could be supported if the failed
            command succeeded, will now be disabled). However, <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event is still raised to let
            the application code know that some features will be disabled.</para>
            </remarks>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpLoginNegativeResponseException">
            <summary>
            An abstract parent for all exceptions which indicate the SMTP server replied with a negative
            response during authentication of the user. 
            </summary>
        </member>
        <member name="T:MailBee.IMailBeeLoginNegativeResponseException">
            <summary>
            When implemented by an exception class, indicates the server returned negative response
            during the authentication process, and the response data is available in text (i.e. string) form.
            </summary>
        </member>
        <member name="T:MailBee.IMailBeeLoginException">
            <summary>
            When implemented by an exception class, indicates the login process failed, and the application
            should try to authenticate using either another account name and password or another
            authentication method.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpLoginBadCredentialsException">
            <summary>
            The exception that is thrown when the SMTP server reports the given user account name
            and/or password is incorrect.
            </summary>
        </member>
        <member name="T:MailBee.IMailBeeLoginBadCredentialsException">
            <summary>
            When implemented by an exception class, indicates the authentication failed
            due to use of incorrect account name and/or password.
            </summary>
        </member>
        <member name="P:MailBee.IMailBeeLoginBadCredentialsException.AccountName">
            <summary>
            Gets the account name which was used for the authentication.
            </summary>
            <value>The account name the authentication failed with.</value>
        </member>
        <member name="P:MailBee.IMailBeeLoginBadCredentialsException.Password">
            <summary>
            Gets the account password which was used for the authentication.
            </summary>
            <value>The account password the authentication failed with.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpLoginBadCredentialsException.AccountName">
            <summary>
            Gets the account name which was used during the authentication.
            </summary>
            <value>The account name which was used during the authentication.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpLoginBadCredentialsException.Password">
            <summary>
            Gets the account password which was used during the authentication.
            </summary>
            <value>The account password which was used during the authentication.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpLoginBadMethodException">
            <summary>
            The exception that is thrown when the SMTP server reports the given ESMTP SASL authentication
            method is not supported and use of another authentication methods is not allowed by the
            application.
            <seealso cref="T:MailBee.AuthenticationMethods"/>
            <seealso cref="T:MailBee.AuthenticationOptions"/>
            <seealso cref="T:MailBee.SmtpMail.MailBeeSmtpLoginBadCredentialsException"/>
            </summary>
            <remarks>By default, if a particular ESMTP SASL authentication method is not supported by the server,
            MailBee switches to the previous method listed in <see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> property value.
            If no more methods left, <see cref="T:MailBee.MailBeeLoginNoSupportedMethodsException"/> is thrown.
            However, if <see cref="F:MailBee.AuthenticationOptions.UseSingleMethodOnly"/> flag is set in
            <see cref="P:MailBee.SmtpMail.SmtpServer.AuthOptions"/> property value, MailBee will not try other methods. Instead, if will immediately
            throw <see cref="T:MailBee.SmtpMail.MailBeeSmtpLoginBadMethodException"/>.
            <note>This exception does not indicate that authentication using the given method failed.
            Instead, it indicates the method itself is not supported by the server. When the method
            is supported but the authentication using this method fails (invalid account name/password),
            MailBee does not try another methods (there would be no sense if it did),
            and throws <see cref="T:MailBee.SmtpMail.MailBeeSmtpLoginBadCredentialsException"/>.</note>
            </remarks>
        </member>
        <member name="T:MailBee.IMailBeeLoginBadMethodException">
            <summary>
            When implemented by an exception class, indicates the server returned negative response
            during the authentication process because the requested authentication method is not available.
            </summary>
        </member>
        <member name="P:MailBee.IMailBeeLoginBadMethodException.BadMethod">
            <summary>
            Gets the authentication method which was rejected by the server.
            </summary>
            <value>An <see cref="T:MailBee.AuthenticationMethods"/> value which corresponds to the authentication method
            which was rejected by the server because this method is either not supported or disabled.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpLoginBadMethodException.BadMethod">
            <summary>
            Gets the authentication method which was rejected by the server.
            </summary>
            <value>A <see cref="T:MailBee.AuthenticationMethods"/> value having only a single bit set, which
            indicates the method which is requested by the application but not supported by the server.</value>
            <remarks>Although <see cref="T:MailBee.AuthenticationMethods"/> allows bitwise combination
            of its member values, the result returned by this property always contains a single
            member value indicating the specific method which was rejected.</remarks>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeDnsRecordsDisabledException">
            <summary>
            The exception that is thrown when there was an attempt to request DNS records for a
            non-existent domain or a domain which is dead.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeDnsRecordsDisabledException.Domain">
            <summary>
            Gets the name of the non-existent or dead host.
            </summary>
            <value>The name of the host for which the DNS server reports "No such domain" or other problem (accordingly the DNS cache data).</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeMXRecordsDisabledException">
            <summary>
            The exception that is thrown when there was an attempt to request DNS MX records for a
            non-existent domain or a domain whose SMTP MX servers are not responsive.
            </summary>
            <remarks>
            <para>This exception can be thrown only if DNS caching is enabled (<see cref="P:MailBee.DnsMX.DnsCache.Enabled"/> is <b>true</b>).
            In this case, MailBee keeps track of all DNS MX lookup requests made and the following attempts to
            connect to SMTP MX servers designated by the DNS records retrieved during DNS MX lookup. If, for certain
            domain, all DNS MX records failed (all SMTP MX servers did not respond), MailBee remembers in its DNS cache that
            this domain is dead and marks the corresponding DNS records in the cache as disabled. All subsequent attempts to connect
            to this domain will immediately throw this exception without wasting time on waiting for a response
            from the dead server. The same optimization is performed when non-existent domain is encountered (i.e. the DNS server
            returned an error).</para>
            <para>However, when <see cref="P:MailBee.DnsMX.DnsCache.Timeout"/> interval (by default,
            90 minutes since the moment of adding a record into the cache) elapses, MailBee
            removes such DNS MX records from the cache. It's assumed the failed server may be back during this time, or
            DNS records may change, etc, so it's worth trying to check the availability of the host in question again.</para>
            <note>This exception does not refer to the error which occurred just now. It rather occurs to due to past knowledge
            (acquired during previous send attempts and saved in the cache) that SMTP MX server (which was determined
            via DNS MX query) could not be contacted or the domain does not exist.</note>
            </remarks>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpSendingMessageEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpSendingMessageEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/> event.
            </summary>
        </member>
        <member name="T:MailBee.CommonEventArgs">
            <summary>
            Represents an abstract parent of all event data classes in MailBee.
            </summary>
        </member>
        <member name="P:MailBee.CommonEventArgs.State">
            <summary>
            Gets a reference to the object which was supplied by the developer in <i>state</i>
            parameter of asynchronous methods of the mailer components.
            </summary>
            <value>A reference to the state object, or null (<b>Nothing</b> in Visual Basic) if
            the current event was generated by a synchronous method.</value>
            <remarks>State objects can be used by the developer in order to pass any data
            to event handlers. MailBee itself just passes the value of <i>state</i>
            parameter of asynchronous methods to this property, but does not use it in any
            other way.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MailMessage">
            <summary>
            Gets the mail message which is about to be sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MailMessage"/> object representing the mail message to be sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualRecipients">
            <summary>
            Gets or sets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
            <remarks>
            <para>Since MailBee allows sending messages to e-mail addresses different
            from the addresses specified by <see cref="P:MailBee.Mime.MailMessage.To"/>,
            <see cref="P:MailBee.Mime.MailMessage.Cc"/>, and <see cref="P:MailBee.Mime.MailMessage.Bcc"/> properties,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualRecipients"/> property to obtain
            the actual addresses the message is sent to.</para>
            <para>The developer may also set this property to change the recipients of the mail message.
            Passing a null reference (<b>Nothing</b> in Visual Basic) will make the message be sent
            to the recipients returned by <see cref="M:MailBee.Mime.MailMessage.GetAllRecipients"/> method.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualSenderEmail">
            <summary>
            Gets or sets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            of the message sender.</value>
            <remarks>
            <para>Since MailBee allows sending messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message is sent from.</para>
            <para>The developer may also set this address to change the sender of the mail message.
            Passing a null reference (<b>Nothing</b> in Visual Basic) will make the message be sent
            from <see cref="P:MailBee.Mime.MailMessage.From"/> address.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.DeliveryNotification">
            <summary>
            Gets the delivery status notification settings of the mail message to be sent.
            </summary>
            <value>A reference to the <see cref="T:MailBee.SmtpMail.DeliveryNotificationOptions"/> object representing the DSN settings specified for the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MergeTable">
            <summary>
            Gets the reference to the data table used for mail merge of this message.
            </summary>
            <value>A reference to the data table used for mail merge of this message,
            or a null reference (<b>Nothing</b> in Visual Basic) if this mail message
            was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message being sent.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MergeRowIndex">
            <summary>
            Gets the index of the data row used for mail merge of this message.
            </summary>
            <value>The index of the data row in <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MergeTable"/> data table used for mail merge of this message,
            or zero if this mail message was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message being sent.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.Tag">
            <summary>
            Gets the tag assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> of processing the given message.
            </summary>
            <value>A string assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> object associated with the given message, or empty string if tag was not assigned.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.SendIt">
            <summary>
            Gets or sets whether this message will be sent.
            </summary>
            <value>If <b>true</b>, the message will be sent; otherwise, it will be ignored. The default value is <b>true</b>.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSenderSubmittedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSenderSubmittedEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSenderSubmittedEventArgs.SenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            of the mail message sender which was accepted by the SMTP server.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSenderSubmittedEventArgs.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageSenderSubmittedEventArgs.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs.RecipientEmail">
            <summary>
            Gets the e-mail address of the recipient of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            of the mail message recipient which was accepted or refused by the SMTP server.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs.Result">
            <summary>
            Gets the status of submission the recipient e-mail address to the SMTP server.
            </summary>
            <value><b>true</b> if the recipient e-mail address was accepted by the SMTP
            server; <b>false</b> is the SMTP server rejected this address.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs.ServerStatusMessage">
            <summary>
            Gets the string containing the status line of the SMTP server response.
            </summary>
            <value>The status string of the SMTP server response to the recipient submission attempt.</value>
            <remarks>
            <para>This value can be used to determine why the server refused a certain recipient.</para>
            <para>Examples of the values returned by this property:
            <list type="bullet">
            <item><description><i>250 good@address.com accepted</i> (positive)</description></item>
            <item><description><i>501 bad@@@address.com syntax error</i> (negative)</description></item>
            </list>
            </para></remarks>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageDataChunkSentEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs.BytesJustSent">
            <summary>
            Gets the number of bytes sent to the server during the operation which raised the
            current event.
            </summary>
            <value>The number of bytes sent to the server during the operation which raised the
            current event.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs.TotalBytesSent">
            <summary>
            Gets the total length (in bytes) of the already sent data of the message currently
            being sent. 
            </summary>
            <value>The total length (in bytes) of the already received data of the message currently
            being sent, including the bytes just sent.</value>
            <remarks>If the message is being sent in multiple SMTP sessions (such as to many SMTP MX servers
            in direct send mode), this value applies to the current SMTP session only. Message
            data traffic produced during previous SMTP sessions is not counted.
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs.DataTotalLength">
            <summary>
            Gets the length (in bytes) of the message data being sent.
            </summary>
            <value>The length (in bytes) of the message data to be sent.</value>
            <remarks><para>The following formula can be used to determine percentage
            of sending the message data to the SMTP server:</para>
            <para><c>sendProgress = (DataTotalLength * 100) / TotalBytesSent</c>.</para></remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.MailMessage">
            <summary>
            Gets the mail message which was successfully submitted to the SMTP server.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.MailMessage"/> object representing the mail message
            which was successfully submitted to the SMTP server.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.IntendedRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.AcceptedRecipients">
            <summary>
            Gets the list of all recipients which were accepted by the SMTP server.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients which were accepted by the SMTP server.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.RefusedRecipients">
            <summary>
            Gets the list of all recipients which were refused by the SMTP server.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients which were refused by the SMTP server.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
            <remarks>Since <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method can be used to send messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message was sent from.</remarks>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSentEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSentEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.MailMessage">
            <summary>
            Gets the mail message which was sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.MailMessage"/> object representing the message which was sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.IntendedRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.SuccessfulRecipients">
            <summary>
            Gets the list of recipients the message was successfully delivered to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients which received the message.</value>
            <remarks>The list of recipients returned by this property indicates which
            recipients have been accepted by SMTP servers the message was submitted to.
            <note>Although a particular domain's SMTP server may successfully accept the message for delivery
            (and the recipients of this domain will be added into <see cref="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.SuccessfulRecipients"/>)
            list), it still does not guarantee the server itself will deliver the message to the
            recipients. Many servers accept non-existent recipient e-mail addresses when
            the message is being submitted, and then send bounced message back to the sender
            if certain e-mail address is invalid.</note></remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.FailedRecipients">
            <summary>
            Gets the list of recipients the message was not delivered to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients which did not receive the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
            <remarks>Since <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method can be used to send messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message was sent from.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.MergeTable">
            <summary>
            Gets the reference to the data table used for mail merge of this message.
            </summary>
            <value>A reference to the data table used for mail merge of this message,
            or a null reference (<b>Nothing</b> in Visual Basic) if this mail message
            was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message sent.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.MergeRowIndex">
            <summary>
            Gets the index of the data row used for mail merge of this message.
            </summary>
            <value>The index of the data row in <see cref="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.MergeTable"/> data table used for mail merge of this message,
            or zero if this mail message was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message sent.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSentEventArgs.Tag">
            <summary>
            Gets the tag assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> of processing the given message.
            </summary>
            <value>A string assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> object associated with the given message, or empty string if tag was not assigned.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageNotSentEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageNotSentEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.MailMessage">
            <summary>
            Gets the mail message which could not be sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.MailMessage"/> object representing the message which could not be sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.IntendedRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
            <remarks>Since <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method can be used to send messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message was sent from.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.Reason">
            <summary>
            Gets the exception describing the error which prevented the message from being sent.
            </summary>
            <value>A reference to the exception.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.MergeTable">
            <summary>
            Gets the reference to the data table used for mail merge of this message.
            </summary>
            <value>A reference to the data table used for mail merge of this message,
            or a null reference (<b>Nothing</b> in Visual Basic) if this mail message
            was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message which could not be sent.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.MergeRowIndex">
            <summary>
            Gets the index of the data row used for mail merge of this message.
            </summary>
            <value>The index of the data row in <see cref="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.MergeTable"/> data table used for mail merge of this message,
            or zero if this mail message was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message which could not be sent.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageNotSentEventArgs.Tag">
            <summary>
            Gets the tag assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> of processing the given message.
            </summary>
            <value>A string assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> object associated with the given message, or empty string if tag was not assigned.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMergingMessageEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MergingMessage"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMergingMessageEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MergingMessage"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.TemplateMessage">
            <summary>
            Gets the mail message template which is about to be merged with the data from a database table row.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the mail message template.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.TemplateSenderEmail">
            <summary>
            Gets the actual sender's e-mail address template which is about to be merged with the data from a database table row.
            </summary>
            <value>The string representing the template of the actual sender's e-mail address.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.TemplateRecipients">
            <summary>
            Gets the actual recipients template which is about to be merged with the data from a database table row.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing the actual recipients template.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.TemplateDeliveryNotification">
            <summary>
            Gets the delivery status notification template which is about to be merged with the data from a database table row.
            </summary>
            <value>A reference to the <see cref="T:MailBee.SmtpMail.DeliveryNotificationOptions"/> object representing the DSN settings specified for the message.</value>
            <remarks>If the message is submitted to the pickup folder rather than sent out, DSN settings are ignored.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.MergeTable">
            <summary>
            Gets the data table whose row is about to be merged with the mail message template.
            </summary>
            <value>A reference to the <see cref="T:System.Data.DataTable"/> object representing the data table for mail merge.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.MergeRowIndex">
            <summary>
            Gets the index of the data table row which is about to be merged with the mail message template.
            </summary>
            <value>An integer value representing an index of the row in <see cref="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.MergeTable"/> object to be used for mail merge.</value>
            <remarks>The developer can obtain a reference to the <see cref="T:System.Data.DataRow"/> object as follows (in C# syntax): <c>e.MergeTable.Rows[e.MergeRowIndex]</c> where
            <c>e</c> is an <see cref="T:MailBee.SmtpMail.SmtpMergingMessageEventArgs"/> object instance.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.Tag">
            <summary>
            Gets the tag assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> of processing the given message.
            </summary>
            <value>A string assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> object associated with the given message, or empty string if tag was not assigned.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.MergeIt">
            <summary>
            Gets or sets whether the current data row will be merged with the mail template.
            </summary>
            <value>If <b>true</b>, the data row designated by <see cref="P:MailBee.SmtpMail.SmtpMergingMessageEventArgs.MergeRowIndex"/> will be merged
            with the mail template and the resulting message will be sent out or submitted to the pickup folder;
            otherwise, this data row will be skipped so that no e-mail message for this data row will be sent or
            submitted to the pickup folder. The default value is <b>true</b>.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MailMessage">
            <summary>
            Gets the mail message which is about to be submitted to MailBee Message Queue or IIS SMTP pickup folder.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MailMessage"/> object representing the mail message to be submitted to the pickup folder.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.PickupFolderName">
            <summary>
            Gets or sets the full physical path to MailBee Message Queue or IIS SMTP pickup folder.
            </summary>
            <value>The full physical path to MailBee Message Queue or IIS SMTP pickup folder where the mail message should be saved (such as "C:\Inetpub\mailroot\Pickup").</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is an empty string or a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.Filename">
            <summary>
            Gets or sets the filename of the message file to be saved in the pickup folder.
            </summary>
            <value>The filename (without folder path) under which the message file will be saved in MailBee Message Queue or IIS SMTP pickup folder (for instance, "app18_10469.eml"). The default value is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>By default, this value is a null reference. In this case, MailBee will automatically generate a unique filename for the queued message file.
            The developer can change the value of this property to employ a special naming schema for message files. Filenames auto-generated by MailBee look like "0ac5356fb20417188a04f4ec3f219ce5.eml".</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualRecipients">
            <summary>
            Gets or sets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
            <remarks>
            <para>Since MailBee allows sending messages to e-mail addresses different
            from the addresses specified by <see cref="P:MailBee.Mime.MailMessage.To"/>,
            <see cref="P:MailBee.Mime.MailMessage.Cc"/>, and <see cref="P:MailBee.Mime.MailMessage.Bcc"/> properties,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualRecipients"/> property to obtain
            the actual addresses the message is sent to.</para>
            <para>The developer may also set this property to change the recipients of the mail message.
            Passing a null reference (<b>Nothing</b> in Visual Basic) will make the message be sent
            to the recipients returned by <see cref="M:MailBee.Mime.MailMessage.GetAllRecipients"/> method.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualSenderEmail">
            <summary>
            Gets or sets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            of the message sender.</value>
            <remarks>
            <para>Since MailBee allows sending messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message is sent from.</para>
            <para>The developer may also set this address to change the sender of the mail message.
            Passing a null reference (<b>Nothing</b> in Visual Basic) will make the message be sent
            from <see cref="P:MailBee.Mime.MailMessage.From"/> address.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MergeTable">
            <summary>
            Gets the reference to the data table used for mail merge of this message.
            </summary>
            <value>A reference to the data table used for mail merge of this message,
            or a null reference (<b>Nothing</b> in Visual Basic) if this mail message
            was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message being submitted to the pickup folder.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MergeRowIndex">
            <summary>
            Gets the index of the data row used for mail merge of this message.
            </summary>
            <value>The index of the data row in <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MergeTable"/> data table used for mail merge of this message,
            or zero if this mail message was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message being submitted to the pickup folder.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.Tag">
            <summary>
            Gets the tag assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> of processing the given message.
            </summary>
            <value>A string assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> object associated with the given message, or empty string if tag was not assigned.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.SubmitIt">
            <summary>
            Gets or sets whether this message will be submitted to MailBee Message Queue or IIS SMTP pickup folder.
            </summary>
            <value>If <b>true</b>, the message will be submitted to the pickup folder; otherwise, it will be ignored. The default value is <b>true</b>.</value>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToPickupFolder"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToPickupFolder"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.MailMessage">
            <summary>
            Gets the mail message which was submitted to IIS SMTP queue (pickup folder).
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.MailMessage"/> object representing the mail message just queued.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.PickupFolderName">
            <summary>
            Gets the full physical path to the folder the message file was saved in.
            </summary>
            <value>The full physical path to the folder in which the message file was saved.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.Filename">
            <summary>
            Gets the filename of the saved message file.
            </summary>
            <value>The filename (without folder path) under which the queued message file was saved in the queue folder.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.ActualRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            of the message sender.</value>
            <remarks>Since MailBee allows sending messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message was sent from.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.MergeTable">
            <summary>
            Gets the reference to the data table used for mail merge of this message.
            </summary>
            <value>A reference to the data table used for mail merge of this message,
            or a null reference (<b>Nothing</b> in Visual Basic) if this mail message
            was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message queued.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.MergeRowIndex">
            <summary>
            Gets the index of the data row used for mail merge of this message.
            </summary>
            <value>The index of the data row in <see cref="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.MergeTable"/> data table used for mail merge of this message,
            or zero if this mail message was not composed as a merge of database data with mail template.</value>
            <remarks>For mail merge operations, <c>e.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>e</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SmtpMessageSentEventArgs"/> class) returns
            <see cref="T:System.Data.DataRow"/> used for mail merge of the message queued.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs.Tag">
            <summary>
            Gets the tag assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> of processing the given message.
            </summary>
            <value>A string assigned by the developer to <see cref="T:MailBee.SmtpMail.SendMailJob"/> object associated with the given message, or empty string if tag was not assigned.</value>
        </member>
        <member name="T:MailBee.SmtpMail.DirectSendServerConfig">
            <summary>
            Provides properties which specify SMTP server settings to be used by <see cref="T:MailBee.SmtpMail.Smtp"/>
            component for SMTP servers found through MX lookup.
            </summary>
            <remarks>
            <para>When <see cref="T:MailBee.SmtpMail.Smtp"/> component sends mail in direct send mode (such as when
            <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is empty while <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection
            is not), it finds SMTP server for each recipient domain through MX
            lookup against DNS server. The only information returned by the DNS server is SMTP
            server name and usage preference (if multiple SMTP servers can accept mail for the given
            domain). The properties of this class allow the developer to specify some additional settings
            which affect how MailBee will communicate with the SMTP server which was found through MX lookup.</para>
            <para>To access <see cref="T:MailBee.SmtpMail.DirectSendServerConfig"/> object,
            use <see cref="P:MailBee.SmtpMail.Smtp.DirectSendDefaults">Smtp.DirectSendDefaults</see> property.</para>
            <note>SMTP servers manually added by the developer (i.e. <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/>
            collection) are NOT affected by any members of <see cref="T:MailBee.SmtpMail.DirectSendServerConfig"/> class.</note>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.DirectSendServerConfig.Timeout">
            <summary>
            Gets or sets the amount of time (in milliseconds) the component will wait for a response from the server.
            </summary>
            <value>The amount of time (in milliseconds) the component will wait for data to be received from the server
            before returning an error. The default value is <see cref="P:MailBee.Global.DefaultTimeout"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="P:MailBee.SmtpMail.DirectSendServerConfig.Pipelining">
            <summary>
            Gets or sets whether to use commands pipelining if it's supported by the server.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value which specifies whether to join
            SMTP commands in batches if the server supports <i>PIPELINING</i> extension. The default value is <see cref="P:MailBee.Global.Pipelining"/>.</value>
            <remarks>ESMTP PIPELINING extension may provide a great performance benefit if the message
            being sent has many recipients. If the server does not support pipelining, this value is ignored.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.DirectSendServerConfig.HelloDomain">
            <summary>
            Gets or sets the domain string to be used in the EHLO or HELO command when connecting
            to the server.
            </summary>
            <value>The domain to be used in the HELO or EHLO command when connecting
            to the server, or empty string (<see cref="F:System.String.Empty"/>), which tells MailBee
            to use the sender's e-mail address (or, if it's empty, the host name of the local computer)
            as the domain string. The default value is empty string.</value>
            <remarks>Usually, this property does not need to be changed. If it's empty string (default value),
            MailBee will automatically send correct HELO or EHLO command based on the sender's e-mail address
            or the local host name.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.DirectSendServerConfig.SmtpOptions">
            <summary>
            Gets or sets ESMTP options specifying which SMTP extensions
            must not be used when communicating with the server.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/>
            </summary>
            <value>An <see cref="T:MailBee.SmtpMail.ExtendedSmtpOptions"/> value containing bitwise combination
            of flags specifying which SMTP extensions (except PIPELINING, which is controlled by
            the separate <see cref="P:MailBee.SmtpMail.DirectSendServerConfig.Pipelining"/> property) must not be used when communicating
            with the server. The default value is <see cref="F:MailBee.SmtpMail.ExtendedSmtpOptions.Default"/>.</value>
        </member>
        <member name="P:MailBee.SmtpMail.DirectSendServerConfig.LocalEndPoint">
            <summary>
            Gets or sets the local end point which will be used when connecting to SMTP MX servers.
            </summary>
            <value>A reference to the local end point to be used when connecting to SMTP MX servers, or a null reference
            (<b>Nothing</b> in Visual Basic) if the local end point should be assigned automatically. The default value is a null reference.</value>
            <remarks>
            <para>If the computer running MailBee has multiple IP addresses assigned (for instance, it has several network adapters installed),
            you can set this property to the IP address and port which should be used for outbound connections. See <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/>
            and <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"/> topics for more information.</para>
            <para>If you're sending to an SMTP relay server rather than using "direct send" mode, the property to be set in this case is
            <see cref="P:MailBee.SmtpMail.SmtpServer.LocalEndPoint">SmtpServer.LocalEndPoint</see>.</para>
            </remarks>
        </member>
        <member name="T:MailBee.ErrorEventHandler">
            <summary>
            Represents the method that will handle <b>ErrorOccurred</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred">Smtp.ErrorOccurred</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred">Pop3.ErrorOccurred</see> or
            <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred">Imap.ErrorOccurred</see>).
            </summary>
        </member>
        <member name="T:MailBee.ErrorEventArgs">
            <summary>
            Contains the event data for <b>ErrorOccurred</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred">Smtp.ErrorOccurred</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred">Pop3.ErrorOccurred</see> or
            <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred">Imap.ErrorOccurred</see>).
            </summary>
        </member>
        <member name="P:MailBee.ErrorEventArgs.Reason">
            <summary>
            Gets the exception which caused the current event to be raised.
            </summary>
            <value>A reference to the exception.</value>
        </member>
        <member name="P:MailBee.ErrorEventArgs.IsFinalError">
            <summary>
            Indicates whether the exception caused the current event will be thrown by MailBee
            once the current event handler finished execution.
            </summary>
            <value><b>true</b> if MailBee will throw the current exception once the event handler
            returns control to MailBee. <b>false</b> if MailBee will catch the exception and continue.</value>
        </member>
        <member name="T:MailBee.LogNewEntryEventHandler">
            <summary>
            Represents the method that will handle <b>LogNewEntry</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.LogNewEntry">Smtp.LogNewEntry</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry">Pop3.LogNewEntry</see> or
            <see cref="E:MailBee.ImapMail.Imap.LogNewEntry">Imap.LogNewEntry</see>).
            </summary>
        </member>
        <member name="T:MailBee.LogNewEntryEventArgs">
            <summary>
            Contains the event data for <b>LogNewEntry</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.LogNewEntry">Smtp.LogNewEntry</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry">Pop3.LogNewEntry</see> or
            <see cref="E:MailBee.ImapMail.Imap.LogNewEntry">Imap.LogNewEntry</see>).
            </summary>
            <remarks>The developer can cancel adding the log entry to the log file by setting
            <see cref="P:MailBee.LogEntry.AddThisEntry"/> to <b>false</b>.</remarks>
        </member>
        <member name="P:MailBee.LogNewEntryEventArgs.NewEntry">
            <summary>
            Gets a reference to the log entry MailBee is going to put into the log file
            (or into the memory buffer if <see cref="P:MailBee.Logger.MemoryLog"/> is <b>true</b>).
            </summary>
            <value>Returns a reference to the log entry.</value>
        </member>
        <member name="T:MailBee.ImapMail.Folder">
            <summary>
            Represents a folder (mailbox in IMAP4 terms) of the account on the mail server.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/>
            <seealso cref="T:MailBee.ImapMail.FolderCollection"/>
            </summary>
            <remarks>The list of folders can be obtained using <see cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/> method
            of <see cref="T:MailBee.ImapMail.Imap"/> component. In any case, an account on the mail server is guaranteed to
            contain at least "INBOX" folder (case-insensitive). Also, IMAP4 accounts often contain folders such as "Sent",
            "Drafts", etc.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Folder.Delimiter">
            <summary>
            Gets the character which is used as a hierarchy delimiter of separate levels of folder names.
            </summary>
            <value>The string containing a single character used to separate levels of hierarchy of folder names,
            or a null reference (<b>Nothing</b> in Visual Basic) if folder names are flat and nested folders
            are not supported.</value>
            <remarks>
            The typical values returned by this property are: "/", ".", "\".
            <note>This property returns a null reference (<b>Nothing</b> in Visual Basic) if <see cref="P:MailBee.ImapMail.Folder.IsValid"/> is <b>false</b>.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Folder.Name">
            <summary>
            Gets the full name of the folder including parent folder names if any.
            <seealso cref="P:MailBee.ImapMail.Folder.ShortName"/>
            <seealso cref="P:MailBee.ImapMail.Folder.RawName"/>
            <seealso cref="P:MailBee.ImapMail.Folder.Delimiter"/>
            <seealso cref="P:MailBee.ImapMail.Folder.NestingLevel"/>
            </summary>
            <value>The string containing the full name of the folder including parent folder names if any.</value>
            <remarks>
            <para>
            The typical values returned by this property are: "Inbox", "Sent.Orders", "INBOX\From John Doe".
            </para>
            <para>To get short name of the folder (without parent path), the developer can use <see cref="P:MailBee.ImapMail.Folder.ShortName"/> property. For instance,
            the full folder names from the paragraph above correspond to the following short names: "Inbox", "Orders", "From John Doe".
            </para>
            <para>
            To get a character which is used to delimit folder levels on the current server, the developer can use <see cref="P:MailBee.ImapMail.Folder.Delimiter"/> property.
            For instance, <see cref="P:MailBee.ImapMail.Folder.ShortName"/> of "Sent.Orders" is "Sent" only if <see cref="P:MailBee.ImapMail.Folder.Delimiter"/> is ".". If, however, the delimiter is another
            character, <see cref="P:MailBee.ImapMail.Folder.ShortName"/> will return "Sent.Orders". The most popular delimiter nowdays is "/".
            </para>
            <para>MailBee automatically decodes international folder names presented in UTF-7 Modified encoding
            (see IMAP4 protocol specification in RFC3501 for details on UTF-7 Modified encoding). However, the original
            name (not decoded from UTF-7 Modified) is still available via <see cref="P:MailBee.ImapMail.Folder.RawName"/> property.</para>
            <note>This property returns a null reference (<b>Nothing</b> in Visual Basic) if <see cref="P:MailBee.ImapMail.Folder.IsValid"/> is <b>false</b>.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Folder.RawName">
            <summary>
            Gets the full name of the folder as was returned by the server including parent folder names if any.
            <seealso cref="P:MailBee.ImapMail.Folder.Name"/>
            </summary>
            <value>The string containing the full name of the folder as was returned by the server including parent folder names if any.</value>
            <remarks>
            Unlike <see cref="P:MailBee.ImapMail.Folder.Name"/>, <see cref="P:MailBee.ImapMail.Folder.RawName"/> is not automatically decoded from UTF-7 Modified encoding.
            The developer can use <see cref="P:MailBee.ImapMail.Folder.RawName"/> in conjuction with <see cref="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames"/> set to <b>false</b>
            to preserve the original names of folders when passing them back to the server. This can be useful if the account contains
            some folder names encoded with the encoding different from UTF-7M. In this case, automatic re-encoding them into UTF-7M
            would cause problems.
            <note>This property returns a null reference (<b>Nothing</b> in Visual Basic) if <see cref="P:MailBee.ImapMail.Folder.IsValid"/> is <b>false</b>.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Folder.ShortName">
            <summary>
            Gets the short name (without parent folder names if any) of the folder.
            <seealso cref="P:MailBee.ImapMail.Folder.NestingLevel"/>
            </summary>
            <value>The string containing the folder's short name without any delimiters or parent folder names.</value>
            <remarks>If the folder is a top level folder, its short name is equal to its full name.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Folder.NestingLevel">
            <summary>
            Gets the level of nesting of this folder into parent folders.
            </summary>
            <value>A zero-based integer value indicating the level of nesting of this folder into parent folders if any.
            If the folder is a top level folder, this value is 0.
            </value>
            <remarks>
            <para>For instance, if the full name of the folder is "Inbox/Orders/April 2006" and <see cref="P:MailBee.ImapMail.Folder.Delimiter"/> is "/",
            this property will return 2.</para>
            The common use of this property is displaying folder list with indentations according to folder nesting levels.
            You can find the corresponding code sample in <see cref="M:MailBee.ImapMail.Imap.DownloadFolders"/> topic.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Folder.Flags">
            <summary>
            Gets the set of flags associated with the folder.
            </summary>
            <value>A <see cref="T:MailBee.ImapMail.FolderFlags"/> value containing the set of flags associated with the folder.</value>
        </member>
        <member name="P:MailBee.ImapMail.Folder.IsValid">
            <summary>
            Gets if the server response containing the folder information has been successfully parsed. 
            </summary>
            <value><b>true</b> if the server response containing the folder information was correct; <b>false</b> otherwise.</value>
            <remarks>Due to complexity of IMAP4 responses, some server implementations fail to produce
            100% correct responses sometimes. If MailBee cannot parse certain folder response,
            it returns <see cref="T:MailBee.ImapMail.Folder"/> object having <see cref="P:MailBee.ImapMail.Folder.IsValid"/> set to <b>false</b>.</remarks>
        </member>
        <member name="T:MailBee.Html.Processor">
            <summary>
            Helper class which provides properties and methods for loading or saving HTML document from/into a stream and examining its contents.
            </summary>
            <remarks>
            <para>Use this class if you need to load HTML document from a stream (or save it into a stream) or
            access the collections of links or images contained in the document. In other cases,
            you can use <see cref="T:MailBee.Html.Element"/> class on its own.</para>
            <para>As alternative to using this class, you can create <see cref="T:MailBee.Html.Element"/> object directly
            and use the standard stream classes of .NET framework to fill this <see cref="T:MailBee.Html.Element"/> object with data.
            To access links, images, or any other elements, you can use <see cref="M:MailBee.Html.Element.GetAllElementsByName(System.String)"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagRemovalRule(System.String,MailBee.Html.TagAttributeCollection)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.Processor.LoadFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads HTML markup from a stream.
            </summary>
            <param name="inputStream">The stream representing the content of the HTML markup.</param>
            <param name="enc">The encoding to use for decoding stream data from bytes to string.
            If a null reference (<b>Nothing</b> in Visual Basic), UTF-8 encoding will be used.</param>
            <returns>
            <b>true</b> if the entire data was successfully read from the stream; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="outputStream"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeStreamException">A stream error occurred and <see cref="P:MailBee.Html.Processor.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.Html.Processor.SaveToStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves HTML markup into a stream.
            </summary>
            <param name="outputStream">The stream where the HTML markup should be saved to.</param>
            <param name="enc">The encoding to use for encoding the HTML data from string into bytes.
            If a null reference (<b>Nothing</b> in Visual Basic), UTF-8 encoding will be used.</param>
            <returns>
            <b>true</b> if the entire data was successfully encoded and saved into the stream; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="outputStream"/> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:MailBee.MailBeeStreamException">The given stream does not support writing or stream I/O error occurred, and <see cref="P:MailBee.Html.Processor.ThrowExceptions"/> is true.</exception>
        </member>
        <member name="P:MailBee.Html.Processor.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the object will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the object methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Html.Processor.LastResult"/> members to get more information about the error.
            <note>
            Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee usage will still be thrown.
            <para>
            Typical example of such errors is passing invalid arguments to methods. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be supressed.
            </para>
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.Html.Processor.LastResult">
            <summary>
            Gets the code of the last occurred error.
            </summary>
            <value>
            An integer value containing a numeric code of the last error, or the <see cref="F:MailBee.ErrorCodes.OK"/>
            value if no errors occurred. The default value is <see cref="F:MailBee.ErrorCodes.OK"/>.
            </value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="P:MailBee.Html.Processor.AHRefs">
            <summary>
            Gets the list of all links (&lt;A HREF&gt; tags) in <see cref="P:MailBee.Html.Processor.Dom"/> HTML document.
            </summary>
            <value>A reference to the collection containing all the hyperlinks in the current HTML document.</value>
        </member>
        <member name="P:MailBee.Html.Processor.Images">
            <summary>
            Gets the list of all &lt;IMG&gt; tags in <see cref="P:MailBee.Html.Processor.Dom"/> HTML document.
            </summary>
            <value>A reference to the collection containing all the images in the current HTML document.</value>
        </member>
        <member name="P:MailBee.Html.Processor.Dom">
            <summary>
            Gets the root <see cref="T:MailBee.Html.Element"/> object which represents the entire HTML document.
            </summary>
        </member>
        <member name="T:MailBee.Proxy.MailBeeProxyException">
            <summary>
            An abstract parent for all exceptions that are thrown when the proxy server returns negative reply during negotiating with the client.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeConnectionException">
            <summary>
            An abstract parent for all connection-level exceptions which indicate the connection
            cannot be used any longer and must be immediately closed.
            <seealso cref="T:MailBee.IMailBeeSocketMustCloseException"/>
            </summary>
        </member>
        <member name="T:MailBee.IMailBeeSocketMustCloseException">
            <summary>
            When implemented by an exception class, indicates the network exception is connection level
            (not application protocol level), so that the connection is no longer valid and will be closed.
            </summary>
            <remarks>
            Connection level network exceptions (timeout errors, unparseable server responses,
            socket exceptions, etc) make it impossible to continue using an existing connection.
            In contrast, application level network exceptions (such as negative responses from
            the server) do not require immediate disconnect. For instance, if login failed due to
            incorrect user account name and/or password, the connection may still be valid, and
            another login/password may be tried without reconnecting to the server.
            </remarks>
        </member>
        <member name="T:MailBee.Proxy.MailBeeProxyAuthorizationException">
            <summary>
            The exception that is thrown when the proxy server rejects the proxy connection request from the client.
            </summary>
        </member>
        <member name="T:MailBee.Proxy.MailBeeProxyAuthenticationException">
            <summary>
            The exception that is thrown when the proxy server rejects authentication data sent the client
            or does not support any of the authentication methods supported by the client.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.MetaBase">
            <summary>
            XML config file processing. Class allows read from config file into set of usefull
            arrays, which can be accessed through read-only properties.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpServerCollection">
            <summary>
            Represents a sorted collection of <see cref="T:MailBee.SmtpMail.SmtpServer"/> objects.
            </summary>
            <remarks>
            <para>When <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is populated
            with at least one SMTP relay server of the same or higher priority than the top priority DNS server in
            <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection (or <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection is empty),
            <see cref="T:MailBee.SmtpMail.Smtp"/> component will attempt to send the mail message to the first SMTP relay server in
            <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection. If it fails, MailBee will attempt to connect
            and send to lower priority SMTP relay servers. If this fails too and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection is not empty, the mail message will be sent in direct send mode.</para>
            <para>If the top priority SMTP relay server has lower priority than the top priority
            DNS server in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection, <see cref="T:MailBee.SmtpMail.Smtp"/> component will attempt
            to send the mail message in direct send mode, and then try to send to SMTP relay servers
            if certain recipients failed during direct send.</para>
            <para>When <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method is called (rather than <see cref="M:MailBee.SmtpMail.Smtp.Send"/>),
            the <see cref="T:MailBee.SmtpMail.Smtp"/> component will attempt to connect to the SMTP relay servers in the same way
            as described above. However, if all SMTP relay servers failed, no attempt to perform direct send
            is made (because <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method does not send any mail messages, it only connects to
            an SMTP relay server). In other words, when the connection is established via explicit
            call to <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method, direct send mode and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection
            are never used.</para>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Add(MailBee.SmtpMail.SmtpServer)">
            <summary>
            Adds an <see cref="T:MailBee.SmtpMail.SmtpServer"/> to the collection and sorts the collection
            according to the elements priorities.
            </summary>
            <param name="server">An <see cref="T:MailBee.SmtpMail.SmtpServer"/> to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>It's recommended to add elements from higher priority to lower priority.
            Thus, the elements will stay in the same order as they were added.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Add(System.String)">
            <summary>
            Adds a top (0) priority SMTP relay server under the specified host name (or IP address string) to the collection
            and sorts the collection according to the elements priorities.
            </summary>
            <param name="serverName">The host name or IP address string of the SMTP relay server to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>A reference to <see cref="T:MailBee.SmtpMail.SmtpServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="serverName"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception> 
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with
            the given host name (or IP address string), port number and priority value,
            adds this instance into the collection, and sorts the collection according to the elements priorities.
            </summary>
            <param name="serverName">The host name or IP address string of the SMTP relay server to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="serverPort">The port on which to communicate with the SMTP relay server. The standard SMTP port is 25.</param>
            <param name="priority">A preference of the SMTP relay server. Lower values are preferred.</param>
            <returns>A reference to <see cref="T:MailBee.SmtpMail.SmtpServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic) or <paramref name="serverPort"/> is an invalid port number.</exception>
            <remarks>It's recommended to add elements from higher priority to lower priority.
            Thus, the elements will stay in the same order as they were added.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds a top (0) priority SMTP relay server under the specified host name (or IP address string) to the collection,
            enables ESMTP authentication for this server, and sorts the collection according to the elements priorities.
            </summary>
            <param name="serverName">The host name or IP address string of the SMTP relay server to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <returns>A reference to <see cref="T:MailBee.SmtpMail.SmtpServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="serverName"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>This method automatically sets <see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> property
            value to <see cref="F:MailBee.AuthenticationMethods.Auto"/>.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Add(System.String,System.String,System.String,MailBee.AuthenticationMethods)">
            <summary>
            Adds a top (0) priority SMTP relay server under the specified host name (or IP address string) to the collection,
            enables ESMTP authentication for this server using the specified methods, and sorts the collection according to the elements priorities.
            </summary>
            <param name="serverName">The host name or IP address string of the SMTP relay server to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when authenticating the user on the server.</param>
            <returns>A reference to <see cref="T:MailBee.SmtpMail.SmtpServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="serverName"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Add(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,MailBee.AuthenticationMethods,System.String,System.String,System.Boolean,System.String,MailBee.SmtpMail.ExtendedSmtpOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with the given
            parameter values, adds this instance to the collection, and sorts the collection according to the elements priorities.
            </summary>
            <param name="serverName">The host name or IP address of the SMTP relay server.</param>
            <param name="serverPort">The port on which to communicate with the SMTP relay server. The standard SMTP port is 25.</param>
            <param name="priority">A preference of the SMTP relay server. Lower values are preferred.</param>
            <param name="timeout">The amount of time (in milliseconds) the component will wait for data to be received from the server
            before returning an error, or zero to wait indefinitely.</param>
            <param name="pipelining">Specifies whether to use commands pipelining (ESMTP PIPELINING) if it's supported by the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when authenticating the user on the server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <param name="allowRefusedRecipients">Specifies whether refused recipients should be allowed when submitting a mail message to the server.</param>
            <param name="helloDomain">The string to be supplied as an argument of HELO/EHLO commands, or a null reference (<b>Nothing</b> in Visual Basic)
            to let MailBee autodetect the correct value (see <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> for details).</param>
            <param name="smtpOptions">A set of flags which can be used to disable certain extended SMTP capabilities.</param>
            <returns>A reference to <see cref="T:MailBee.SmtpMail.SmtpServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="serverName"/> is a null reference
            (<b>Nothing</b> in Visual Basic) or <paramref name="serverPort"/> is an invalid port number.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServerCollection.Remove(MailBee.SmtpMail.SmtpServer)">
            <summary>
            Removes the specified <see cref="T:MailBee.SmtpMail.SmtpServer"/> object from the collection.
            </summary>
            <param name="server">A reference to the <see cref="T:MailBee.SmtpMail.SmtpServer"/> object to be removed.</param>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServerCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the entry to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="T:MailBee.SmtpMail.Smtp">
            <summary>
            Provides properties and methods for sending messages using the SMTP protocol.
            </summary>
            <remarks>You can perform the following operations using this class:
            <list type="bullet">
            <item><description>Send messages to an SMTP server</description></item>
            <item><description>Perform mail merge over database to easily create and send bulk mail</description></item>
            <item><description>Test sending messages without actual submitting message data to server (useful for e-mail address validation)</description></item>
            <item><description>Send messages in direct send mode (using MX lookup) when no SMTP relay server is available</description></item>
            <item><description>Specify multiple SMTP and DNS servers for increased reliability and speed of sending very large volumes of messages</description></item>
            <item><description>Authenticate on an SMTP server using a number of methods (including secure authentication methods and POP-before-SMTP)</description></item>
            <item><description>Take advantage of ESMTP pipelining which dramatically speeds up sending messages to multiple recipients</description></item>
            <item><description>Take advantage of ESMTP chunking which significantly speeds up sending large messages</description></item>
            <item><description>Track message delivery using ESMTP Delivery Status Notifications</description></item>
            <item><description>Send messages with a single line of code (using static methods)</description></item>
            <item><description>Submit messages directly to MailBee Message Queue or IIS SMTP pickup service</description></item>
            <item><description>Send messages through TLS/SSL secure connection</description></item>
            <item><description>Establish connection via a proxy server (SOCKS4, SOCKS5, and HTTP proxy are supported)</description></item>
            <item><description>Perform DNS MX, TXT, and reverse DNS queries</description></item>
            </list>
            Also, <see cref="T:MailBee.Security.DomainKeys"/> object uses <see cref="T:MailBee.SmtpMail.Smtp"/> object to perform DNS TXT queries for
            verification of DomainKeys signatures of e-mails.
            </remarks>
            <example>This sample sends plain-text message to the SMTP server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Set the message fields.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain1.com&gt;";
            mailer.To.AsString = "Bill Smith &lt;b.smith@domain2.com&gt;";
            mailer.Subject = "Weekly newsletter";
            mailer.BodyPlainText = "This is the newsletter contents";
            
            <span style="color: green;">// Specify the server to use. If your server does not require authentication, </span>
            <span style="color: green;">// just remove last 2 parameters.</span>
            mailer.SmtpServers.Add("smtp.domain1.com", "jdoe", "secret");
            
            <span style="color: green;">// Send the message.</span>
            mailer.Send();
            
            Console.WriteLine("The message was successfully submitted to the server.");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Set the message fields.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain1.com&gt;"
            mailer.To.AsString = "Bill Smith &lt;b.smith@domain2.com&gt;"
            mailer.Subject = "Weekly newsletter"
            mailer.BodyPlainText = "This is the newsletter contents"
            
            <span style="color: green;">' Specify the server to use. If your server does not require authentication, </span>
            <span style="color: green;">' just remove last 2 parameters.</span>
            mailer.SmtpServers.Add("smtp.domain1.com", "jdoe", "secret")
            
            <span style="color: green;">' Send the message.</span>
            mailer.Send()
            
            Console.WriteLine("The message was successfully submitted to the server.")
            </code>
            </example>
        </member>
        <member name="T:MailBee.InternalUse.SmtpEventSink">
            <summary>
            This class is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageSenderSubmitted(MailBee.SmtpMail.SmtpMessageSenderSubmittedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageRecipientSubmitted(MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageDataChunkSent(MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageSubmittedToServer(MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageSent(MailBee.SmtpMail.SmtpMessageSentEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageNotSent(MailBee.SmtpMail.SmtpMessageNotSentEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMergingMessage(MailBee.SmtpMail.SmtpMergingMessageEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnSendingMessage(MailBee.SmtpMail.SmtpSendingMessageEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnSubmittingMessageToPickupFolder(MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageSubmittedToPickupFolder(MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageDirectSendDone(MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.SmtpEventSink.OnMessageMXLookupDone(MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Dispose">
            <summary>
            Closes opened network connections (if any) and releases any used system resources.
            </summary>
            <remarks>Usually, the developer does not need to call this method. It's recommended
            to call <see cref="M:MailBee.SmtpMail.Smtp.Disconnect"/> method to close the connections and free the resources.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, must release unmananged and optionally managed
            resources used by the component.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.</param>
            <remarks>If the derived class does not use any additional resources, this method
            does not need to be overridden. If, however, it's overridden, the developer must also
            call <see cref="M:MailBee.SmtpMail.Smtp.Dispose"/> method of the base class.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnErrorOccurred(MailBee.ErrorEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnLogNewEntry(MailBee.LogNewEntryEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.LogNewEntry"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.LogNewEntry"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Abort">
            <summary>
            Forces MailBee to cancel all pending operations and close all opened connections
            as soon as possible.
            <seealso cref="P:MailBee.SmtpMail.Smtp.IsAborted"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.ResetState"/>
            </summary>
            <remarks>A method which was in progress when <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method has been called
            will throw <see cref="T:MailBee.MailBeeUserAbortException"/>
            (unless <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is not <b>false</b>).
            If the component was not doing any work at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsBusy"/> was <b>false</b>),
            the connection is aborted but no exception is thrown.
            <note>No events will be raised after this method has been called.</note>
            To restore the component from the aborted state, the developer can use <see cref="M:MailBee.SmtpMail.Smtp.ResetState"/>
            method.
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Wait">
            <summary>
            Waits until the currently running (if any) asynchronous method is finished.
            </summary>
            <exception cref="T:MailBee.MailBeeInvalidStateException"><see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/> is <b>true</b></exception>
            <remarks>This method should only be used in WinForms applications in the scenarios when the application message loop
            is blocked and events raised by asynchronous methods get no chance to be processed.
            <note type="caution"><see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/> property
            must be set to <b>false</b> prior to using this method. This is required in order
            to switch event marshalling mechanism from sending events to the application message loop
            to the internal thread-independent event processor.</note>
            <para>Usually, when the developer uses asynchronous methods which might raise events,
            it's not possible to use methods like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/>,
            since they would block the message loop and thus prevent events (which are raised
            on the message loop thread) from getting processed. <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method provides an alternative
            approach which addresses the problem.</para>
            <para>Another alternative (in WinForms application) to using <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method
            is to never block the application message loop and use callback functions instead of
            waiting for asynchronous method completion.</para>
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.SmtpMail.Smtp"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Wait(System.Int32)">
            <summary>
            Waits the completion of the currently running (if any) asynchronous method
            for the specified amount of time.
            </summary>
            <param name="timeoutInterval">The amount of time (in milliseconds) the method will wait
            completion of the currently running asynchronous method before returning <b>false</b>.</param>
            <returns><b>true</b> if the asynchronous method has finished execution during the specified
            amount of time, <b>false</b> if it's still running.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException"><see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/> is <b>true</b></exception>
            <remarks>This method should only be used in WinForms applications in the scenarios when the application message loop
            is blocked and events raised by asynchronous methods get no chance to be processed.
            <note type="caution"><see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/> property
            must be set to <b>false</b> prior to using this method. This is required in order
            to switch event marshalling mechanism from sending events to the application message loop
            to the internal thread-independent event processor.</note>
            Usually, when the developer wants to use asynchronous methods which might raise events
            in a WinForm application,
            it's not possible to use methods like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/>,
            since they would block the message loop and thus prevent events (which are raised
            on the message loop thread) from getting processed. <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method provides an alternative
            approach which addresses the problem.
            <note>The developer can also use this method with <paramref name="timeoutInterval"/> set to 0 in
            order to process currently pending MailBee events. This is useful if some lengthy work
            is performed on the message loop thread, and the developer wants to periodically
            let MailBee events get processed and then continue the lengthy work without waiting
            for the completion of the asynchronous method. See <see cref="M:MailBee.SmtpMail.Smtp.BeginConnect(System.AsyncCallback,System.Object)"/> method
            for examples.</note>
            Another alternative (in WinForms application) to using <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method
            is to never block the application message loop and use callback functions instead of
            waiting for asynchronous method completion.
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.SmtpMail.Smtp"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note> 
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetErrorDescription">
            <summary>
            Returns a textual description of the last error.
            </summary>
            <returns>A string value containing a textual description of the last error.</returns>
            <remarks>Error descriptions can be localized or edited by deriving from <see cref="T:MailBee.Resources"/>
            class.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.DataReceived"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.DataSent"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetSocket">
            <summary>
            Returns the underlying <see cref="T:System.Net.Sockets.Socket"/> MailBee uses for the
            current SMTP connection.
            </summary>
            <returns>A reference to the underlying <see cref="T:System.Net.Sockets.Socket"/> MailBee uses for the
            current network connection, or a null reference if there is no active connection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetSocketError">
            <summary>
            Returns a Win32 error code of the last socket-related error.
            </summary>
            <returns>An integer value containing the last socket-related error code, or 0 if there is no error.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
            <remarks>
            This error code is obtained from <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnLowLevelDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnLowLevelDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnHostResolved(MailBee.HostResolvedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.HostResolved"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.HostResolved"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnSocketConnected(MailBee.SocketConnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.Connected"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.Connected"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>
            <para>When <see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/> is <b>true</b> (i.e. default value),
            MailBee uses this method to raise <see cref="E:MailBee.SmtpMail.Smtp.Connected"/> event. In WinForms application,
            the event will be raised on the message loop thread. In other applications (such as
            web or console applications), threading is not a concern, and the current thread
            MailBee is running on will be used.</para>
            <para>You can override this method in a derived class to force MailBee execute your own code
            instead of raising <see cref="E:MailBee.SmtpMail.Smtp.Connected"/> event. This may help to avoid threading issues
            in WinForms applications (because events may not be raised if the message loop thread
            is blocked for some reason, while calling overridden methods does not depend on the message
            loop thread state).</para>
            <para>Another solution of this problem is setting <see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/> to <b>false</b>
            and using <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method to block the message loop thread if needed. This way, you do not need
            to derive any descendant class from <see cref="T:MailBee.SmtpMail.Smtp"/> class.</para>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnDisconnected(MailBee.DisconnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.Disconnected"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.Disconnected"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnTlsStarted(MailBee.TlsStartedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.TlsStarted"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.TlsStarted"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnLoggedIn(MailBee.LoggedInEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.LoggedIn"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.LoggedIn"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Disconnect">
            <summary>
            Disconnects from the SMTP server and releases any used resources.
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a disconnection from the server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Disconnect"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous disconnection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.Disconnect"/>.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndDisconnect">
            <summary>
            Ends a pending asynchronous disconnection request.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginDisconnect(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Noop">
            <summary>
            Sends a NOOP command to the server.
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method is useful for keeping the connection alive when there is no real activity.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.ResetState">
            <summary>
            Resets the internal state of the component.
            </summary>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method will close any opened connections, and will remove <see cref="P:MailBee.SmtpMail.Smtp.IsAborted"/>
            status if <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method was previously called. Typically, the developer may use this
            method to reuse the component after it went into aborted state due to <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method call.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetExtensions">
            <summary>
            Returns a reference to the key-value list of the server capabilities.
            </summary>
            <returns>The key-value list of the server capabilities, or a null reference
            (<b>Nothing</b> in Visual Basic) if the capabilities list is not available.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            In order to use this method, the connection with the SMTP server must already
            be established, and <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method already called.
            <note>If the server does not support EHLO command (i.e. the server is not ESMTP enabled),
            the capabilities list will not be available.</note>
            <para>In the returned <see cref="T:System.Collections.Specialized.StringDictionary"/>,
            each key is a capability name (always lowercase). Its value is either empty string
            (if the capability has no parameters) or space-delimited list of the parameters.</para>
            </remarks>
            <example>This sample displays the list of all capabilities supported by the server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("mail.domain.com");
            mailer.Connect();
            mailer.Hello();
            System.Collections.Specialized.StringDictionary caps = mailer.GetExtensions();
            <span style="color: blue;">if</span> (caps == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The given SMTP server does not support any ESMTP extensions");
            }
            <span style="color: blue;">else</span>
            {
            	<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> cap <span style="color: blue;">in</span> caps.Keys)
            	{
            		<span style="color: blue;">string</span> val = caps[cap];
            		<span style="color: blue;">if</span> (val != <span style="color: blue;">string</span>.Empty)
            		{
            			<span style="color: green;">// Print capability name and parameters.</span>
            			Console.WriteLine(cap + " " + val);
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// For parameterless capabilities, print capability name only.</span>
            			Console.WriteLine(cap);
            		}
            	}
            }
            mailer.Disconnect();
            
            <span style="color: green;">// The output (the actual content will be different for a particular mail server)</span>
            dsn
            size
            auth LOGIN PLAIN
            ehlo
            auth=login
            starttls
            help
            pipelining
            
            In the output above, only "auth" capability has parameters.
            Note: auth=login is a single name, while "auth LOGIN PLAIN" denotes auth
            capability having two parameters (LOGIN and PLAIN).
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("mail.domain.com")
            mailer.Connect()
            mailer.Hello()
            <span style="color: blue;">Dim</span> caps <span style="color: blue;">As</span> System.Collections.Specialized.StringDictionary = mailer.GetExtensions()
            <span style="color: blue;">If</span> caps <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The given SMTP server does not support any ESMTP extensions")
            <span style="color: blue;">Else</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> cap <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> caps.Keys
            		<span style="color: blue;">Dim</span> val <span style="color: blue;">As</span> <span style="color: blue;">String</span> = caps(cap)
            		<span style="color: blue;">If</span> (val &lt;&gt; <span style="color: blue;">String</span>.Empty) <span style="color: blue;">Then</span>
            			<span style="color: green;">' Print capability name and parameters.</span>
            			Console.WriteLine(cap + " " + val)
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' For parameterless capabilities, print capability name only.</span>
            			Console.WriteLine(cap)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            mailer.Disconnect()
            
            <span style="color: green;">' The output (the actual content will be different for a particular mail server)</span>
            dsn
            size
            auth LOGIN PLAIN
            ehlo
            auth=login
            starttls
            help
            pipelining
            
            In the output above, only "auth" capability has parameters.
            Note: auth=login is a single name, while "auth LOGIN PLAIN" denotes auth
            capability having two parameters (LOGIN and PLAIN).
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetExtension(System.String)">
            <summary>
            Returns the name or parameters of the specified ESMTP capability.
            </summary>
            <param name="name">The name of the capability.</param>
            <returns>If the specified capability is parameterless, the return value is the name
            of the capability itself. If the capability has parameters, the return value
            is a string which contains the parameters list as returned by the server.
            If the server does not support ESMTP (see <see cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/> for
            more information) or the given capability is not supported, the return value is a
            null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>In order to use this method, the connection with the SMTP server must already
            be established, and <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method already called.
            <note>If the server does not support EHLO command (i.e. the server is not ESMTP enabled),
            the capabilities will not be available.</note>
            </remarks>
            <example>This sample displays whether the server supports ESMTP pipelining.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("mail.domain.com");
            mailer.Connect();
            mailer.Hello();
            <span style="color: blue;">string</span> ext = mailer.GetExtension("pipelining");
            <span style="color: blue;">if</span> (ext == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The given server does not support ESMTP pipelining");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("ESMTP Pipelining is supported");
            }
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("mail.domain.com")
            mailer.Connect()
            mailer.Hello()
            <span style="color: blue;">Dim</span> ext <span style="color: blue;">As</span> <span style="color: blue;">String</span> = mailer.GetExtension("pipelining")
            <span style="color: blue;">If</span> ext <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The given server does not support ESMTP pipelining")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("ESMTP Pipelining is supported")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetExtensionValue(System.String)">
            <summary>
            Returns the parameters of the specified ESMTP capability, or an empty string
            if the capability has no parameters.
            </summary>
            <param name="name">The name of the capability.</param>
            <returns>If the specified capability is parameterless, the return value is
            <see cref="F:System.String.Empty"/>. If the capability has parameters, the return value
            is a string which contains the parameters list as returned by the server.
            If the server does not support ESMTP (see <see cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/> for
            more information) or the given capability is not supported, the return value is a
            null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>In order to use this method, the connection with the SMTP server must already
            be established, and <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method already called.</para>
            <para>This method can be used to retrieve additional information about the given
            capability. However, if you wish to get the list of SASL authentication methods
            supported by the server, you may also use <see cref="M:MailBee.SmtpMail.Smtp.GetSupportedAuthMethods"/> method
            for this.</para></remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetServerResponse">
            <summary>
            Returns the last response from the server.
            </summary>
            <returns>A string value which contains the last response from the server, or a null
            reference (<b>Nothing</b> in Visual Basic) if not connected to the server.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetSupportedAuthMethods">
            <summary>
            Returns a set of flags indicating which authentication methods are supported by the server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/>
            </summary>
            <returns>A set of flags indicating which authentication methods are supported by the server,
            or <see cref="F:MailBee.AuthenticationMethods.None"/> if <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method has not yet been
            called or if the server does not support EHLO command (i.e. the server is not ESMTP enabled).</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There are multiple or non-SMTP connections being opened
            at the moment (<see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>false</b>).</exception>
            <example>This sample lists all authentication methods supported by the SMTP server.
            SMTP servers do not support non-SASL methods, thus only SASL methods are checked.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("mail.domain.com");
            mailer.Connect();
            mailer.Hello();
            
            AuthenticationMethods methods = mailer.GetSupportedAuthMethods();
            <span style="color: blue;">if</span> ( (methods &amp; AuthenticationMethods.SaslLogin) &gt; 0)
            {
            	Console.WriteLine("SASL LOGIN");
            }
            <span style="color: blue;">if</span> ( (methods &amp; AuthenticationMethods.SaslPlain) &gt; 0)
            {
            	Console.WriteLine("SASL PLAIN");
            }
            <span style="color: blue;">if</span> ( (methods &amp; AuthenticationMethods.SaslCramMD5) &gt; 0)
            {
            	Console.WriteLine("SASL CRAM-MD5 (secure)");
            }
            
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("mail.domain.com")
            mailer.Connect()
            mailer.Hello()
            
            <span style="color: blue;">Dim</span> methods <span style="color: blue;">As</span> AuthenticationMethods = mailer.GetSupportedAuthMethods()
            <span style="color: blue;">If</span> ((methods And AuthenticationMethods.SaslLogin) &gt; 0) <span style="color: blue;">Then</span>
            	Console.WriteLine("SASL LOGIN")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">If</span> ((methods And AuthenticationMethods.SaslPlain) &gt; 0) <span style="color: blue;">Then</span>
            	Console.WriteLine("SASL PLAIN")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">If</span> ((methods And AuthenticationMethods.SaslCramMD5) &gt; 0) <span style="color: blue;">Then</span>
            	Console.WriteLine("SASL CRAM-MD5 (secure)")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnSendingMessage(MailBee.SmtpMail.SmtpSendingMessageEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageSenderSubmitted(MailBee.SmtpMail.SmtpMessageSenderSubmittedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageRecipientSubmitted(MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageDataChunkSent(MailBee.SmtpMail.SmtpMessageDataChunkSentEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageSubmittedToServer(MailBee.SmtpMail.SmtpMessageSubmittedToServerEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageSent(MailBee.SmtpMail.SmtpMessageSentEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageSent"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageNotSent(MailBee.SmtpMail.SmtpMessageNotSentEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMergingMessage(MailBee.SmtpMail.SmtpMergingMessageEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MergingMessage"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MergingMessage"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnSubmittingMessageToPickupFolder(MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageSubmittedToPickupFolder(MailBee.SmtpMail.SmtpMessageSubmittedToPickupFolderEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToPickupFolder"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToPickupFolder"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageMXLookupDone(MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.OnMessageDirectSendDone(MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> event.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)">
            <summary>
            Authenticates the user on a mail server using POP-before-SMTP authentication.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AuthPopBeforeSmtp"/>
            </summary>
            <param name="pop3ServerName">The host name or IP address of the POP3 server.</param>
            <param name="pop3ServerPort">The port on which POP3 service is running.</param>
            <param name="pop3AccountName">The user account name on the POP3 server.</param>
            <param name="pop3Password">The user account password on the POP3 server.</param>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method can be used to authenticate the user on the SMTP server if
            the SMTP server itself does not support ESMTP authentication, but can use results
            of POP3 authentication performed against a POP3 server which shares the users accounts
            database with the given SMTP server (usually, this POP3 server is running on the
            same host where the SMTP server is running).
            <note>The developer can also enable automatic use of POP-before-SMTP authentication
            when connecting to the SMTP server by setting <see cref="P:MailBee.SmtpMail.SmtpServer.AuthPopBeforeSmtp"/> property value
            to <b>true</b>. However, use of <see cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/> method is more flexible,
            since <see cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/> method can also be used in scenarios when
            the POP3 server name/account name/password is different from the corresponding
            parameters of the companion SMTP server.</note>
            </remarks>
            <example>This samples performs POP-before-SMTP authentication on <i>pop.domain.com</i>
            host prior to connecting to the SMTP server at <i>smtp.domain.com</i>.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("smtp.domain.com");
            
            mailer.AuthPopBeforeSmtp("pop.domain.com", 110, "jdoe", "secret");
            
            mailer.Connect();
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("smtp.domain.com")
            
            mailer.AuthPopBeforeSmtp("pop.domain.com", 110, "jdoe", "secret")
            
            mailer.Connect()
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginAuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a POP-before-SMTP authentication on a mail server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/>
            </summary>
            <param name="pop3ServerName">The host name or IP address of the POP3 server.</param>
            <param name="pop3ServerPort">The port on which POP3 service is running.</param>
            <param name="pop3AccountName">The user account name on the POP3 server.</param>
            <param name="pop3Password">The user account password on the POP3 server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous POP-before-SMTP authentication.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/>.</remarks>
            <example>This WinForms sample demonstrates how to perform POP-before-SMTP authentication asynchronously.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	mailer.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	mailer.SmtpServers.Add("mail.domain.com");
            
            	<span style="color: green;">// Initiate an asynchronous POP-before-SMTP authentication attempt.</span>
            	mailer.BeginAuthPopBeforeSmtp("mail.domain.com", 110, "jdoe", "secret", <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		mailer.Wait(0);
            	}
            
            	<span style="color: green;">// End the POP-before-SMTP operation. If it's in progress at the moment </span>
            	<span style="color: green;">// this method starts, it will wait until it's done first.</span>
            	mailer.EndAuthPopBeforeSmtp();
            
            	<span style="color: green;">// Connect to SMTP server and say Hello.</span>
            	mailer.Connect();
            	mailer.Hello();
            
            	<span style="color: green;">// Can send mail here or do whatever needed.</span>
            	<span style="color: green;">// ...</span>
            
            	<span style="color: green;">// Close the connection.</span>
            	mailer.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            
            	<span style="color: green;">' Let MailBee process events.</span>
            	mailer.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	mailer.SmtpServers.Add("mail.domain.com")
            
            	<span style="color: green;">' Initiate an asynchronous POP-before-SMTP authentication attempt.</span>
            	mailer.BeginAuthPopBeforeSmtp("mail.domain.com", 110, "jdoe", "secret", <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above.</span>
            		mailer.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' End the POP-before-SMTP operation. If it's in progress at the moment </span>
            	<span style="color: green;">' this method starts, it will wait until it's done first.</span>
            	mailer.EndAuthPopBeforeSmtp()
            
            	<span style="color: green;">' Connect to SMTP server and say Hello.</span>
            	mailer.Connect()
            	mailer.Hello()
            
            	<span style="color: green;">' Can send mail here or do whatever needed.</span>
            	<span style="color: green;">' ...</span>
            
            	<span style="color: green;">' Close the connection.</span>
            	mailer.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example> 
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndAuthPopBeforeSmtp">
            <summary>
            Ends the pending asynchronous request for POP-before-SMTP authentication on a mail server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginAuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Connect">
            <summary>
            Connects to an SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Hello"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains only one <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            instance, the component will attempt to connect to the server denoted by this <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            instance only.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains multiple <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            instances, the component will first attempt to connect to the first instance
            (<c>SmtpServers[0]</c>), then, if it fails, to the second, etc. Since <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            objects are sorted accordingly their priority values (<see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/>,
            high-priority servers will be tried first. This gives the developer ability to
            implement reliable mail sending mechanism with support of backup servers which should
            be used when primary servers fail.</para>
            <para>If the connection has already been made in the past, and that connection failed
            for the first server in the collection (<c>SmtpServers[0]</c>) but then succeeded for the second server (<c>SmtpServers[1]</c>)
            so that the current position in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection advanced by 1,
            the component will now try to connect to the second server first. Thus, the
            component remembers which server in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is up and running,
            so that subsequent connection attempts could try this server first. If now this server fails, the next
            server in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is tried, etc. If the last server in the collection
            fails too, the component starts back from the beginning of the collection and tries the servers
            which have not yet been tried during the last connection attempt. Then, if they all failed too
            and the component reaches the same server it already tried during the current connection
            attempt (in our example, it's the second server in the collection), the component will
            report an error.</para>
            <para>The developer can use <see cref="M:MailBee.SmtpMail.Smtp.GetCurrentSmtpServerIndex"/> method to learn
            the position (in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection) of the server to which the component
            tried to connect last time (regardless whether that connection attempt succeeded or not).</para>
            </remarks>
            <example>This sample attempts to connect to the primary SMTP server, but will automatically
            switch to the backup server if the primary server is down. If the connection is established,
            the name of the server the component connected to is printed into console.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Add high-piority (0) main server and lower-priority (1) backup server.</span>
            mailer.SmtpServers.Add("main.server.com", 25, 0);
            mailer.SmtpServers.Add("backup.server.com", 25, 1);
            
            <span style="color: green;">// Attempt to connect.</span>
            mailer.Connect();
            
            <span style="color: green;">// Display the host name of the server the connected was established with.</span>
            Console.WriteLine(mailer.SmtpServers[mailer.GetCurrentSmtpServerIndex()].Name);
            
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Add high-piority (0) main server and lower-priority (1) backup server.</span>
            mailer.SmtpServers.Add("main.server.com", 25, 0)
            mailer.SmtpServers.Add("backup.server.com", 25, 1)
            
            <span style="color: green;">' Attempt to connect.</span>
            mailer.Connect()
            
            <span style="color: green;">' Display the host name of the server the connected was established with.</span>
            Console.WriteLine(mailer.SmtpServers(mailer.GetCurrentSmtpServerIndex()).Name)
            
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connecting to an SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Connect"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous POP-before-SMTP authentication.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.Connect"/>.</remarks>
            <example>This console sample connects to the SMTP server asynchronously and handles
            <see cref="E:MailBee.SmtpMail.Smtp.Connected"/> event. No callback function is used.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// "Connected" event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Successfully connected to the server.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		mailer.SmtpServers.Add("smtp.somehost.com");
            
            		<span style="color: green;">// Subscribe to the Connected event.</span>
            		mailer.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		<span style="color: green;">// Initiate an asynchronous connection.</span>
            		mailer.BeginConnect(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time, </span>
            		<span style="color: green;">// the connection with the server is established on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// End the connection request.</span>
            		mailer.EndConnect();
            
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' "Connected" event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Successfully connected to the server.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		mailer.SmtpServers.Add("smtp.somehost.com")
            
            		<span style="color: green;">' Subscribe to the Connected event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		<span style="color: green;">' Initiate an asynchronous connection.</span>
            		mailer.BeginConnect(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">' the connection with the server is established on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' End the connection request.</span>
            		mailer.EndConnect()
            
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example> 
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndConnect">
            <summary>
            Ends the pending asynchronous request for connecting to the SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginConnect(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Hello">
            <summary>
            Sends initial greeting to the SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Sends EHLO or HELO command to the server. This command must be issued immediately
            after the connection was established.</para>
            <para>EHLO/HELO command has a parameter which should the domain name of the host which
            will send mail. By default, MailBee uses either the local host name or the domain part
            of sender's e-mail address if it's already known to the moment when <see cref="M:MailBee.SmtpMail.Smtp.Hello"/>
            is called. Usually, this behavior does not need to be changed. However, if the application
            logic requires the default behavior to be overridden, the developer can force any arbitrary string
            to be used as a parameter of HELO/EHLO command by setting <see cref="P:MailBee.SmtpMail.SmtpServer.HelloDomain"/>
            property of the server which is already in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection, or
            by using <see cref="M:MailBee.SmtpMail.SmtpServerCollection.Add(MailBee.SmtpMail.SmtpServer)"/> method to add new server into the collection.
            </para>
            <para>By default, the component sends EHLO command, which is an extended version of HELO
            command. An ESMTP-enabled server returns the list of server capabilities in reply
            to EHLO command. However, if the server does not support any ESMTP extensions,
            it will return an error. In this case, the component will try HELO command. However,
            the list of the server capabilities will not be available, and <see cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/>
            will return a null reference (<b>Nothing</b> in Visual Basic).</para>
            <para>If the application knows the server it uses does not support ESMTP, it can disable EHLO
            (so that HELO will be used) by setting <see cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/> to
            <see cref="F:MailBee.SmtpMail.ExtendedSmtpOptions.ClassicSmtpMode"/>.</para>
            </remarks>
            <example>This sample connects to the SMTP server, sends greeting, and prints the response
            received form the server into console.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("smtp.domain.com");
            mailer.Connect();
            mailer.Hello();
            Console.WriteLine(mailer.GetServerResponse());
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("smtp.domain.com")
            mailer.Connect()
            mailer.Hello()
            Console.WriteLine(mailer.GetServerResponse())
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginHello(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for sending initial greeting to the SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Hello"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous greeting.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.Hello"/>.</remarks>
            <example>This console sample connects to the SMTP server, sends greeting asynchronously, and handles
            <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event to trap the warning telling that EHLO is not supported,
            and HELO will be tried (this warning event will be raised only if the server
            is not ESMTP enabled). No callback function is used.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> MailBeeSmtpOptionalCommandNotSupportedException)
            		{
            			Console.WriteLine(e.Reason.Message); <span style="color: green;">// EHLO not supported.</span>
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		mailer.SmtpServers.Add("mail.domain.com");
            
            		mailer.Connect();
            
            		<span style="color: green;">// Subscribe to the ErrorOccurred event. We subcribe only for the time </span>
            		<span style="color: green;">// of Hello() method execution to make sure the trapped warnings do not </span>
            		<span style="color: green;">// relate to execution of any other methods.</span>
            		mailer.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		<span style="color: green;">// Initiate an asynchronous greeting.</span>
            		mailer.BeginHello(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time, </span>
            		<span style="color: green;">// the greeting is performed on another thread.</span>
            		System.Threading.Thread.Sleep(1000);
            
            		<span style="color: green;">// End the connection request.</span>
            		mailer.EndHello();
            
            		mailer.ErrorOccurred -= <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: blue;">If</span> (<span style="color: blue;">TypeOf</span> e.Reason <span style="color: blue;">Is</span> MailBeeSmtpOptionalCommandNotSupportedException) <span style="color: blue;">Then</span>
            			Console.WriteLine(e.Reason.Message)<span style="color: green;">' EHLO not supported.</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		mailer.SmtpServers.Add("mail.domain.com")
            
            		mailer.Connect()
            
            		<span style="color: green;">' Subscribe to the ErrorOccurred event. We subcribe only for the time </span>
            		<span style="color: green;">' of Hello() method execution to make sure the trapped warnings do not </span>
            		<span style="color: green;">' relate to execution of any other methods.</span>
            		<span style="color: blue;">AddHandler</span> mailer.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: green;">' Initiate an asynchronous greeting.</span>
            		mailer.BeginHello(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time, </span>
            		<span style="color: green;">' the greeting is performed on another thread.</span>
            		System.Threading.Thread.Sleep(1000)
            
            		<span style="color: green;">' End the connection request.</span>
            		mailer.EndHello()
            
            		<span style="color: blue;">RemoveHandler</span> mailer.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndHello">
            <summary>
            Ends the pending asynchronous request for sending a greeting to the SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginHello(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.StartTls">
            <summary>
            Requests the mail server to start TLS/SSL negotiation and protect the connection with
            security layer.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/>
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.SslProtocol"/>
            </summary>
            <returns><b>true</b> if TLS/SSL negotiation succeeded and the connection is now secured with TLS/SSL layer; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            The developer must call <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method prior to calling <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/>. Also,
            <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method must be called again after <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/> since
            TLS/SSL negotiation resets the connection.
            </para>
            <para>
            As alternative to calling <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/> method, the developer can ask MailBee to start
            TLS/SSL negotiation automatically by setting <see cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/> property value to <see cref="F:MailBee.Security.SslStartupMode.OnConnect"/>
            or <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/>.
            </para>
            <note>Not all mail servers support TLS/SSL functionality.</note>
            </remarks>
            <example>
            This sample attempts to establish TLS/SSL connection with the SMTP server, logs in an account on this server and sends a mail message
            on success.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            mailer.Connect();
            mailer.Hello();
            mailer.StartTls();
            mailer.Hello();
            mailer.Login();
            mailer.From.Email = "jdoe@domain.com";
            mailer.To.Add("kathy@company.com");
            mailer.Subject = "Report";
            mailer.BodyPlainText = "The report contents";
            mailer.Send();
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            mailer.Connect()
            mailer.Hello()
            mailer.StartTls()
            mailer.Hello()
            mailer.Login()
            mailer.From.Email = "jdoe@domain.com"
            mailer.To.Add("kathy@company.com")
            mailer.Subject = "Report"
            mailer.BodyPlainText = "The report contents"
            mailer.Send()
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginStartTls(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to start TLS/SSL negotiation with the server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.StartTls"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous TLS/SSL negotiation.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/>.</remarks>
            <example>
            Asynchronous TLS/SSL negotiation with the SMTP server in WinForms application. This sample
            also handles <see cref="E:MailBee.SmtpMail.Smtp.TlsStarted"/> event. <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method is used to wait
            for the asynchronous method completion, since .NET's standard
            <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/> cannot process events.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// TlsStarted event handler.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnTlsStarted(<span style="color: blue;">object</span> sender, TlsStartedEventArgs e)
            {
            	MessageBox.Show("TLS/SSL negotiation complete. Secure connection is ready.");
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	mailer.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	mailer.SmtpServers.Add("smtp.domain.com");
            
            	mailer.TlsStarted += <span style="color: blue;">new</span> TlsStartedEventHandler(OnTlsStarted);
            
            	mailer.Connect();
            	mailer.Hello();
            
            	<span style="color: green;">// Initiate an asynchronous TLS/SSL negotiation.</span>
            	mailer.BeginStartTls(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		mailer.Wait(0);
            	}
            
            	<span style="color: green;">// If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">// work, wait until it's established.</span>
            	mailer.Wait();
            
            	<span style="color: green;">// End the connection request.</span>
            	mailer.EndStartTls();
            
            	<span style="color: green;">// The connection is now under TLS/SSL layer!</span>
            
            	mailer.Hello();
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	mailer.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' TlsStarted event handler.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnTlsStarted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> TlsStartedEventArgs)
            	MsgBox("TLS/SSL negotiation complete. Secure connection is ready.")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            	<span style="color: green;">' Let MailBee process events.</span>
            	mailer.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	mailer.SmtpServers.Add("smtp.domain.com")
            
            	<span style="color: blue;">AddHandler</span> mailer.TlsStarted, <span style="color: blue;">AddressOf</span> OnTlsStarted
            
            	mailer.Connect()
            	mailer.Hello()
            
            	<span style="color: green;">' Initiate an asynchronous TLS/SSL negotiation.</span>
            	mailer.BeginStartTls(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            	
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above.</span>
            		mailer.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">' work, wait until it's established.</span>
            	mailer.Wait()
            
            	<span style="color: green;">' End the connection request.</span>
            	mailer.EndStartTls()
            
            	<span style="color: green;">' The connection is now under TLS/SSL layer!</span>
            
            	mailer.Hello()
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	mailer.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndStartTls">
            <summary>
            Ends a pending asynchronous TLS/SSL negotiation request.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginStartTls(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Login">
            <summary>
            Authenticates the user on the SMTP server if ESMTP authentication is enabled.
            <seealso cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/>
            </summary>
            <returns><b>true</b> if the method succeeds, ESMTP authentication was disabled, or
            <see cref="P:MailBee.SmtpMail.SmtpServer.IgnoreLoginFailure"/> is <b>true</b>; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>If ESMTP auhtentication is enabled (<see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> is not
            <see cref="F:MailBee.AuthenticationMethods.None"/>), this method will attempt to authenticate
            on the SMTP server using the best (most secure) authentication method specified
            in <see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> value and supported by the server.</para>
            <para>If the login attempt fails, it might still be possible to send mail (with
            some restrictions, such as sending to local recipients only). Due to this,
            MailBee makes it possible to ignore authentication errors if <see cref="P:MailBee.SmtpMail.SmtpServer.IgnoreLoginFailure"/>
            is set to <b>true</b>. <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> warning event, however, will still be issued
            to let the application know about the problem.</para>
            <note>Another alternative to <see cref="M:MailBee.SmtpMail.Smtp.Login"/> method is using POP-before-SMTP
            authentication. It can be used if the mail server does not support ESMTP authentication,
            but still requires users to authnticate themselves in order to send mail. See
            <see cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/> method documentation for more information.</note>
            </remarks>
            <example>This sample connects to the SMTP server, sends greeting, and attempts to
            authenticate the user on the server. If the login fails, no exception is thrown
            (<see cref="P:MailBee.SmtpMail.SmtpServer.IgnoreLoginFailure"/> is set to <b>true</b>) but the application
            still gets notification about the login failure through handling <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> IMailBeeLoginException)
            		{
            			Console.WriteLine(e.Reason.Message); <span style="color: green;">// Login error.</span>
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify SMTP server and authentication settings.</span>
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("smtp.somedomain.com", "jdoe", "badpassword");
            		server.IgnoreLoginFailure = <span style="color: blue;">true</span>;
            		mailer.SmtpServers.Add(server);
            
            		<span style="color: green;">// Subscribe to the ErrorOccurred event.</span>
            		mailer.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		mailer.Connect();
            		mailer.Hello();
            
            		<span style="color: green;">// Authenticate the user "jdoe".</span>
            		mailer.Login();
            
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: blue;">If</span> (<span style="color: blue;">TypeOf</span> e.Reason <span style="color: blue;">Is</span> IMailBeeLoginException) <span style="color: blue;">Then</span>
            			Console.WriteLine(e.Reason.Message) <span style="color: green;">' Login error.</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify SMTP server and authentication settings.</span>
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer("smtp.somedomain.com", "jdoe", "badpassword")
            		server.IgnoreLoginFailure = <span style="color: blue;">True</span>
            		mailer.SmtpServers.Add(server)
            
            		<span style="color: green;">' Subscribe to the ErrorOccurred event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		mailer.Connect()
            		mailer.Hello()
            
            		<span style="color: green;">' Authenticate the user "jdoe".</span>
            		mailer.Login()
            
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for authenticating the user on the SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Login"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous authentication.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.Login"/>.</remarks>
            <example>This WinForms sample demonstrates using asynchronous authentication in conjunction
            with a callback function.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// Login callback function.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> LoginCallback(IAsyncResult result)
            {
            	Smtp mailer = (Smtp)result.AsyncState;
            
            	mailer.EndLogin();
            	MessageBox.Show("Authentication succeeded");
            
            	<span style="color: green;">// Close the connection.</span>
            	mailer.Disconnect();
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            	mailer.SmtpServers.Add("smtp.somehost.com", "jdoe", "secret");
            
            	<span style="color: green;">// Connect to SMTP server and say Hello.</span>
            	mailer.Connect();
            	mailer.Hello();
            
            	<span style="color: green;">// Initiate an asynchronous authentication attempt.</span>
            	mailer.BeginLogin(<span style="color: blue;">new</span> AsyncCallback(LoginCallback), mailer);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' Login callback function.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> LoginCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = result.AsyncState
            
            	mailer.EndLogin()
            	MsgBox("Authentication succeeded")
            
            	<span style="color: green;">' Close the connection.</span>
            	mailer.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            	mailer.SmtpServers.Add("smtp.somehost.com", "jdoe", "secret")
            
            	<span style="color: green;">' Connect to SMTP server and say Hello.</span>
            	mailer.Connect()
            	mailer.Hello()
            
            	<span style="color: green;">' Initiate an asynchronous authentication attempt.</span>
            	mailer.BeginLogin(<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> LoginCallback), mailer)
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndLogin">
            <summary>
            Ends the pending asynchronous request for authenticating the user on the SMTP server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginLogin(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.ExecuteCustomCommand(System.String)">
            <summary>
            Sends user-defined command to the server and receives the server response to this command.
            </summary>
            <param name="commandString">User-defined command text (including line terminator).</param>
            <returns><b>true</b> if the command was executed successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The developer can use <see cref="M:MailBee.SmtpMail.Smtp.GetServerResponse"/> method to obtain the response
            data returned by the server.</remarks>
            <example>This sample connects to the SMTP server, issues HELP command, and displays
            the server response to this command. If HELP command is not supported by the server,
            MailBee will throw <see cref="T:MailBee.SmtpMail.MailBeeSmtpNegativeResponseException"/>. It's caught in
            the sample code, and the proper error message is displayed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("smtp.host.com");
            mailer.Connect();
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Send HELP command.</span>
            	mailer.ExecuteCustomCommand("HELP\r\n");
            	Console.WriteLine(mailer.GetServerResponse());
            }
            <span style="color: blue;">catch</span> (MailBeeSmtpNegativeResponseException e)
            {
            	<span style="color: green;">// The given SMTP server does not support HELP command.</span>
            	Console.WriteLine(e.Message);
            	Console.WriteLine("Server response is: " + mailer.GetServerResponse());
            }
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("smtp.host.com")
            mailer.Connect()
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Send HELP command.</span>
            	mailer.ExecuteCustomCommand("HELP\r\n")
            	Console.WriteLine(mailer.GetServerResponse())
            <span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeSmtpNegativeResponseException
            	<span style="color: green;">' The given SMTP server does not support HELP command.</span>
            	Console.WriteLine(e.Message)
            	Console.WriteLine("Server response is: " &amp; mailer.GetServerResponse())
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginExecuteCustomCommand(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for sending the specified user-defined command to the server and getting the response.
            <seealso cref="M:MailBee.SmtpMail.Smtp.ExecuteCustomCommand(System.String)"/>
            </summary>
            <param name="commandString">User-defined command text (including line terminator).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous user-defined command execution.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.ExecuteCustomCommand(System.String)"/>.</remarks>
            <example>This WinForms samples verifies e-mail address syntax by sending VRFY command to the SMTP server
            (the SMTP server must support VRFY command). The sample gets notified of VRFY command completion
            by using a callback function.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// ExecuteCustomCommand callback function.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> ExecuteCustomCommandCallback(IAsyncResult result)
            {
            	Smtp mailer = (Smtp)result.AsyncState;
            
            	<span style="color: blue;">try</span>
            	{
            		<span style="color: green;">// If this method does not throw exception, VRFY command </span>
            		<span style="color: green;">// is supported, and the e-mail address validation passed.</span>
            		<span style="color: green;">// It's up to the server to decide whether to validate just </span>
            		<span style="color: green;">// syntax or check if such e-mail address really exists.</span>
            		mailer.EndExecuteCustomCommand();
            		MessageBox.Show("The e-mail address is correct");
            	}
            	<span style="color: blue;">catch</span> (MailBeeSmtpNegativeResponseException e)
            	{
            		MessageBox.Show(e.ResponseString);
            	}
            
            	<span style="color: green;">// Close the connection.</span>
            	mailer.Disconnect();
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            	mailer.SmtpServers.Add("mail.host.com");
            
            	<span style="color: green;">// Connect to SMTP server and say Hello.</span>
            	mailer.Connect();
            	mailer.Hello();
            
            	<span style="color: green;">// Initiate an asynchronous e-mail address verification attempt.</span>
            	mailer.BeginExecuteCustomCommand("VRFY user@domain.com\r\n",
            		<span style="color: blue;">new</span> AsyncCallback(ExecuteCustomCommandCallback), mailer);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' ExecuteCustomCommand callback function.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> ExecuteCustomCommandCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = result.AsyncState
            
            	<span style="color: blue;">Try</span>
            		<span style="color: green;">' If this method does not throw exception, VRFY command </span>
            		<span style="color: green;">' is supported, and the e-mail address validation passed.</span>
            		<span style="color: green;">' It's up to the server to decide whether to validate just </span>
            		<span style="color: green;">' syntax or check if such e-mail address really exists.</span>
            		mailer.EndExecuteCustomCommand()
            		MsgBox("The e-mail address is correct")
            	<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeSmtpNegativeResponseException
            		MsgBox.Show(e.ResponseString)
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            	<span style="color: green;">' Close the connection.</span>
            	mailer.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            	mailer.SmtpServers.Add("mail.host.com")
            
            	<span style="color: green;">' Connect to SMTP server and say Hello.</span>
            	mailer.Connect()
            	mailer.Hello()
            
            	<span style="color: green;">' Initiate an asynchronous e-mail address verification attempt.</span>
            	mailer.BeginExecuteCustomCommand("VRFY user@domain.com\r\n", _
            		<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> ExecuteCustomCommandCallback), mailer)
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndExecuteCustomCommand">
            <summary>
            Ends the pending asynchronous request for sending user-defined command to the server.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginExecuteCustomCommand(System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetAcceptedRecipients">
            <summary>
            Returns the list of the recipients accepted by the SMTP server.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/>
            </summary>
            <returns>In "send to relay SMTP server" mode, returns the list of all recipients
            accepted by the SMTP server; in direct send mode (performing DNS MX lookup and sending to SMTP MX servers),
            returns the list of all recipients who received the message.</returns>
            <remarks>This method is useful when refused recipients are allowed
            (<see cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/> is <b>true</b> or direct send mode is
            used).
            <note>Sucessful submitting the recipient to the server does not mean the server
            will really deliver the message to the recipient. It just means the server agreed to
            deliver the message, but it may fail to do so.</note>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetRefusedRecipients">
            <summary>
            Returns the list of the recipients rejected by the SMTP server.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/>
            </summary>
            <returns>In "send to relay SMTP server" mode, returns the list of the recipients
            rejected by the SMTP server; in direct send mode (performing DNS MX lookup and sending to SMTP MX servers),
            returns the list of all recipients who did not receive the message.</returns>
            <remarks>If refused recipients were not allowed in send to relay SMTP server mode (<see cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/> is <b>false</b>),
            the component will throw an exception after the refused recipient was encountered. It means
            the recipients which reside in the recipients list beyond the position of the refused
            recipient will not appear in <see cref="M:MailBee.SmtpMail.Smtp.GetAcceptedRecipients"/> and
            <see cref="M:MailBee.SmtpMail.Smtp.GetRefusedRecipients"/> collections.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetServerResponseCode">
            <summary>
            Returns an integer value containing the status code of the last SMTP operation.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetServerResponse"/>
            </summary>
            <returns>3-digit integer value (such as <i>220</i>) containing the SMTP
            status code taken from the last received response from the server.</returns>
            <remarks>The developer can use this value for advanced use of <see cref="T:MailBee.SmtpMail.Smtp"/>
            component (such as sophisticated error handling).</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetMaxMessageSize">
            <summary>
            Returns the maximum length of the message (in bytes) which is allowed by
            the SMTP server in order to accept the message from the client.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetExtensionValue(System.String)"/>
            </summary>
            <returns>If the server restricts the maximum message size and supports ESMTP SIZE extension,
            the return value is the maximum length of the message (in bytes) which is allowed by
            the SMTP server in order to accept the message from the client; otherwise, the return value is 0.</returns>
            <remarks>This property value is obtained from the server capabilities list
            which is received from the server during initial greeting (<see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method).
            Thus, the application must be already connected to the server and <see cref="M:MailBee.SmtpMail.Smtp.Hello"/>
            method already called in order to use <see cref="M:MailBee.SmtpMail.Smtp.GetMaxMessageSize"/> method. Even then,
            this method will still return zero if ESMTP SIZE extension is not supported by the server.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetCurrentSmtpServerIndex">
            <summary>
            Returns <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection's index of the server to which
            the component is connected or will connect on the next connection attempt.
            </summary>
            <returns>If already connected to the SMTP relay server, the return value is the index
            of this server in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection; if not currently connected to
            the server, the return value is the index of the server to which the component will
            connect on the next connection attempt. The default value is 0.</returns>
            <remarks>This property is useful when <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains
            more than one SMTP relay server, and the application needs to know which one is used now or
            will be used when the time to connect to an SMTP server comes. If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/>
            collection contains one or zero elements, this method will return 0.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.ResetMessage">
            <summary>
            Resets all properties of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object to defaults. Delivery Status
            Notification settings (<see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> object) are also reset.
            </summary>
            <remarks>This method can be used if multiple messages are sent using the same instance
            of <see cref="T:MailBee.SmtpMail.Smtp"/> component, and the developer needs to clear the message properties
            prior to composing next message in a series.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)">
            <summary>
            Relays (sends without any modifications) the mail message previously saved as an .EML file,
            to the specified recipients.
            </summary>
            <param name="filename">The path to the file containing the message source in .EML (RFC2822) format.</param>
            <param name="senderEmail">The e-mail address of the sender.</param>
            <param name="recipients">The list of the message recipients.</param>
            <returns><b>true</b> if relay succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method reads the message raw data from a file and then sends the message
            intact. Sender and recipients specified in the message itself (such as From: and To: fields)
            are ignored.</para>
            <para>To save a message into an .EML file, <see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/> method of
            <see cref="T:MailBee.Mime.MailMessage"/> object can be used.</para>
            <note>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was not called prior to <see cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>,
            MailBee will call it automatically, or send the message in direct send mode (through DNS MX lookup)
            if no SMTP relay server is specified in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection or its <see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/>
            is lower than top priority of DNS servers available in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection.
            </note>
            </remarks>
            <example>This sample relays the mail message from .EML file to the recipients, using
            the following configuration (which targets high reliability of send mail operation):
            <list type="number">
            <item><description>Attempt to send to SMTP relay server at <i>smtp1.domain.com</i> first</description></item>
            <item><description>If this fails, try to send to backup SMTP relay server at <i>smtp2.domain.com</i></description></item>
            <item><description>If this fails too, try direct send mode. To discover SMTP servers
            accepting mails for recipients domains (i.e. to perform DNS MX lookup),
            use DNS servers specified by the operating system</description></item>
            <item><description>If the DNS servers reported by OS are not available or down,
            use backup DNS server at <i>10.20.30.40</i></description></item>
            </list>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            mailer.SmtpServers.Add("smtp1.domain.com", 25, 0);	<span style="color: green;">// top priority.</span>
            mailer.SmtpServers.Add("smtp2.domain.com", 25, 1);	<span style="color: green;">// low priority.</span>
            
            <span style="color: green;">// Auto-detect DNS servers from OS settings or config file.</span>
            mailer.DnsServers.Autodetect();
            
            <span style="color: green;">// Add backup DNS server of low priority (priority of DNS servers </span>
            <span style="color: green;">// registered in OS is usually in the range 0 to 10).</span>
            mailer.DnsServers.Add("10.20.30.40", 100);
            
            <span style="color: green;">// Send the message from the file.</span>
            mailer.RelayFromEmlFile(@"C:\Temp\message.eml", "from@domain.com",
            	<span style="color: blue;">new</span> EmailAddressCollection("to@company.com"));
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            mailer.SmtpServers.Add("smtp1.domain.com", 25, 0)	<span style="color: green;">' top priority.</span>
            mailer.SmtpServers.Add("smtp2.domain.com", 25, 1)	<span style="color: green;">' low priority.</span>
            
            <span style="color: green;">' Auto-detect DNS servers from OS settings or config file.</span>
            mailer.DnsServers.Autodetect()
            
            <span style="color: green;">' Add backup DNS server of low priority (priority of DNS servers </span>
            <span style="color: green;">' registered in OS is usually in the range 0 to 10).</span>
            mailer.DnsServers.Add("10.20.30.40", 100)
            
            <span style="color: green;">' Send the message from the file.</span>
            mailer.RelayFromEmlFile("C:\Temp\message.eml", "from@domain.com", _
            	<span style="color: blue;">New</span> EmailAddressCollection("to@company.com"))
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,System.String)">
            <summary>
            Relays (sends without any modifications) the mail message previously saved as an .EML file,
            to the specified recipients.
            </summary>
            <param name="filename">The path to the file containing the message source in .EML (RFC2822) format.</param>
            <param name="senderEmail">The e-mail address of the sender.</param>
            <param name="recipientEmails">The comma-delimited list of the message recipients.</param>
            <returns><b>true</b> if relay succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method reads the message raw data from a file and then sends the message
            intact. Sender and recipients specified in the message itself (such as From: and To: fields)
            are ignored.</para>
            <para>To save a message into an .EML file, <see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/> method of
            <see cref="T:MailBee.Mime.MailMessage"/> object can be used.</para>
            <note>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was not called prior to <see cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>,
            MailBee will call it automatically, or send the message in direct send mode (through DNS MX lookup)
            if no SMTP relay server is specified in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection or its <see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/>
            is lower than top priority of DNS servers available in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection.
            </note>
            </remarks>
            <example>This sample relays the mail message from .EML file to 3 recipients by submitting
            the message to the SMTP relay server.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/> event is used to report which recipients have
            been accepted or refused. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageRecipientSubmitted event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageRecipientSubmitted(<span style="color: blue;">object</span> sender,
            		SmtpMessageRecipientSubmittedEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Result)
            		{
            			Console.WriteLine(e.RecipientEmail + " accepted by the server");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine(e.RecipientEmail + " rejected by the server");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify SMTP server to use, and enable SMTP authentication.</span>
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("smtp-relay.host.com", "jdoe", "secret");
            		mailer.SmtpServers.Add(server);
            
            		<span style="color: green;">// Subscribe to the MessageRecipientSubmitted event.</span>
            		mailer.MessageRecipientSubmitted +=
            			<span style="color: blue;">new</span> SmtpMessageRecipientSubmittedEventHandler(OnMessageRecipientSubmitted);
            
            		<span style="color: green;">// Send the message from the file to 3 recipients.</span>
            		mailer.RelayFromEmlFile(@"C:\Temp\message.eml", "jdoe@host.com",
            			"client@company.com, b.smith@domain1.com, j.smith@domain2.com");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageRecipientSubmitted event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageRecipientSubmitted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageRecipientSubmittedEventArgs)
            		<span style="color: blue;">If</span> (e.Result) <span style="color: blue;">Then</span>
            			Console.WriteLine(e.RecipientEmail + " accepted by the server")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine(e.RecipientEmail + " rejected by the server")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify SMTP server to use, and enable SMTP authentication.</span>
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer("smtp-relay.host.com", "jdoe", "secret")
            		mailer.SmtpServers.Add(server)
            
            		<span style="color: green;">' Subscribe to the MessageRecipientSubmitted event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageRecipientSubmitted, <span style="color: blue;">AddressOf</span> OnMessageRecipientSubmitted
            
            		<span style="color: green;">' Send the message from the file to 3 recipients.</span>
            		mailer.RelayFromEmlFile("C:\Temp\message.eml", "jdoe@host.com", _
            			"client@company.com, b.smith@domain1.com, j.smith@domain2.com")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginRelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for relaying a mail message to recipients.
            <seealso cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/> 
            </summary>
            <param name="filename">The path to the file containing the message source in .EML (RFC2822) format.</param>
            <param name="senderEmail">The e-mail address of the sender.</param>
            <param name="recipients">The list of the message recipients.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous relaying the message.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>.</remarks>
            <example>This console sample demonstrates asynchronous relaying the mail message using direct send
            approach (via DNS MX lookup). No callback function is used.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get the list of DNS servers from OS settings or the config file.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Initiate an asynchronous relay.</span>
            		mailer.BeginRelayFromEmlFile(@"C:\Temp\message.eml", "kathy@company.com",
            			<span style="color: blue;">new</span> EmailAddressCollection("mike@domain1.com, bob@domain2.com"), <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time, </span>
            		<span style="color: green;">// the message is being sent to recipients domains on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// End the relay request. If send mail operation is still in progress, </span>
            		<span style="color: green;">// the method will wait until it's finished.</span>
            		mailer.EndRelayFromEmlFile();
            
            		<span style="color: green;">// Print the outcome.</span>
            		Console.WriteLine("Successfully sent to: " + mailer.GetAcceptedRecipients().ToString());
            		Console.WriteLine("Not sent to: " + mailer.GetRefusedRecipients().ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get the list of DNS servers from OS settings or the config file.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Initiate an asynchronous relay.</span>
            		mailer.BeginRelayFromEmlFile("C:\Temp\message.eml", "kathy@company.com", _
            			<span style="color: blue;">New</span> EmailAddressCollection("mike@domain1.com, bob@domain2.com"), <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time, </span>
            		<span style="color: green;">' the message is being sent to recipients domains on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' End the relay request. If send mail operation is still in progress, </span>
            		<span style="color: green;">' the method will wait until it's finished.</span>
            		mailer.EndRelayFromEmlFile()
            
            		<span style="color: green;">' Print the outcome.</span>
            		Console.WriteLine("Successfully sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            		Console.WriteLine("Not sent to: " &amp; mailer.GetRefusedRecipients().ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndRelayFromEmlFile">
            <summary>
            Ends the pending asynchronous request for relaying the message to the recipients.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginRelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Send">
            <summary>
            Sends the mail message to the recipients specified in the message.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Connect"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para><see cref="M:MailBee.SmtpMail.Smtp.QuickSend(MailBee.Mime.MailMessage)"/> method can be used to send a mail message with a single line of code.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> or <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> methods perform sending of large volumes of e-mails including mail merge over database.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.Message"/> property represents the mail message to be sent.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.Log"/> object can be used to enable logging SMTP session into a file or memory buffer.</para>
            <para>Delivery status notifications can be enabled and configured by setting
            <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> properties.</para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,MailBee.ImapMail.SystemMessageFlags)"/> method
            can be used to upload the sent message into IMAP4 folder such as "Sent items".</para>
            <para>The operation progress can be monitored through subscribing to <see cref="T:MailBee.SmtpMail.Smtp"/> class
            events or by deriving a new class from <see cref="T:MailBee.SmtpMail.Smtp"/> and overriding <i>OnEventName</i>
            methods.</para>
            <para>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was previously called and the connection with the
            SMTP relay server was established, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will send the message to this
            server.</para>
            <para>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was not called, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will automatically
            connect to the server specified in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection, send the message,
            and then disconnect.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains more than one server, <see cref="M:MailBee.SmtpMail.Smtp.Connect"/>
            method will try to send the message to the top priority server (see <see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/>).
            If it fails, other servers will be tried accordingly their priority values.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is empty or the priority of the most preferred SMTP relay server
            in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is less than than the priority of the most preferred DNS server
            in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection, the message will be sent in direct send mode.
            In this mode, MailBee performs DNS MX lookup for all recipients domains to discover which hosts
            accept mail for these domains (such hosts are called <i>SMTP MX</i> servers), and then sends
            the message directly to these servers. In other words, MailBee itself
            will act as a relay SMTP server. However, it's recommended sending host have assigned DNS MX or A record.
            Systems which actively send mail but don't have any DNS records assigned are typically used by spammers, thus many
            SMTP MX servers will not accept mail from such host and may even blacklist its IP address.</para>
            <para>If both <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collections are
            non-empty, the collection having higher priority server will be tried first (if top priority servers of both
            collections have the same priority, <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> is preferred).
            If sending to some or all recipients fails due to failure of
            some servers, another collection will be used to send the message to the failed recipients. Thus,
            sending to both SMTP relay servers and servers discovered via DNS MX lookup can be
            performed in a single <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method call, providing high level of reliability of
            send mail operation.</para>
            <note>SMTP and DNS server priority values are zero-based.
            0 is the highest priority while 999 is the lowest priority.</note>
            <para>In direct send mode, it's possible to send the message to all SMTP MX servers simultaneously.
            This may greatly improve performance when sending to multiple recipients. The developer
            can enable multi-threading by setting <see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> property value
            to -1 (unlimited number of thread) or to the maximum number of threads the application is allowed to use.</para>
            </remarks>
            <example>
            <para>
            This sample sends an HTML mail to several recipients. The mail is submitted to a
            single SMTP relay server.</para>
            <para>For this sample, setting license key in the config file (such as app.config)
            is not required since the license key is set directly in the code. However, in real code,
            it's recommended to set the license key in the config file.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp.LicenseKey = "Trial or permanent key";
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Specify SMTP server and enable authentication. Remove last 2 parameters if SMTP </span>
            <span style="color: green;">// authentication is not required in order to send mail through your SMTP server.</span>
            mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            <span style="color: green;">// Set sender.</span>
            mailer.From.DisplayName = "John Doe";
            mailer.From.Email = "jdoe@domain.com";
            
            <span style="color: green;">// Demonstrate various methods to specify recipients.</span>
            mailer.To.AsString = "no-display-name@website.com, \"Bill Smith, Jr.\" &lt;bill.smith@company.com&gt;";
            mailer.To.AddFromString("Kathy Smith &lt;k.smith@domain.com&gt;");
            mailer.To.AddFromString("email@address.com");
            mailer.To.Add("Mike Jackson, Sales Manager", "mike@company.com", "Sales Department");
            
            mailer.Subject = "Report";
            mailer.BodyHtmlText = "&lt;html&gt;This is the report.&lt;/html&gt;";
            
            Console.WriteLine("Will send to: " + mailer.Message.GetAllRecipients());
            
            mailer.Send();
            
            Console.WriteLine("Sent to: " + mailer.GetAcceptedRecipients());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            Smtp.LicenseKey = "Trial or permanent key"
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Specify SMTP server and enable authentication. Remove last 2 parameters if SMTP </span>
            <span style="color: green;">' authentication is not required in order to send mail through your SMTP server.</span>
            mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            <span style="color: green;">' Set sender.</span>
            mailer.From.DisplayName = "John Doe"
            mailer.From.Email = "jdoe@domain.com"
            
            <span style="color: green;">' Demonstrate various methods to specify recipients.</span>
            mailer.To.AsString = "no-display-name@website.com, ""Bill Smith, Jr."" &lt;bill.smith@company.com&gt;"
            mailer.To.AddFromString("Kathy Smith &lt;k.smith@domain.com&gt;")
            mailer.To.AddFromString("email@address.com")
            mailer.To.Add("Mike Jackson, Sales Manager", "mike@company.com", "Sales Department")
            
            mailer.Subject = "Report"
            mailer.BodyHtmlText = "&lt;html&gt;This is the report.&lt;/html&gt;"
            
            Console.WriteLine("Will send to: " &amp; mailer.Message.GetAllRecipients().ToString())
            
            mailer.Send()
            
            Console.WriteLine("Sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            </code>
            </example>
            <example><hr></hr>This sample sends a mail message with attachment, HTML and plain-text body parts to
            the SMTP server. If sending to the SMTP server fails (server is down), direct send to
            SMTP MX servers of the recipients domains is automatically performed. DNS servers are auto-detected
            from operating system settings. Logging SMTP session into a file is enabled.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Enable logging SMTP session into a file.</span>
            mailer.Log.Enabled = <span style="color: blue;">true</span>;
            mailer.Log.Filename = @"C:\log.txt";
            mailer.Log.Clear();
            
            <span style="color: green;">// Specify SMTP server to use, and enable SMTP authentication. Remove </span>
            <span style="color: green;">// last 2 parameters if authentication is not required by your server.</span>
            <span style="color: green;">// If your server requires authentication and expects e-mail address to </span>
            <span style="color: green;">// be specified as login name, use "jdoe@domain.com" instead of "jdoe".</span>
            mailer.SmtpServers.Add("smtp.domain.com", "jdoe", "secret");
            
            <span style="color: green;">// Get the list of DNS servers from OS settings or the config file.</span>
            mailer.DnsServers.Autodetect();
            
            <span style="color: green;">// Set sender.</span>
            mailer.From.DisplayName = "John Doe";
            mailer.From.Email = "jdoe@domain.com";
            
            <span style="color: green;">// Set To and CC recipients.</span>
            mailer.To.Add("Sales Department", "sales@company.com");
            mailer.Cc.Add("Conversation archive", "collect@domain.com");
            
            <span style="color: green;">// Set subject.</span>
            mailer.Subject = "My order";
            
            <span style="color: green;">// Set that message is high priority. Because Importance property </span>
            <span style="color: green;">// has no Smtp.Importance shortcut, use fully qualified form. The </span>
            <span style="color: green;">// same applies to Priority property.</span>
            mailer.Message.Importance = MailPriority.Highest;
            mailer.Message.Priority = MailPriority.Highest;
            
            <span style="color: green;">// Set plain-text and HTML versions of the body.</span>
            mailer.BodyPlainText = "Hi!\r\n\r\nAny news on my order status?\r\n" +
            	"Order info attached.\r\n\r\nThanks, J.D.";
            mailer.BodyHtmlText = "&lt;html&gt;Hi!&lt;p&gt;Any news on my order status?&lt;br&gt;" +
            	"Order info attached.&lt;/p&gt;Thanks, &lt;i&gt;J.D.&lt;/i&gt;&lt;/html&gt;";
            
            <span style="color: green;">// Attach a file.</span>
            mailer.AddAttachment(@"C:\My Documents\order.doc");
            
            <span style="color: green;">// Send the message!</span>
            mailer.Send();
            
            <span style="color: green;">// Print the outcome.</span>
            Console.WriteLine("Successfully sent to: " + mailer.GetAcceptedRecipients().ToString());
            Console.WriteLine("Not sent to: " + mailer.GetRefusedRecipients().ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Enable logging SMTP session into a file.</span>
            mailer.Log.Enabled = <span style="color: blue;">True</span>
            mailer.Log.Filename = "C:\log.txt"
            mailer.Log.Clear()
            
            <span style="color: green;">' Specify SMTP server to use, and enable SMTP authentication. Remove </span>
            <span style="color: green;">' last 2 parameters if authentication is not required by your server.</span>
            <span style="color: green;">' If your server requires authentication and expects e-mail address to </span>
            <span style="color: green;">' be specified as login name, use "jdoe@domain.com" instead of "jdoe".</span>
            mailer.SmtpServers.Add("smtp.domain.com", "jdoe", "secret")
            
            <span style="color: green;">' Get the list of DNS servers from OS settings or the config file.</span>
            mailer.DnsServers.Autodetect()
            
            <span style="color: green;">' Set sender.</span>
            mailer.From.DisplayName = "John Doe"
            mailer.From.Email = "jdoe@domain.com"
            
            <span style="color: green;">' Set To and CC recipients.</span>
            mailer.To.Add("Sales Department", "sales@company.com")
            mailer.Cc.Add("Conversation archive", "collect@domain.com")
            
            <span style="color: green;">' Set subject.</span>
            mailer.Subject = "My order"
            
            <span style="color: green;">' Set that message is high priority. Because Importance property </span>
            <span style="color: green;">' has no Smtp.Importance shortcut, use fully qualified form. The </span>
            <span style="color: green;">' same applies to Priority property.</span>
            mailer.Message.Importance = MailPriority.Highest
            mailer.Message.Priority = MailPriority.Highest
            
            <span style="color: green;">' Set plain-text and HTML versions of the body.</span>
            mailer.BodyPlainText = "Hi!\r\n\r\nAny news on my order status?\r\n" &amp; _
            	"Order info attached.\r\n\r\nThanks, J.D."
            mailer.BodyHtmlText = "&lt;html&gt;Hi!&lt;p&gt;Any news on my order status?&lt;br&gt;" &amp; _
            	"Order info attached.&lt;/p&gt;Thanks, &lt;i&gt;J.D.&lt;/i&gt;&lt;/html&gt;"
            
            <span style="color: green;">' Attach a file.</span>
            mailer.AddAttachment("C:\My Documents\order.doc")
            
            <span style="color: green;">' Send the message!</span>
            mailer.Send()
            
            <span style="color: green;">' Print the outcome.</span>
            Console.WriteLine("Successfully sent to: " + mailer.GetAcceptedRecipients().ToString())
            Console.WriteLine("Not sent to: " + mailer.GetRefusedRecipients().ToString())
            </code>
            </example>
            <example><hr></hr>
            <para>This sample sends multiple messages using mail merge. Messages are submitted to
            the primary SMTP server. If it fails, backup SMTP server is used. <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/>
            event is used to track submission of each message. Each message is sent to a single
            recipient. If MailBee throws an exception telling that sending a message failed because the server rejected it
            (but not because both servers are down), this exception is caught, and mailing continues.</para>
            <para>To use this sample, you need to create "C:\sample.mdb" database, and put "mailing_list"
            table into this database. "mailing_list" table should look like the following:
            <list type="table">
            <listheader><term>ID</term><term>Email</term><term>Name</term><term>Filename</term></listheader>
            <item><description>1</description><description>jdoe@hisdomain.com</description><description>John Doe</description><description>order_234.doc</description></item>
            <item><description>2</description><description>k.smith@herdomain.com</description><description>Katy Smith</description><description>order_345.doc</description></item>
            <item><description>3</description><description>techsupport@ourdomain.com</description><description>TechSupport</description><description>order_555.doc</description></item>
            </list>
            It's assumed "C:\Docs" folder contains the following files: order_234.doc, order_345.doc, order_555.doc.
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageSent(
            		<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		<span style="color: green;">// Show all recipients to which the message was successfully sent.</span>
            		<span style="color: green;">// However, since we send each message to a single recipient, the </span>
            		<span style="color: green;">// code below will execute only once per message.</span>
            		<span style="color: blue;">foreach</span> (EmailAddress address <span style="color: blue;">in</span> e.SuccessfulRecipients)
            		{
            			Console.WriteLine("Message sent to " + address.Email);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Enable logging of send mail session into a file.</span>
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Add primary server (SMTP AUTH is not used).</span>
            		<span style="color: green;">// Default priority is 0 (top priority).</span>
            		mailer.SmtpServers.Add("smtp.domain.com");
            
            		<span style="color: green;">// Add backup server (SMTP AUTH is used). Assume ISP's SMTP relay </span>
            		<span style="color: green;">// server should be used if company's internal server fails.</span>
            		SmtpServer backupServer = <span style="color: blue;">new</span> SmtpServer("mail.isp.com", "jdoe", "secret");
            		backupServer.Priority = 1;
            		mailer.SmtpServers.Add(backupServer);
            
            		<span style="color: green;">// Create a message which will be used as a source for mail merge.</span>
            		<span style="color: green;">// In this message, we define merge patterns. After applying merge,</span>
            		<span style="color: green;">// new message having patterns replaced with actual values will be </span>
            		<span style="color: green;">// constructed and placed into msg.Merge.MergedMessage property.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Set sender (the same value for all messages).</span>
            		msg.From.AsString = @"""John Doe, Sales Manager"" &lt;jdoe@company.com&gt;";
            
            		<span style="color: green;">// Set recipient pattern.</span>
            		msg.To.AsString = @"""!#DISPLAY_NAME#!"" &lt;!#EMAIL_ADDRESS#!&gt;";
            
            		<span style="color: green;">// Subject is the same for all messages.</span>
            		msg.Subject = "Order details";
            
            		<span style="color: green;">// Set body pattern.</span>
            		msg.BodyPlainText = @"Dear !#DISPLAY_NAME#!,
            Please find your order details in the attached document.
            
            Thanks,
            John Doe, Sales Manager";
            
            		<span style="color: green;">// Set attachment pattern (assume all documents reside in C:\Docs folder).</span>
            		msg.Merge.AddAttachmentPattern(@"C:\Docs\!#ORDER#!");
            
            		<span style="color: green;">// Subscribe to the MessageSent event.</span>
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(OnMessageSent);
            
            		<span style="color: green;">// Specify connection string (assume .mdb file resides in C:\ folder).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\sample.mdb;";
            
            		<span style="color: green;">// Prepare DataTable for mail merge.</span>
            		OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams);
            		OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            		OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            		DataTable table = <span style="color: blue;">new</span> DataTable();
            		adapter.SelectCommand = command;
            		adapter.Fill(table);
            
            		<span style="color: green;">// Connect to the SMTP server.</span>
            		mailer.Connect();
            		<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; table.Rows.Count; i++)
            		{
            			<span style="color: blue;">try</span>
            			{
            				<span style="color: green;">// Start mail merge iteration and replace patterns with actual values.</span>
            				msg.Merge.Replace(@"!#DISPLAY_NAME#!", table.Rows[i]["Name"].ToString());
            				msg.Merge.Replace(@"!#EMAIL_ADDRESS#!", table.Rows[i]["Email"].ToString());
            				msg.Merge.Replace(@"!#ORDER#!", table.Rows[i]["Filename"].ToString());
            
            				<span style="color: green;">// Specify that mailer should send the mail message </span>
            				<span style="color: green;">// which is the result of mail merge.</span>
            				mailer.Message = msg.Merge.MergedMessage;
            
            				<span style="color: green;">// Send it!</span>
            				mailer.Send();
            
            				<span style="color: green;">// Report the result.</span>
            				Console.WriteLine("The message has been set to " +
            					table.Rows[i]["Email"].ToString());
            			}
            			<span style="color: blue;">catch</span> (MailBeeException e)
            			{
            				<span style="color: blue;">if</span> (e <span style="color: blue;">is</span> IMailBeeSmtpSendException)
            				{
            					Console.WriteLine("Message has not been sent to " +
            						table.Rows[i]["Email"].ToString() + ", error is: " + e.Message);
            				}
            				<span style="color: blue;">else</span>
            				{
            					<span style="color: blue;">throw</span>;
            				}
            			}
            			<span style="color: blue;">finally</span>
            			{
            				<span style="color: green;">// Clear merged message and prepare for the next mail merge iteration.</span>
            				msg.Merge.Reset();
            			}
            		}
            
            		<span style="color: green;">// Finish.</span>
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageSent event handler</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageSent( _
            		<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		<span style="color: green;">' Show all recipients to which the message was successfully sent.</span>
            		<span style="color: green;">' However, since we send each message to a single recipient, the </span>
            		<span style="color: green;">' code below will execute only once per message.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> address <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> e.SuccessfulRecipients
            			Console.WriteLine("Message sent to " &amp; address.Email)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Enable logging of send mail session into a file.</span>
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Add primary server (SMTP AUTH is not used).</span>
            		<span style="color: green;">' Default priority is 0 (top priority).</span>
            		mailer.SmtpServers.Add("smtp.domain.com")
            
            		<span style="color: green;">' Add backup server (SMTP AUTH is used). Assume ISP's SMTP relay </span>
            		<span style="color: green;">' server should be used if company's internal server fails.</span>
            		<span style="color: blue;">Dim</span> backupServer <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer("mail.isp.com", "jdoe", "secret")
            		backupServer.Priority = 1
            		mailer.SmtpServers.Add(backupServer)
            
            		<span style="color: green;">' Create a message which will be used as a source for mail merge.</span>
            		<span style="color: green;">' In this message, we define merge patterns. After applying merge,</span>
            		<span style="color: green;">' new message having patterns replaced with actual values will be </span>
            		<span style="color: green;">' constructed and placed into msg.Merge.MergedMessage property.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Set sender (the same value for all messages).</span>
            		msg.From.AsString = """John Doe, Sales Manager"" &lt;jdoe@company.com&gt;"
            
            		<span style="color: green;">' Set recipient pattern.</span>
            		msg.To.AsString = """!#DISPLAY_NAME#!"" &lt;!#EMAIL_ADDRESS#!&gt;"
            
            		<span style="color: green;">' Subject is the same for all messages.</span>
            		msg.Subject = "Order details"
            
            		<span style="color: green;">' Set body pattern.</span>
            		msg.BodyPlainText = "Dear !#DISPLAY_NAME#!," &amp; VbCrLf &amp; _
            			"Please find your order details in the attached document." &amp; VbCrLf &amp; _
            			VbCrLf &amp; _
            			"Thanks," &amp; VbCrLf &amp; _
            			"John Doe, Sales Manager"
            
            		<span style="color: green;">' Set attachment pattern (assume all documents reside in C:\Docs folder).</span>
            		msg.Merge.AddAttachmentPattern("C:\Docs\!#ORDER#!")
            
            		<span style="color: green;">' Subscribe to the MessageSent event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> OnMessageSent
            
            		<span style="color: green;">' Specify connection string (assume .mdb file resides in C:\ folder).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\sample.mdb;"
            
            		<span style="color: green;">' Prepare DataTable for mail merge.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> <span style="color: blue;">New</span> OleDbConnection(connParams)
            		<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            		<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> <span style="color: blue;">New</span> OleDbDataAdapter
            		<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> <span style="color: blue;">New</span> DataTable
            		adapter.SelectCommand = command
            		adapter.Fill(table)
            
            		<span style="color: green;">' Connect to the SMTP server.</span>
            		mailer.Connect()
            		<span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1 <span style="color: blue;">To</span> table.Rows.Count - 1
            			<span style="color: blue;">Try</span>
            				<span style="color: green;">' Start mail merge iteration and replace patterns with actual values.</span>
            				msg.Merge.Replace("!#DISPLAY_NAME#!", table.Rows(i)("Name").ToString())
            				msg.Merge.Replace("!#EMAIL_ADDRESS#!", table.Rows(i)("Email").ToString())
            				msg.Merge.Replace("!#ORDER#!", table.Rows(i)("Filename").ToString())
            
            				<span style="color: green;">' Specify that mailer should send the mail message </span>
            				<span style="color: green;">' which is the result of mail merge.</span>
            				mailer.Message = msg.Merge.MergedMessage
            
            				<span style="color: green;">' Send it!</span>
            				mailer.Send()
            
            				<span style="color: green;">' Report the result.</span>
            				Console.WriteLine("The message has been set to " &amp; _
            					table.Rows(i)("Email").ToString())
            			<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            				<span style="color: blue;">If</span> (<span style="color: blue;">TypeOf</span> e <span style="color: blue;">Is</span> IMailBeeSmtpSendException) <span style="color: blue;">Then</span>
            					Console.WriteLine("Message has not been sent to " &amp; _
            						table.Rows(i)("Email").ToString() &amp; ", error is: " &amp; e.Message)
            				<span style="color: blue;">Else</span>
            					<span style="color: blue;">Throw</span>
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">Finally</span>
            				<span style="color: green;">' Clear merged message and prepare for the next mail merge iteration.</span>
            				msg.Merge.Reset()
            			<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Finish.</span>
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Send(System.String,MailBee.Mime.EmailAddressCollection)">
            <summary>
            Sends the mail message to the specified recipients.
            <seealso cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>
            </summary>
            <param name="senderEmail">The e-mail address of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address is taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipients">The list of the message recipients. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list is combined from <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> lists.</param>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para><see cref="M:MailBee.SmtpMail.Smtp.QuickSend(MailBee.Mime.MailMessage)"/> method can be used to send a mail message with a single line of code.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> or <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> methods perform sending of large volumes of e-mails including mail merge over database.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.Message"/> property represents the mail message to be sent.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.Log"/> object can be used to enable logging SMTP session into a file or memory buffer.</para>
            <para>Delivery status notifications can be enabled and configured by setting
            <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> properties.</para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,MailBee.ImapMail.SystemMessageFlags)"/> method
            can be used to upload the sent message into IMAP4 folder such as "Sent items".</para>
            <para>The operation progress can be monitored through subscribing to <see cref="T:MailBee.SmtpMail.Smtp"/> class
            events or by deriving a new class from <see cref="T:MailBee.SmtpMail.Smtp"/> and overriding <i>OnEventName</i>
            methods.</para>
            <para>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was previously called and the connection with the
            SMTP relay server was established, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will send the message to this
            server.</para>
            <para>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was not called, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will automatically
            connect to the server specified in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection, send the message,
            and then disconnect.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains more than one server, <see cref="M:MailBee.SmtpMail.Smtp.Connect"/>
            method will try to send the message to the top priority server (see <see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/>).
            If it fails, other servers will be tried accordingly their priority values.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is empty or the priority of the most preferred SMTP relay server
            in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is less than than the priority of the most preferred DNS server
            in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection, the message will be sent in direct send mode.
            In this mode, MailBee performs DNS MX lookup for all recipients domains to discover which hosts
            accept mail for these domains (such hosts are called <i>SMTP MX</i> servers), and then sends
            the message directly to these servers. In other words, MailBee itself
            will act as a relay SMTP server. However, it's recommended sending host have assigned DNS MX or A record.
            Systems which actively send mail but don't have any DNS records assigned are typically used by spammers, thus many
            SMTP MX servers will not accept mail from such host and may even blacklist its IP address.</para>
            <para>If both <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collections are
            non-empty, the collection having higher priority server will be tried first (if top priority servers of both
            collections have the same priority, <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> is preferred).
            If sending to some or all recipients fails due to failure of
            some servers, another collection will be used to send the message to the failed recipients. Thus,
            sending to both SMTP relay servers and servers discovered via DNS MX lookup can be
            performed in a single <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method call, providing high level of reliability of
            send mail operation.</para>
            <note>SMTP and DNS server priority values are zero-based.
            0 is the highest priority while 999 is the lowest priority.</note>
            <para>In direct send mode, it's possible to send the message to all SMTP MX servers simultaneously.
            This may greatly improve performance when sending to multiple recipients. The developer
            can enable multi-threading by setting <see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> property value
            to -1 (unlimited number of thread) or to the maximum number of threads the application is allowed to use.</para>
            </remarks>
            <example>This sample gets a message from the POP3 server and then sends it
            to other recipients. From: and To: fields in the original messages are not altered.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            <span style="color: green;">// Download first message from POP3 inbox.</span>
            pop.Connect("pop.domain.com");
            pop.Login("jdoe", "secret");
            mailer.Message = pop.DownloadEntireMessage(1);
            pop.Disconnect();
            
            <span style="color: green;">// Specify SMTP server to use, and enable SMTP authentication. Remove </span>
            <span style="color: green;">// last 2 parameters if authentication is not required by your server.</span>
            <span style="color: green;">// If your server requires authentication and expects e-mail address to </span>
            <span style="color: green;">// be specified as login name, use "jdoe@domain.com" instead of "jdoe".</span>
            mailer.SmtpServers.Add("smtp.domain.com", "jdoe", "secret");
            
            <span style="color: green;">// Specify some recipients to relay the message to.</span>
            EmailAddressCollection recipients = <span style="color: blue;">new</span> EmailAddressCollection();
            recipients.Add("user1@domain1.com");
            recipients.Add("user2@domain2.com");
            recipients.Add("user3@domain3.com");
            
            <span style="color: green;">// Note: some servers do not allow sending from address different </span>
            <span style="color: green;">// from From: address specified in the message. In this case, adding </span>
            <span style="color: green;">// Resent-From: custom header often helps. However, the message will </span>
            <span style="color: green;">// be altered in this case. Uncomment the next line to add Resent-From: </span>
            <span style="color: green;">// header to the message.</span>
            
            <span style="color: green;">// mailer.Message.Headers["Resent-From"] = mailer.Message.From.Email; </span>
            
            <span style="color: green;">// Relay the message.</span>
            mailer.Send("jdoe@domain.com", recipients);
            
            Console.WriteLine("Sent to: " + mailer.GetAcceptedRecipients().ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            <span style="color: green;">' Download first message from POP3 inbox.</span>
            pop.Connect("pop.domain.com")
            pop.Login("jdoe", "secret")
            mailer.Message = pop.DownloadEntireMessage(1)
            pop.Disconnect()
            
            <span style="color: green;">' Specify SMTP server to use, and enable SMTP authentication. Remove </span>
            <span style="color: green;">' last 2 parameters if authentication is not required by your server.</span>
            <span style="color: green;">' If your server requires authentication and expects e-mail address to </span>
            <span style="color: green;">' be specified as login name, use "jdoe@domain.com" instead of "jdoe".</span>
            mailer.SmtpServers.Add("smtp.domain.com", "jdoe", "secret")
            
            <span style="color: green;">' Specify some recipients to relay the message to </span>
            <span style="color: blue;">Dim</span> recipients <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddressCollection
            recipients.Add("user1@domain1.com")
            recipients.Add("user2@domain2.com")
            recipients.Add("user3@domain3.com")
            
            <span style="color: green;">' Note: some servers do not allow sending from address different </span>
            <span style="color: green;">' from From: address specified in the message. In this case, adding </span>
            <span style="color: green;">' Resent-From: custom header often helps. However, the message will </span>
            <span style="color: green;">' be altered in this case. Uncomment the next line to add Resent-From: </span>
            <span style="color: green;">' header to the message.</span>
            
            <span style="color: green;">' mailer.Message.Headers("Resent-From") = mailer.Message.From.Email </span>
            
            <span style="color: green;">' Relay the message.</span>
            mailer.Send("jdoe@domain.com", recipients)
            
            Console.WriteLine("Sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.Send(System.String,System.String)">
            <summary>
            Sends the mail message to the specified recipients e-mail addresses.
            <seealso cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>
            </summary>
            <param name="senderEmail">The e-mail address of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address is taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipientEmails">The comma-separted list of the recipients e-mail addresses. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list is combined from <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> lists.</param>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para><see cref="M:MailBee.SmtpMail.Smtp.QuickSend(MailBee.Mime.MailMessage)"/> method can be used to send a mail message with a single line of code.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> or <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> methods perform sending of large volumes of e-mails including mail merge over database.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.Message"/> property represents the mail message to be sent.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.Log"/> object can be used to enable logging SMTP session into a file or memory buffer.</para>
            <para>Delivery status notifications can be enabled and configured by setting
            <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> properties.</para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,MailBee.ImapMail.SystemMessageFlags)"/> method
            can be used to upload the sent message into IMAP4 folder such as "Sent items".</para>
            <para>The operation progress can be monitored through subscribing to <see cref="T:MailBee.SmtpMail.Smtp"/> class
            events or by deriving a new class from <see cref="T:MailBee.SmtpMail.Smtp"/> and overriding <i>OnEventName</i>
            methods.</para>
            <para>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was previously called and the connection with the
            SMTP relay server was established, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will send the message to this
            server.</para>
            <para>If <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method was not called, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will automatically
            connect to the server specified in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection, send the message,
            and then disconnect.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains more than one server, <see cref="M:MailBee.SmtpMail.Smtp.Connect"/>
            method will try to send the message to the top priority server (see <see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/>).
            If it fails, other servers will be tried accordingly their priority values.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is empty or the priority of the most preferred SMTP relay server
            in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection is less than than the priority of the most preferred DNS server
            in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection, the message will be sent in direct send mode.
            In this mode, MailBee performs DNS MX lookup for all recipients domains to discover which hosts
            accept mail for these domains (such hosts are called <i>SMTP MX</i> servers), and then sends
            the message directly to these servers. In other words, MailBee itself
            will act as a relay SMTP server. However, it's recommended sending host have assigned DNS MX or A record.
            Systems which actively send mail but don't have any DNS records assigned are typically used by spammers, thus many
            SMTP MX servers will not accept mail from such host and may even blacklist its IP address.</para>
            <para>If both <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collections are
            non-empty, the collection having higher priority server will be tried first (if top priority servers of both
            collections have the same priority, <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> is preferred).
            If sending to some or all recipients fails due to failure of
            some servers, another collection will be used to send the message to the failed recipients. Thus,
            sending to both SMTP relay servers and servers discovered via DNS MX lookup can be
            performed in a single <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method call, providing high level of reliability of
            send mail operation.</para>
            <note>SMTP and DNS server priority values are zero-based.
            0 is the highest priority while 999 is the lowest priority.</note>
            <para>In direct send mode, it's possible to send the message to all SMTP MX servers simultaneously.
            This may greatly improve performance when sending to multiple recipients. The developer
            can enable multi-threading by setting <see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> property value
            to -1 (unlimited number of thread) or to the maximum number of threads the application is allowed to use.</para>
            </remarks>
            <example>This sample sends a message from address different from From: address specified
            in the message. This is useful when bounced messages should be processed and the developer
            wants to redirect bounced messages to another address. In this sample, From: is
            jdoe@domain.com while real sender's address (which will appear in Return-Path header value and
            where bounces will arrive to) is bounce@domain.com. 
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Specify SMTP server to use, and enable SMTP authentication. Remove </span>
            <span style="color: green;">// last 2 parameters if authentication is not required by your server. </span>
            <span style="color: green;">// If your server requires authentication and expects e-mail address to </span>
            <span style="color: green;">// be specified as login name, use "bounce@domain.com" instead of "bounce".</span>
            mailer.SmtpServers.Add("smtp.domain.com", "bounce", "password");
            
            <span style="color: green;">// Specify From: field.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            
            <span style="color: green;">// Set recipients</span>
            mailer.To.AsString = "Bill Smith &lt;bill@company.com&gt;;, kathy@anothercompany.com";
            
            mailer.Subject = "Report";
            mailer.BodyPlainText = "This is the report.";
            
            <span style="color: green;">// Send from bounce@domain.com rather than jdoe@domain.com.</span>
            <span style="color: green;">// bounce@domain.com will appear in Return-Path header.</span>
            <span style="color: green;">// We set recipientEmails=null to send to addresses specified in the message.</span>
            mailer.Send("bounce@domain.com", (<span style="color: blue;">string</span>)<span style="color: blue;">null</span>);
            
            Console.WriteLine("Sent to: " + mailer.GetAcceptedRecipients().ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Specify SMTP server to use, and enable SMTP authentication. Remove </span>
            <span style="color: green;">' last 2 parameters if authentication is not required by your server. </span>
            <span style="color: green;">' If your server requires authentication and expects e-mail address to </span>
            <span style="color: green;">' be specified as login name, use "bounce@domain.com" instead of "bounce".</span>
            mailer.SmtpServers.Add("smtp.domain.com", "bounce", "password")
            
            <span style="color: green;">' Specify From: field</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            
            <span style="color: green;">' Set recipients.</span>
            mailer.To.AsString = "Bill Smith &lt;bill@company.com&gt;;, kathy@anothercompany.com"
            
            mailer.Subject = "Report"
            mailer.BodyPlainText = "This is the report."
            
            <span style="color: green;">' Send from bounce@domain.com rather than jdoe@domain.com.</span>
            <span style="color: green;">' bounce@domain.com will appear in Return-Path header.</span>
            <span style="color: green;">' We set recipientEmails=null to send to addresses specified in the message.</span>
            mailer.Send("bounce@domain.com", <span style="color: blue;">CStr</span>(<span style="color: blue;">Nothing</span>))
            
            Console.WriteLine("Sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginSend(System.String,MailBee.Mime.EmailAddressCollection,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for sending a mail message to recipients.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Send"/> 
            </summary>
            <param name="senderEmail">The e-mail address of the sender.</param>
            <param name="recipients">The list of the message recipients.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous sending the message.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.Send"/>.</remarks>
            <example>This WinForms sample sends a mail message asynchronously. The callback function
            is used to receive notification on asynchronous method completion. Events are
            used to track send mail progress.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.DnsMX;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// MessageSubmittedToServer event handler.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnMessageSubmittedToServer(<span style="color: blue;">object</span> sender,
            	SmtpMessageSubmittedToServerEventArgs e)
            {
            	<span style="color: green;">// If no recipients received the message, this event won't be raised.</span>
            	<span style="color: green;">// It's safe to assume AcceptedRecipients collection is not empty.</span>
            	<span style="color: blue;">string</span> domain = e.AcceptedRecipients[0].GetDomain();
            	MessageBox.Show("Message was sent to recipients at " + domain + " domain");
            }
            
            <span style="color: green;">// MessageRecipientSubmitted event handler.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnMessageRecipientSubmitted(<span style="color: blue;">object</span> sender,
            	SmtpMessageRecipientSubmittedEventArgs e)
            {
            	<span style="color: green;">// If a particular recipient was refused, let the user know.</span>
            	<span style="color: blue;">if</span> (!e.Result)
            	{
            		MessageBox.Show("For e-mail address " + e.RecipientEmail +
            			", server responded: " + e.ServerStatusMessage);
            	}
            }
            
            <span style="color: green;">// Send callback function.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> SendCallback(IAsyncResult result)
            {
            	Smtp mailer = (Smtp)result.AsyncState;
            	mailer.EndSend();
            	MessageBox.Show("The e-mail was sent to: " +
            		mailer.GetAcceptedRecipients().ToString());
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            	<span style="color: green;">// Enable logging SMTP session into a file.</span>
            	mailer.Log.Enabled = <span style="color: blue;">true</span>;
            	mailer.Log.Filename = @"C:\log.txt";
            	mailer.Log.Clear();
            	mailer.Log.Format = LogFormatOptions.AddContextInfo;
            
            	<span style="color: green;">// Get the list of DNS servers for MX lookup from OS settings </span>
            	<span style="color: green;">// (app.config/web.config/machine.config files are ignored).</span>
            	mailer.DnsServers.Autodetect(
            		DnsAutodetectOptions.Registry | DnsAutodetectOptions.Wmi);
            
            	<span style="color: green;">// Subscribe to events.</span>
            	mailer.MessageSubmittedToServer +=
            		<span style="color: blue;">new</span> SmtpMessageSubmittedToServerEventHandler(OnMessageSubmittedToServer);
            	mailer.MessageRecipientSubmitted +=
            		<span style="color: blue;">new</span> SmtpMessageRecipientSubmittedEventHandler(OnMessageRecipientSubmitted);
            
            	mailer.From.Email = "jdoe@domain.com";
            	mailer.Subject = "Important details";
            
            	<span style="color: green;">// Demonstrate different methods of adding To, CC, and BCC recipients. </span>
            	mailer.To.AsString = "kathy@domain.com, \"Bill Smith, Jr.\" &lt;b.smith@company.com&gt;";
            	mailer.Cc.Add("Peter", "peter@domain.com");
            	mailer.Cc.Add("john@domain.com");
            	mailer.Bcc.AsString = "echelon@secret.com";
            
            	<span style="color: green;">// Specify HTML body.</span>
            	mailer.BodyHtmlText = "&lt;html&gt;Here are the details.&lt;/html&gt;";
            
            	<span style="color: green;">// Create plain-text version.</span>
            	mailer.Message.MakePlainBodyFromHtmlBody();
            
            	<span style="color: green;">// Initiate an asynchronous send mail attempt.</span>
            	mailer.BeginSend(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, <span style="color: blue;">new</span> AsyncCallback(SendCallback), mailer);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.DnsMX
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' MessageSubmittedToServer event handler.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnMessageSubmittedToServer(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            	<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSubmittedToServerEventArgs)
            	<span style="color: green;">' If no recipients received the message, this event won't be raised.</span>
            	<span style="color: green;">' It's safe to assume AcceptedRecipients collection is not empty.</span>
            	<span style="color: blue;">Dim</span> domain <span style="color: blue;">As</span> <span style="color: blue;">String</span> = e.AcceptedRecipients(0).GetDomain()
            	MsgBox("Message was sent to recipients at " &amp; domain &amp; " domain")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' MessageRecipientSubmitted event handler.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnMessageRecipientSubmitted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            	<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageRecipientSubmittedEventArgs)
            	<span style="color: green;">' If a particular recipient was refused, let the user know.</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> e.Result) <span style="color: blue;">Then</span>
            		MsgBox("For e-mail address " &amp; e.RecipientEmail &amp; _
            			", server responded: " &amp; e.ServerStatusMessage)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Send callback function.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> SendCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = result.AsyncState
            	mailer.EndSend()
            	MsgBox("The e-mail was sent to: " &amp; _
            		mailer.GetAcceptedRecipients().ToString())
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            	<span style="color: green;">' Enable logging SMTP session into a file.</span>
            	mailer.Log.Enabled = <span style="color: blue;">True</span>
            	mailer.Log.Filename = "C:\log.txt"
            	mailer.Log.Clear()
            	mailer.Log.Format = LogFormatOptions.AddContextInfo
            
            	<span style="color: green;">' Get the list of DNS servers for MX lookup from OS settings </span>
            	<span style="color: green;">' (app.config/web.config/machine.config files are ignored).</span>
            	mailer.DnsServers.Autodetect( _
            	DnsAutodetectOptions.Registry <span style="color: blue;">Or</span> DnsAutodetectOptions.Wmi)
            
            	<span style="color: green;">' Subscribe to events.</span>
            	<span style="color: blue;">AddHandler</span> mailer.MessageSubmittedToServer, <span style="color: blue;">AddressOf</span> OnMessageSubmittedToServer
            	<span style="color: blue;">AddHandler</span> mailer.MessageRecipientSubmitted, <span style="color: blue;">AddressOf</span> OnMessageRecipientSubmitted
            
            	mailer.From.Email = "jdoe@domain.com"
            	mailer.Subject = "Important details"
            
            	<span style="color: green;">' Demonstrate different methods of adding To, CC, and BCC recipients. </span>
            	mailer.To.AsString = "kathy@domain.com, ""Bill Smith, Jr."" &lt;b.smith@company.com&gt;"
            	mailer.Cc.Add("Peter", "peter@domain.com")
            	mailer.Cc.Add("john@domain.com")
            	mailer.Bcc.AsString = "echelon@secret.com"
            
            	<span style="color: green;">' Specify HTML body.</span>
            	mailer.BodyHtmlText = "&lt;html&gt;Here are the details.&lt;/html&gt;"
            
            	<span style="color: green;">' Create plain-text version.</span>
            	mailer.Message.MakePlainBodyFromHtmlBody()
            
            	<span style="color: green;">' Initiate an asynchronous send mail attempt.</span>
            	mailer.BeginSend(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> SendCallback), mailer)
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndSend">
            <summary>
            Ends the pending asynchronous request for sending the message to the recipients.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginSend(System.String,MailBee.Mime.EmailAddressCollection,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetMXHosts(System.String)">
            <summary>
            Retrieves the list of hosts willing to accept mail for the given domain.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetTxtData(System.String)"/>
            </summary>
            <param name="domain">The domain to get the list of MX hosts for.</param>
            <returns>The array of string names of hosts willing to accept mail for the given domain,
            or <see cref="P:MailBee.Global.LocalSmtpMXServerName"/> if <paramref name="domain"/> is an empty string,
            or a null reference (<b>Nothing</b> in Visual Basic) if an error occurred.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="domain"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method makes DNS MX query to the servers listed in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection regarding
            <paramref name="domain"/>. The method will return the domain name itself if
            the DNS query reports the given domain contains A record only (i.e. the given domain is
            willing to accept mail for itself). MX records are returned accordingly their priorities (higher priority listed first).
            </remarks>
            <example>
            This sample retrieves the list of DNS MX server names accepting mail for "hotmail.com" domain.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		mailer.DnsServers.Autodetect();
            		<span style="color: blue;">string</span>[] hosts = mailer.GetMXHosts("hotmail.com");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> host <span style="color: blue;">in</span> hosts)
            		{
            			Console.WriteLine(host);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            		mailer.DnsServers.Autodetect()
            		<span style="color: blue;">Dim</span> hosts() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = mailer.GetMXHosts("hotmail.com")
            		<span style="color: blue;">Dim</span> host <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> host <span style="color: blue;">In</span> hosts
            			Console.WriteLine(host)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetTxtData(System.String)">
            <summary>
            Retrieves the list of TXT strings of DNS data of the specified domain.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetMXHosts(System.String)"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetPtrData(System.String)"/>
            </summary>
            <param name="domain">The domain to get the list of MX hosts for.</param>
            <returns>The array of strings taken from DNS TXT data of the specified domain,
            or a null reference (<b>Nothing</b> in Visual Basic) if an error occurred or no TXT record found for the given domain.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="domain"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method makes DNS TXT query to the servers listed in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection regarding
            <paramref name="domain"/>. The method supports multiple strings per TXT record and multiple TXT records per domain.
            If multiple TXT records are returned, their arrays of strings are concatenated into single array.</para>
            <para>TXT records contain important DNS information used by various antispam techniques like SPF and DomainKeys (DKIM).</para></remarks>
            <example>
            This sample retrieves TXT information for "gmail.com" domain.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		mailer.DnsServers.Autodetect();
            		<span style="color: blue;">string</span>[] strings = mailer.GetTxtData("gmail.com");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> str <span style="color: blue;">in</span> strings)
            		{
            			Console.WriteLine(str);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            		mailer.DnsServers.Autodetect()
            		<span style="color: blue;">Dim</span> strings() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = mailer.GetTxtData("gmail.com")
            		<span style="color: blue;">Dim</span> str <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> str <span style="color: blue;">In</span> strings
            			Console.WriteLine(str)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.GetPtrData(System.String)">
            <summary>
            Retrieves the list of domain names for the specified IP address.
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetMXHosts(System.String)"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.GetTxtData(System.String)"/>
            </summary>
            <param name="ipString">The IP address string.</param>
            <returns>The array of strings taken from DNS PTR data for the specified IP address,
            or a null reference (<b>Nothing</b> in Visual Basic) if an error occurred or no PTR record found for the given domain.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="ipString"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method makes DNS PTR query (reverse DNS query) to the servers listed in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection regarding
            <paramref name="ipString"/> address.</para>
            <para>Popular anti-spam check is making reverse DNS query for the IP address from which
            the mail message was sent. Then, the retured domain name is compared with the domain name
            from "From:" or "Return-Path:" address to make sure it was really sent from that domain.</para>
            <note>If the IP address has multiple domain names associated with it, PTR record will usually
            return only the domain name taken from A record. Other domain names are aliases (CNAMEs). They
            will not be returned as their information is not contained in PTR records.</note>
            </remarks>
            <example>
            This sample retrieves domain names associated with an IP address. Make sure to specify real IP address
            prior to running this sample.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		mailer.DnsServers.Autodetect();
            		<span style="color: blue;">string</span>[] domains = mailer.GetPtrData("123.123.123.123");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> domain <span style="color: blue;">in</span> domains)
            		{
            			Console.WriteLine(domain);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            		mailer.DnsServers.Autodetect()
            		<span style="color: blue;">Dim</span> domains() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = mailer.GetPtrData("123.123.123.123")
            		<span style="color: blue;">Dim</span> domain <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> domain <span style="color: blue;">In</span> domains
            			Console.WriteLine(domain)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)">
            <overloads>Puts an e-mail message or a mail merge job onto waiting list for subsequent processing in bulk mode.</overloads>
            <summary>
            Puts an e-mail message onto waiting list for subsequent processing in bulk mode.
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>
            </summary>
            <param name="tag">Any string the developer wants to assign to <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> property of <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            object created by this method. The developer can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="senderEmail">The e-mail address of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address is taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipients">The list of the message recipients. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list is combined from <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> lists.</param>
            <remarks>
            <para>This method can be used to send out large volumes of messages (in conjunction with <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method).
            The given overload composes a single e-mail message from the current values of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> and <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> objects
            and then adds it as a job waiting for processing into <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> queue. Then,
            once <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method has been called, MailBee starts processing all the jobs
            in this queue and sending out all the accompanied e-mails.</para>
            <para>Alternatively, if <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> has been called instead of <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>,
            the pending e-mails will be saved as .EML files in MailBee Message Queue or IIS pickup folder.</para>
            <note>Another <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> overload can be used
            to enqueue a mail merge job of processing a bulk of similar messages based on a common template and a data table.</note>
            </remarks>
            <example>
            This sample adds two e-mails into the jobs queue and then sends them in a batch.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Because SendJobs does not throw exceptions during sending of</span>
            		<span style="color: green;">// individual messages, logging is very useful for debugging.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Clear();
            
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Compose the message #1.</span>
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            		mailer.To.AsString = "sales@company1.com, Bob &lt;bob@company2.com&gt;";
            		mailer.Subject = "This is subject";
            		mailer.BodyPlainText = "This is body text";
            
            		<span style="color: green;">// Put the message #1 into the queue. The message will actually be</span>
            		<span style="color: green;">// sent from bounce@domain.com while jdoe@domain.com will appear</span>
            		<span style="color: green;">// in "From:" header of the message.</span>
            		mailer.AddJob(<span style="color: blue;">null</span>, "bounce@domain.com", <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Compose the message #2.</span>
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            		mailer.To.AsString = "peter@company.com";
            		mailer.Subject = "This is another subject";
            		mailer.BodyPlainText = "This is another body text";
            
            		<span style="color: green;">// Put the message #2 into the queue.</span>
            		mailer.AddJob(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Send out the bulk of 2 messages.</span>
            		mailer.SendJobs();
            
            		<span style="color: green;">// Print the outcome.</span>
            		Console.WriteLine(mailer.JobsSuccessful.Count + " message(s) succeeded");
            		Console.WriteLine(mailer.JobsFailed.Count + " message(s) failed");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Because SendJobs does not throw exceptions during sending of</span>
            		<span style="color: green;">' individual messages, logging is very useful for debugging.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Clear()
            
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Compose the message #1.</span>
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            		mailer.To.AsString = "sales@company1.com, Bob &lt;bob@company2.com&gt;"
            		mailer.Subject = "This is subject"
            		mailer.BodyPlainText = "This is body text"
            
            		<span style="color: green;">' Put the message #1 into the queue. The message will actually be</span>
            		<span style="color: green;">' sent from bounce@domain.com while jdoe@domain.com will appear</span>
            		<span style="color: green;">' in "From:" header of the message.</span>
            		mailer.AddJob(<span style="color: blue;">Nothing</span>, "bounce@domain.com", <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Compose the message #2.</span>
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            		mailer.To.AsString = "peter@company.com"
            		mailer.Subject = "This is another subject"
            		mailer.BodyPlainText = "This is another body text"
            
            		<span style="color: green;">' Put the message #2 into the queue.</span>
            		mailer.AddJob(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Send out the bulk of 2 messages.</span>
            		mailer.SendJobs()
            
            		<span style="color: green;">' Print the outcome.</span>
            		Console.WriteLine(mailer.JobsSuccessful.Count &amp; " message(s) succeeded")
            		Console.WriteLine(mailer.JobsFailed.Count &amp; " message(s) failed")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)">
            <summary>
            Puts a "mail merge over database" job onto waiting list for subsequent processing in bulk mode.
            <seealso cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            </summary>
            <param name="tag">Any string the developer wants to assign to <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> property of <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            object created by this method. The developer can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="senderEmailPattern">The e-mail address template of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address template will be taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipientsPattern">The e-mail address template of the recipients list. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list will be constructed via merge of <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> patterns with actual values from the data source.
            </param>
            <param name="mergeTable">The data source for mail merge.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="mergeTable"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>This method allows the application to schedule mail merge over database for subsequent processing with
            <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>, <see cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/>, or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method.</para>
            <note>To perform mail merge immediately rather than schedule it, use <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method.</note>
            <para>The mail merge requirements:
            <list type="bullet">
            <item><description>The template of e-mail to be merged with <paramref name="mergeTable"/> data
            must be specified in <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property. Normally, <see cref="P:MailBee.SmtpMail.Smtp.Message"/>
            property specifies the e-mail message to be sent out by <see cref="T:MailBee.SmtpMail.Smtp"/> object.
            In the case of mail merge, this e-mail message is considered as a template where
            <i>##Column_Name##</i> patterns will be replaced with the actual data from database
            table rows during the mail merge process.</description></item>
            <item><description><see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">Smtp.DeliveryNotification.TrackingID</see>
            may also contain a pattern if desired. Thus, it's possible to automatically assign unique tracking ID
            to the each message sent during mail merge and then receive this ID with bounced messages.</description></item>
            <item><description><paramref name="mergeTable"/> must be the data source containing all the data rows for which e-mails should be generated and sent; typically, this
            data source is a result of SQL query.</description></item>
            <item><description>Names of columns of <paramref name="mergeTable"/> must match pattern names
            in the e-mail template. For instance, if there is <c>Email</c> column in the data table and
            the developer wishes to make values from this column appear in resulting e-mails,
            then the e-mail template must contain <i>##Email##</i> string in the places where the e-mail
            address needs to be placed. Patterns are case-sensitive! For instance, if data table column name is <c>Email</c>,
            only <i>##Email##</i> pattern will be replaced with the column value. <i>##email##</i> and <i>##EMAIL##</i> patterns
            will be left intact.</description></item>
            <item><description><paramref name="senderEmailPattern"/> can be left null. However,
            if resulting e-mails should actually be sent from another e-mail address (for instance,
            resulting e-mails have <i>newsletter@domain.com</i> in "From:" field while
            you wish to send them from <i>"bounces@domain.com"</i>), then it's required
            to specify <paramref name="senderEmailPattern"/>. It can contain a pattern
            (e.g. <c>##Something##</c>) or refer to the actual value (e.g. <c>from@company.com</c>).</description></item>
            <item><description><paramref name="recipientsPattern"/> have the same meaning
            for specifying the actual recipients as <paramref name="senderEmailPattern"/> -
            for the actual sender. For instance, to set the pattern which will take the
            1st recipient's e-mail address from <c>Email</c> field of the data table while
            the 2nd recipient's email address is hard-coded, pass the following as
            <paramref name="recipientsPattern"/> value:
            <c>new EmailAddressCollection("##Email##, archive-copy@company.com")</c>.</description></item>
            <item><description>Setting <paramref name="tag"/> to non-empty value helps to distinguish the current mail merge
            from other jobs if there are any. This is useful if the application submits and processes multiple jobs and
            the developer wants to track processing of each job separately. Jobs tags also appear in the log if logging is enabled.</description></item>
            </list>
            </para>
            <para>Calling this overload is equivalent to calling <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/>
            with <i>mergeRowIndices</i> set to null, <i>keepProducedJobs</i> set to <b>true</b>, and <i>keepMergedData</i> set to <b>false</b>.</para>
            </remarks>
            <example>
            This console sample sends out 2 newsletters based on the same database table and different e-mail templates.
            Both newsletters are sent out from the same sender to the same recipients.
            The first newsletter is more complex and may contain attachments. The second newsletter is simpler.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Occurs when an e-mail message is ready to be sent.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_SendingMessage(<span style="color: blue;">object</span> sender, SmtpSendingMessageEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the e-mail to be sent.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " of '" + e.Tag + "'");
            
            		<span style="color: green;">// You can also subscribe to events like MergingMessage, MessageSent, MessageNotSent</span>
            		<span style="color: green;">// to keep the detailed track of mail merge progress.</span>
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Subscribe to event to track send bulk mail progress.</span>
            		mailer.SendingMessage += <span style="color: blue;">new</span> SmtpSendingMessageEventHandler(mailer_SendingMessage);
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;";
            		mailer.Message.Subject = "Our newsletter";
            
            		<span style="color: green;">// Setup DSN template for mail merge. In particular, this can be useful</span>
            		<span style="color: green;">// to track bounced messages which may come back from some addresses after</span>
            		<span style="color: green;">// sending bulk mail out. If the SMTP server does not support DSN, this</span>
            		<span style="color: green;">// setting will be ignored.</span>
            		mailer.DeliveryNotification.TrackingID = "##ID##-N";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Setup template for adding file attachments upon the specified path.</span>
            		<span style="color: green;">// In this sample, the path to attachment files will be constructed as</span>
            		<span style="color: green;">// "C:\" + DatabaseRecordField("Doc_path").</span>
            		mailer.Message.Merge.AddAttachmentPattern(@"C:\##Doc_path##");
            
            		<span style="color: green;">// Make outgoing e-mails UTF-8 to allow content in any language.</span>
            		mailer.Message.Charset = "UTF-8";
            
            		<span style="color: green;">// Tell MailBee to generate alternative plain-text version</span>
            		<span style="color: green;">// of each e-mail automatically.</span>
            		mailer.Message.Builder.HtmlToPlainMode = HtmlToPlainAutoConvert.IfHtml;
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		DataTable table = <span style="color: blue;">new</span> DataTable();
            
            		<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">// the data from "mailing_list" table.</span>
            		<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            		{
            			<span style="color: green;">// Open the connection and get the data.</span>
            			OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            			conn.Open();
            			OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            			adapter.SelectCommand = command;
            			adapter.Fill(table);
            
            			<span style="color: green;">// Create a job which is the following task for MailBee: perform mail merge</span>
            			<span style="color: green;">// of a newsletter template with data rows of the specified data table and</span>
            			<span style="color: green;">// send out each resulting e-mail to its intended recipients.</span>
            			mailer.AddJob("Newsletter #1", <span style="color: blue;">null</span>, <span style="color: blue;">null</span>, table);
            
            			<span style="color: green;">// Change template parameters for another newsletter.</span>
            			mailer.Message.Subject = "Newsletter update";
            
            			<span style="color: green;">// Setup DSN template for mail merge. In particular, this can be useful</span>
            			<span style="color: green;">// to track bounced messages which may come back from some addresses after</span>
            			<span style="color: green;">// sending bulk mail out. If the SMTP server does not support DSN, this</span>
            			<span style="color: green;">// setting will be ignored.</span>
            			mailer.DeliveryNotification.TrackingID = "##ID##-NU";
            
            			<span style="color: green;">// Setup HTML body template.</span>
            			mailer.Message.BodyHtmlText = "&lt;html&gt;Please disregard the newsletter you just received.&lt;/html&gt;";
            
            			<span style="color: green;">// If we do not want attachments in second newsletter, remove the pattern.</span>
            			mailer.Message.Merge.ClearAttachmentPatterns();
            
            			<span style="color: green;">// Create a job of sending another newsletter to the same recipients.</span>
            			mailer.AddJob("Newsletter #2", <span style="color: blue;">null</span>, <span style="color: blue;">null</span>, table);
            		}
            
            		<span style="color: green;">// Run the jobs. The actual mail merge takes place here.</span>
            		mailer.SendJobs();
            		Console.WriteLine();
            
            		<span style="color: green;">// Report results (row indices in the data table) to the console.</span>
            		<span style="color: blue;">if</span> (mailer.JobsFailed.Count == 0)
            		{
            			Console.WriteLine("Both newsletters have been sent out without any errors.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: blue;">if</span> (mailer.JobsSuccessful.Count == 0)
            			{
            				Console.WriteLine("All newsletter e-mails failed to be sent.");
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("Not all newsletter e-mails have been sent.");
            				Console.WriteLine();
            
            				Console.WriteLine("Successful rows (Our newsletter): ");
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, "Newsletter #1"));
            				Console.WriteLine();
            
            				Console.WriteLine("Failed rows (Our newsletter): ");
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, "Newsletter #1"));
            				Console.WriteLine();
            
            				Console.WriteLine("Successful rows (Newsletter update): ");
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, "Newsletter #2"));
            				Console.WriteLine();
            
            				Console.WriteLine("Failed rows (Newsletter update): ");
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, "Newsletter #2"));
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Occurs when an e-mail message is ready to be sent.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_SendingMessage(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpSendingMessageEventArgs)
            		<span style="color: green;">' Display e-mail address of the e-mail to be sent.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " of '" &amp; e.Tag &amp; "'")
            
            		<span style="color: green;">' You can also subscribe to events like MergingMessage, MessageSent, MessageNotSent</span>
            		<span style="color: green;">' to keep the detailed track of mail merge progress.</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Subscribe to event to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.SendingMessage, <span style="color: blue;">AddressOf</span> mailer_SendingMessage
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;"
            		mailer.Message.Subject = "Our newsletter"
            
            		<span style="color: green;">' Setup DSN template for mail merge. In particular, this can be useful</span>
            		<span style="color: green;">' to track bounced messages which may come back from some addresses after</span>
            		<span style="color: green;">' sending bulk mail out. If the SMTP server does not support DSN, this</span>
            		<span style="color: green;">' setting will be ignored.</span>
            		mailer.DeliveryNotification.TrackingID = "##ID##-N"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Setup template for adding file attachments upon the specified path.</span>
            		<span style="color: green;">' In this sample, the path to attachment files will be constructed as</span>
            		<span style="color: green;">' "C:\" + DatabaseRecordField("Doc_path").</span>
            		mailer.Message.Merge.AddAttachmentPattern("C:\##Doc_path##")
            
            		<span style="color: green;">' Make outgoing e-mails UTF-8 to allow content in any language.</span>
            		mailer.Message.Charset = "UTF-8"
            
            		<span style="color: green;">' Tell MailBee to generate alternative plain-text version</span>
            		<span style="color: green;">' of each e-mail automatically.</span>
            		mailer.Message.Builder.HtmlToPlainMode = HtmlToPlainAutoConvert.IfHtml
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            
            		<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">' the data from "mailing_list" table.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            		<span style="color: blue;">Try</span>
            			conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            			<span style="color: green;">' Open the connection and get the data.</span>
            			<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            			conn.Open()
            			<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            			adapter.SelectCommand = command
            			adapter.Fill(table)
            
            			<span style="color: green;">' Create a job which is the following task for MailBee: perform mail merge</span>
            			<span style="color: green;">' of a newsletter template with data rows of the specified data table and</span>
            			<span style="color: green;">' send out each resulting e-mail to its intended recipients.</span>
            			mailer.AddJob("Newsletter #1", <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, table)
            
            			<span style="color: green;">' Change template parameters for another newsletter.</span>
            			mailer.Message.Subject = "Newsletter update"
            
            			<span style="color: green;">' Setup DSN template for mail merge. In particular, this can be useful</span>
            			<span style="color: green;">' to track bounced messages which may come back from some addresses after</span>
            			<span style="color: green;">' sending bulk mail out. If the SMTP server does not support DSN, this</span>
            			<span style="color: green;">' setting will be ignored.</span>
            			mailer.DeliveryNotification.TrackingID = "##ID##-NU"
            
            			<span style="color: green;">' Setup HTML body template.</span>
            			mailer.Message.BodyHtmlText = "&lt;html&gt;Please disregard the newsletter you just received.&lt;/html&gt;"
            
            			<span style="color: green;">' If we do not want attachments in second newsletter, remove the pattern.</span>
            			mailer.Message.Merge.ClearAttachmentPatterns()
            
            			<span style="color: green;">' Create a job of sending another newsletter to the same recipients.</span>
            			mailer.AddJob("Newsletter #2", <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, table)
            
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				conn.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Run the jobs. The actual mail merge takes place here.</span>
            		mailer.SendJobs()
            		Console.WriteLine()
            
            		<span style="color: green;">' Report results (row indices in the data table) to the console.</span>
            		<span style="color: blue;">If</span> mailer.JobsFailed.Count = 0 <span style="color: blue;">Then</span>
            			Console.WriteLine("Both newsletters have been sent out without any errors.")
            		<span style="color: blue;">Else</span>
            			<span style="color: blue;">If</span> mailer.JobsSuccessful.Count = 0 <span style="color: blue;">Then</span>
            				Console.WriteLine("All newsletter e-mails failed to be sent.")
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("Not all newsletter e-mails have been sent.")
            				Console.WriteLine()
            
            				Console.WriteLine("Successful rows (Our newsletter): ")
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, "Newsletter #1"))
            				Console.WriteLine()
            
            				Console.WriteLine("Failed rows (Our newsletter): ")
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, "Newsletter #1"))
            				Console.WriteLine()
            
            				Console.WriteLine("Successful rows (Newsletter update): ")
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, "Newsletter #2"))
            				Console.WriteLine()
            
            				Console.WriteLine("Failed rows (Newsletter update): ")
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, "Newsletter #2"))
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Puts a "mail merge over database" job onto waiting list for subsequent processing in bulk mode.
            <seealso cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            </summary>
            <param name="tag">Any string the developer wants to assign to <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> property of <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            object created by this method. The developer can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="senderEmailPattern">The e-mail address template of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address template will be taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipientsPattern">The e-mail address template of the recipients list. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list will be constructed via merge of <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> patterns with actual values from the data source.
            </param>
            <param name="mergeTable">The data source for mail merge.</param>
            <param name="mergeRowIndices">The comma-separated list or integer array of indices of rows of <paramref name="mergeTable"/> to be processed,
            or a null reference (<b>Nothing</b> in Visual Basic) if the entire <paramref name="mergeTable"/> should be processed.</param>
            <param name="keepProducedJobs">Indicates whether MailBee should create separate <see cref="T:MailBee.SmtpMail.SendMailJob"/> object
            for every e-mail message produced during mail merge. If <b>true</b>, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> and <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections
            will end up with the same number of jobs as the number of e-mail messages generated; otherwise, only <see cref="T:MailBee.SmtpMail.SendMailJob"/> object
            originally added by this method will end up in <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> or <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections.
            </param>
            <param name="keepMergedData">Indicates whether MailBee should retain merged messages after they have been processed.
            If <b>true</b>, MailBee will not clear <b>MergedXXX</b> properties of <see cref="T:MailBee.SmtpMail.SendMailJob"/> object after the e-mail
            message associated with this object has been processed; otherwise, MailBee will clear memory occupied by the merged message so that
            <b>MergedXXX</b> properties start returning null once the message has been processed.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="mergeTable"/> is a null reference
            (<b>Nothing</b> in Visual Basic) or <paramref name="mergeRowIndices"/> is invalid value (for instance, neither string nor array of integers).</exception>
            <remarks>
            <para>This method allows the application to schedule mail merge over database for subsequent processing with
            <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>, <see cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/>, or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method.</para>
            <note>To perform mail merge immediately rather than schedule it, use <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method.</note>
            <para>The mail merge requirements:
            <list type="bullet">
            <item><description>The template of e-mail to be merged with <paramref name="mergeTable"/> data
            must be specified in <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property. Normally, <see cref="P:MailBee.SmtpMail.Smtp.Message"/>
            property specifies the e-mail message to be sent out by <see cref="T:MailBee.SmtpMail.Smtp"/> object.
            In the case of mail merge, this e-mail message is considered as a template where
            <i>##Column_Name##</i> patterns will be replaced with the actual data from database
            table rows during the mail merge process.</description></item>
            <item><description><see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">Smtp.DeliveryNotification.TrackingID</see>
            may also contain a pattern if desired. Thus, it's possible to automatically assign unique tracking ID
            to the each message sent during mail merge and then receive this ID with bounced messages.</description></item>
            <item><description><paramref name="mergeTable"/> must be the data source containing all the data rows for which e-mails should be generated and sent; typically, this
            data source is a result of SQL query.</description></item>
            <item><description>Names of columns of <paramref name="mergeTable"/> must match pattern names
            in the e-mail template. For instance, if there is <c>Email</c> column in the data table and
            the developer wishes to make values from this column appear in resulting e-mails,
            then the e-mail template must contain <i>##Email##</i> string in the places where the e-mail
            address needs to be placed. Patterns are case-sensitive! For instance, if data table column name is <c>Email</c>,
            only <i>##Email##</i> pattern will be replaced with the column value. <i>##email##</i> and <i>##EMAIL##</i> patterns
            will be left intact.</description></item>
            <item><description><paramref name="senderEmailPattern"/> can be left null. However,
            if resulting e-mails should actually be sent from another e-mail address (for instance,
            resulting e-mails have <i>newsletter@domain.com</i> in "From:" field while
            you wish to send them from <i>"bounces@domain.com"</i>), then it's required
            to specify <paramref name="senderEmailPattern"/>. It can contain a pattern
            (e.g. <c>##Something##</c>) or refer to the actual value (e.g. <c>from@company.com</c>).</description></item>
            <item><description><paramref name="recipientsPattern"/> have the same meaning
            for specifying the actual recipients as <paramref name="senderEmailPattern"/> -
            for the actual sender. For instance, to set the pattern which will take the
            1st recipient's e-mail address from <c>Email</c> field of the data table while
            the 2nd recipient's email address is hard-coded, pass the following as
            <paramref name="recipientsPattern"/> value:
            <c>new EmailAddressCollection("##Email##, archive-copy@company.com")</c>.</description></item>
            <item><description>Setting <paramref name="tag"/> to non-empty value helps to distinguish the current mail merge
            from other jobs if there are any. This is useful if the application submits and processes multiple jobs and
            the developer wants to track processing of each job separately. Jobs tags also appear in the log if logging is enabled.</description></item>
            </list>
            </para>
            <para><paramref name="mergeRowIndices"/> parameter can be used to specify which rows of
            <paramref name="mergeTable"/> should be processed. For instance, consider the following scenario:
            the application initially performed the mail merge with not 100% positive results
            (some e-mails failed to be sent), and it's desired to run it again to try to re-send
            initially failed e-mails. This can be done with <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method but this
            requires calling <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> in the same application instance that was used
            to run the initial mail merge. If the initial instance of the application shuts down after
            performing mail merge, the application should save failed data row indices in a persistent storage
            (database, file, etc) on exit, and then load these data row indices back when another instance
            of the application starts. See the example below for details.</para>
            <para><paramref name="keepProducedJobs"/> parameter controls what to do with <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            objects created during mail merge process. When a mail merge job is submitted to <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            collection, this job represents the entire mail merge task. Once processing of this job starts,
            MailBee "bites" a single data row index from this job and creates new <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            object for the e-mail template and this data row. The original mail merge job is moved into
            <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> (and then into <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> or <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>)
            only when a single data row remains in it. Thus, MailBee splits large mail merge job into
            many smaller jobs (each processes a single data row) during processing. This allows the developer
            to easily monitor the status of each e-mail produced by mail merge process and otherwise manage
            mail merge processing on per e-mail level. However, if the application does not need this,
            it may set <paramref name="keepProducedJobs"/> to <b>false</b> to automatically remove
            <see cref="T:MailBee.SmtpMail.SendMailJob"/> objects created during processing mail merge when they are no longer needed.
            This way, only the original <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> object will be put in <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> or
            <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections once the mail merge has been finished. This object will refer to
            the last data row and the last e-mail message generated during mail merge process.</para>
            <para><paramref name="keepMergedData"/> parameter can be set to <b>true</b> to tell MailBee not to clear
            memory occupied by e-mails generated during mail merge. However, this may cause out-of-memory
            issues if the size of each generated e-mail message or their number was large.</para>
            <para>Still, if's safe to set <paramref name="keepMergedData"/> to <b>true</b> if <paramref name="keepProducedJobs"/> is <b>false</b>.
            In this case, only a single <see cref="T:MailBee.SmtpMail.SendMailJob"/> object will be added to <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>
            or <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections so that only a single merged e-mail message will reside in memory.</para>
            <para>If, for some reason, you need to retain all the e-mails sent (or not sent) during mail merge, the best approach is
            to subscribe to <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> events and perform
            what you need in the event handlers. Even if <paramref name="keepMergedData"/> is <b>false</b>,
            MailBee won't clear memory occupied by generated e-mails until <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> and
            <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> have been raised.</para>
            <para>The above is true for <paramref name="keepProducedJobs"/> parameter as well. E-mails generated
            during mail merge won't be discarded until MailBee has raised <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/>
            (or any other events which occur before <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> or <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/>).</para>
            <para>If the application hasn't subscribed to any of these events (and <paramref name="keepProducedJobs"/>
            or <paramref name="keepMergedData"/> is <b>false</b>), MailBee will dispose objects which are no longer
            necessary when appropriate.</para>
            </remarks>
            <example>
            <para>This console sample performs mail merge in two runs. On the second run, all the data rows which failed to be sent
            out as e-mail messages on the first run are tried again. The application may complete in a single run if all the data rows
            have been successfully sent as e-mails within the first run.</para>
            <para>This sample does NOT use <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method to put failed jobs back into the pending queue.
            Instead, it demonstrates the approach which would allow the application to terminate after the first run
            and then retry mail merge of failed data rows later in a separate run of the application.
            In this sample both runs actually occur within a single application instance but
            the application structure is ready for making every run occur within separate instances.
            The sample shows how to get the list of failed data rows into a string
            and then load it from a string. In a real application, this string will be saved in a file or database
            before the application terminates first time, and then loaded back from this file or database
            when the application starts again next time.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Reports successful attempt of sending e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageSent(<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the successful e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " of '" + e.Tag + "' job SUCCEEDED");
            	}
            
            	<span style="color: green;">// Reports failed attempt of sending e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageNotSent(<span style="color: blue;">object</span> sender, SmtpMessageNotSentEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the failed e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " of '" + e.Tag + "' job FAILED");
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Subscribe to events to track send bulk mail progress.</span>
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(mailer_MessageSent);
            		mailer.MessageNotSent += <span style="color: blue;">new</span> SmtpMessageNotSentEventHandler(mailer_MessageNotSent);
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;";
            		mailer.Message.Subject = "Our Jan/2007 newsletter";
            
            		<span style="color: green;">// Setup DSN template for mail merge. In particular, this can be useful</span>
            		<span style="color: green;">// to track bounced messages which may come back from some addresses after</span>
            		<span style="color: green;">// sending bulk mail out. If the SMTP server does not support DSN, this</span>
            		<span style="color: green;">// setting will be ignored.</span>
            		mailer.DeliveryNotification.TrackingID = "Jan2007_##ID##";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Setup template for adding file attachments upon the specified path.</span>
            		<span style="color: green;">// In this sample, the path to attachment files will be constructed as</span>
            		<span style="color: green;">// "C:\" + DatabaseRecordField("Doc_path").</span>
            		mailer.Message.Merge.AddAttachmentPattern(@"C:\##Doc_path##");
            
            		<span style="color: green;">// Make outgoing e-mails UTF-8 to allow content in any language.</span>
            		mailer.Message.Charset = "UTF-8";
            
            		<span style="color: green;">// Tell MailBee to generate alternative plain-text version</span>
            		<span style="color: green;">// of each e-mail automatically.</span>
            		mailer.Message.Builder.HtmlToPlainMode = HtmlToPlainAutoConvert.IfHtml;
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		<span style="color: green;">// Indices of the data rows which failed during the first run.</span>
            		<span style="color: green;">// If null, all indices will be processed.</span>
            		<span style="color: blue;">string</span> failedIndices = <span style="color: blue;">null</span>;
            
            		DataTable table = <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// Make two runs of mail merge. If e-mails created from some data rows fail,</span>
            		<span style="color: green;">// we'll attempt to resend them on the second run.</span>
            		<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 2; i++)
            		{
            			<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            			<span style="color: green;">// the data from "mailing_list" table.</span>
            			<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            			{
            				<span style="color: green;">// Open the connection and get the data.</span>
            				OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            				conn.Open();
            				OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            				table = <span style="color: blue;">new</span> DataTable();
            				adapter.SelectCommand = command;
            				adapter.Fill(table);
            
            				<span style="color: green;">// Create a job which is the following task for MailBee: perform mail merge over</span>
            				<span style="color: green;">// the specified data table and send out each resulting e-mail to</span>
            				<span style="color: green;">// the recipients which appear in the resulting messages. "bounce@domain.com"</span>
            				<span style="color: green;">// address will be used as Return-Path (i.e. sender e-mail address).</span>
            				mailer.AddJob("My", "bounce@domain.com", <span style="color: blue;">null</span>, table, failedIndices, <span style="color: blue;">true</span>, <span style="color: blue;">false</span>);
            			}
            
            			<span style="color: green;">// Run the job. The actual mail merge takes place here.</span>
            			mailer.SendJobs();
            			Console.WriteLine();
            
            			<span style="color: green;">// Report results (row indices in the data table) to the console.</span>
            			<span style="color: blue;">if</span> (mailer.JobsFailed.Count == 0)
            			{
            				Console.WriteLine("All of the rows of the table have been processed and sent as e-mails.");
            				<span style="color: blue;">break</span>;
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: blue;">if</span> (mailer.JobsSuccessful.Count == 0)
            				{
            					Console.WriteLine("None of the rows of the table has been processed and sent as e-mail.");
            				}
            				<span style="color: blue;">else</span>
            				{
            					Console.WriteLine("Not all rows of the table have been processed and sent as e-mails.");
            					Console.WriteLine();
            
            					Console.WriteLine("Successful rows: ");
            					Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, "My"));
            					Console.WriteLine();
            
            					Console.WriteLine("Failed rows: ");
            					Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, "My"));
            				}
            				Console.WriteLine();
            
            				<span style="color: green;">// Remember failed data rows and clean-up the collections of the results.</span>
            				<span style="color: green;">// Actually, we could simply call mailer.RetryFailedJobs instead. We're using</span>
            				<span style="color: green;">// 'failedIndices = mailer.JobsFailed.GetIndicesAsString' to demonstrate</span>
            				<span style="color: green;">// how this could be done if the application terminates after the first run and</span>
            				<span style="color: green;">// then starts again for the second run (which retries processing the failed</span>
            				<span style="color: green;">// data rows). In this case, we need to somehow pass the list of failed data rows</span>
            				<span style="color: green;">// between two instances of the application. To accomplish this, failedIndices can</span>
            				<span style="color: green;">// be written into a file in the end of the first run of the app and then read from</span>
            				<span style="color: green;">// the file in the beginning of the second run.</span>
            				failedIndices = mailer.JobsFailed.GetIndicesAsString(table, "My");
            				mailer.JobsSuccessful.Clear();
            				mailer.JobsFailed.Clear();
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Reports successful attempt of sending e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		<span style="color: green;">' Display e-mail address of the successful e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " of '" &amp; e.Tag &amp; "' job SUCCEEDED")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Reports failed attempt of sending e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageNotSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageNotSentEventArgs)
            		<span style="color: green;">' Display e-mail address of the failed e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " of '" &amp; e.Tag &amp; "' job FAILED")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Subscribe to events to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> mailer_MessageSent
            		<span style="color: blue;">AddHandler</span> mailer.MessageNotSent, <span style="color: blue;">AddressOf</span> mailer_MessageNotSent
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;"
            		mailer.Message.Subject = "Our Jan/2007 newsletter"
            
            		<span style="color: green;">' Setup DSN template for mail merge. In particular, this can be useful</span>
            		<span style="color: green;">' to track bounced messages which may come back from some addresses after</span>
            		<span style="color: green;">' sending bulk mail out. If the SMTP server does not support DSN, this</span>
            		<span style="color: green;">' setting will be ignored.</span>
            		mailer.DeliveryNotification.TrackingID = "Jan2007_##ID##"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Setup template for adding file attachments upon the specified path.</span>
            		<span style="color: green;">' In this sample, the path to attachment files will be constructed as</span>
            		<span style="color: green;">' "C:\" + DatabaseRecordField("Doc_path").</span>
            		mailer.Message.Merge.AddAttachmentPattern("C:\##Doc_path##")
            
            		<span style="color: green;">' Make outgoing e-mails UTF-8 to allow content in any language.</span>
            		mailer.Message.Charset = "UTF-8"
            
            		<span style="color: green;">' Tell MailBee to generate alternative plain-text version</span>
            		<span style="color: green;">' of each e-mail automatically.</span>
            		mailer.Message.Builder.HtmlToPlainMode = HtmlToPlainAutoConvert.IfHtml
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: green;">' Indices of the data rows which failed during the first run.</span>
            		<span style="color: green;">' If null, all indices will be processed.</span>
            		<span style="color: blue;">Dim</span> failedIndices <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">Nothing</span>
            
            		<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">Nothing</span>
            
            		<span style="color: green;">' Make two runs of mail merge. If e-mails created from some data rows fail,</span>
            		<span style="color: green;">' we'll attempt to resend them on the second run.</span>
            		<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            		<span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> 1
            			<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            			<span style="color: green;">' the data from "mailing_list" table.</span>
            			<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            			<span style="color: blue;">Try</span>
            				conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            
            				<span style="color: green;">' Open the connection and get the data.</span>
            				<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            				conn.Open()
            				<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            				table = <span style="color: blue;">New</span> DataTable
            				adapter.SelectCommand = command
            				adapter.Fill(table)
            
            				<span style="color: green;">' Create a job which is the following task for MailBee: perform mail merge over</span>
            				<span style="color: green;">' the specified data table and send out each resulting e-mail to</span>
            				<span style="color: green;">' the recipients which appear in the resulting messages. "bounce@domain.com"</span>
            				<span style="color: green;">' address will be used as Return-Path (i.e. sender e-mail address).</span>
            				mailer.AddJob("My", "bounce@domain.com", <span style="color: blue;">Nothing</span>, table, failedIndices, <span style="color: blue;">True</span>, <span style="color: blue;">False</span>)
            			<span style="color: blue;">Finally</span>
            				<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            					conn.Close()
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            			<span style="color: green;">' Run the job. The actual mail merge takes place here.</span>
            			mailer.SendJobs()
            			Console.WriteLine()
            
            			<span style="color: green;">' Report results (row indices in the data table) to the console.</span>
            			<span style="color: blue;">If</span> mailer.JobsFailed.Count = 0 <span style="color: blue;">Then</span>
            				Console.WriteLine("All of the rows of the table have been processed and sent as e-mails.")
            				<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            			<span style="color: blue;">Else</span>
            				<span style="color: blue;">If</span> mailer.JobsSuccessful.Count = 0 <span style="color: blue;">Then</span>
            					Console.WriteLine("None of the rows of the table has been processed and sent as e-mail.")
            				<span style="color: blue;">Else</span>
            					Console.WriteLine("Not all rows of the table have been processed and sent as e-mails.")
            					Console.WriteLine()
            
            					Console.WriteLine("Successful rows: ")
            					Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, "My"))
            					Console.WriteLine()
            
            					Console.WriteLine("Failed rows: ")
            					Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, "My"))
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				Console.WriteLine()
            
            				<span style="color: green;">' Remember failed data rows and clean-up the collections of the results.</span>
            				<span style="color: green;">' Actually, we could simply call mailer.RetryFailedJobs instead. We're using</span>
            				<span style="color: green;">' 'failedIndices = mailer.JobsFailed.GetIndicesAsString' to demonstrate</span>
            				<span style="color: green;">' how this could be done if the application terminates after the first run and</span>
            				<span style="color: green;">' then starts again for the second run (which retries processing the failed</span>
            				<span style="color: green;">' data rows). In this case, we need to somehow pass the list of failed data rows</span>
            				<span style="color: green;">' between two instances of the application. To accomplish this, failedIndices can</span>
            				<span style="color: green;">' be written into a file in the end of the first run of the app and then read from</span>
            				<span style="color: green;">' the file in the beginning of the second run.</span>
            				failedIndices = mailer.JobsFailed.GetIndicesAsString(table, "My")
            				mailer.JobsSuccessful.Clear()
            				mailer.JobsFailed.Clear()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.RetryFailedJobs">
            <summary>
            Puts all failed send-mail jobs back into the queue.
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>
            </summary>
            <remarks>
            <para>This method can be used to retry processing of all failed jobs. For instance, there had been some kind
            of network failure during processing jobs and certain e-mails failed to be sent. Then, however, the network problem was fixed.
            In this case, the developer can issue <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> to put failed jobs back into the pending queue.
            Then, any method which processes jobs (such as <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>) can be called to resume processing.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method takes all the jobs from <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collection and puts
            them back to <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>.</para>
            <note>This method is thread-safe. The developer may safely call it even if some jobs are already being
            actively processed in the current moment. This may be useful in the case if it's needed to retry failed
            jobs not waiting for completion of processing the remaining jobs. For instance, if <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method
            was still running when <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> was called, it will then process the newly added failed jobs as well as
            the remaining pending jobs.
            <para>If you want to move only specific jobs (not all failed jobs) from <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> into <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>,
            use methods of <see cref="T:MailBee.SmtpMail.SendMailJobCollection"/> class (all job collections, including <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> and <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>,
            are <see cref="T:MailBee.SmtpMail.SendMailJobCollection"/> instances).</para>
            </note>
            </remarks>
            <example>This console sample performs mail merge in two runs. On the second run, all the data rows which failed to be sent
            out as e-mail messages on the first run are tried again. The application may complete in a single run if all the data rows
            have been successfully sent as e-mails within the first run.
            <note>In the case if the application terminates after the first run and wishes to retry mail merge of
            failed data rows later in a separate run of the application, it needs to somehow save
            the list of data rows which failed on the first run (e.g. save this list in a file or database) and then pass this list to the second instance of the
            application (which is executed later). See <see cref="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)"/> topic for details.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Reports successful attempt of sending e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageSent(<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the successful e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " SUCCEEDED");
            	}
            
            	<span style="color: green;">// Reports failed attempt of sending e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageNotSent(<span style="color: blue;">object</span> sender, SmtpMessageNotSentEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the failed e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " FAILED");
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Subscribe to events to track send bulk mail progress.</span>
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(mailer_MessageSent);
            		mailer.MessageNotSent += <span style="color: blue;">new</span> SmtpMessageNotSentEventHandler(mailer_MessageNotSent);
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Email##";
            		mailer.Message.Subject = "Our Jan/2007 newsletter";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		<span style="color: green;">// Make two runs of mail merge. If e-mails created from some data rows fail,</span>
            		<span style="color: green;">// we'll attempt to resend them on the second run.</span>
            		<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 2; i++)
            		{
            			<span style="color: green;">// Initial run.</span>
            			<span style="color: blue;">if</span> (i == 0)
            			{
            				<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            				<span style="color: green;">// the data from "mailing_list" table.</span>
            				<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            				{
            					<span style="color: green;">// Open the connection and get the data.</span>
            					OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            					conn.Open();
            					OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            					DataTable table = <span style="color: blue;">new</span> DataTable();
            					adapter.SelectCommand = command;
            					adapter.Fill(table);
            
            					<span style="color: green;">// Create a job which is the following task for MailBee: perform mail merge over</span>
            					<span style="color: green;">// the specified data table and then send out each resulting e-mail to</span>
            					<span style="color: green;">// the recipients which appear in the resulting messages. "bounce@domain.com"</span>
            					<span style="color: green;">// address will be used as Return-Path (i.e. sender e-mail address).</span>
            					mailer.AddJob(<span style="color: blue;">null</span>, "bounce@domain.com", <span style="color: blue;">null</span>, table);
            				}
            			}
            
            			<span style="color: green;">// Run the job. The actual mail merge takes place here.</span>
            			mailer.SendJobs();
            			Console.WriteLine();
            
            			<span style="color: green;">// Report results (row indices in the data table) to the console.</span>
            			<span style="color: blue;">if</span> (mailer.JobsFailed.Count == 0)
            			{
            				Console.WriteLine("All of the rows of the table have been processed and sent as e-mails.");
            				<span style="color: blue;">break</span>;
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: blue;">if</span> (mailer.JobsSuccessful.Count == 0)
            				{
            					Console.WriteLine("None of the rows of the table has been processed and sent as e-mail.");
            				}
            				<span style="color: blue;">else</span>
            				{
            					Console.WriteLine("Not all rows of the table have been processed and sent as e-mails.");
            					Console.WriteLine();
            
            					Console.WriteLine("Successful rows: ");
            					Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>));
            					Console.WriteLine();
            
            					Console.WriteLine("Failed rows: ");
            					Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>));
            				}
            				Console.WriteLine();
            
            				<span style="color: green;">// Put failed data rows from mailer.JobsFailed back into the pending queue (mailer.JobsPending).</span>
            				mailer.RetryFailedJobs();
            
            				<span style="color: green;">// Clear the list of successful rows because we already displayed all successful</span>
            				<span style="color: green;">// results of the first run. Next time, we want to display only those successful</span>
            				<span style="color: green;">// results which had been achieved on the second run only.</span>
            				mailer.JobsSuccessful.Clear();
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Reports successful attempt of sending e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		<span style="color: green;">' Display e-mail address of the successful e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " SUCCEEDED")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Reports failed attempt of sending e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageNotSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageNotSentEventArgs)
            		<span style="color: green;">' Display e-mail address of the failed e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " FAILED")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Subscribe to events to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> mailer_MessageSent
            		<span style="color: blue;">AddHandler</span> mailer.MessageNotSent, <span style="color: blue;">AddressOf</span> mailer_MessageNotSent
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Email##"
            		mailer.Message.Subject = "Our Jan/2007 newsletter"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: green;">' Make two runs of mail merge. If e-mails created from some data rows fail,</span>
            		<span style="color: green;">' we'll attempt to resend them on the second run.</span>
            		<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            		<span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> 1
            			<span style="color: green;">' Initial run.</span>
            			<span style="color: blue;">If</span> i = 0 <span style="color: blue;">Then</span>
            				<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            				<span style="color: green;">' the data from "mailing_list" table.</span>
            				<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            				<span style="color: blue;">Try</span>
            					conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            
            					<span style="color: green;">' Open the connection and get the data.</span>
            					<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            					conn.Open()
            					<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            					<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            					adapter.SelectCommand = command
            					adapter.Fill(table)
            
            					<span style="color: green;">' Create a job which is the following task for MailBee: perform mail merge over</span>
            					<span style="color: green;">' the specified data table and then send out each resulting e-mail to</span>
            					<span style="color: green;">' the recipients which appear in the resulting messages. "bounce@domain.com"</span>
            					<span style="color: green;">' address will be used as Return-Path (i.e. sender e-mail address).</span>
            					mailer.AddJob(<span style="color: blue;">Nothing</span>, "bounce@domain.com", <span style="color: blue;">Nothing</span>, table)
            				<span style="color: blue;">Finally</span>
            					<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            						conn.Close()
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            			<span style="color: green;">' Run the job. The actual mail merge takes place here.</span>
            			mailer.SendJobs()
            			Console.WriteLine()
            
            			<span style="color: green;">' Report results (row indices in the data table) to the console.</span>
            			<span style="color: blue;">If</span> mailer.JobsFailed.Count = 0 <span style="color: blue;">Then</span>
            				Console.WriteLine("All of the rows of the table have been processed and sent as e-mails.")
            				<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            			<span style="color: blue;">Else</span>
            				<span style="color: blue;">If</span> mailer.JobsSuccessful.Count = 0 <span style="color: blue;">Then</span>
            					Console.WriteLine("None of the rows of the table has been processed and sent as e-mail.")
            				<span style="color: blue;">Else</span>
            					Console.WriteLine("Not all rows of the table have been processed and sent as e-mails.")
            					Console.WriteLine()
            
            					Console.WriteLine("Successful rows: ")
            					Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>))
            					Console.WriteLine()
            
            					Console.WriteLine("Failed rows: ")
            					Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>))
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				Console.WriteLine()
            
            				<span style="color: green;">' Put failed data rows from mailer.JobsFailed back into the pending queue (mailer.JobsPending).</span>
            				mailer.RetryFailedJobs()
            
            				<span style="color: green;">' Clear the list of successful rows because we already displayed all successful</span>
            				<span style="color: green;">' results of the first run. Next time, we want to display only those successful</span>
            				<span style="color: green;">' results which had been achieved on the second run only.</span>
            				mailer.JobsSuccessful.Clear()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.SendJobs">
            <summary>
            Sends out all e-mails in the pending jobs queue (including e-mails generated via mail merge).
            <seealso cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>
            </summary>
            <returns><b>true</b> the entire queue of the pending jobs had been processed; <b>false</b> if the operation was stopped due to an error.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method takes <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> collection as an input and processes all the jobs in it.
            For jobs consisting of sending a single e-mail message, this e-mail gets sent. For mail merge jobs,
            mail merge is performed so that the original mail merge job is split into smaller jobs (for mail merge of N data rows, N jobs generated)
            and the resulting e-mail messages are sent.</para>
            <para>To place mail merge job into the queue, use <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> overload.
            To queue sending of a single e-mail message, use <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/> overload.</para>
            <para>While <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method is running, it takes the jobs one by one from <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> collection into <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/>.
            Once certain job completes successfully, it's moved into <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>. If, however, it failed, it's moved into <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>.
            For more information on how jobs are processed, see <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> overload and <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            method topics.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method can be used to put failed jobs back into the pending queue. This can be used to try to re-send failed messages again.</para>
            <para>By default, jobs are processed in a single-thread mode. The developer may
            achieve better performance enabling multi-thread mode (see <see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> property for details).</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> must be set BEFORE <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> gets called.</para>
            <para>If large amount of e-mails is sent to an SMTP relay server, it might be efficient to tune some properties of
            <see cref="T:MailBee.SmtpMail.SmtpServer"/> object representing this server in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection. For instance, tuning <see cref="P:MailBee.SmtpMail.SmtpServer.MaxConnectionCount"/>,
            <see cref="P:MailBee.SmtpMail.SmtpServer.MaxSendPerSessionCount"/>, and <see cref="P:MailBee.SmtpMail.SmtpServer.PauseInterval"/> property values can improve sending performance or overcome issues
            caused by various restictions implied by the SMTP server (such as limitation of maximum number of e-mails per second from a single IP address).</para>
            <para>If you need to submit e-mails directly to the pickup folder for subsequent delivery with MailBee Message Queue or IIS SMTP service,
            use <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method instead.</para>
            <note><see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> will never stop on failures and always succeed if <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> is <b>false</b>.</note>
            </remarks>
            <example>This sample processes 2 jobs ("mail merge" job and "single e-mail" job) and reports the results to the console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Reports successful attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageSent(<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		<span style="color: green;">// Ignore notification e-mail (it's not mail merge).</span>
            		<span style="color: blue;">if</span> (e.MergeTable != <span style="color: blue;">null</span>)
            		{
            			<span style="color: green;">// Display e-mail address of the successful e-mail.</span>
            			Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " SUCCEEDED");
            		}
            	}
            
            	<span style="color: green;">// Reports failed attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageNotSent(<span style="color: blue;">object</span> sender, SmtpMessageNotSentEventArgs e)
            	{
            		<span style="color: green;">// Ignore notification e-mail (it's not mail merge).</span>
            		<span style="color: blue;">if</span> (e.MergeTable != <span style="color: blue;">null</span>)
            		{
            			<span style="color: green;">// Display e-mail address of the failed e-mail.</span>
            			Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " FAILED");
            		}
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Subscribe to events to track send bulk mail progress.</span>
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(mailer_MessageSent);
            		mailer.MessageNotSent += <span style="color: blue;">new</span> SmtpMessageNotSentEventHandler(mailer_MessageNotSent);
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Email##";
            		mailer.Message.Subject = "Our Jan/2007 newsletter";
            
            		<span style="color: green;">// Setup plain-text body template.</span>
            		mailer.Message.BodyPlainText = "##Body##";
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">// the data from "mailing_list" table.</span>
            		<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            		{
            			<span style="color: green;">// Open the connection and get the data.</span>
            			OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            			conn.Open();
            			OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            			DataTable table = <span style="color: blue;">new</span> DataTable();
            			adapter.SelectCommand = command;
            			adapter.Fill(table);
            
            			<span style="color: green;">// Create a job which is the following task for MailBee: perform mail merge over</span>
            			<span style="color: green;">// the specified data table and then send out each resulting e-mail to</span>
            			<span style="color: green;">// the recipients which appear in the resulting messages. "bounce@domain.com"</span>
            			<span style="color: green;">// address will be used as Return-Path (i.e. sender e-mail address).</span>
            			mailer.AddJob("1", "bounce@domain.com", <span style="color: blue;">null</span>, table);
            		}
            
            		<span style="color: green;">// Create a job which is a task of sending a notification e-mail to the originator</span>
            		<span style="color: green;">// of the newsletter regarding completion of bulk mailing.</span>
            		mailer.Message.To.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.Subject = "Status: Our Jan/2007 newsletter";
            		mailer.Message.BodyPlainText = "Newsletter sent out";
            		mailer.AddJob("2", <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Run both jobs. The actual mail merge (job #1) and</span>
            		<span style="color: green;">// sending a single e-mail (job #2) takes place here.</span>
            		mailer.SendJobs();
            		Console.WriteLine();
            
            		<span style="color: green;">// Report results to the console.</span>
            		<span style="color: blue;">if</span> (mailer.JobsFailed.Count == 0)
            		{
            			Console.WriteLine("All e-mails have been sent.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: blue;">if</span> (mailer.JobsSuccessful.Count == 0)
            			{
            				Console.WriteLine("No e-mails have been sent.");
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("Some e-mails have not been sent.");
            				Console.WriteLine();
            
            				<span style="color: green;">// Report mail merge results (job #1).</span>
            				Console.WriteLine("Successful mail merge data rows: ");
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(<span style="color: blue;">null</span>, "1"));
            				Console.WriteLine();
            				Console.WriteLine("Failed mail merge data rows: ");
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(<span style="color: blue;">null</span>, "1"));
            				Console.WriteLine();
            
            				<span style="color: green;">// Report notification e-mail results (job #2).</span>
            				<span style="color: blue;">if</span> (mailer.JobsFailed.GetIndicesAsString(<span style="color: blue;">null</span>, "2") == <span style="color: blue;">string</span>.Empty)
            				{
            					Console.WriteLine("Notification e-mail has been sent.");
            				}
            				<span style="color: blue;">else</span>
            				{
            					Console.WriteLine("Notification e-mail has not been sent.");
            				}
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Reports successful attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		<span style="color: green;">' Ignore notification e-mail (it's not mail merge).</span>
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> e.MergeTable <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			<span style="color: green;">' Display e-mail address of the successful e-mail.</span>
            			Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " SUCCEEDED")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Reports failed attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageNotSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageNotSentEventArgs)
            		<span style="color: green;">' Ignore notification e-mail (it's not mail merge).</span>
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> e.MergeTable <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			<span style="color: green;">' Display e-mail address of the failed e-mail.</span>
            			Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " FAILED")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Subscribe to events to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> mailer_MessageSent
            		<span style="color: blue;">AddHandler</span> mailer.MessageNotSent, <span style="color: blue;">AddressOf</span> mailer_MessageNotSent
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Email##"
            		mailer.Message.Subject = "Our Jan/2007 newsletter"
            
            		<span style="color: green;">' Setup plain-text body template.</span>
            		mailer.Message.BodyPlainText = "##Body##"
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">' the data from "mailing_list" table.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            		<span style="color: blue;">Try</span>
            			conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            
            			<span style="color: green;">' Open the connection and get the data.</span>
            			<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            			conn.Open()
            			<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            			<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            			adapter.SelectCommand = command
            			adapter.Fill(table)
            
            			<span style="color: green;">' Create a job which is the following task for MailBee: perform mail merge over</span>
            			<span style="color: green;">' the specified data table and then send out each resulting e-mail to</span>
            			<span style="color: green;">' the recipients which appear in the resulting messages. "bounce@domain.com"</span>
            			<span style="color: green;">' address will be used as Return-Path (i.e. sender e-mail address).</span>
            			mailer.AddJob("1", "bounce@domain.com", <span style="color: blue;">Nothing</span>, table)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				conn.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Create a job which is a task of sending a notification e-mail to the originator</span>
            		<span style="color: green;">' of the newsletter regarding completion of bulk mailing.</span>
            		mailer.Message.To.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.Subject = "Status: Our Jan/2007 newsletter"
            		mailer.Message.BodyPlainText = "Newsletter sent out"
            		mailer.AddJob("2", <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Run both jobs. The actual mail merge (job #1) and</span>
            		<span style="color: green;">' sending a single e-mail (job #2) takes place here.</span>
            		mailer.SendJobs()
            		Console.WriteLine()
            
            		<span style="color: green;">' Report results to the console.</span>
            		<span style="color: blue;">If</span> mailer.JobsFailed.Count = 0 <span style="color: blue;">Then</span>
            			Console.WriteLine("All e-mails have been sent.")
            		<span style="color: blue;">Else</span>
            			<span style="color: blue;">If</span> mailer.JobsSuccessful.Count = 0 <span style="color: blue;">Then</span>
            				Console.WriteLine("No e-mails have been sent.")
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("Some e-mails have not been sent.")
            				Console.WriteLine()
            
            				<span style="color: green;">' Report mail merge results (job #1).</span>
            				Console.WriteLine("Successful mail merge data rows: ")
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(<span style="color: blue;">Nothing</span>, "1"))
            				Console.WriteLine()
            				Console.WriteLine("Failed mail merge data rows: ")
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(<span style="color: blue;">Nothing</span>, "1"))
            				Console.WriteLine()
            
            				<span style="color: green;">' Report notification e-mail results (job #2).</span>
            				<span style="color: blue;">If</span> mailer.JobsFailed.GetIndicesAsString(<span style="color: blue;">Nothing</span>, "2") = <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            					Console.WriteLine("Notification e-mail has been sent.")
            				<span style="color: blue;">Else</span>
            					Console.WriteLine("Notification e-mail has not been sent.")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to process the pending jobs and send out the resulting e-mails.
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references asynchronous sending e-mails accordingly the assigned pending jobs.</returns>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method.
            </remarks>
            <example>
            This console sample performs mail merge asynchronously. The sample gets notified of mail merge completion by using a callback function.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> System.Threading;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">bool</span> finished = <span style="color: blue;">false</span>;
            
            	<span style="color: green;">// SendJobs callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> SendJobsCallback(IAsyncResult result)
            	{
            		Smtp mailer = (Smtp)result.AsyncState;
            
            		mailer.EndSendJobs();
            
            		<span style="color: green;">// Report results (row indices in the data table) to the console.</span>
            		<span style="color: blue;">if</span> (mailer.JobsFailed.Count == 0)
            		{
            			Console.WriteLine("Newsletter has been sent out without any errors.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: blue;">if</span> (mailer.JobsSuccessful.Count == 0)
            			{
            				Console.WriteLine("All newsletter e-mails failed to be sent.");
            			}
            			<span style="color: blue;">else</span> <span style="color: blue;">if</span> (mailer.JobsFailed.Count &gt; 0)
            			{
            				Console.WriteLine("Not all newsletter e-mails have been sent.");
            				Console.WriteLine();
            
            				<span style="color: green;">// Obtain a reference to the DataTable used for mail merge.</span>
            				DataTable table = mailer.JobsFailed[0].MergeTable;
            
            				Console.WriteLine("Successful rows: ");
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, <span style="color: blue;">null</span>));
            				Console.WriteLine();
            
            				Console.WriteLine("Failed rows: ");
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, <span style="color: blue;">null</span>));
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("There was nothing to send.");
            			}
            		}
            
            		Console.WriteLine();
            
            		finished = <span style="color: blue;">true</span>;
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;";
            		mailer.Message.Subject = "Our newsletter";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">// the data from "mailing_list" table.</span>
            		<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            		{
            			<span style="color: green;">// Open the connection and get the data.</span>
            			OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            			conn.Open();
            			DataTable table = <span style="color: blue;">new</span> DataTable();
            			OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            			adapter.SelectCommand = command;
            			adapter.Fill(table);
            
            			<span style="color: green;">// Create a job which is the following task for MailBee: perform mail merge</span>
            			<span style="color: green;">// of a newsletter template with data rows of the specified data table and</span>
            			<span style="color: green;">// send out each resulting e-mail to its intended recipients.</span>
            			mailer.AddJob(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>, table);
            		}
            
            		<span style="color: green;">// Start processing jobs. The actual mail merge takes place here.</span>
            		mailer.BeginSendJobs(<span style="color: blue;">new</span> AsyncCallback(SendJobsCallback), mailer);
            
            		<span style="color: green;">// Can do anything else while the mail merge takes place in the background.</span>
            		<span style="color: blue;">while</span> (!finished)
            		{
            			Thread.Sleep(1000);
            		}
            
            		Console.WriteLine("Processing jobs done.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> System.Threading
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> finished <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            	<span style="color: green;">' SendJobs callback function.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> SendJobsCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">CType</span>(result.AsyncState, Smtp)
            
            		mailer.EndSendJobs()
            
            		<span style="color: green;">' Report results (row indices in the data table) to the console.</span>
            		<span style="color: blue;">If</span> mailer.JobsFailed.Count = 0 <span style="color: blue;">Then</span>
            			Console.WriteLine("Newsletter has been sent out without any errors.")
            		<span style="color: blue;">Else</span>
            			<span style="color: blue;">If</span> mailer.JobsSuccessful.Count = 0 <span style="color: blue;">Then</span>
            				Console.WriteLine("All newsletter e-mails failed to be sent.")
            			<span style="color: blue;">ElseIf</span> mailer.JobsFailed.Count &gt; 0 <span style="color: blue;">Then</span>
            				Console.WriteLine("Not all newsletter e-mails have been sent.")
            				Console.WriteLine()
            
            				<span style="color: green;">' Obtain a reference to the DataTable used for mail merge.</span>
            				<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = mailer.JobsFailed(0).MergeTable
            
            				Console.WriteLine("Successful rows: ")
            				Console.WriteLine(mailer.JobsSuccessful.GetIndicesAsString(table, <span style="color: blue;">Nothing</span>))
            				Console.WriteLine()
            
            				Console.WriteLine("Failed rows: ")
            				Console.WriteLine(mailer.JobsFailed.GetIndicesAsString(table, <span style="color: blue;">Nothing</span>))
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("There was nothing to send.")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		Console.WriteLine()
            
            		finished = <span style="color: blue;">True</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;"
            		mailer.Message.Subject = "Our newsletter"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">' the data from "mailing_list" table.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            		<span style="color: blue;">Try</span>
            			conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            
            			<span style="color: green;">' Open the connection and get the data.</span>
            			<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            			conn.Open()
            			<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            			<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            			adapter.SelectCommand = command
            			adapter.Fill(table)
            
            			<span style="color: green;">' Create a job which is the following task for MailBee: perform mail merge</span>
            			<span style="color: green;">' of a newsletter template with data rows of the specified data table and</span>
            			<span style="color: green;">' send out each resulting e-mail to its intended recipients.</span>
            			mailer.AddJob(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, table)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				conn.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Start processing jobs. The actual mail merge takes place here.</span>
            		mailer.BeginSendJobs(<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> SendJobsCallback), mailer)
            
            		<span style="color: green;">' Can do anything else while the mail merge takes place in the background.</span>
            		<span style="color: blue;">While</span> <span style="color: blue;">Not</span> finished
            			Thread.Sleep(1000)
            		<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            		Console.WriteLine("Processing jobs done.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.EndSendJobs">
            <summary>
            Ends the pending asynchronous request for processing the pending jobs and
            sending out the resulting e-mails.
            <seealso cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.StopJobs">
            <summary>
            Notifies MailBee to stop processing jobs, completing sending out of all messages currently being processed.
            <seealso cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.Abort"/>
            </summary>
            <exception cref="T:MailBee.MailBeeInvalidStateException">The operation currently in progress is
            not processing jobs so it cannot be stopped with this method.</exception>
            <remarks>
            <para>This method can be used to suspend jobs processing, if desired. Once <see cref="M:MailBee.SmtpMail.Smtp.StopJobs"/> method
            is called and sending of all e-mail messages currently being processed is completed,
            the sending operation stops.</para>
            <para>This method can stop submitting e-mails to the pickup folder (initiated with <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method)
            as well as sending e-mails out.</para>
            <para>Because this method does not stop jobs processing immediately but simply tells MailBee to
            do not process new e-mails, it may take some time to complete processing e-mails currently being
            sent. Thus, the component will still be busy (<see cref="P:MailBee.SmtpMail.Smtp.IsBusy"/> is <b>true</b>) after this method
            completes. To stop processing jobs immediately, the developer should rather use <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method.</para>
            <para>To resume the stopped process, the developer should call the same method that was originally
            called to start the processing (for instance, <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method).</para>
            <para>If you want to make jobs processing stop automatically whenever an error occurs (i.e. any e-mail could not be sent),
            set <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> property to <b>true</b> before starting processing jobs.</para>
            <note>It’s not possible to use <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method to resume the stopped mail-merge process.
            To resume the mail-merge processing initiated with <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method, use <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method.</note>
            </remarks>
            <example>
            This console sample sends mail merge out, stopping the entire process if number of consecutive failures to send an e-mail
            exceeds 10. This allows the application to skip random errors of sending e-mails to specific e-mail addresses but stop
            processing in the case if the error becomes permanent. It's assumed that it's unusual to get 10 bad e-mail addresses one-by-one
            and such situation should be treated as possible failure of the mail server itself.
            <note>If the application is made multi-threaded (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is not 1), multiple threads
            will access <c>failureCount</c> variable simultaneously. Thus, to keep <c>failureCount</c> value accurate,
            the application must synchronize access to it. However, exact value of <c>failureCount</c> is not important in our case
            (even if synchronization issues made it evaluate to, let's say, 9 or 12 instead of 10) since we only need it to determine
            if it's big or not. It's no big difference if the application stopped after 9 or after 10 (or 12) consecutive failures.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Number of continuous failures (a series of failures occurring one-by-one).</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">int</span> failureCount	= 0;
            
            	<span style="color: green;">// If any e-mail succeeded, reset the counter.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageSent(<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		failureCount = 0;
            		Console.WriteLine("Message sent.");
            	}
            
            	<span style="color: green;">// Increment the counter.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageNotSent(<span style="color: blue;">object</span> sender, SmtpMessageNotSentEventArgs e)
            	{
            		failureCount++;
            		Console.WriteLine("Message not sent.");
            
            		<span style="color: blue;">if</span> (failureCount &gt; 10)
            		{
            			<span style="color: green;">// Tolerate no longer than 10 failures one-by-one.</span>
            			((Smtp)sender).StopJobs();
            			Console.WriteLine("Too many messages not sent.");
            		}
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Subscribe to events to track send bulk mail progress.</span>
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(mailer_MessageSent);
            		mailer.MessageNotSent += <span style="color: blue;">new</span> SmtpMessageNotSentEventHandler(mailer_MessageNotSent);
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;";
            		mailer.Message.Subject = "Our Jan/2007 newsletter";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		DataTable table = <span style="color: blue;">new</span> DataTable();
            
            		<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">// the data from "mailing_list" table.</span>
            		<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            		{
            			<span style="color: green;">// Open the connection and get the data.</span>
            			OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            			conn.Open();
            			OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            			adapter.SelectCommand = command;
            			adapter.Fill(table);
            		}
            
            		<span style="color: green;">// Run mail merge.</span>
            		mailer.SendMailMerge(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, table);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Number of continuous failures (a series of failures occurring one-by-one).</span>
            	<span style="color: blue;">Shared</span> failureCount <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            
            	<span style="color: green;">' If any e-mail succeeded, reset the counter.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		failureCount = 0
            		Console.WriteLine("Message sent.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Increment the counter.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageNotSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageNotSentEventArgs)
            		failureCount = failureCount + 1
            		Console.WriteLine("Message not sent.")
            
            		<span style="color: blue;">If</span> failureCount &gt; 10 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Tolerate no longer than 10 failures one-by-one.</span>
            			<span style="color: blue;">CType</span>(sender, Smtp).StopJobs()
            			Console.WriteLine("Too many messages not sent.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Subscribe to events to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> mailer_MessageSent
            		<span style="color: blue;">AddHandler</span> mailer.MessageNotSent, <span style="color: blue;">AddressOf</span> mailer_MessageNotSent
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;"
            		mailer.Message.Subject = "Our Jan/2007 newsletter"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            
            		<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">' the data from "mailing_list" table.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            		<span style="color: blue;">Try</span>
            			conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            
            			<span style="color: green;">' Open the connection and get the data.</span>
            			<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            			conn.Open()
            			<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            			adapter.SelectCommand = command
            			adapter.Fill(table)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				conn.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Run mail merge.</span>
            		mailer.SendMailMerge(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, table)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)">
            <summary>
            Creates a series of e-mails based on an e-mail message template and a data table
            and sends these e-mails out.
            <seealso cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>
            </summary>
            <param name="senderEmailPattern">The e-mail address template of the sender. If it's a null reference 
            (<b>Nothing</b> in Visual Basic), the e-mail address template will be taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/> property. 
            </param>
            <param name="recipientsPattern">The pattern of the message recipients. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list is combined from <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> lists.</param>
            <param name="mergeTable">The data source for mail merge.</param>
            <returns><b>true</b> if the entire mail merge has been processed; <b>false</b> if the operation was stopped due to an error.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Use this method prepare the mail merge task (job) and immediately process it.
            <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method simply calls <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            and then <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> queue already contained some jobs to the moment of <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> call, these jobs will be processed too.</para>
            <para>By default, <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method won't stop if any e-mail message in the mail merge series failed to be sent. Thus, the method always succeeds.
            The developer can use <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> events to keep track of successful and failed e-mails while <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            method is in progress, or examine <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> and <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections after <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> completes.</para>
            <para>However, it's possible to make <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method fail if any of the e-mails in the series fail to be sent. To achieve this, set
            <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> to <b>true</b> prior to calling <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>.</para>
            <para>If any e-mails within the mail merge job failed to be sent,
            the developer can use <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method to put all failed send-mail jobs back
            from <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> into <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> and then call <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>
            to try sending them out again.</para>
            <para>Re-sending failed e-mails can be repeated multiple times, and it's allowed to use
            different sending methods each time. For instance, the developer can change SMTP relay server, try
            direct sending via DNS MX lookup, or even save e-mails as files for later delivery using <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method.
            </para>
            <para>In the case if the application shuts down after performing mail merge (so there is no way
            to call <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> next time when the application starts since all the data has been lost),
            the application should save information regarding failed e-mails in a persistent storage such as database.
            For mail merge, there is no need to save the entire e-mails because the only thing which differs e-mails from each
            other is an index of a row in the data table which was used to create an e-mail from the template.
            Thus, it's enough to save data row indices only and then load them next time (provided that the template
            and the data table will be the same). See <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/>
            topic for the code sample.
            </para>
            </remarks>
            <example>This console sample sends out a newsletter. Events are used to keep track of the mailing.
            E-mails are sent from "Return-Path" address different from "From:" address.
            This makes it easier to process bounced messages because each bounced message
            (produced for mail merge messages which could not be delivered) is sent to "Return-Path" address
            rather than "From:" address. Thus, each bounced message will have ID of the failed mail merge row
            in its "From:" field (and this "From:" will be taken from "Return-Path" of the originating e-mails).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Reports readiness to start sending an e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_SendingMessage(<span style="color: blue;">object</span> sender, SmtpSendingMessageEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the e-mail to be sent.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " IS BEING SENT");
            	}
            
            	<span style="color: green;">// Reports successful attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageSent(<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the successful e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " SUCCEEDED");
            	}
            
            	<span style="color: green;">// Reports failed attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageNotSent(<span style="color: blue;">object</span> sender, SmtpMessageNotSentEventArgs e)
            	{
            		<span style="color: green;">// Display e-mail address of the failed e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows[e.MergeRowIndex]["Email"] + " FAILED");
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">// and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">// mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">// Subscribe to events to track send bulk mail progress.</span>
            		mailer.SendingMessage += <span style="color: blue;">new</span> SmtpSendingMessageEventHandler(mailer_SendingMessage);
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(mailer_MessageSent);
            		mailer.MessageNotSent += <span style="color: blue;">new</span> SmtpMessageNotSentEventHandler(mailer_MessageNotSent);
            
            		<span style="color: green;">// Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Email##";
            		mailer.Message.Subject = "Our Jan/2007 newsletter";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		DataTable table = <span style="color: blue;">new</span> DataTable();
            
            		<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">// the data from "mailing_list" table.</span>
            		<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            		{
            			<span style="color: green;">// Open the connection and get the data.</span>
            			OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            			conn.Open();
            			OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            			adapter.SelectCommand = command;
            			adapter.Fill(table);
            		}
            
            		<span style="color: green;">// Create and run a job which is the following task for MailBee: perform mail merge</span>
            		<span style="color: green;">// over the specified data table and then send out each resulting e-mail to</span>
            		<span style="color: green;">// the recipients which appear in the resulting messages.</span>
            		<span style="color: green;">// "bounce_Jan2007_&lt;ID&gt;@domain.com" (where &lt;ID&gt; is mailing_list.ID)</span>
            		<span style="color: green;">// address will be used as Return-Path (i.e. sender e-mail address).</span>
            		<span style="color: green;">// If there is a wildcard mailbox "bounce_Jan2007_*@domain.com", possible bounces</span>
            		<span style="color: green;">// will arrive to this mailbox and have "From:" like "bounce_Jan2007_1@domain.com",</span>
            		<span style="color: green;">// "bounce_Jan2007_4908@domain.com", etc and the application can then poll this</span>
            		<span style="color: green;">// wildcard mailbox to unsubscribe records #1 and #4908 from database.</span>
            		mailer.SendMailMerge("bounce_Jan2007_##ID##@domain.com", <span style="color: blue;">null</span>, table);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Reports readiness to start sending an e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_SendingMessage(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpSendingMessageEventArgs)
            		<span style="color: green;">' Display e-mail address of the e-mail to be sent.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " IS BEING SENT")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Reports successful attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		<span style="color: green;">' Display e-mail address of the successful e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " SUCCEEDED")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Reports failed attempt of sending mail merge e-mail.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageNotSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageNotSentEventArgs)
            		<span style="color: green;">' Display e-mail address of the failed e-mail.</span>
            		Console.WriteLine(e.MergeTable.Rows(e.MergeRowIndex)("Email") &amp; " FAILED")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Uncomment the line below to use unlimited number of worker threads (up to 60)</span>
            		<span style="color: green;">' and increase performance. Note that not all SMTP servers support this.</span>
            
            		<span style="color: green;">' mailer.MaxThreadCount = -1;</span>
            
            		<span style="color: green;">' Subscribe to events to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.SendingMessage, <span style="color: blue;">AddressOf</span> mailer_SendingMessage
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> mailer_MessageSent
            		<span style="color: blue;">AddHandler</span> mailer.MessageNotSent, <span style="color: blue;">AddressOf</span> mailer_MessageNotSent
            
            		<span style="color: green;">' Setup SMTP server parameters.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Email##"
            		mailer.Message.Subject = "Our Jan/2007 newsletter"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            
            		<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">' the data from "mailing_list" table.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            		<span style="color: blue;">Try</span>
            			conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            			<span style="color: green;">' Open the connection and get the data.</span>
            			<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            			conn.Open()
            			<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            			adapter.SelectCommand = command
            			adapter.Fill(table)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				conn.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Create and run a job which is the following task for MailBee: perform mail merge</span>
            		<span style="color: green;">' over the specified data table and then send out each resulting e-mail to</span>
            		<span style="color: green;">' the recipients which appear in the resulting messages.</span>
            		<span style="color: green;">' "bounce_Jan2007_&lt;ID&gt;@domain.com" (where &lt;ID&gt; is mailing_list.ID)</span>
            		<span style="color: green;">' address will be used as Return-Path (i.e. sender e-mail address).</span>
            		<span style="color: green;">' If there is a wildcard mailbox "bounce_Jan2007_*@domain.com", possible bounces</span>
            		<span style="color: green;">' will arrive to this mailbox and have "From:" like "bounce_Jan2007_1@domain.com",</span>
            		<span style="color: green;">' "bounce_Jan2007_4908@domain.com", etc and the application can then poll this</span>
            		<span style="color: green;">' wildcard mailbox to unsubscribe records #1 and #4908 from database.</span>
            		mailer.SendMailMerge("bounce_Jan2007_##ID##@domain.com", <span style="color: blue;">Nothing</span>, table)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.SubmitToPickupFolder(System.String,System.String,System.String,MailBee.Mime.EmailAddressCollection)">
            <summary>
            Saves the mail message as a file in the pickup folder of MailBee Message Queue or IIS SMTP service.
            </summary>
            <param name="pickupFolderName">The full physical path to MailBee Message Queue or IIS SMTP pickup folder (such as "C:\Inetpub\mailroot\Pickup").</param>
            <param name="filename">The filename (without folder path) of the file to be saved, or a null reference (<b>Nothing</b> in Visual Basic).
            If latter, MailBee will automatically generate a unique filename.</param>
            <param name="senderEmail">The e-mail address of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address is taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipients">The list of the message recipients. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list is combined from <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> lists.</param>
            <returns>On success, the filename (without folder path) of the file saved in the pickup folder; otherwise, a null reference
            (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method can be used to submit messages directly to MailBee Message Queue or IIS SMTP service bypassing SMTP protocol.
            This greatly improves performance of sending large volumes of e-mails when MailBee Message Queue or IIS SMTP server is installed on the same machine
            or in the same LAN as the computer running MailBee. This method neither creates nor requires network connection.
            <note>This method can return a null reference also if <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/> even handler set
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.SubmitIt"/> to <b>false</b>.</note></remarks>
            <example>
            This sample submits a mail message to IIS SMTP server by placing it in the pickup folder.
            The message file will be saved as "C:\Inetpub\mailroot\Pickup\001.eml".
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.From.Email = "jdoe@domain.com";
            mailer.To.Add("kathy@company.com");
            mailer.Subject = "Report";
            mailer.BodyPlainText = "The report contents";
            mailer.SubmitToPickupFolder(@"C:\Inetpub\mailroot\Pickup", "001.eml", "bounce@domain.com",
            	(EmailAddressCollection)null);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            mailer.From.Email = "jdoe@domain.com"
            mailer.To.Add("kathy@company.com")
            mailer.Subject = "Report"
            mailer.BodyPlainText = "The report contents"
            mailer.SubmitToPickupFolder("C:\Inetpub\mailroot\Pickup", "001.eml", "bounce@domain.com", _
            	<span style="color: blue;">CType</span>(<span style="color: blue;">Nothing</span>, EmailAddressCollection))
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.SubmitToPickupFolder(System.String,System.String,System.String,System.String)">
            <summary>
            Saves the mail message as a file in the pickup folder of MailBee Message Queue or IIS SMTP service.
            </summary>
            <param name="pickupFolderName">The full physical path to MailBee Message Queue or IIS SMTP pickup folder (such as "C:\Inetpub\mailroot\Pickup").</param>
            <param name="filename">The filename (without folder path) of the file to be saved, or a null reference (<b>Nothing</b> in Visual Basic).
            If latter, MailBee will automatically generate a unique filename.</param>
            <param name="senderEmail">The e-mail address of the sender. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the e-mail address is taken from <see cref="P:MailBee.SmtpMail.Smtp.From"/>
            property.</param>
            <param name="recipientEmails">The comma-separted list of the recipients e-mail addresses. If it's a null reference
            (<b>Nothing</b> in Visual Basic), the recipients list is combined from <see cref="P:MailBee.SmtpMail.Smtp.To"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.Cc"/>, and <see cref="P:MailBee.SmtpMail.Smtp.Bcc"/> lists.</param>
            <returns>On success, the filename (without folder path) of the file saved in the pickup folder; otherwise, a null reference
            (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method can be used to submit messages directly to MailBee Message Queue or IIS SMTP service bypassing SMTP protocol.
            This greatly improves performance of sending large volumes of e-mails when MailBee Message Queue or IIS SMTP server is installed on the same machine
            or in the same LAN as the computer running MailBee. This method neither creates nor requires network connection.
            <note>This method can return a null reference also if <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/> even handler set
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.SubmitIt"/> to <b>false</b>.</note></remarks>
            <example>
            This sample submits a mail message to IIS SMTP server by placing it in the pickup folder.
            The message file will be saved as "C:\Inetpub\mailroot\Pickup\001.eml". In the message itself, no recipients
            specified, but the message will still be sent to "alex@company.com" and "jane@domain.com".
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.From.Email = "jdoe@domain.com";
            mailer.To.Add("kathy@company.com");
            mailer.Subject = "Report";
            mailer.BodyPlainText = "The report contents";
            mailer.SubmitToPickupFolder(@"C:\Inetpub\mailroot\Pickup", "001.eml", <span style="color: blue;">null</span>,
            	"alex@company.com,jane@domain.com");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            mailer.From.Email = "jdoe@domain.com"
            mailer.To.Add("kathy@company.com")
            mailer.Subject = "Report"
            mailer.BodyPlainText = "The report contents"
            mailer.SubmitToPickupFolder("C:\Inetpub\mailroot\Pickup", "001.eml", <span style="color: blue;">Nothing</span>, _
            	"alex@company.com,jane@domain.com")
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.SubmitToPickupFolder(System.String)">
            <summary>
            Saves the mail message as a file in the pickup folder of MailBee Message Queue or IIS SMTP service.
            </summary>
            <param name="pickupFolderName">The full physical path to MailBee Message Queue or IIS SMTP pickup folder (such as "C:\Inetpub\mailroot\Pickup").</param>
            <returns>On success, the filename (without folder path) of the file saved in the pickup folder; otherwise, a null reference
            (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method can be used to submit messages directly to MailBee Message Queue or IIS SMTP service bypassing SMTP protocol.
            This greatly improves performance of sending large volumes of e-mails when MailBee Message Queue or IIS SMTP server is installed on the same machine
            or in the same LAN as the computer running MailBee. This method neither creates nor requires network connection.
            <note>This method can return a null reference also if <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/> even handler set
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.SubmitIt"/> to <b>false</b>.</note></remarks>
            <example>
            This sample submits a mail message to IIS SMTP server by placing it in the pickup folder,
            and displays the full path to the stored .EML file.
            <note>Usually, the stored message file is immediately picked up by IIS SMTP service
            and thus gets deleted from the pickup folder. That's normal behavior indicating IIS SMTP service is running. The same is true
            for MailBee Message Queue.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.From.Email = "jdoe@domain.com";
            mailer.To.Add("kathy@company.com");
            mailer.Subject = "Report";
            mailer.BodyPlainText = "The report contents";
            <span style="color: blue;">string</span> pickupFolderPath = @"C:\Inetpub\mailroot\Pickup";
            <span style="color: blue;">string</span> filename = mailer.SubmitToPickupFolder(pickupFolderPath);
            Console.WriteLine("Saved into: " + pickupFolderPath + @"\" + filename);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            mailer.From.Email = "jdoe@domain.com"
            mailer.To.Add("kathy@company.com")
            mailer.Subject = "Report"
            mailer.BodyPlainText = "The report contents"
            <span style="color: blue;">Dim</span> pickupFolderPath <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "C:\Inetpub\mailroot\Pickup"
            <span style="color: blue;">Dim</span> filename <span style="color: blue;">As</span> <span style="color: blue;">String</span> = mailer.SubmitToPickupFolder(pickupFolderPath)
            Console.WriteLine("Saved into: " &amp; pickupFolderPath &amp; "\" &amp; filename)
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)">
            <summary>
            Saves all e-mails in the pending jobs queue (including e-mails generated via mail merge)
            as files in the pickup folder of MailBee Message Queue or IIS SMTP service.
            </summary>
            <param name="pickupFolderName">The full physical path to MailBee Message Queue or IIS SMTP pickup folder (such as "C:\Inetpub\mailroot\Pickup").</param>
            <returns><b>true</b>, if the entire queue of pending jobs had been processed and saved; <b>false</b>, if the operation was stopped due to an error.
            </returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method can be used to submit jobs directly to MailBee Message Queue or IIS SMTP service bypassing SMTP protocol. This greatly improves performance of sending large
            volumes of jobs when MailBee Message Queue or IIS SMTP server is installed on the same machine or in the same LAN as the computer running MailBee. This method neither creates nor requires network connection.
            <note>Although this method saves messages into files rather than sends them out, most methods and properties affecting <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method execution 
            (such as <see cref="M:MailBee.SmtpMail.Smtp.StopJobs"/> or <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/>) apply to <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method as well.
            The same applies to processing of job queues (such as <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>).</note>
            In the case if messages are saved to pickup folder rather than being sent out, it's recommended to set <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> to true.
            This is because if any error occurs during saving files (for instance, disk is full), most probably this error will repeat for all subsequent messages
            and it doesn't make sense to continue processing.
            </remarks>
            <example>
            This console sample performs mail merge via submitting resulting messages into IIS SMTP pickup folder.
            Events are used to track progress of the operation.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Data;
            <span style="color: blue;">using</span> System.Data.OleDb;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MergingMessage(<span style="color: blue;">object</span> sender, SmtpMergingMessageEventArgs e)
            	{
            		Console.WriteLine("Will create an e-mail from data row #" + e.MergeRowIndex);
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_SubmittingMessageToPickupFolder(<span style="color: blue;">object</span> sender,
            		SmtpSubmittingMessageToPickupFolderEventArgs e)
            	{
            		Console.WriteLine("Will queue an e-mail from data row #" + e.MergeRowIndex);
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> mailer_MessageSubmittedToPickupFolder(<span style="color: blue;">object</span> sender,
            		SmtpMessageSubmittedToPickupFolderEventArgs e)
            	{
            		Console.WriteLine("The e-mail from data row #" + e.MergeRowIndex +
            			" saved as " + e.Filename);
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Subscribe to 3 events to track send bulk mail progress.</span>
            		mailer.MergingMessage += <span style="color: blue;">new</span> SmtpMergingMessageEventHandler(mailer_MergingMessage);
            		mailer.SubmittingMessageToPickupFolder +=
            			<span style="color: blue;">new</span> SmtpSubmittingMessageToPickupFolderEventHandler(
            			mailer_SubmittingMessageToPickupFolder
            			);
            		mailer.MessageSubmittedToPickupFolder +=
            			<span style="color: blue;">new</span> SmtpMessageSubmittedToPickupFolderEventHandler(
            			mailer_MessageSubmittedToPickupFolder
            			);
            
            		<span style="color: green;">// Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;";
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;";
            		mailer.Message.Subject = "Our Jan/2007 newsletter";
            
            		<span style="color: green;">// Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;";
            
            		<span style="color: green;">// Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">string</span> connParams = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;";
            
            		<span style="color: green;">// Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">// the data from "mailing_list" table.</span>
            		<span style="color: blue;">using</span> (OleDbConnection conn = <span style="color: blue;">new</span> OleDbConnection(connParams))
            		{
            			<span style="color: green;">// Open the connection and get the data.</span>
            			OleDbCommand command = <span style="color: blue;">new</span> OleDbCommand("SELECT * FROM mailing_list", conn);
            			conn.Open();
            			OleDbDataAdapter adapter = <span style="color: blue;">new</span> OleDbDataAdapter();
            			DataTable table = <span style="color: blue;">new</span> DataTable();
            			adapter.SelectCommand = command;
            			adapter.Fill(table);
            
            			mailer.AddJob(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>, table);
            		}
            
            		<span style="color: green;">// Run mail merge.</span>
            		mailer.SubmitJobsToPickupFolder(@"C:\Inetpub\mailroot\Pickup");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Data
            <span style="color: blue;">Imports</span> System.Data.OleDb
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MergingMessage(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMergingMessageEventArgs)
            		Console.WriteLine("Will create an e-mail from data row #" &amp; e.MergeRowIndex)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_SubmittingMessageToPickupFolder(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            			<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpSubmittingMessageToPickupFolderEventArgs)
            		Console.WriteLine("Will queue an e-mail from data row #" &amp; e.MergeRowIndex)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> mailer_MessageSubmittedToPickupFolder(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            			 <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSubmittedToPickupFolderEventArgs)
            		Console.WriteLine("The e-mail from data row #" &amp; e.MergeRowIndex &amp; " saved as " &amp; e.Filename)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Logging into a file is useful for troubleshooting.</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Subscribe to 3 events to track send bulk mail progress.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MergingMessage, <span style="color: blue;">AddressOf</span> mailer_MergingMessage
            		<span style="color: blue;">AddHandler</span> mailer.SubmittingMessageToPickupFolder, <span style="color: blue;">AddressOf</span> mailer_SubmittingMessageToPickupFolder
            		<span style="color: blue;">AddHandler</span> mailer.MessageSubmittedToPickupFolder, <span style="color: blue;">AddressOf</span> mailer_MessageSubmittedToPickupFolder
            
            		<span style="color: green;">' Setup e-mail message header template for mail merge.</span>
            		mailer.Message.From.AsString = "John Doe &lt;john.doe@domain.com&gt;"
            		mailer.Message.To.AsString = "##Name## &lt;##Email##&gt;"
            		mailer.Message.Subject = "Our Jan/2007 newsletter"
            
            		<span style="color: green;">' Setup HTML body template.</span>
            		mailer.Message.BodyHtmlText = "&lt;html&gt;##Body##&lt;/html&gt;"
            
            		<span style="color: green;">' Specify database connection string (it may be different in your case).</span>
            		<span style="color: blue;">Dim</span> connParams <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\Newsletter.mdb;"
            
            		<span style="color: green;">' Connect to the database and populate mail merge job to-do list with</span>
            		<span style="color: green;">' the data from "mailing_list" table.</span>
            		<span style="color: blue;">Dim</span> conn <span style="color: blue;">As</span> OleDbConnection
            		<span style="color: blue;">Try</span>
            			conn = <span style="color: blue;">New</span> OleDbConnection(connParams)
            
            			<span style="color: green;">' Open the connection and get the data.</span>
            			<span style="color: blue;">Dim</span> command <span style="color: blue;">As</span> OleDbCommand = <span style="color: blue;">New</span> OleDbCommand("SELECT * FROM mailing_list", conn)
            			conn.Open()
            			<span style="color: blue;">Dim</span> adapter <span style="color: blue;">As</span> OleDbDataAdapter = <span style="color: blue;">New</span> OleDbDataAdapter
            			<span style="color: blue;">Dim</span> table <span style="color: blue;">As</span> DataTable = <span style="color: blue;">New</span> DataTable
            			adapter.SelectCommand = command
            			adapter.Fill(table)
            
            			mailer.AddJob(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, table)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> conn <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				conn.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Run mail merge.</span>
            		mailer.SubmitJobsToPickupFolder("C:\Inetpub\mailroot\Pickup")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.TestSend(MailBee.SmtpMail.SendFailureThreshold)">
            <summary>
            Tests sending a mail message to the recipients without actual submitting of the message
            data.
            </summary>
            <param name="failureThreshold">Specifies whether the method should succeed if
            all recipients succeed, or at least one recipient succeeds (even if other recipients fail).</param>
            <returns><see cref="F:MailBee.SmtpMail.TestSendResult.OK"/> if the sender and any or all (depends on <paramref name="failureThreshold"/>
            value) recipients have been accepted by for delivery; otherwise, one of <see cref="T:MailBee.SmtpMail.TestSendResult"/>
            values specifying the error details.</returns>
            <remarks>
            <para>When <paramref name="failureThreshold"/> is <see cref="F:MailBee.SmtpMail.SendFailureThreshold.Default"/>,
            failed recipients are always allowed in direct send mode, and can be either disabled or enabled
            when submitting to SMTP relay server (depending on <see cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/>
            property value). Other values of <paramref name="failureThreshold"/> parameter allow the
            developer to override the default behavior for both direct send and SMTP relay send modes.</para>
            <para>This method can be used prior to actual <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method call
            in order to make sure the sender and all recipients will be accepted during send mail operation.
            If any/all recipients fail, the method returns corresponding <see cref="T:MailBee.SmtpMail.TestSendResult"/>
            value. <see cref="T:MailBee.MailBeeException"/> is not thrown. <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event is still raised,
            so the developer can obtain additional information about the error by handling this event.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.TestSend(MailBee.SmtpMail.SendFailureThreshold)"/> method is especially useful in direct send scenarios (discovering
            SMTP MX servers via DNS MX lookup rather than using predefined SMTP relay server).
            When no SMTP relay server is used, it's not possible to send to all recipients without fail, and cancel
            sending if at least one recipient fails (so that the message would be sent either to
            all recipients or to nobody). This is because the message may be sent to many SMTP MX servers
            in direct send mode, and if it was already sent to the first server and fails for the second
            one, it's not possible to tell the first server to rollback and cancel the recent mail
            submission. This is different from sending to SMTP relay server, where entire send mail
            operation is a single transaction. If it's cancelled, no recipients previously submitted
            will receive the message. When sending to an SMTP relay server, the developer can use
            <see cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/> property to control whether the component
            should return an error if at least one recipient fails.</para>
            <note>The mail message submission may still fail on <see cref="M:MailBee.SmtpMail.Smtp.Send"/> operation even if
            all recipients and the sender are valid. This typically occurs when the server
            accepts the sender and the recipients but rejects the message data (for instance,
            the message is too large, or the server decides the message contains spam or virus).
            Also, the server might be down at the moment when <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method gets called even if it was
            fine during <see cref="M:MailBee.SmtpMail.Smtp.TestSend(MailBee.SmtpMail.SendFailureThreshold)"/> method call.</note>
            </remarks>
            <example>This sample sends a mail message in direct send mode (no SMTP relay server
            is used). To make sure all recipients will receive the message, <see cref="M:MailBee.SmtpMail.Smtp.TestSend(MailBee.SmtpMail.SendFailureThreshold)"/>
            is called first. Extensive error checking is performed in <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/>
            event handler to learn why the error occurred.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.DnsMX;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> MailBeeSmtpRefusedRecipientException)
            		{
            			MailBeeSmtpRefusedRecipientException ex =
            				e.Reason <span style="color: blue;">as</span> MailBeeSmtpRefusedRecipientException;
            			Console.WriteLine(ex.RefusedRecipientEmail + " was refused by the server");
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> MailBeeDnsNameErrorException)
            		{
            			MailBeeDnsNameErrorException ex = e.Reason <span style="color: blue;">as</span> MailBeeDnsNameErrorException;
            			Console.WriteLine(ex.HostName + " is unknown host");
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> MailBeeDnsProtocolNegativeResponseException)
            		{
            			MailBeeDnsProtocolNegativeResponseException ex =
            				e.Reason <span style="color: blue;">as</span> MailBeeDnsProtocolNegativeResponseException;
            			Console.WriteLine("DNS server returned error for " + ex.HostName);
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> MailBeeConnectionException)
            		{
            			MailBeeConnectionException ex = e.Reason <span style="color: blue;">as</span> MailBeeConnectionException;
            			<span style="color: blue;">if</span> (ex.Protocol == TopLevelProtocolType.Smtp)
            			{
            				Console.WriteLine("Connection problem with " +
            					ex.RemoteHostName + " SMTP MX server ");
            			}
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine(e.Reason.Message);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers list from OS settings or config file </span>
            		<span style="color: green;">// (like app.config).</span>
            		mailer.DnsServers.Autodetect();
            
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            
            		<span style="color: green;">// Specify recipients.</span>
            		mailer.To.AsString = "no-display-name@website.com, \"Bill Smith, Jr.\" &amp;lt;bill.smith@company.com&amp;gt;";
            		mailer.To.AddFromString("Kathy Smith &amp;lt;k.smith@domain.com&amp;gt;");
            		mailer.To.AddFromString("email@address.com");
            		mailer.To.Add("Mike Jackson, Sales Manager", "mj@company.com", "Sales Department");
            
            		mailer.Subject = "Newsletter";
            		mailer.BodyPlainText = "This is our weekly newsletter.";
            
            		<span style="color: green;">// Subscribe to the ErrorOccurred event.</span>
            		mailer.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		<span style="color: green;">// Make sure all the recipients are ok.</span>
            		<span style="color: blue;">if</span> (mailer.TestSend(SendFailureThreshold.AllRecipientsFailed) != TestSendResult.OK)
            		{
            			Console.WriteLine("No recipients can receive the message.");
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (mailer.GetRefusedRecipients().Count &gt; 0)
            		{
            			Console.WriteLine("The following recipients failed: " +
            				mailer.GetRefusedRecipients().ToString());
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("All recipients are ok. Will send the message now.");
            			mailer.Send();
            			Console.WriteLine("Sent to: " + mailer.GetAcceptedRecipients().ToString());
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.DnsMX
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: blue;">If</span> (<span style="color: blue;">TypeOf</span> e.Reason <span style="color: blue;">Is</span> MailBeeSmtpRefusedRecipientException) <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> ex <span style="color: blue;">As</span> MailBeeSmtpRefusedRecipientException = e.Reason
            			Console.WriteLine(ex.RefusedRecipientEmail &amp; " was refused by the server")
            		<span style="color: blue;">ElseIf</span> (<span style="color: blue;">TypeOf</span> e.Reason <span style="color: blue;">Is</span> MailBeeDnsNameErrorException) <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> ex <span style="color: blue;">As</span> MailBeeDnsNameErrorException = e.Reason
            			Console.WriteLine(ex.HostName &amp; " is unknown host")
            		<span style="color: blue;">ElseIf</span> (<span style="color: blue;">TypeOf</span> e.Reason <span style="color: blue;">Is</span> MailBeeDnsProtocolNegativeResponseException) <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> ex <span style="color: blue;">As</span> MailBeeDnsProtocolNegativeResponseException = e.Reason
            			Console.WriteLine("DNS server returned error for " + ex.HostName)
            		<span style="color: blue;">ElseIf</span> (<span style="color: blue;">TypeOf</span> e.Reason <span style="color: blue;">Is</span> MailBeeConnectionException) <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> ex <span style="color: blue;">As</span> MailBeeConnectionException = e.Reason
            			<span style="color: blue;">If</span> (ex.Protocol = TopLevelProtocolType.Smtp) <span style="color: blue;">Then</span>
            				Console.WriteLine("Connection problem with " &amp; _
            					ex.RemoteHostName &amp; " SMTP MX server ")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Else</span>
            			Console.WriteLine(e.Reason.Message)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers list from OS settings or config file </span>
            		<span style="color: green;">' (like app.config).</span>
            		mailer.DnsServers.Autodetect()
            
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            
            		<span style="color: green;">' Specify recipients.</span>
            		mailer.To.AsString = "no-display-name@website.com, ""Bill Smith, Jr."" &lt;bill.smith@company.com&gt;"
            		mailer.To.AddFromString("Kathy Smith &lt;k.smith@domain.com&gt;")
            		mailer.To.AddFromString("email@address.com")
            		mailer.To.Add("Mike Jackson, Sales Manager", "mj@company.com", "Sales Department")
            
            		mailer.Subject = "Newsletter"
            		mailer.BodyPlainText = "This is our weekly newsletter."
            
            		<span style="color: green;">' Subscribe to the ErrorOccurred event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: green;">' Make sure all the recipients are ok.</span>
            		<span style="color: blue;">If</span> (mailer.TestSend(SendFailureThreshold.AllRecipientsFailed) &lt;&gt; TestSendResult.OK) <span style="color: blue;">Then</span>
            			Console.WriteLine("No recipients can receive the message.")
            		<span style="color: blue;">ElseIf</span> (mailer.GetRefusedRecipients().Count &gt; 0) <span style="color: blue;">Then</span>
            			Console.WriteLine("The following recipients failed: " &amp; _
            				mailer.GetRefusedRecipients().ToString())
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("All recipients are ok. Will send the message now.")
            			mailer.Send()
            			Console.WriteLine("Sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.AddAttachment(System.String)">
            <summary>
            Reads the specified file from disk and adds it as attachment to the message.
            </summary>
            <param name="filename">The full path and filename of the file to be attached.</param>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para><b>Smtp.AddAttachment</b> method is equivalent to <b>Smtp.Message.Attachments.Add</b> method
            (see <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String)"/>).</para>
            <para>The developer can use overloads of <see cref="M:MailBee.Mime.AttachmentCollection.Add(MailBee.Mime.Attachment)"/> method
            to add attachments in an advanced way (memory or stream attachments, attachments of a specific
            type, etc).</para>
            <note>If you send multiple messages reusing the same <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object, be sure
            to clear <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object by calling <see cref="M:MailBee.Mime.AttachmentCollection.Clear"/> method
            after each send. Otherwise, the attachments added to the collection during send operation
            will still remain in the collection when new attachments are added for the next send operation.</note>
            </remarks>
            <example>Adding an attachment to the message using <b>Smtp.AddAttachment</b> and <b>Smtp.Message.Attachments.Add</b> methods.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Add attachment under real name.</span>
            mailer.AddAttachment(@"C:\My Documents\Report.xls");
            
            <span style="color: green;">// Add B4DVIS9H.TMP file as "Annual report.doc".</span>
            mailer.Message.Attachments.Add(@"C:\DataFiles\B4DVIS9H.TMP", "Annual report.doc");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Add attachment under real name.</span>
            mailer.AddAttachment("C:\My Documents\Report.xls")
            
            <span style="color: green;">' Add B4DVIS9H.TMP file as "Annual report.doc".</span>
            mailer.Message.Attachments.Add("C:\DataFiles\B4DVIS9H.TMP", "Annual report.doc")
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.QuickSend(MailBee.Mime.MailMessage)">
            <summary>
            Sends a mail message, in a single line of code.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Send"/>
            </summary>
            <param name="message">The <see cref="T:MailBee.Mime.MailMessage"/> object representing the mail
            message to be sent.</param>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method allows the developer to send a mail message without needing
            to create an instance of <see cref="T:MailBee.SmtpMail.Smtp"/> component.</para>
            <para>The message will be sent in direct send mode. MailBee will discover SMTP
            servers of recipients domains via DNS MX lookup, and then send the message directly
            to these SMTP MX servers. No dedicated SMTP relay server is used.</para>
            <para>DNS servers for MX lookup are taken either from the config file (such as
            app.config, web.config, or machine.config) or from operating system settings if the
            config file contains no DNS server definitions. See <see cref="M:MailBee.DnsMX.DnsServerCollection.Autodetect"/>
            method for more information.</para>
            <note>Although this method is static, it still requires valid license key be assigned
            to the <see cref="T:MailBee.SmtpMail.Smtp"/> class. The developer can set the key either in the config file
            or in the code (by setting <see cref="P:MailBee.SmtpMail.Smtp.LicenseKey"/> property value).</note>
            </remarks>
            <example>This sample creates a simple plain-text mail message and then sends it.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Prepare the message.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            msg.To.AsString = "Kathy Smith &lt;kathy.smith@company.com&gt;";
            msg.Subject = "Meeting request";
            msg.BodyPlainText = "Hi Kathy,\r\nCan we meet tomorrow?\r\nRegards, John";
            
            <span style="color: green;">// Send it.</span>
            Smtp.QuickSend(msg);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Prepare the message.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            msg.To.AsString = "Kathy Smith &lt;kathy.smith@company.com&gt;"
            msg.Subject = "Meeting request"
            msg.BodyPlainText = "Hi Kathy,\r\nCan we meet tomorrow?\r\nRegards, John"
            
            <span style="color: green;">' Send it.</span>
            Smtp.QuickSend(msg)
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.QuickSend(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends a mail message, in a single line of code.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Send"/>
            </summary>
            <param name="from">The string containing the sender e-mail address.</param>
            <param name="to">The comma-separated list of the message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="plainTextBody">The plain-text version of the message body, or a null reference (<b>Nothing</b> in visual Basic)
            if the message should not contain the plain-text body.</param>
            <param name="htmlBody">The HTML version of the message body, or a null reference (<b>Nothing</b> in visual Basic)
            if the message should not contain the HTML body.</param>
            <param name="charset">The charset the message is composed in, or a null reference (<b>Nothing</b> in visual Basic)
            if the message should not contain any charset setting.</param>
            <param name="attachmentFilename">The full path and filename of the file to be attached
            to the message, or a null reference (<b>Nothing</b> in visual Basic) if no attachment is required.</param>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method allows the developer to send a mail message without needing
            to create an instances of <see cref="T:MailBee.SmtpMail.Smtp"/> component and <see cref="T:MailBee.Mime.MailMessage"/> class.</para>
            <para>The message will be sent in direct send mode. MailBee will discover SMTP
            servers of recipients domains via DNS MX lookup, and then send the message directly
            to these SMTP MX servers. No dedicated SMTP relay server is used.</para>
            <para>DNS servers for MX lookup are taken either from the config file (such as
            app.config, web.config, or machine.config) or from operating system settings if the
            config file contains no DNS server definitions. See <see cref="M:MailBee.DnsMX.DnsServerCollection.Autodetect"/>
            method for more information.</para>
            <note>Although this method is static, it still requires valid license key be assigned
            to the <see cref="T:MailBee.SmtpMail.Smtp"/> class. The developer can set the key either in the config file
            or in the code (by setting <see cref="P:MailBee.SmtpMail.Smtp.LicenseKey"/> property value).</note>
            </remarks>
            <example>This sample composes and sends an HTML mail message with an attachment in a
            single line of code.
            <code lang="C#">
            MailBee.SmtpMail.Smtp.QuickSend("John Doe &lt;jdoe@domain.com&gt;",
            "Kathy Smith &lt;kathy.smith@company.com&gt;", "The requested document", <span style="color: blue;">null</span>,
            "&lt;html&gt;Please find the report in the attached document&lt;/html&gt;", <span style="color: blue;">null</span>,
            @"C:\My Documents\report.doc");
            </code>
            <code lang="Visual Basic">
            MailBee.SmtpMail.Smtp.QuickSend("John Doe &lt;jdoe@domain.com&gt;", _
            	"Kathy Smith &lt;kathy.smith@company.com&gt;", "The requested document", <span style="color: blue;">Nothing</span>, _
            	"&lt;html&gt;Please find the report in the attached document&lt;/html&gt;", <span style="color: blue;">Nothing</span>, _
            	"C:\My Documents\report.doc")
            </code>
            </example>
        </member>
        <member name="M:MailBee.SmtpMail.Smtp.QuickSend(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a mail message, in a single line of code.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Send"/>
            </summary>
            <param name="from">The string containing the sender e-mail address.</param>
            <param name="to">The comma-separated list of the message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The message body as plain-text.</param>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method allows the developer to send a mail message without needing
            to create an instances of <see cref="T:MailBee.SmtpMail.Smtp"/> component and <see cref="T:MailBee.Mime.MailMessage"/> class.</para>
            <para>The message will be sent in direct send mode. MailBee will discover SMTP
            servers of recipients domains via DNS MX lookup, and then send the message directly
            to these SMTP MX servers. No dedicated SMTP relay server is used.</para>
            <para>DNS servers for MX lookup are taken either from the config file (such as
            app.config, web.config, or machine.config) or from operating system settings if the
            config file contains no DNS server definitions. See <see cref="M:MailBee.DnsMX.DnsServerCollection.Autodetect"/>
            method for more information.</para>
            <note>Although this method is static, it still requires valid license key be assigned
            to the <see cref="T:MailBee.SmtpMail.Smtp"/> class. The developer can set the key either in the config file
            or in the code (by setting <see cref="P:MailBee.SmtpMail.Smtp.LicenseKey"/> property value).</note>
            </remarks>
            <example>This sample composes and sends a plain-text message in a single line of code.
            <code lang="C#">
            MailBee.SmtpMail.Smtp.QuickSend("joe@me.com", "bill@you.com", "Hello", "Simple message");
            </code>
            <code lang="Visual Basic">
            MailBee.SmtpMail.Smtp.QuickSend("joe@me.com", "bill@you.com", "Hello", "Simple message")
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.LicenseKey">
            <summary>
            Sets the license key.
            </summary>
            <value>A string value which contains the license key which unlocks the component.
            This property is write-only.</value>
            <exception cref="T:MailBee.MailBeeLicenseException">The license key is invalid.</exception>
            <remarks>
            <para>You can unlock the component by either setting this property to the valid
            permanent or trial license key or by adding MailBee.SmtpMail.Smtp.LicenseKey key
            in app.config, web.config, or machine.config file.</para>
            <para>This property is static (<b>Shared</b> in Visual Basic). If not set in the
            config file, this property must be set before creating any instances of
            <see cref="T:MailBee.SmtpMail.Smtp"/> class.</para>
            </remarks>
            <example>Setting this property and connecting to an SMTP server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp.LicenseKey = "Permanent or trial license key here";
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("smtp.domain1.com");
            mailer.Connect();
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            Smtp.LicenseKey = "Permanent or trial license key here"
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("smtp.domain1.com")
            mailer.Connect()
            mailer.Disconnect()
            </code>
            </example>
            <example>Setting the license key in the config file and connecting to an SMTP server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.SmtpServers.Add("smtp.domain1.com");
            mailer.Connect();
            mailer.Disconnect();
            
            <span style="color: green;">// XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.SmtpMail.Smtp.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">// In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.SmtpServers.Add("smtp.domain1.com")
            mailer.Connect()
            mailer.Disconnect()
            
            <span style="color: green;">' XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.SmtpMail.Smtp.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">' In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.TrialDaysLeft">
            <summary>
            Gets the number of days left to the date of the trial license key expiration.
            </summary>
            <value>An integer value which contains the number of days left to the date of
            the trial license key expiration, or -1 if the permanent license key is used.</value>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the calls of the event handlers.
            </summary>
            <value>A reference to the object on whose thread the events should be raised.
            The default value is a null reference (<b>Nothing</b> in Visual Basic) which tells
            MailBee to determine the appropriate marshalling object automatically.</value>
            <remarks>Usually, you do not need to set this property because MailBee can
            automatically marshal events to proper threads.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Version">
            <summary>
            Gets the version of the MailBee assembly.
            </summary>
            <value>A string which contains the version of the MailBee assembly in
            MajorVersion.MinorVersion.Revision.Build format (like "3.0.0.35").</value>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.Disposed">
            <summary>
            Occurs after the component was disposed.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Site">
            <summary>
            Gets or sets the object to be used as a site for the component.
            </summary>
            <value>A reference to the object to be used as a site for the component.
            The default value is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>The developer does not need to set this property. It's used by RAD
            tools such as form designers.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.IsBusy">
            <summary>
            Indicates whether the component is performing a lengthy operation.
            </summary>
            <value>A bool value indicating whether the component is busy because it's doing
            some work.</value>
            <remarks>When the component is busy, it's not possible to start another lengthy operation.
            For instance, if the component connects to the server or transfers data over the network,
            no other network operation can be started at this time. Any attempt to do
            so will result in <see cref="T:MailBee.MailBeeInvalidStateException"/>.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.IsAborted">
            <summary>
            Indicates whether <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method has been called for the component.
            </summary>
            <value><b>true</b> if <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method has already been called;
            otherwise, <b>false</b>. The default value is <b>false</b>.</value>
            <remarks>
            <para>In aborted state, the component does not raise any events, and most methods, if called,
            will immediately return an error or throw an exception.</para>
            <para><see cref="M:MailBee.SmtpMail.Smtp.ResetState"/> method can be used to restore the component
            back to operational state.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.LastResult">
            <summary>
            Gets a numeric code of the last error.
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Log">
            <summary>
            Gets the object used for logging MailBee activities into a file or memory buffer.
            </summary>
            <value>A reference to the object used for logging MailBee activities into a file or memory buffer.</value>
            <remarks>This property is never a null reference (<b>Nothing</b> in Visual Basic)
            even if logging is not used.</remarks>
            <example>This sample sets file logging on and sets the filename of the log file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            mailer.Log.Enabled = <span style="color: blue;">true</span>;
            mailer.Log.Filename = @"C:\log.txt";
            mailer.SmtpServers.Add("smtp.domain.com");
            mailer.Connect();
            mailer.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer = <span style="color: blue;">New</span> Smtp
            mailer.Log.Enabled = <span style="color: blue;">True</span>
            mailer.Log.Filename = "C:\log.txt"
            mailer.SmtpServers.Add("smtp.domain.com")
            mailer.Connect()
            mailer.Disconnect()
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.RaiseEvents">
            <summary>
            Gets or sets whether the component will raise any events. 
            </summary>
            <value>A bool value indicating whether the component will raise any events.
            The default value is <b>true</b>.</value>
            <remarks>If this propery is <b>false</b>, <i>OnEventName</i> methods will also not be called.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop">
            <summary>
            Gets or sets whether the events will be raised on the message loop of the application
            or not.
            </summary>
            <value>A bool value indicating whether the events will be raised on the message loop
            of the application or not. The default value is <b>true</b>.</value>
            <remarks>This property is only meaningful in WinForms applications where events and
            asynchronous methods are used, and the developer needs to block the message loop for some reason
            (usually, to wait for completion of an asynchronous method). In this case, you should set
            this property to <b>false</b> and use <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method to wait until
            asynchronous MailBee method is finished. See <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method for more information.
            <para>The above also applies to synchronous methods if they are called on worker (non-UI) threads.
            If, however, the application does not use asynchronous methods of MailBee (and never calls its
            synchronous methods on non-UI threads), it should NOT attempt to set <see cref="P:MailBee.SmtpMail.Smtp.RaiseEventsViaMessageLoop"/>
            to <b>false</b> or use <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method.</para>
            <note>If you develop non-WinForms application (such as web or console application),
            you do not need to set this property or use <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method regardless
            if the application uses worker threads or not.</note>
            Another alternative (in WinForms application) to using <see cref="M:MailBee.SmtpMail.Smtp.Wait"/> method
            is to never block the application message loop and use callback functions instead of
            waiting for asynchronous method completion.
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.SmtpMail.Smtp"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.SmtpMail.Smtp.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note> 
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.RequestEncoding">
            <summary>
            Gets or sets the encoding used to convert a string into a bytes stream
            which is then sent to the server.
            </summary>
            <value>A reference to the encoding object used to convert a string into a bytes stream
            which is then sent to the server. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.ResponseEncoding">
            <summary>
            Gets or sets the encoding used to convert a byte data received from the server into a string.
            </summary>
            <value>A reference to the encoding object used to convert a byte data received from the server
            into a string. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.ThrowExceptions">
            <summary>
            Gets or sets whether the component will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the component will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the component methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.SmtpMail.Smtp.LastResult"/>,
            <see cref="M:MailBee.SmtpMail.Smtp.GetErrorDescription"/>, <see cref="M:MailBee.SmtpMail.Smtp.GetServerResponse"/>,
            <see cref="M:MailBee.SmtpMail.Smtp.GetSocketError"/> members to get more information about the error.
            <note>Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee usage will still be thrown. Typical examples of such
            errors are: passing invalid arguments to methods, calling methods or settings
            properties in illegal state (for instance, an attempt to start an asynchronous
            method while another asynchronous method is not yet finished), etc. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be
            supressed.</note>
            <para>
            <see cref="P:MailBee.SmtpMail.Smtp.ThrowExceptions"/> property does not control whether to throw exceptions which occur due to
            logging errors (such as "log file cannot be written to", etc). To control whether logging
            exceptions should be thrown, the developer can use <see cref="P:MailBee.Logger.DisableOnException">Log.DisableOnException</see>
            property.
            </para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.IsConnected">
            <summary>
            Indicates whether the component is connected to the server.
            <seealso cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/>
            </summary>
            <value><b>true</b> if the component is connected to the server; otherwise, <b>false</b>.</value>
            <remarks>In multi-thread mode (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is NOT 1), many 
            threads may be executed simultaneously. While the connection may be opened on one thread, it may be
            already closed or not yet been established on another thread. Due to this, <see cref="P:MailBee.SmtpMail.Smtp.IsConnected"/>
            property is not applicable in multi-thread mode (it returns <b>false</b>).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.IsSslConnection">
            <summary>
            Indicates whether the current connection (if any) if secured with TLS/SSL layer.
            </summary>
            <value><b>true</b> if the current connection is TLS/SSL; <b>false</b> if the connection is not secure.</value>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.IsLoggedIn">
            <summary>
            <seealso cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/>
            Indicates whether the component has already successfully authenticated on the server
            and logged in the user account.
            </summary>
            <value><b>true</b> if already authenticated the user on the server (<see cref="M:MailBee.SmtpMail.Smtp.Login"/>
            method has already been called and ESMTP SASL authentication successfully completed);
            otherwise, <b>false</b>.</value>
            <remarks>In multi-thread mode (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is NOT 1), many 
            threads may be executed simultaneously. While the authentication may already be completed on one thread,
            another thread may be just connecting to the server, etc. Due to this, <see cref="P:MailBee.SmtpMail.Smtp.IsLoggedIn"/>
            property is not applicable in multi-thread mode (it returns <b>false</b>).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.IsSmtpContext">
            <summary>
            Indicates whether the component is currently operating in a single thread mode,
            and the current connection (if any) is an SMTP connection.
            <seealso cref="P:MailBee.SmtpMail.Smtp.IsConnected"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.ResetState"/>
            </summary>
            <value><b>true</b> if the current state of the component allows execution of any methods
            which are valid in a single SMTP connection mode only.</value>
            <remarks>
            <para>The <see cref="T:MailBee.SmtpMail.Smtp"/> component can operate in multi-thread mode, and
            is capable of establishing non-SMTP connections (while performing DNS MX lookup or
            POP-before-SMTP authentication). However, many <see cref="T:MailBee.SmtpMail.Smtp"/> class methods make
            sense only when a single SMTP connection is used at the moment. In this case, <see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/>
            property can be used to make sure a call of such a method is possible.</para>
            <para>If multi-threading, DNS MX lookup and POP-before-SMTP authentication are not used,
            this property will always return <b>true</b>. By default, multi-threading is not used
            (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is 1), and automatic POP-before-SMTP authentication is off
            (<see cref="P:MailBee.SmtpMail.SmtpServer.AuthPopBeforeSmtp"/> is <b>false</b>).</para>
            <para>DNS MX lookup can be performed in direct send mode, when the message is
            being sent using mail send method like <see cref="M:MailBee.SmtpMail.Smtp.Send"/> or <see cref="M:MailBee.SmtpMail.Smtp.RelayFromEmlFile(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>
            without prior <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method call (and no SMTP servers were available
            in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collections, or they had lower priority than
            the servers in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection). If the connection was established
            by calling <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method, DNS MX lookup will never be used.</para>
            <para>The following are examples of methods which can only be used only if <see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/> is <b>true</b>:
            <list type="bullet">
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.Disconnect"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.ExecuteCustomCommand(System.String)"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetCurrentSmtpServerIndex"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetMaxMessageSize"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetServerResponseCode"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetSocket"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetSocketError"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.GetSupportedAuthMethods"/></description></item>
            <item><description><see cref="M:MailBee.SmtpMail.Smtp.Noop"/></description></item>
            </list>
            </para>
            <para>If the component was used in multiple-connections mode (for instance, the message
            was sent using MX lookup), the developer can revert it back to default mode using
            <see cref="M:MailBee.SmtpMail.Smtp.ResetState"/> method.</para></remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.JobsSyncRoot">
            <summary>
            Gets the object to be used for synchronized access to the jobs collections.
            </summary>
            <value>A reference to the object to be used for synchronized access to <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>,
            <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>, and <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections.</value>
            <remarks>
            <para>Synchronization of the access to the jobs collections is required if the jobs
            are currently being processed and the application wishes to modify or enumerate any of the jobs collections on another thread
            using corresponding methods of <see cref="T:MailBee.SmtpMail.SendMailJobCollection"/> class. Synchronization is NOT
            required in single-thread mode (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is 1 and no asynchronous methods used) or if the component has already finished processing jobs
            (<see cref="P:MailBee.SmtpMail.Smtp.IsBusy"/> is <b>false</b>). Synchronization, however, may be required even if <see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is 1 but
            the application uses worker threads or runs jobs in asynchronous mode (with <see cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/> method).</para>
            <note><see cref="T:MailBee.SmtpMail.Smtp"/> class methods which can modify jobs collections
            (<see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>, <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/>, <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>, etc) take care of synchronization
            automatically. The developer may need to use <see cref="P:MailBee.SmtpMail.Smtp.JobsSyncRoot"/> only when accessing
            job collections directly.</note>
            </remarks>
            <example>This code snippet enumerates <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collection in a thread-safe way.
            This makes it possible to safely call this code even if <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collection is modified
            by working threads of MailBee at the same moment. It's assumed <c>mailer</c> is an <see cref="T:MailBee.SmtpMail.Smtp"/> instance.
            <code lang="C#">
            <span style="color: blue;">lock</span> (mailer.JobsSyncRoot)
            {
            	<span style="color: blue;">foreach</span> (SendMailJob job <span style="color: blue;">in</span> (mailer.JobsFailed)
            	{
            		Console.WriteLine(job.Tag);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">SyncLock</span> mailer.JobsSyncRoot
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> job <span style="color: blue;">As</span> SendMailJob <span style="color: blue;">In</span> mailer.JobsFailed
            		Console.WriteLine(job.Tag)
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">End</span> <span style="color: blue;">SyncLock</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.JobsPending">
            <summary>
            Gets the list of send-mail (sending a single message or mail-merge) tasks ready for processing.
            <seealso cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>
            </summary>
            <value>The list of single-message or mail-merge jobs ready for processing.</value>
            <remarks>
            <para><see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> queue consists of items which are either jobs to process a single or multiple e-mails.</para>
            <para>A single e-mail job can either be a task to process a completed e-mail
            supplied by the application or an index in a data table row and an e-mail template with
            which to merge this data row.</para>
            <para>A multiple e-mails job is a task to perform mail merge over multiple data table rows
            with an e-mail template. Such job will be split into multiple smaller jobs (one per data row)
            during processing.</para>
            <para>Once <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> queue has been populated (with <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/> method and its overloads),
            the developer can start processing jobs. To send the resulting e-mails out,
            call <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method. To make the resulting e-mails be submitted
            to MailBee Message Queue or IIS SMTP pickup folder, use <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method.</para>
            <para>Once jobs processing has been started, jobs which involve processing a single e-mail (single-message jobs) are taken from <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            one by one and moved into <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection. If the particular job involves processing multiple e-mails (multi-job),
            MailBee "extracts" a new job from the multi-job and places the newly created job into
            <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection. The multi-job remains in <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> collection but the data
            row index assigned to the newly created job is removed from the internal pending data rows list of the multi-job.
            This process repeats itself until only a single data row index is left in the multi-job, and this makes it a single-message job.
            Finally, it will be moved into <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection just like any other simple job.</para>
            <para>Once processing of a job is finished, it's moved from <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> into <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> or
            <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections. Mail merge jobs which were split into simple jobs during processing are NOT assembled
             back into a single object. This allows the developer to analyze the mailing process results on per e-mail level.</para>
            <para>If some jobs failed during the processing and ended up in <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collection,
            they can be added back to <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> queue using <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.JobsRunning">
            <summary>
            Gets the list of e-mail tasks being processed right now.
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>
            </summary>
            <value>The list of jobs currently being processed.</value>
            <remarks>
            <para>Jobs processing starts when the application calls such methods as <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>,
            <see cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/>, <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>, or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>.</para>
            <para>Jobs are processed in the following order:
            <list type="bullet">
            <item><description>Jobs are taken one by one from <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> and placed into <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection (for mail-merge jobs,
            see details in <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> topic)</description></item>
            <item><description>During processing, jobs stay in <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/></description></item>
            <item><description>When a particular job has finished processing, it gets to <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> if processed
            successfully or into <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> if the e-mail message associated with this job was not sent (or not submitted to the pickup folder
            in the case of <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method)
            </description></item>
            </list></para>
            <para>By default, multi-thread mode is off (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is 1), so that only 1 job
            is processed per moment and number of items in <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> never exceeds 1.</para>
            <note>The application can monitor <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection only while any method which processes jobs is running.
            Once job processing finishes, <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> will always be empty.
            To monitor <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> and other job collections directly during job processing
            (i.e. not waiting until job processing completes), subscribe to <see cref="T:MailBee.SmtpMail.Smtp"/> class events, or
            start jobs processing with <see cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/> method, or both. To synchronize access to these
            collections in multi-thread environment, use <see cref="P:MailBee.SmtpMail.Smtp.JobsSyncRoot"/> property.
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.JobsFailed">
            <summary>
            Gets the list of e-mail tasks failed during processing.
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/>
            </summary>
            <value>The list of jobs failed during processing.</value>
            <remarks>
            <para>During jobs processing, the developer can examine this collection to early detect problems
            with sending e-mails (or submitting them into the pickup folder). Or, the developer can also examine
            this collection after the processing has been finished, to check the results of the mailing.</para>
            <para>To put failed jobs back into the task list for processing, the developer can use
            <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs"/> method.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.JobsSuccessful">
            <summary>
            Gets the list of successfully processed e-mail tasks.
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>
            </summary>
            <value>The list of the jobs that were processed without any errors.</value>
            <remarks>
            The developer can use this property to determine which e-mails have been successfully sent or submitted to the pickup folder.
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.MaxThreadCount">
            <summary>
            Gets or sets the maximum number of threads MailBee may create during send mail
            operations.
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            </summary>
            <value>An integer value specifying the maximum number of threads MailBee may create
            during send mail operations, or -1 which specifies the number of threads is not limited.
            The default value is 1 (i.e. multi-threading is off).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is zero.</exception>
            <remarks>Multi-threading may greatly increase performance of send bulk mail (mail merge) and
            direct send operations (sending directly to recipients' SMTP servers through MX lookup). For instance, if the message
            is addressed to 5 recipients on the different domains (and therefore 5 SMTP connections
            must be made), the component can submit the message to all 5 SMTP servers simultaneously.
            <note type="caution">Some methods and properties of <see cref="T:MailBee.SmtpMail.Smtp"/> component cannot be used in multi-thread mode.
            For instance, if there are 3 simultaneous SMTP connections opened, it's not possible to
            determine for which SMTP connection <see cref="M:MailBee.SmtpMail.Smtp.GetServerResponse"/> method should
            return the response. In multi-thread mode, the developer should use <see cref="T:MailBee.SmtpMail.Smtp"/>
            class events in order to track progress of operations. In multi-thread mode, <see cref="P:MailBee.SmtpMail.Smtp.IsSmtpContext"/>
            always returns <b>false</b>.</note>
            <para>The maximum number of threads MailBee can utilize is 60. Threads are taken from
            <see cref="T:System.Threading.ThreadPool"/>.</para>
            <note>If logging SMTP session into a file is enabled (<see cref="P:MailBee.Logger.Enabled"/>
            property of <see cref="P:MailBee.SmtpMail.Smtp.Log"/> object is <b>true</b>), it's recommended to
            include context information into the log when multi-thread mode is used. The
            developer can use <see cref="F:MailBee.LogFormatOptions.AddContextInfo"/> flag for this purpose. The sample code
            in the bottom of this page demonstrates how this option can be used.
            If context information was not added, the log file would be more difficult to read and analyze.</note>
            </remarks>
            <example>
            <para>This sample sends message using MX lookup (no SMTP relay server is used),
            spawning as many threads as required (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is -1). The message contains the following recipients:
            <i>user1@domain-a.com, user2@domain-a.com, user1@domain-b.com, user1@domain-c.com</i>.
            Thus, the message must be sent to SMTP servers of 3 domains: <i>domain-a.com, domain-b.com, domain-c.com</i>
            Since the maximum number of threads is not limited, the component will create 3 threads
            in this case.</para>
            <para>The <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer"/> event is used to track submission
            of the message to each of 3 domains. If the message is successfully delivered to SMTP
            servers of all 3 domains, this event will occur 3 times total.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageSubmittedToServer event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageSubmittedToServer(
            		<span style="color: blue;">object</span> sender, SmtpMessageSubmittedToServerEventArgs e)
            	{
            		<span style="color: green;">// Show all recipients which were accepted by SMTP server. This event </span>
            		<span style="color: green;">// is raised for every recipient domain which accepted at least one </span>
            		<span style="color: green;">// recipient. As for the current sample, this event will occur 3 times </span>
            		<span style="color: green;">// if each domain's SMTP server accepted at least one recipient.</span>
            		<span style="color: blue;">foreach</span> (EmailAddress address <span style="color: blue;">in</span> e.AcceptedRecipients)
            		{
            			Console.WriteLine("Message sent to " + address.Email);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Enable logging of send mail session into a file.</span>
            		<span style="color: green;">// Context information will be added into the log as well.</span>
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Filename = @"C:\log.txt";
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Get DNS servers for MX lookup from the config file </span>
            		<span style="color: green;">// or operating system settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Set sender.</span>
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            
            		<span style="color: green;">// Set recipients (we specify multiple recipient domains </span>
            		<span style="color: green;">// to demonstrate effect of multi-threading).</span>
            		mailer.To.AsString = "C.J. Smith &lt;user1@domain-a.com&gt;, " +
            			"\"Kathy Long\" &lt;user2@domain-a.com&gt;, " +
            			"Bob &lt;user1@domain-b.com&gt;, user1@domain-c.com";
            
            		<span style="color: green;">// Set message body and subject.</span>
            		mailer.Subject = "Annual report";
            		mailer.BodyHtmlText = "&lt;html&gt;That's it.&lt;/html&gt;";
            
            		<span style="color: green;">// Allow MailBee to create as many threads as required </span>
            		<span style="color: green;">// to send mail to all recipient domains simultaneously.</span>
            		mailer.MaxThreadCount = -1;
            
            		<span style="color: green;">// Subscribe to the MessageSubmittedToServer event.</span>
            		mailer.MessageSubmittedToServer +=
            			<span style="color: blue;">new</span> SmtpMessageSubmittedToServerEventHandler(OnMessageSubmittedToServer);
            
            		<span style="color: green;">// Send it!</span>
            		mailer.Send();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageSubmittedToServer event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageSubmittedToServer( _
            		<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSubmittedToServerEventArgs)
            		<span style="color: green;">' Show all recipients which were accepted by SMTP server. This event </span>
            		<span style="color: green;">' is raised for every recipient domain which accepted at least one </span>
            		<span style="color: green;">' recipient. As for the current sample, this event will occur 3 times </span>
            		<span style="color: green;">' if each domain's SMTP server accepted at least one recipient.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> address <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> e.AcceptedRecipients
            			Console.WriteLine("Message sent to " &amp; address.Email)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Enable logging of send mail session into a file.</span>
            		<span style="color: green;">' Context information will be added into the log as well.</span>
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Filename = "C:\log.txt"
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Get DNS servers for MX lookup from the config file </span>
            		<span style="color: green;">' or operating system settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Set sender.</span>
            		mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            
            		<span style="color: green;">' Set recipients (we specify multiple recipient domains </span>
            		<span style="color: green;">' to demonstrate effect of multi-threading).</span>
            		mailer.To.AsString = "C.J. Smith &lt;user1@domain-a.com&gt;, " &amp; _
            			" ""Kathy Long"" &lt;user2@domain-a.com&gt;, " &amp; _
            			"Bob &lt;user1@domain-b.com&gt;, user1@domain-c.com"
            
            		<span style="color: green;">' Set message body and subject.</span>
            		mailer.Subject = "Annual report"
            		mailer.BodyHtmlText = "&lt;html&gt;That's it.&lt;/html&gt;"
            
            		<span style="color: green;">' Allow MailBee to create as many threads as required </span>
            		<span style="color: green;">' to send mail to all recipient domains simultaneously.</span>
            		mailer.MaxThreadCount = -1
            
            		<span style="color: green;">' Subscribe to the MessageSubmittedToServer event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSubmittedToServer, <span style="color: blue;">AddressOf</span> OnMessageSubmittedToServer
            
            		<span style="color: green;">' Send it!</span>
            		mailer.Send()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Conversion8BitTo7bit">
            <summary>
            Gets or sets if (and how) the component should perform 8bit-to-7bit conversion of the message
            data if the given SMTP server does not support transmission of 8bit data but the message
            does contain such data.
            </summary>
            <value>A <see cref="T:MailBee.SmtpMail.Smtp8bitDataConversion"/> specifying how the component should perform
            8bit-to-7bit conversion of the message data if the given SMTP server does not support
            transmitting 8bit data but the message does contain such data. The default value
            is <see cref="F:MailBee.SmtpMail.Smtp8bitDataConversion.DoNothing"/> (no 8bit-to-7bit conversion will be
            made).</value>
            <remarks>
            Nowdays, most SMTP servers do not expose problems with 8bit-to-7bit conversions, and there is
            no practical need to change the default value of this property.
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.DeliveryNotification">
            <summary>
            Provides access to properties which control when and how ESMTP Delivery Status Notification
            messages will be sent to the message sender.
            </summary>
            <value>The <see cref="T:MailBee.SmtpMail.DeliveryNotificationOptions"/> object containing properties
            and methods which allow the developer to specify ESMTP Delivery Status Notification (DSN)
            settings.</value>
            <remarks>DSN is a better alternative to <see cref="P:MailBee.Mime.MailMessage.ConfirmReceipt">MailMessage.ConfirmReceipt</see>
            since most mail servers support ESMTP DSN extension rather than Return-Receipt-To message header (which is set by
            <see cref="P:MailBee.Mime.MailMessage.ConfirmReceipt">MailMessage.ConfirmReceipt</see> property).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.DirectSendDefaults">
            <summary>
            Provides access to the default SMTP server settings to be used when connecting to
            SMTP servers discovered by MailBee via DNS MX lookup.
            </summary>
            <value>The <see cref="T:MailBee.SmtpMail.DirectSendServerConfig"/> object containing
            the default SMTP server settings to be used when connecting to
            SMTP servers discovered via DNS MX lookup (in direct send mode).</value>
            <remarks>This property allows the developer to specify SMTP settings for SMTP servers
            which are discovered by MailBee via DNS MX lookup in direct send mode (they are also called
            <i>SMTP MX</i> servers, as opposed to <i>SMTP relay</i> servers which reside in
            <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection).</remarks>
            <example>The statement below demonstrates now to increase SMTP connection
            timeout value. This is useful if some SMTP MX servers discovered during DNS MX lookup are
            so slow that they do not always respond during the default timeout interval (20 seconds).
            In this code, the timeout value is set to 60 seconds. It's assumed <c>mailer</c>
            is an instance of <see cref="T:MailBee.SmtpMail.Smtp"/> class.
            <code lang="C#">
            mailer.DirectSendDefaults.Timeout = 60000;
            </code>
            <code lang="Visual Basic">
            mailer.DirectSendDefaults.Timeout = 60000
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Message">
            <summary>
            Gets or sets the mail message which will be sent by the component on <see cref="M:MailBee.SmtpMail.Smtp.Send"/>
            method call.
            </summary>
            <value>The <see cref="T:MailBee.Mime.MailMessage"/> object representing the mail message
            which will be sent by the component on <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method call.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>The developer can also use <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property to access those methods
            and properties of the message to be sent which are not available in <see cref="T:MailBee.SmtpMail.Smtp"/>
            class itself. For instance, <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/> method
            is not available in <see cref="T:MailBee.SmtpMail.Smtp"/> class, and must be called as
            <c>Smtp.Message.LoadBodyText(parameters)</c>.</para>
            <para>Some most often used members of <see cref="T:MailBee.Mime.MailMessage"/> object are
            available through <see cref="T:MailBee.SmtpMail.Smtp"/> class members. For instance, the following
            notations are equivalent: <c>Smtp.Message.BodyHtmlText</c> and <c>Smtp.BodyHtmlText</c>.</para>
            </remarks>
            <example>This sample composes the message by downloading the message body from a web page,
            and sends the message to a relay SMTP server (direct send mode is not used).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Specify SMTP server to use. If your server does not require authentication, </span>
            <span style="color: green;">// just remove last 2 parameters.</span>
            mailer.SmtpServers.Add("smtp.domain.com", "jdoe", "secret");
            
            <span style="color: green;">// Compose the message.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            mailer.To.AsString = "Support Team &lt;support@afterlogic.com&gt;";
            mailer.Subject = "Error on your homepage";
            
            mailer.Message.LoadBodyText("http://www.afterlogic.com", MessageBodyType.Html);
            
            <span style="color: green;">// Send it.</span>
            mailer.Send();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Specify SMTP server to use. If your server does not require authentication, </span>
            <span style="color: green;">' just remove last 2 parameters.</span>
            mailer.SmtpServers.Add("smtp.domain.com", "jdoe", "secret")
            
            <span style="color: green;">' Compose the message.</span>
            mailer.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            mailer.To.AsString = "Support Team &lt;support@afterlogic.com&gt;"
            mailer.Subject = "Error on your homepage"
            
            mailer.Message.LoadBodyText("http://www.afterlogic.com", MessageBodyType.Html)
            
            <span style="color: green;">' Send it.</span>
            mailer.Send()
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.DnsServers">
            <summary>
            Gets the <see cref="T:MailBee.DnsMX.DnsServerCollection"/> object containing the list of DNS servers
            to be used for DNS MX lookup.
            <seealso cref="T:MailBee.DnsMX.DnsServer"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/>
            </summary>
            <value>The <see cref="T:MailBee.DnsMX.DnsServerCollection"/> object containing the list of DNS servers
            to be used for DNS MX lookup in direct send mode (without dedicated SMTP relay server).</value>
            <remarks>
            <para>MailBee can auto-detect which DNS servers are available in the system. The developer
            can use <see cref="M:MailBee.DnsMX.DnsServerCollection.Autodetect"/> method to retrieve
            DNS settings from OS or from the config file.</para>
            <para>If <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection is non-empty and <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/>
            collection is empty, <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method will send messages in direct send mode.
            For each unique domain in the list of the message recipients domains (e.g.
            <i>host1, host2, host3</i> if the recipients are <i>joe@host3, kate@host1, bill@host2, tanya@host3, rob@host2</i>),
            the component makes a query to the DNS server to get the name of the SMTP server
            which accepts mail for the corresponding domain (for instance, <i>mx.host1, smtp.host2, mx-5.large-isp</i>
            for <i>host1, host2, host3</i>), and then sends mail directly to these servers.
            If more than one SMTP server accepts mail for the given domain, the highest-priority
            server will be tried first. If it fails, other servers will be tried accordingly their
            priorities.</para>
            <para>If multiple DNS servers specified, MailBee will distribute load between the available
            DNS servers to improve performance. However, if some servers have lower <see cref="P:MailBee.DnsMX.DnsServer.Priority"/>
            than others, they will not be tried unless primary servers fail. This allows developers
            to implement high-performance and reliable send mail systems.</para>
            <para>If both <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> and <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collections are non-empty,
            MailBee compares priorities of the highest-priority DNS server and the highest-priority SMTP relay server.
            If top prority SMTP server has the same or higher priority than top priority DNS server,
            MailBee will try to send mail using SMTP relay server first. If it fails, DNS MX lookup
            (direct send) will be used. Thus, it's possible to easily combine both "direct send"
            and "send to relay SMTP server" methods to improve reliability of send mail operation
            even further.</para>
            <note>Higher priority value is actually lower integer value. I.e. 0 is top priority while
            999 is the lowest priority.</note>
            <note type="caution">Direct send is often used by spammers. Thus, many mail services do not accept
            mail submissions from unknown hosts. It's recommended to perform direct sending from the domain
            which has at least one MX record assigned. In this case, the hosts with which the application
            is communicating will be able to verify the sender domain and accept the message submission request.</note>
            </remarks>
            <example>
            <para>This sample adds two primary and one backup DNS server into <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection. The mail is then sent to 3 recipients.</para>
            <para>If the primary DNS servers are fine, they both will be used to discover
            SMTP servers accepting mail for the recipients domains. If primary servers fail
            for some reason, the backup server will be tried as well. SMTP relay server is not used.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Add primary servers (top priority). In this sample, they are in </span>
            <span style="color: green;">// the same LAN or intranet where the computer running MailBee is located.</span>
            mailer.DnsServers.Add("192.168.0.1", 0);
            mailer.DnsServers.Add("192.168.0.2", 0);
            
            <span style="color: green;">// Add backup server (low priority). The server from another sub-network </span>
            <span style="color: green;">// (such as company ISP's DNS server) is used. Thus, even if LAN servers </span>
            <span style="color: green;">// fail, DNS MX lookup will still work.</span>
            mailer.DnsServers.Add("11.22.33.44", 10);
            
            <span style="color: green;">// Compose the message.</span>
            mailer.From.AsString = "user@host.com";
            mailer.To.AsString = "abc@company.com, 123@anothercompany.com, xyz@website.com";
            mailer.Subject = "Test message";
            mailer.BodyPlainText = "The message text";
            
            <span style="color: green;">// Send it.</span>
            mailer.Send();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Add primary servers (top priority). In this sample, they are in </span>
            <span style="color: green;">' the same LAN or intranet where the computer running MailBee is located.</span>
            mailer.DnsServers.Add("192.168.0.1", 0)
            mailer.DnsServers.Add("192.168.0.2", 0)
            
            <span style="color: green;">' Add backup server (low priority). The server from another sub-network </span>
            <span style="color: green;">' (such as company ISP's DNS server) is used. Thus, even if LAN servers </span>
            <span style="color: green;">' fail, DNS MX lookup will still work.</span>
            mailer.DnsServers.Add("11.22.33.44", 10)
            
            <span style="color: green;">' Compose the message.</span>
            mailer.From.AsString = "user@host.com"
            mailer.To.AsString = "abc@company.com, 123@anothercompany.com, xyz@website.com"
            mailer.Subject = "Test message"
            mailer.BodyPlainText = "The message text"
            
            <span style="color: green;">' Send it.</span>
            mailer.Send()
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.SmtpServers">
            <summary>
            Gets the <see cref="T:MailBee.SmtpMail.SmtpServerCollection"/> object containing the list of SMTP relay servers
            to be used for sending mail.
            <seealso cref="T:MailBee.SmtpMail.SmtpServer"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            </summary>
            <value>The <see cref="T:MailBee.SmtpMail.SmtpServerCollection"/> object containing the list of SMTP servers
            to be used for sending mail.</value>
            <remarks>
            <para>In order to send mail to an SMTP server, the developer must add it
            to <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection first.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection can contain multiple servers, which allows the
            developer to implement reliable send mail solution. In this case, <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            having the highest priority (i.e. the lowest <see cref="P:MailBee.SmtpMail.SmtpServer.Priority"/> value)
            will be tried first. If it fails, other servers will be tried accordingly their priority values.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection can be used in cooperation with <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection. Depending which collection's top priority server has higher priority than
            another collection's top priority server, MailBee will either try to send to relay SMTP servers
            first and use direct send (through DNS MX lookup) if SMTP relay failed, or try to
            send in direct mode first, and use SMTP relay as a backup. This approach can be used
            if the application is mission-critical, and failures are not allowed.</para>
            </remarks>
            <example>This sample sends a mail message to an SMTP relay server. SMTP authentication
            is enabled, but <see cref="P:MailBee.SmtpMail.SmtpServer.IgnoreLoginFailure"/> is set to <b>true</b>
            to force MailBee to try to send even if authentication fails.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Specify SMTP server to use, and enable SMTP authentication.</span>
            mailer.SmtpServers.Add("smtp.company.com", "john.doe@company.com", "secret");
            
            <span style="color: green;">// Tune some settings of the server just added.</span>
            mailer.SmtpServers[0].IgnoreLoginFailure = <span style="color: blue;">true</span>;
            
            <span style="color: green;">// Compose the message.</span>
            mailer.Message.From.DisplayName = "John Doe";
            mailer.Message.From.Email = "john.doe@company.com";
            mailer.Message.To.Add("Bill Smith", "bill@i-am-bill-smith.com");
            mailer.Subject = "Your order";
            mailer.BodyPlainText = "Purchased item description";
            
            <span style="color: green;">// Send it.</span>
            mailer.Send();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Specify SMTP server to use, and enable SMTP authentication.</span>
            mailer.SmtpServers.Add("smtp.company.com", "john.doe@company.com", "secret")
            
            <span style="color: green;">' Tune some settings of the server just added.</span>
            mailer.SmtpServers(0).IgnoreLoginFailure = <span style="color: blue;">True</span>
            
            <span style="color: green;">' Compose the message.</span>
            mailer.Message.From.DisplayName = "John Doe"
            mailer.Message.From.Email = "john.doe@company.com"
            mailer.Message.To.Add("Bill Smith", "bill@i-am-bill-smith.com")
            mailer.Subject = "Your order"
            mailer.BodyPlainText = "Purchased item description"
            
            <span style="color: green;">' Send it.</span>
            mailer.Send()
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.StopJobsOnError">
             <summary>
             Gets or sets if processing of the jobs must be stopped if an error occurs.
             <seealso cref="M:MailBee.SmtpMail.Smtp.StopJobs"/>
             </summary>
             <value><b>true</b> if processing of the jobs (sending e-mails or submitting them to the pickup folder)
             must be stopped whenever an error which prevents an e-mail from being sent or submitted to the pickup folder occurs; <b>false</b>
             if processing of the jobs must continue regardless of any errors. The default value is <b>false</b>.</value>
             <remarks>
             <para>This property allows the developer to control whether jobs processing should be stopped if an error occurs,
             or this error will be skipped and the jobs processing will be continued.
             </para>
             <para><see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> mode must be set BEFORE calling a method which would start to process jobs
             (such as <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>, <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>, or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>).
             </para>
             <note>If <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> is <b>true</b>, failure to send even a single e-mail will stop the entire process.
             The particular e-mail which could not be sent (or submitted to the pickup folder) will be returned to the pending queue.
             It's possible to resume the stopped process by calling <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> method
             (or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> in the case of submitting to the pickup folder).</note>
             <para>In practice, most applications set <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> to <b>false</b> when
             sending e-mails because it's usually normal that some messages (e.g. 5 from 10000) could not be sent. However,
             when submitting e-mails to the pickup folder rather than sending them, the applications usually
             set <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> to <b>true</b>. This is because submitting to the pickup folder
             is much more reliable operation than sending out. Usually, if an error occurs during submitting to
             the pickup folder, this means the disk is full. It's required to free some space before the application
             can continue.</para>
             <para>The developer can also leave <see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> set to <b>false</b> and stop processing jobs manually
             using <see cref="M:MailBee.SmtpMail.Smtp.StopJobs"/> method. For instance, the developer can use <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/>
             event to keep track of successful and failed messages and call <see cref="M:MailBee.SmtpMail.Smtp.StopJobs"/> if
             number of messages failed one after another exceeded certain threshold. Thus, the application will tolerate
             random failures but stop sending process completely if failures become systematic.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.From">
            <summary>
            Gets or sets <see cref="T:MailBee.Mime.EmailAddress"/> object specifying the message sender.
            </summary>
            <value>The <see cref="T:MailBee.Mime.EmailAddress"/> object representing From: field of the message.</value>
            <remarks>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.From"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</remarks>
            <example>Setting the message sender using different methods.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Method 1: Setting Display Name and E-mail separately.</span>
            mailer.From.DisplayName = "John Doe, Sales Manager";
            mailer.From.Email = "jdoe@domain.com";
            
            <span style="color: green;">// Method 2: Setting From field as string.</span>
            mailer.From.AsString = "\"John Doe, Sales Manager\" &lt;jdoe@domain.com&gt;";
            
            <span style="color: green;">// Method 3: Setting From field as EmailAddress.</span>
            mailer.From = <span style="color: blue;">new</span> EmailAddress("John Doe, Sales Manager", "jdoe@domain.com");
            
            <span style="color: green;">// Method 4: Setting From field using Headers collection.</span>
            mailer.Message.Headers["From"] = "\"John Doe, Sales Manager\" &lt;jdoe@domain.com&gt;";
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Method 1: Setting Display Name and E-mail separately.</span>
            mailer.From.DisplayName = "John Doe, Sales Manager"
            mailer.From.Email = "jdoe@domain.com"
            
            <span style="color: green;">' Method 2: Setting From field as string.</span>
            mailer.From.AsString = """John Doe, Sales Manager"" &lt;jdoe@domain.com&gt;"
            
            <span style="color: green;">' Method 3: Setting From field as EmailAddress.</span>
            mailer.From = <span style="color: blue;">New</span> EmailAddress("John Doe, Sales Manager", "jdoe@domain.com")
            
            <span style="color: green;">' Method 4: Setting From field using Headers collection.</span>
            mailer.Message.Headers("From") = """John Doe, Sales Manager"" &lt;jdoe@domain.com&gt;"
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.To">
            <summary>
            Gets or sets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object specifying To: recipients of the message.
            </summary>
            <value>The <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing To: field of the message.</value>
            <remarks>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.To"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</remarks>
            <example>Setting To: recipients using different methods.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            mailer.To.Add("email@address.com");
            mailer.To.Add("John Doe, Sales Manager", "jdoe@domain.com");
            mailer.To.Add(<span style="color: blue;">new</span> EmailAddress("user@host.com"));
            mailer.To.AsString += "Bill Smith &lt;bsmith@company.com&gt;, kathy@mail.com, \"John Long, Jr.\" &lt;jl@domain.com&gt;";
            
            Console.WriteLine(mailer.To.ToString());
            
            <span style="color: green;">// The output.</span>
            email@address.com, "John Doe, Sales Manager" &lt;jdoe@domain.com&gt;, user@host.com, "Bill Smith" &lt;bsmith@company.com&gt;, kathy@mail.com, "John Long, Jr." &lt;jl@domain.com&gt;
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            mailer.To.Add("email@address.com")
            mailer.To.Add("John Doe, Sales Manager", "jdoe@domain.com")
            mailer.To.Add(<span style="color: blue;">New</span> EmailAddress("user@host.com"))
            mailer.To.AsString += "Bill Smith &lt;bsmith@company.com&gt;, kathy@mail.com, ""John Long, Jr."" &lt;jl@domain.com&gt;"
            
            Console.WriteLine(mailer.To.ToString())
            
            <span style="color: green;">' The output.</span>
            email@address.com, "John Doe, Sales Manager" &lt;jdoe@domain.com&gt;, user@host.com, "Bill Smith" &lt;bsmith@company.com&gt;, kathy@mail.com, "John Long, Jr." &lt;jl@domain.com&gt;
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Cc">
            <summary>
            Gets or sets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object specifying CC: recipients of the message.
            </summary>
            <value>The <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing CC: field (carbon recipients) of the message.</value>
            <remarks>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.Cc"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</remarks>
            <example>Setting CC: recipients using different methods.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            mailer.Cc.AsString = "Bill Smith &lt;bsmith@company.com&gt;, kathy@mail.com, \"John Long, Jr.\" &lt;jl@domain.com&gt;";
            mailer.Cc.Add("email@address.com");
            mailer.Cc.Add("John Doe, Sales Manager", "jdoe@domain.com");
            mailer.Cc.Add(<span style="color: blue;">new</span> EmailAddress("user@host.com"));
            
            Console.WriteLine(mailer.Cc.ToString());
            
            <span style="color: green;">// The output.</span>
            "Bill Smith" &lt;bsmith@company.com&gt;, kathy@mail.com, "John Long, Jr." &lt;jl@domain.com&gt;, email@address.com, "John Doe, Sales Manager" &lt;jdoe@domain.com&gt;, user@host.com
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            mailer.Cc.AsString = "Bill Smith &lt;bsmith@company.com&gt;, kathy@mail.com, ""John Long, Jr."" &lt;jl@domain.com&gt;"
            mailer.Cc.Add("email@address.com")
            mailer.Cc.Add("John Doe, Sales Manager", "jdoe@domain.com")
            mailer.Cc.Add(<span style="color: blue;">New</span> EmailAddress("user@host.com"))
            
            Console.WriteLine(mailer.Cc.ToString())
            
            <span style="color: green;">' The output.</span>
            "Bill Smith" &lt;bsmith@company.com&gt;, kathy@mail.com, "John Long, Jr." &lt;jl@domain.com&gt;, email@address.com, "John Doe, Sales Manager" &lt;jdoe@domain.com&gt;, user@host.com
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Bcc">
            <summary>
            Gets or sets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object specifying BCC: recipients of the message.
            </summary>
            <value>The <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing BCC: field (blind-carbon recipients) of the message.</value>
            <remarks>
            This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.Bcc"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.
            <note>By default, BCC header is not included into the message being sent. BCC
            recipients still receive the message, but other recipients have no way of knowing this.
            If required, the developer can suppress removing BCC header on mail send operation by setting
            <see cref="P:MailBee.Mime.MessageBuilderConfig.RemoveBccOnSend">Mime.MailMessage.Builder.RemoveBccOnSend</see> property to <b>false</b>.</note>
            </remarks>
            <example>Setting BCC: recipients using different methods. Since BCC recipients
            do not appear in the message header, it makes no sense to include recipients display names into BCC
            (unless <see cref="P:MailBee.Mime.MessageBuilderConfig.RemoveBccOnSend"/> is <b>false</b>).
            If display name is included in BCC e-mail address, it's just ignored.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            mailer.Bcc.AsString = "&lt;bsmith@company.com&gt;, kathy@mail.com";
            mailer.Bcc.Add("email@address.com");
            mailer.Bcc.Add(<span style="color: blue;">new</span> EmailAddress("user@host.com"));
            
            Console.WriteLine(mailer.Bcc.ToString());
            
            <span style="color: green;">// The output.</span>
            &lt;bsmith@company.com&gt;, kathy@mail.com, email@address.com, user@host.com
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            mailer.Bcc.AsString = "&lt;bsmith@company.com&gt;, kathy@mail.com"
            mailer.Bcc.Add("email@address.com")
            mailer.Bcc.Add(<span style="color: blue;">New</span> EmailAddress("user@host.com"))
            
            Console.WriteLine(mailer.Bcc.ToString())
            
            <span style="color: green;">' The output.</span>
            &lt;bsmith@company.com&gt;, kathy@mail.com, email@address.com, user@host.com
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.ReplyTo">
            <summary>
            Gets or sets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object specifying e-mail addresses
            to which the replies to this message should be sent.
            </summary>
            <value>The <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing Reply-To: field of the message.</value>
            <remarks>
            <para>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.ReplyTo"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</para>
            <para>If this property is not set, most mail programs will send replies to From: address.</para></remarks>
            <example>Specifying 2 e-mail addresses in Reply-To field.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            mailer.ReplyTo.AsString = "Bill Smith &lt;bsmith@company.com&gt;";
            mailer.ReplyTo.Add("John Doe, Sales Manager", "jdoe@domain.com");
            
            Console.WriteLine(mailer.ReplyTo.ToString());
            
            <span style="color: green;">// The output.</span>
            "Bill Smith" &lt;bsmith@company.com&gt;, "John Doe, Sales Manager" &lt;jdoe@domain.com&gt;
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            mailer.ReplyTo.AsString = "Bill Smith &lt;bsmith@company.com&gt;"
            mailer.ReplyTo.Add("John Doe, Sales Manager", "jdoe@domain.com")
            
            Console.WriteLine(mailer.ReplyTo.ToString())
            
            <span style="color: green;">' The output.</span>
            "Bill Smith" &lt;bsmith@company.com&gt;, "John Doe, Sales Manager" &lt;jdoe@domain.com&gt;
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Subject">
            <summary>
            Gets or sets the subject of the message.
            </summary>
            <value>The string containing the subject of the message.</value>
            <remarks>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.Subject"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</remarks>
            <example>Specifying message subject in normal way and in encoded form (useful
            if the subject string contains non-US characters).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// "Hello" in English.</span>
            mailer.Subject = "Hello";
            
            <span style="color: green;">// "Hello" in Simplified Chinese (gb2312 charset).</span>
            mailer.Subject = MailMessage.GetEncodedHeaderValue("Subject", "&amp;#20320;&amp;#22909;",
            	System.Text.Encoding.GetEncoding("gb2312"), HeaderEncodingOptions.Base64);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' "Hello" in English.</span>
            mailer.Subject = "Hello"
            
            <span style="color: green;">' "Hello" in Simplified Chinese (gb2312 charset).</span>
            mailer.Subject = MailMessage.GetEncodedHeaderValue("Subject", "&amp;#20320;&amp;#22909;", _
            	System.Text.Encoding.GetEncoding("gb2312"), HeaderEncodingOptions.Base64)
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.Charset">
            <summary>
            Gets or sets charset of the message.
            </summary>
            <value>The name of the character set the message is composed with. The default value
            is an empty string.</value>
            <remarks>
            <para>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.Charset"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</para>
            <para>If no charset is specified in the message, mail reader program of the
            message recipient will use the default system charset to display the message.</para>
            <note>Some mail servers add charset setting to the message if it has no charset
            specified. This may cause the message to be displayed incorrectly. To avoid this,
            always specify <see cref="P:MailBee.SmtpMail.Smtp.Charset"/> property if the message contains non-US characters.</note>
            </remarks>
            <example>Setting Windows-1251 charset for the message composed in Russian.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Indicate the message uses Cyrillic charset.</span>
            mailer.Charset = "windows-1251";
            
            <span style="color: green;">// "The message subject" in Russian (note that using MailMessage.GetEncodedHeaderValue </span>
            <span style="color: green;">// is not necessary, since charset is set for entire message in Charset property).</span>
            <span style="color: green;">// MailMessage.GetEncodedHeaderValue is required when charset of the message </span>
            <span style="color: green;">// differs from charset of the header value.</span>
            mailer.Subject = "&amp;#1058;&amp;#1077;&amp;#1084;&amp;#1072;&amp;#32;&amp;#1089;&amp;#1086;&amp;#1086;&amp;#1073;&amp;#1097;&amp;#1077;&amp;#1085;&amp;#1080;&amp;#1103;";
            
            <span style="color: green;">// "The message body" in Russian.</span>
            mailer.BodyPlainText = "&amp;#1058;&amp;#1077;&amp;#1083;&amp;#1086;&amp;#32;&amp;#1089;&amp;#1086;&amp;#1086;&amp;#1073;&amp;#1097;&amp;#1077;&amp;#1085;&amp;#1080;&amp;#1103;";
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Indicate the message uses Cyrillic charset.</span>
            mailer.Charset = "windows-1251"
            
            <span style="color: green;">' "The message subject" in Russian (note that using MailMessage.GetEncodedHeaderValue </span>
            <span style="color: green;">' is not necessary, since charset is set for entire message in Charset property).</span>
            <span style="color: green;">' MailMessage.GetEncodedHeaderValue is required when charset of the message </span>
            <span style="color: green;">' differs from charset of the header value.</span>
            mailer.Subject = "&amp;#1058;&amp;#1077;&amp;#1084;&amp;#1072;&amp;#32;&amp;#1089;&amp;#1086;&amp;#1086;&amp;#1073;&amp;#1097;&amp;#1077;&amp;#1085;&amp;#1080;&amp;#1103;"
            
            <span style="color: green;">' "The message body" in Russian.</span>
            mailer.BodyPlainText = "&amp;#1058;&amp;#1077;&amp;#1083;&amp;#1086;&amp;#32;&amp;#1089;&amp;#1086;&amp;#1086;&amp;#1073;&amp;#1097;&amp;#1077;&amp;#1085;&amp;#1080;&amp;#1103;"
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.BodyPlainText">
            <summary>
            Gets or sets plain-text version of the message body.
            </summary>
            <value>A string containing the message body as plain-text.</value>
            <remarks>
            <para>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</para>
            <para>The developer can get plain-text version of the message body
            from the HTML version by either calling
            <see cref="M:MailBee.Mime.MailMessage.MakePlainBodyFromHtmlBody"/> of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object
            or by setting <see cref="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainMode"/> property of
            <see cref="P:MailBee.Mime.MailMessage.Builder"/> object
            to <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.IfHtml"/> value.</para>
            <para>By default, the message body is encoded using
            <see cref="F:MailBee.Mime.MailTransferEncoding.QuotedPrintable"/> content transfer encoding.
            If required, the developer can change this using <see cref="P:MailBee.Mime.MailMessage.MailTransferEncodingPlain"/>
            property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</para>
            </remarks>
            <example>Specifying plain-text body of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Specify plain-text body using multi-line string constant.</span>
            mailer.BodyPlainText = @"Multi-line body text
            Some more text here
            
            Signature";
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Specify plain-text body using multi-line string constant.</span>
            mailer.BodyPlainText = "Multi-line body text" &amp; vbCrLf &amp; _
            	"Some more text here" &amp; vbCrLf &amp; vbCrLf &amp; _
            	"Signature"
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.Smtp.BodyHtmlText">
            <summary>
            Gets or sets HTML version of the message body.
            </summary>
            <value>A string containing the message body as HTML.</value>
            <remarks>
            <para>This property is equivalent to <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> property of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</para>
            <para>The developer can import HTML content (and, optionally, linked images, style-sheets, etc)
            from an HTML file or a web page using <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/>
            method of <see cref="P:MailBee.SmtpMail.Smtp.Message"/> object.</para>
            </remarks>
            <example>Specifying HTML body of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            <span style="color: green;">// Specify HTML body using multi-line string constant.</span>
            mailer.BodyHtmlText = @"&lt;html&gt;
            &lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;
            &lt;body&gt;The text of the message. The next word is in &lt;b&gt;bold&lt;/b&gt;.&lt;/body&gt;;
            &lt;/html&gt;";
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            <span style="color: green;">' Specify HTML body using multi-line string constant.</span>
            mailer.BodyHtmlText = "&lt;html&gt;" &amp; vbCrLf &amp; _
            	"&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;" &amp; vbCrLf &amp; _
            	"&lt;body&gt;The text of the message. The next word is in &lt;b&gt;bold&lt;/b&gt;.&lt;/body&gt;" &amp; vbCrLf &amp; _
            	"&lt;/html&gt;"
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.ErrorOccurred">
            <summary>
            Occurs when the <see cref="T:MailBee.MailBeeException"/> is thrown.
            </summary>
            <remarks>
            <para>When MailBee encounters any error, it throws the <see cref="T:MailBee.MailBeeException"/>.
            However, MailBee can trap this exception if the error was not critical. For instance,
            if connecting to certain SMTP server fails but another server is available in reserve,
            the <see cref="T:MailBee.MailBeeException"/> will be thrown and then trapped by MailBee itself,
            but no exception will be thrown to the application code. Such errors are called <i>warnings</i>.</para>
            <para><see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event allows the developer to track both warnings and critical
            errors because it's raised for a particular exception even if MailBee will trap this
            exception and do not pass it to the application code.</para>
            </remarks>
            <example>This sample logs all the warnings and critical errors issued during the SMTP session into the console.
            In this sample, the connection attempt is made twice (high priority and low priority
            servers are used). Connection to high-priority SMTP server fails (the server name is invalid)
            so <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event is raised, but no exception is thrown to the application
            code. Then, MailBee attempts to connect to the backup server. If this attempt fails too,
            <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> event is raised again (now <see cref="P:MailBee.ErrorEventArgs.IsFinalError"/>
            will be <b>true</b> to indicate the error is not a warning), and the exception is thrown to
            the application code.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: green;">// Check whether the error is critical or not.</span>
            		<span style="color: blue;">if</span> (e.IsFinalError)
            		{
            			<span style="color: green;">// Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">// After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">// throw the same exception to the application code.</span>
            			Console.WriteLine("CRITICAL ERROR: " + e.Reason.Message);
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">// After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">// try another methods to accomplish the current task.</span>
            			Console.WriteLine("WARNING: " + e.Reason.Message);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify top priority server with invalid name.</span>
            		mailer.SmtpServers.Add("invalid-host");
            
            		<span style="color: green;">// Specify backup server with valid name.</span>
            		mailer.SmtpServers.Add("smtp.domain.com", 25, 1);
            
            		<span style="color: green;">// Subscribe to the ErrorOccurred event.</span>
            		mailer.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		<span style="color: green;">// Connect to the servers.</span>
            		mailer.Connect();
            
            		Console.WriteLine("Connected to " +
            			mailer.SmtpServers[mailer.GetCurrentSmtpServerIndex()].Name);
            
            		<span style="color: green;">// Close the connection.</span>
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: green;">' Check whether the error is critical or not.</span>
            		<span style="color: blue;">If</span> e.IsFinalError <span style="color: blue;">Then</span>
            			<span style="color: green;">' Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">' After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">' throw the same exception to the application code.</span>
            			Console.WriteLine("CRITICAL ERROR: " &amp; e.Reason.Message)
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">' After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">' try another methods to accomplish the current task.</span>
            			Console.WriteLine("WARNING: " &amp; e.Reason.Message)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify top priority server with invalid name.</span>
            		mailer.SmtpServers.Add("invalid-host")
            
            		<span style="color: green;">' Specify backup server with valid name.</span>
            		mailer.SmtpServers.Add("smtp.domain.com", 25, 1)
            
            		<span style="color: green;">' Subscribe to the ErrorOccurred event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: green;">' Connect to the servers.</span>
            		mailer.Connect()
            
            		Console.WriteLine("Connected to " &amp; _
            			mailer.SmtpServers(mailer.GetCurrentSmtpServerIndex()).Name)
            
            		<span style="color: green;">' Close the connection.</span>
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.LogNewEntry">
            <summary>
            Occurs when an entry is written into the log file (or into the memory buffer
            if <see cref="P:MailBee.SmtpMail.Smtp.Log">Smtp.Log</see>.<see cref="P:MailBee.Logger.MemoryLog"/> is <b>true</b>).
            </summary>
            <remarks>
            <para>This event is raised only if logging is turned on (<see cref="P:MailBee.Logger.Enabled"/> is <b>true</b>).</para>
            <para>MailBee raises this event BEFORE adding the entry into the the log. Since many
            properties of <see cref="P:MailBee.LogNewEntryEventArgs.NewEntry"/> object are editable, the
            developer can change the data MailBee will put into the log or even cancel logging the current
            entry at all. This may be useful the developer wishes to log only those entires
            which meet certain criteria.</para>
            <note>Entries added by the developer (through <see cref="M:MailBee.Logger.WriteLine(System.String)"/>
            method call) do not cause this event to be raised. Thus, it's safe to add user-defined log entries
            even in the <see cref="E:MailBee.SmtpMail.Smtp.LogNewEntry"/> event handler itself. This does not cause endless recursion which
            would otherwise occur if <see cref="M:MailBee.Logger.WriteLine(System.String)"/> method called in
            <see cref="E:MailBee.SmtpMail.Smtp.LogNewEntry"/> event handler raised this event again.</note>
            </remarks>
            <example>This sample enables logging the SMTP session into a file, and logs only
            those entries which indicate any data traffic between the client (MailBee) and the server.
            Other entries are discarded, and user-defined log entry is added instead.
            The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// LogNewEntry event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLogNewEntry(<span style="color: blue;">object</span> sender, LogNewEntryEventArgs e)
            	{
            		<span style="color: blue;">if</span> ( !(e.NewEntry.MessageType == LogMessageType.Recv ||
            			e.NewEntry.MessageType == LogMessageType.Send) )
            		{
            			<span style="color: green;">// Do not add this entry if it does not indicate any data transfer,</span>
            			<span style="color: green;">// and put our own message instead.</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">false</span>;
            			((Smtp)sender).Log.WriteLine("UNWANTED MESSAGE REMOVED");
            
            			<span style="color: green;">// Note: we could produce similar results just by writing new values </span>
            			<span style="color: green;">// into MessageText and MessageComment properties of the original entry.</span>
            			<span style="color: green;">// The code above uses Log.WriteLine method just to show how to add new </span>
            			<span style="color: green;">// entries in the event handler itself. You may comment 2 code lines above </span>
            			<span style="color: green;">// and uncomment 2 code lines below to use the alternate approach.</span>
            			<span style="color: green;">//</span>
            			<span style="color: green;">// e.NewEntry.MessageText = "UNWANTED MESSAGE REMOVED";</span>
            			<span style="color: green;">// e.NewEntry.MessageComment = string.Empty;</span>
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		mailer.SmtpServers.Add("smtp.domain.com");
            
            		<span style="color: green;">// Enable logging the SMTP session into a file.</span>
            		mailer.Log.Enabled = <span style="color: blue;">true</span>;
            		mailer.Log.Filename = @"C:\Temp\log.txt";
            		mailer.Log.Format = LogFormatOptions.AddContextInfo;
            		mailer.Log.Clear();
            
            		<span style="color: green;">// Subscribe to the LogNewEntry event.</span>
            		mailer.LogNewEntry += <span style="color: blue;">new</span> LogNewEntryEventHandler(OnLogNewEntry);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		mailer.Connect();
            		mailer.Hello();
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' LogNewEntry event handler</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLogNewEntry(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LogNewEntryEventArgs)
            		<span style="color: green;">' Check whether the error is critical or not.</span>
            		<span style="color: blue;">If</span> e.NewEntry.MessageType &lt;&gt; LogMessageType.Recv <span style="color: blue;">And</span> e.NewEntry.MessageType &lt;&gt; LogMessageType.Send <span style="color: blue;">Then</span>
            			<span style="color: green;">' Do not add this entry if it does not indicate any data transfer,</span>
            			<span style="color: green;">' and put our own message instead.</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">False</span>
            			sender.Log.WriteLine("UNWANTED MESSAGE REMOVED")
            
            			<span style="color: green;">' Note: we could produce similar results just by writing new values </span>
            			<span style="color: green;">' into MessageText and MessageComment properties of the original entry.</span>
            			<span style="color: green;">' The code above uses Log.WriteLine method just to show how to add new </span>
            			<span style="color: green;">' entries in the event handler itself. You may comment 2 code lines above </span>
            			<span style="color: green;">' and uncomment 2 code lines below to use the alternate approach.</span>
            			<span style="color: green;">'</span>
            			<span style="color: green;">' e.NewEntry.MessageText = "UNWANTED MESSAGE REMOVED"</span>
            			<span style="color: green;">' e.NewEntry.MessageComment = String.Empty</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		mailer.SmtpServers.Add("smtp.domain.com")
            
            		<span style="color: green;">' Enable logging the SMTP session into a file.</span>
            		mailer.Log.Enabled = <span style="color: blue;">True</span>
            		mailer.Log.Filename = "C:\Temp\log.txt"
            		mailer.Log.Format = LogFormatOptions.AddContextInfo
            		mailer.Log.Clear()
            
            		<span style="color: green;">' Subscribe to the LogNewEntry event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.LogNewEntry, <span style="color: blue;">AddressOf</span> OnLogNewEntry
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		mailer.Connect()
            		mailer.Hello()
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.DataReceived">
            <summary>
            Occurs when data is received from the network.
            <seealso cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/>
            </summary>
            <remarks>
            <para>Usually, this event is raised when the component receives a response from an SMTP server.
            If direct send mode is used, DNS responses containing MX lookup results will also be returned.
            If POP-before-SMTP authentication is used, POP3 responses will be returned as well.
            The developer can use <see cref="P:MailBee.DataTransferEventArgs.Protocol"/> property to determine
            the protocol of the received response data.</para>
            <para>Unlike <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> event, occurrence of this event
            indicates receiving of already decrypted data. For instance, if the transmission channel
            is SSL-encrypted, <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> event indicates receiving
            of encrypted data, while <see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> will be raised later
            (after decrypting the data). If the transmission channel is not encrypted or otherwise
            scrambled, <see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> and <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> are equivalent.</para>
            <note>This event is also raised when zero-length data is received from the server.
            When a server sends zero-length data portion, it means the connection was closed.</note>
            </remarks>
            <example>This sample prints all the data received from the server during SMTP session
            into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Ignore DNS traffic.</span>
            		<span style="color: blue;">if</span> (e.Protocol == TopLevelProtocolType.Smtp)
            		{
            			Console.WriteLine("[" + System.Text.Encoding.Default.GetString(e.Data) + "]");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the DataReceived event.</span>
            		mailer.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            
            		<span style="color: green;">// Produce some DNS and SMTP traffic by performing direct send of empty message.</span>
            		mailer.Send("sender@domain.com", "recipient@domain.com");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' DataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Ignore DNS traffic.</span>
            		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
            			Console.WriteLine("[" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the DataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            
            		<span style="color: green;">' Produce some DNS and SMTP traffic by performing direct send of empty message.</span>
            		mailer.Send("sender@domain.com", "recipient@domain.com")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.DataSent">
            <summary>
            Occurs when data is sent to the network.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/>
            <seealso cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/>
            </summary>
            <para>Usually, this event is raised when the component sends a request to an SMTP server.
            If direct send mode or POP-before-SMTP authentication is used, sending DNS queries or requests to a POP3 server
            will also cause this event to occur. The developer can use <see cref="P:MailBee.DataTransferEventArgs.Protocol"/>
            property to determine the protocol of the data just sent.</para>
            <remarks>Unlike <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> event, occurrence of this event
            indicates sending unencrypted data only. For instance, if the transmission channel
            is SSL-encrypted, <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> event indicates sending
            of any portion of encrypted data, while <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> will be raised later
            to indicate the entire request (which was previously sent as one or several encrypted
            data chunks) has been sent. If the transmission channel is not encrypted or otherwise
            scrambled, <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> and <see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> are equivalent.</remarks>
            <para>Unlike <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> event, <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/>
            will be raised when any data is sent, while <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/>
            event is raised only when message header or entire message data is sent.</para>
            <example>This sample prints all the data sent to the server during SMTP session
            into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Ignore POP3 traffic.</span>
            		<span style="color: blue;">if</span> (e.Protocol == TopLevelProtocolType.Smtp)
            		{
            			Console.WriteLine("[" + System.Text.Encoding.Default.GetString(e.Data) + "]");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify SMTP server and enable POP-before-SMTP authentication.</span>
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("mail.domain.com");
            		server.AuthPopBeforeSmtp = <span style="color: blue;">true</span>;
            		server.AccountName = "jdoe";
            		server.Password = "secret";
            		mailer.SmtpServers.Add(server);
            
            		<span style="color: green;">// Subscribe to the DataSent event.</span>
            		mailer.DataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataSent);
            
            		<span style="color: green;">// Produce some POP3 and SMTP traffic by connecting in POP-before-SMTP mode.</span>
            		mailer.Connect();
            		mailer.Hello();
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' DataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Ignore POP3 traffic.</span>
            		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
            			Console.WriteLine("[" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify SMTP server and enable POP-before-SMTP authentication.</span>
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer
            		server = <span style="color: blue;">New</span> SmtpServer("mail.domain.com")
            		server.AuthPopBeforeSmtp = <span style="color: blue;">True</span>
            		server.AccountName = "jdoe"
            		server.Password = "secret"
            		mailer.SmtpServers.Add(server)
            
            		<span style="color: green;">' Subscribe to the DataSent event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.DataSent, <span style="color: blue;">AddressOf</span> OnDataSent
            
            		<span style="color: green;">' Produce some POP3 and SMTP traffic by connecting in POP-before-SMTP mode.</span>
            		mailer.Connect()
            		mailer.Hello()
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived">
            <summary>
            Occurs when data is received from the connected socket.
            <seealso cref="E:MailBee.SmtpMail.Smtp.DataReceived"/>
            </summary>
            <remarks>
            <para>If the transmission channel is encrypted, this event will be raised
            when any encrypted chunk of data is received. Thus, this event can be used to
            record the data which is actually received from the network.</para>
            <para>The typical use of this property is to calculate the network traffic
            produced during the SMTP session (including POP3/DNS data if any). SSL encryption increases the length of the
            transmitted data blocks, thus it's more accurate to calculate traffic by counting
            the length of data actually transmitted over the network.</para>
            <para>If the transmission channel is not encrypted or otherwise scrambled, this property
            is equivalent to <see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/>.</para>
            </remarks>
            <example>This sample calculates all incoming traffic from the network during sending
            the message in direct send mode. DNS MX lookup traffic and SMTP traffic are calculated separately,
            and the results are printed into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Total bytes received counters.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytesSmtp = 0;
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytesDns = 0;
            
            	<span style="color: green;">// LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Protocol == TopLevelProtocolType.Smtp)
            		{
            			<span style="color: green;">// Increment SMTP traffic counter.</span>
            			_totalBytesSmtp += e.Data.Length;
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (e.Protocol == TopLevelProtocolType.Dns)
            		{
            			<span style="color: green;">// Increment DNS traffic counter.</span>
            			_totalBytesDns += e.Data.Length;
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the LowLevelDataReceived event.</span>
            		mailer.LowLevelDataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            
            		<span style="color: green;">// Produce some DNS and SMTP traffic by performing direct send of empty message.</span>
            		mailer.Send("sender@domain.com", "user1@domain1.com, user2@domain2.com");
            
            		<span style="color: green;">// Print the total number of bytes received from the network.</span>
            		Console.WriteLine(_totalBytesSmtp + " bytes received in all SMTP sessions");
            		Console.WriteLine(_totalBytesDns + " bytes received in all DNS responses");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Total bytes received counters.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> _totalBytesSmtp = 0
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> _totalBytesDns = 0
            
            	<span style="color: green;">' LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
            			<span style="color: green;">' Increment SMTP traffic counter</span>
            			_totalBytesSmtp += e.Data.Length
            		<span style="color: blue;">ElseIf</span> e.Protocol = TopLevelProtocolType.Dns <span style="color: blue;">Then</span>
            			<span style="color: green;">' Increment DNS traffic counter.</span>
            			_totalBytesDns += e.Data.Length
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the LowLevelDataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            
            		<span style="color: green;">' Produce some DNS and SMTP traffic by performing direct send of empty message.</span>
            		mailer.Send("sender@domain.com", "user1@domain1.com, user2@domain2.com")
            
            		<span style="color: green;">' Print the total number of bytes received from the network.</span>
            		Console.WriteLine(_totalBytesSmtp + " bytes received in all SMTP sessions")
            		Console.WriteLine(_totalBytesDns + " bytes received in all DNS responses")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.LowLevelDataSent">
            <summary>
            Occurs when data is sent to the connected socket.
            <seealso cref="E:MailBee.SmtpMail.Smtp.DataSent"/>
            </summary>
            <remarks>
            <para>If the transmission channel is encrypted, this event will be raised
            each time an encrypted chunk of data is successfully sent. Thus, this event
            can be used to record the data which is actually sent to the network.</para>
            <para>The typical use of this event is to calculate the network traffic
            produced during the SMTP session. SSL encryption increases the length of the
            transmitted data blocks, thus it's more accurate to calculate traffic by counting
            the length of data actually transmitted over the network.</para>
            <para>If the transmission channel is not encrypted or otherwise scrambled, this property
            is equivalent to <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/>.</para>
            </remarks>
            <example>This sample calculates all outgoing traffic to the network during sending
            the message in direct send mode. DNS MX lookup traffic and SMTP traffic are calculated separately,
            and the results are printed into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Total bytes sent counters.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytesSmtp = 0;
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytesDns = 0;
            
            	<span style="color: green;">// LowLevelDataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Protocol == TopLevelProtocolType.Smtp)
            		{
            			<span style="color: green;">// Increment SMTP traffic counter.</span>
            			_totalBytesSmtp += e.Data.Length;
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (e.Protocol == TopLevelProtocolType.Dns)
            		{
            			<span style="color: green;">// Increment DNS traffic counter.</span>
            			_totalBytesDns += e.Data.Length;
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the LowLevelDataSent event.</span>
            		mailer.LowLevelDataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataSent);
            
            		<span style="color: green;">// Produce some DNS and SMTP traffic by performing direct send of empty message.</span>
            		mailer.Send("sender@domain.com", "user1@domain1.com, user2@domain2.com");
            
            		<span style="color: green;">// Print the total number of bytes sent to the network.</span>
            		Console.WriteLine(_totalBytesSmtp + " bytes sent in all SMTP sessions");
            		Console.WriteLine(_totalBytesDns + " bytes sent in all DNS queries");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Total bytes sent counters.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> _totalBytesSmtp = 0
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> _totalBytesDns = 0
            
            	<span style="color: green;">' LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
            			<span style="color: green;">' Increment SMTP traffic counter.</span>
            			_totalBytesSmtp += e.Data.Length
            		<span style="color: blue;">ElseIf</span> e.Protocol = TopLevelProtocolType.Dns <span style="color: blue;">Then</span>
            			<span style="color: green;">' Increment DNS traffic counter.</span>
            			_totalBytesDns += e.Data.Length
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the LowLevelDataSent event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.LowLevelDataSent, <span style="color: blue;">AddressOf</span> OnLowLevelDataSent
            
            		<span style="color: green;">' Produce some DNS and SMTP traffic by performing direct send of empty message.</span>
            		mailer.Send("sender@domain.com", "user1@domain1.com, user2@domain2.com")
            
            		<span style="color: green;">' Print the total number of bytes sent to the network.</span>
            		Console.WriteLine(_totalBytesSmtp &amp; " bytes sent in all SMTP sessions")
            		Console.WriteLine(_totalBytesDns &amp; " bytes sent in all DNS queries")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.HostResolved">
            <summary>
            Occurs when the SMTP server name is successully resolved into IP address(es).
            <seealso cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/>
            <seealso cref="E:MailBee.SmtpMail.Smtp.Connected"/>
            </summary>
            <remarks>
            <para>If the SMTP server name was already specified as an IP address, this event is still raised.</para>
            <para>When the POP3 server name is resolved into IP address (if POP-before-SMTP authentication is used),
            this even is raised as well.</para>
            <note>No checking if performed on whether the resolved IP address points to the live host.</note>
            </remarks>
            <example>This sample connects to the SMTP server host and prints all the IP addresses
            of this host into console. Most hosts, however, have only one IP address assigned.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// HostResolved event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnHostResolved(<span style="color: blue;">object</span> sender, HostResolvedEventArgs e)
            	{
            		<span style="color: blue;">foreach</span> (System.Net.IPAddress ip <span style="color: blue;">in</span> e.RemoteHost.AddressList)
            		{
            			Console.WriteLine(ip.ToString());
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		mailer.SmtpServers.Add("smtp.domain.com");
            
            		<span style="color: green;">// Subscribe to the HostResolved event.</span>
            		mailer.HostResolved += <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            
            		mailer.Connect();
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' HostResolved event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnHostResolved(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> HostResolvedEventArgs)
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> ip <span style="color: blue;">As</span> System.Net.IPAddress <span style="color: blue;">In</span> e.RemoteHost.AddressList
            			Console.WriteLine(ip.ToString())
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            		mailer.SmtpServers.Add("smtp.domain.com")
            
            		<span style="color: green;">' Subscribe to the HostResolved event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            
            		mailer.Connect()
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.SocketConnected">
             <summary>
             Occurs when the SMTP server accepts the connection attempt and opens the transmission
             channel between the remote host (SMTP server) and the client (MailBee).
             <seealso cref="E:MailBee.SmtpMail.Smtp.Connected"/>
             </summary>
             <remarks>
             <para>This event is raised immediately after <see cref="T:System.Net.Sockets.Socket"/>
             successfully connected to the SMTP server host. After the socket itself has been connected
             and this event raised, the client needs to receive some data from the server in order to
             complete the procedure of establishing connection with the SMTP server. If the connection
             must be SSL-encrypted, a few additional round-trips to the server required in order
             to completely establish the connection. Then, once the connection is fully initialized and
             ready for sending SMTP commands to the server, <see cref="E:MailBee.SmtpMail.Smtp.Connected"/> event is raised.</para>
             <para>If POP-before-SMTP authentication is used and MailBee successfully connects to the POP3
             server host, this event is raised as well. The developer can examine
             <see cref="P:MailBee.SocketConnectedEventArgs.Protocol"/> property value to determine whether the connection
             was made to POP3 or SMTP server.</para>
             </remarks>
             <example>This sample demonstrates the order in which events are raised during
             <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method call (POP-before-SMTP authentication is enabled, so certain
             events first occur for POP3 connection and then for SMTP connection).
             The events used in this sample occur in the following order:
             <list type="number">
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.HostResolved"/> (POP3 server host resolved)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/> (POP3 server accepted connection)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> (greeting from POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> (greeting from POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.Connected"/> (connected to POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> (send user account name to POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataSent"/></description> (send user account name to POP3 server)</item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> (POP3 server response to user account name)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> (POP3 server response to user account name)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> (send user account password to POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> (send user account password to POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> (POP3 greeting to authenticated user)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> (POP3 greeting to authenticated user)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataSent"/> (send QUIT to logout from POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> (send QUIT to logout from POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> (POP3 bye message)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> (empty string indicating the connection is closed)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> (empty string indicating the connection is closed)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> (POP3 bye message)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.Disconnected"/> (disconnected from POP3 server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.HostResolved"/> (SMTP server host resolved)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/> (SMTP server accepted connection)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.LowLevelDataReceived"/> (greeting from SMTP server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.DataReceived"/> (greeting from SMTP server)</description></item>
             <item><description><see cref="E:MailBee.SmtpMail.Smtp.Connected"/> (connected to SMTP server)</description></item>
             </list>
             <para>
             Once <see cref="M:MailBee.SmtpMail.Smtp.Connect"/> method finishes, all event handlers are removed in the code, thus
             <see cref="M:MailBee.SmtpMail.Smtp.Disconnect"/> method does not generate any events.
             </para>
             <code lang="C#">
             <span style="color: blue;">using</span> System;
             <span style="color: blue;">using</span> MailBee;
             <span style="color: blue;">using</span> MailBee.SmtpMail;
             
             <span style="color: blue;">class</span> Sample
             {
             	<span style="color: green;">// Replaces CRLF with \r\n in the end of each sent/received string.</span>
             	<span style="color: green;">// Used to improve readability of the console output.</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">string</span> EscapeCrLf(<span style="color: blue;">string</span> s)
             	{
             		<span style="color: blue;">return</span> s.Replace("\r\n", @"\r\n");
             	}
             
             	<span style="color: green;">// HostResolved event handler (called twice - for POP3 and SMTP). However,</span>
             	<span style="color: green;">// since server name is the same for both SMTP and POP3 servers, the IP </span>
             	<span style="color: green;">// address will be the same for both.</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnHostResolved(<span style="color: blue;">object</span> sender, HostResolvedEventArgs e)
             	{
             		Console.WriteLine("The host name " + e.RemoteHost.HostName +
             			" was resolved into IP address(es).");
             	}
             
             	<span style="color: green;">// SocketConnected event handler (called twice - for POP3 and SMTP).</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnSocketConnected(<span style="color: blue;">object</span> sender, SocketConnectedEventArgs e)
             	{
             		<span style="color: blue;">string</span> serverType = (e.Protocol == TopLevelProtocolType.Smtp) ? "SMTP" : "POP3";
             		Console.WriteLine("The " + serverType + " server at " +
             			e.RemoteEndPoint.Address.ToString() + " accepted the connection.");
             	}
             
             	<span style="color: green;">// LowLevelDataSent event handler.</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
             	{
             		<span style="color: green;">// Since SSL connection is not used, OnDataReceived and OnLowLevelDataReceived </span>
             		<span style="color: green;">// routines will produce the same output. This sample handles both events just </span>
             		<span style="color: green;">// to demonstrate that LowLevelDataSent event is raised before the </span>
             		<span style="color: green;">// corresponding DataSent event.</span>
             		<span style="color: green;">// But in SSL case, DataSent and LowLevelDataSent event data would be </span>
             		<span style="color: green;">// completely different, and some LowLevelDataSent events (such as ones </span>
             		<span style="color: green;">// occurred during the SSL handshake) would not be followed by DataSent </span>
             		<span style="color: green;">// events at all, because the data sent or received during the SSL handshake </span>
             		<span style="color: green;">// does not relate to SMTP protocol and cannot be decoded into textual form.</span>
             		Console.WriteLine("Low level data sent: [" +
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) + "]");
             	}
             
             	<span style="color: green;">// DataSent event handler.</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
             	{
             		Console.WriteLine("Data sent: [" +
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) + "]");
             	}
             
             	<span style="color: green;">// LowLevelDataReceived event handler.</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
             	{
             		<span style="color: green;">// All considerations for LowLevelDataSent event (see above).</span>
             		<span style="color: green;">// also apply to LowLevelDataReceived event.</span>
             		Console.WriteLine("Low level data received: [" +
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) + "]");
             	}
             
             	<span style="color: green;">// DataReceived event handler.</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
             	{
             		Console.WriteLine("Data received: [" +
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) + "]");
             	}
             
             	<span style="color: green;">// Connected event handler (called twice - for POP3 and SMTP).</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
             	{
             		<span style="color: blue;">string</span> serverType = (e.Protocol == TopLevelProtocolType.Smtp) ? "SMTP" : "POP3";
             		Console.WriteLine("Successfully connected to the " + serverType + " server.");
             	}
             
             	<span style="color: green;">// Disconnected event handler (called once - for POP3).</span>
             	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDisconnected(<span style="color: blue;">object</span> sender, DisconnectedEventArgs e)
             	{
             		<span style="color: blue;">string</span> serverType = (e.Protocol == TopLevelProtocolType.Smtp) ? "SMTP" : "POP3";
             		Console.WriteLine("Successfully disconnected from the " + serverType + " server.");
             	}
             
             	<span style="color: green;">// The actual code.</span>
             	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
             	{
             		Smtp mailer = <span style="color: blue;">new</span> Smtp();
             
             		<span style="color: green;">// Specify SMTP server and enable POP-before-SMTP authentication.</span>
             		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("mail.company.com");
             		server.AuthPopBeforeSmtp = <span style="color: blue;">true</span>;
             		server.AccountName = "jdoe@company.com"; <span style="color: green;">// or jdoe (depends on mail server).</span>
             		server.Password = "secret";
             		mailer.SmtpServers.Add(server);
             
             		<span style="color: green;">// Subscribe to the events.</span>
             		mailer.HostResolved += <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
             		mailer.SocketConnected += <span style="color: blue;">new</span> SocketConnectedEventHandler(OnSocketConnected);
             		mailer.LowLevelDataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
             		mailer.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
             		mailer.LowLevelDataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataSent);
             		mailer.DataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataSent);
             		mailer.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
             		mailer.Disconnected += <span style="color: blue;">new</span> DisconnectedEventHandler(OnDisconnected);
             
             		<span style="color: green;">// Connect to the server and make the events get raised.</span>
             		<span style="color: green;">// Actually, it will connect to POP3 server first, authenticate, disconnect,</span>
             		<span style="color: green;">// and immediately connect to SMTP server.</span>
             		mailer.Connect();
             
             		<span style="color: green;">// Unsubscribe from the events.</span>
             		mailer.HostResolved -= <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
             		mailer.SocketConnected -= <span style="color: blue;">new</span> SocketConnectedEventHandler(OnSocketConnected);
             		mailer.LowLevelDataReceived -= <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
             		mailer.DataReceived -= <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
             		mailer.LowLevelDataSent -= <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataSent);
             		mailer.DataSent -= <span style="color: blue;">new</span> DataTransferEventHandler(OnDataSent);
             		mailer.Connected -= <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
             		mailer.Disconnected -= <span style="color: blue;">new</span> DisconnectedEventHandler(OnDisconnected);
             
             		mailer.Disconnect();
             	}
             }
             </code>
             <code lang="Visual Basic">
             <span style="color: blue;">Imports</span> System
             <span style="color: blue;">Imports</span> MailBee
             <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
             <span style="color: blue;">Class</span> Sample
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Function</span> EscapeCrLf(<span style="color: blue;">ByVal</span> s <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
             		<span style="color: blue;">Return</span> s.Replace(vbCrLf, "\r\n")
            		<span style="color: blue;">End</span> <span style="color: blue;">Function</span>
            
            		<span style="color: green;">' HostResolved event handler (called twice - for POP3 and SMTP). However,</span>
            		<span style="color: green;">' since server name is the same for both SMTP and POP3 servers, the IP </span>
            		<span style="color: green;">' address will be the same for both.</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnHostResolved(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> HostResolvedEventArgs)
             		Console.WriteLine("The host name " &amp; e.RemoteHost.HostName &amp; _
             			" was resolved into IP address(es).")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            		
            		<span style="color: green;">' SocketConnected event handler (called twice - for POP3 and SMTP).</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnSocketConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SocketConnectedEventArgs)
             		<span style="color: blue;">Dim</span> serverType <span style="color: blue;">As</span> <span style="color: blue;">String</span>
             		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
             			serverType = "SMTP"
             		<span style="color: blue;">Else</span>
             			serverType = "POP3"
             		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
             		Console.WriteLine("The " &amp; serverType &amp; " server at " &amp; _
             			e.RemoteEndPoint.Address.ToString() &amp; " accepted the connection.")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            		<span style="color: green;">' LowLevelDataSent event handler.</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
             		<span style="color: green;">' Since SSL connection is not used, OnDataReceived and OnLowLevelDataReceived </span>
             		<span style="color: green;">' routines will produce the same output. This sample handles both events just </span>
             		<span style="color: green;">' to demonstrate that LowLevelDataSent event is raised before the </span>
             		<span style="color: green;">' corresponding DataSent event.</span>
             		<span style="color: green;">' But in SSL case, DataSent and LowLevelDataSent event data would be </span>
             		<span style="color: green;">' completely different, and some LowLevelDataSent events (such as ones </span>
             		<span style="color: green;">' occurred during the SSL handshake) would not be followed by DataSent </span>
             		<span style="color: green;">' events at all, because the data sent or received during the SSL handshake </span>
             		<span style="color: green;">' does not relate to SMTP protocol and cannot be decoded into textual form.</span>
             		Console.WriteLine("Low level data sent: [" &amp; _
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) &amp; "]")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            		<span style="color: green;">' DataSent event handler.</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
             		Console.WriteLine("Data sent: [" &amp; _
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) &amp; "]")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            		
            		<span style="color: green;">' LowLevelDataReceived event handler.</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLowLevelDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
             		<span style="color: green;">' All considerations for LowLevelDataSent event (see above).</span>
             		<span style="color: green;">' also apply to LowLevelDataReceived event.</span>
             		Console.WriteLine("Low level data received: [" &amp; _
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) &amp; "]")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            		
            		<span style="color: green;">' DataReceived event handler.</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
             		Console.WriteLine("Data received: [" &amp; _
             			EscapeCrLf(System.Text.Encoding.Default.GetString(e.Data)) &amp; "]")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            		
            		<span style="color: green;">' Connected event handler (called twice - for POP3 and SMTP).</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
             		<span style="color: blue;">Dim</span> serverType <span style="color: blue;">As</span> <span style="color: blue;">String</span>
             		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
             			servertype = "SMTP"
             		<span style="color: blue;">Else</span>
             			servertype = "POP3"
             		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
             		Console.WriteLine("Successfully connected to the " &amp; servertype &amp; " server.")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            		<span style="color: green;">' Disconnected event handler (called once - for POP3).</span>
            		<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDisconnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DisconnectedEventArgs)
             		<span style="color: blue;">Dim</span> serverType <span style="color: blue;">As</span> <span style="color: blue;">String</span>
             		<span style="color: blue;">If</span> e.Protocol = TopLevelProtocolType.Smtp <span style="color: blue;">Then</span>
             			servertype = "SMTP"
             		<span style="color: blue;">Else</span>
             			servertype = "POP3"
             		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
             			Console.WriteLine("Successfully disconnected from the " &amp; servertype &amp; " server.")
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            		<span style="color: green;">' The actual code.</span>
            		<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
             		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
             		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer("mail.company.com")
            			
             		<span style="color: green;">' Specify SMTP server and enable POP-before-SMTP authentication.</span>
             		server.AuthPopBeforeSmtp = <span style="color: blue;">True</span>
             		server.AccountName = "jdoe@company.com" <span style="color: green;">' or jdoe (depends on mail server)</span>
             		server.Password = "secret"
             		mailer.SmtpServers.Add(server)
            
             		<span style="color: green;">' Subscribe to the events.</span>
             		<span style="color: blue;">AddHandler</span> mailer.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
             		<span style="color: blue;">AddHandler</span> mailer.SocketConnected, <span style="color: blue;">AddressOf</span> OnSocketConnected
             		<span style="color: blue;">AddHandler</span> mailer.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
             		<span style="color: blue;">AddHandler</span> mailer.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
             		<span style="color: blue;">AddHandler</span> mailer.LowLevelDataSent, <span style="color: blue;">AddressOf</span> OnLowLevelDataSent
             		<span style="color: blue;">AddHandler</span> mailer.DataSent, <span style="color: blue;">AddressOf</span> OnDataSent
             		<span style="color: blue;">AddHandler</span> mailer.Connected, <span style="color: blue;">AddressOf</span> OnConnected
             		<span style="color: blue;">AddHandler</span> mailer.Disconnected, <span style="color: blue;">AddressOf</span> OnDisconnected
            
             		<span style="color: green;">' Connect to the server and make the events get raised.</span>
             		<span style="color: green;">' Actually, it will connect to POP3 server first, authenticate, disconnect,</span>
             		<span style="color: green;">' and immediately connect to SMTP server.</span>
             		mailer.Connect()
            
             		<span style="color: green;">' Unsubscribe from the events.</span>
             		<span style="color: blue;">RemoveHandler</span> mailer.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
             		<span style="color: blue;">RemoveHandler</span> mailer.SocketConnected, <span style="color: blue;">AddressOf</span> OnSocketConnected
             		<span style="color: blue;">RemoveHandler</span> mailer.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
             		<span style="color: blue;">RemoveHandler</span> mailer.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
             		<span style="color: blue;">RemoveHandler</span> mailer.LowLevelDataSent, <span style="color: blue;">AddressOf</span> OnLowLevelDataSent
             		<span style="color: blue;">RemoveHandler</span> mailer.DataSent, <span style="color: blue;">AddressOf</span> OnDataSent
             		<span style="color: blue;">RemoveHandler</span> mailer.Connected, <span style="color: blue;">AddressOf</span> OnConnected
             		<span style="color: blue;">RemoveHandler</span> mailer.Disconnected, <span style="color: blue;">AddressOf</span> OnDisconnected
             		
             		mailer.Disconnect()
            		<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
             <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
             </code>
             </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.Connected">
            <summary>
            <seealso cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/>
            Occurs when the connection with the server is successfully established.
            </summary>
            <remarks>This event indicates successful completion of the connection procedure, while
            <see cref="E:MailBee.SmtpMail.Smtp.SocketConnected"/> event (occurs before <see cref="E:MailBee.SmtpMail.Smtp.Connected"/>) indicates
            the connection request from MailBee was accepted by the server, and the SMTP
            connection procedure will now begin.
            <para>If POP-before-SMTP authentication is used and MailBee successfully connects to the POP3
            server, this event is raised as well. The developer can examine
            <see cref="P:MailBee.ConnectedEventArgs.Protocol"/> property value to determine whether the connection
            was made to POP3 or SMTP server.</para>
            </remarks>
            <example>This sample uses <see cref="E:MailBee.SmtpMail.Smtp.Connected"/> event to report
            the successful connection status into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Connected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Successfully connected to the server.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		mailer.SmtpServers.Add("smtp.domain.com");
            
            		<span style="color: green;">// Subscribe to the Connected event.</span>
            		mailer.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		mailer.Connect();
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Successfully connected to the server.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		mailer.SmtpServers.Add("smtp.domain.com")
            
            		<span style="color: green;">' Subscribe to the Connected event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		mailer.Connect()
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.Disconnected">
            <summary>
            Occurs when the connection with the server gets closed.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Disconnect"/>
            </summary>
            <remarks>
            <para>This event is raised in all the cases when the connection gets closed, including
            normal shutdown and failures.</para>
            <para>If POP-before-SMTP authentication is used and MailBee successfully disconnects from the POP3
            server, this event is raised as well. The developer can examine
            <see cref="P:MailBee.DisconnectedEventArgs.Protocol"/> property value to determine whether POP3
            or SMTP connection was closed.</para>
            <note>If <see cref="M:MailBee.SmtpMail.Smtp.Abort"/> method is called, the connection is immediately
            closed, but no events (including <see cref="E:MailBee.SmtpMail.Smtp.Disconnected"/>) are raised any longer.</note>
            </remarks>
            <example>This sample demonstrates that <see cref="E:MailBee.SmtpMail.Smtp.Disconnected"/> event raises even
            on failures (when <see cref="T:MailBee.MailBeeException"/> is thrown). The sample connects to the
            SMTP server and then sends invalid data to the server. The server does not
            respond and the network operation times out.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Disconnected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDisconnected(<span style="color: blue;">object</span> sender, DisconnectedEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.IsNormalShutdown)
            		{
            			<span style="color: green;">// QUIT command was sent to SMTP server.</span>
            			Console.WriteLine("Normally disconnected from the server.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Rough disconnect (due to failure).</span>
            			Console.WriteLine("The connection was terminated.");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify SMTP server name and timeout value.</span>
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("smtp.company.com");
            
            		<span style="color: green;">// We do not want to wait for MailBeeException too long.</span>
            		<span style="color: green;">// Set 5 seconds as timeout value.</span>
            		<span style="color: green;">// We cannot set it too small because otherwise even Connect() method </span>
            		<span style="color: green;">// would not have a time to connect to the server. Unlike POP3, it's </span>
            		<span style="color: green;">// not possible change timeout setting after the connection has already </span>
            		<span style="color: green;">// been established.</span>
            		server.Timeout = 5000;
            
            		mailer.SmtpServers.Add(server);
            
            		<span style="color: green;">// Subscribe to Disconnected event.</span>
            		mailer.Disconnected += <span style="color: blue;">new</span> DisconnectedEventHandler(OnDisconnected);
            
            		<span style="color: green;">// Connect to the server first.</span>
            		mailer.Connect();
            
            		<span style="color: green;">// Simulate connection error by sending a request to which the SMTP </span>
            		<span style="color: green;">// server will never respond (due to a lack of "\r\n" in the request data) so </span>
            		<span style="color: green;">// that timeout will occur.</span>
            		<span style="color: green;">// This will cause MailBee to terminate the connection and raise </span>
            		<span style="color: green;">// Disconnected event, and then throw MailBeeException (exceptions are </span>
            		<span style="color: green;">// enabled by default).</span>
            		mailer.ExecuteCustomCommand("NONSENSE");
            
            		<span style="color: green;">// This line will probably never execute (unless the server </span>
            		<span style="color: green;">// suddenly responds to NONSENSE sequence of bytes) </span>
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDisconnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DisconnectedEventArgs)
            		<span style="color: blue;">If</span> e.IsNormalShutdown <span style="color: blue;">Then</span>
            			<span style="color: green;">' QUIT command was sent to SMTP server.</span>
            			Console.WriteLine("Normally disconnected from the server.")
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Rough disconnect (due to failure).</span>
            			Console.WriteLine("The connection was terminated.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify SMTP server name and timeout value.</span>
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer("smtp.company.com")
            
            		<span style="color: green;">' We do not want to wait for MailBeeException too long.</span>
            		<span style="color: green;">' Set 5 seconds as timeout value.</span>
            		<span style="color: green;">' We cannot set it too small because otherwise even Connect() method </span>
            		<span style="color: green;">' would not have a time to connect to the server. Unlike POP3, it's </span>
            		<span style="color: green;">' not possible change timeout setting after the connection has already </span>
            		<span style="color: green;">' been established.</span>
            		server.Timeout = 5000
            
            		mailer.SmtpServers.Add(server)
            
            		<span style="color: green;">' Subscribe to the Disconnected event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.Disconnected, <span style="color: blue;">AddressOf</span> OnDisconnected
            
            		<span style="color: green;">' Connect to the server first.</span>
            		mailer.Connect()
            
            		<span style="color: green;">' Simulate connection error by sending a request to which the SMTP </span>
            		<span style="color: green;">' server will never respond (due to a lack of "\r\n" in the request data) so </span>
            		<span style="color: green;">' that timeout will occur.</span>
            		<span style="color: green;">' This will cause MailBee to terminate the connection and raise </span>
            		<span style="color: green;">' Disconnected event, and then throw MailBeeException (exceptions are </span>
            		<span style="color: green;">' enabled by default).</span>
            		mailer.ExecuteCustomCommand("NONSENSE")
            
            		<span style="color: green;">' This line will probably never execute (unless the server </span>
            		<span style="color: green;">' suddenly responds to NONSENSE sequence of bytes) </span>
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.TlsStarted">
            <summary>
            Occurs when the connection with the server becomes secure.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.StartTls"/>
            </summary>
            <remarks>This event is raised when TLS/SSL negotiation completes and TLS session successfully
            starts. Usually, this happens as a result of successful completion of <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/>
            method or if automatic TLS/SSL negotiation was requested via setting <see cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/> property
            of the active <see cref="T:MailBee.SmtpMail.SmtpServer"/> object to non-<see cref="F:MailBee.Security.SslStartupMode.Manual"/> value.
            </remarks>
            <example>This console sample demonstrates that <see cref="E:MailBee.SmtpMail.Smtp.TlsStarted"/> event is raised during executing <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> method
            when <see cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/> property of the active <see cref="T:MailBee.SmtpMail.SmtpServer"/> object is set to
            <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/> value.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// TlsStarted event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnTlsStarted(<span style="color: blue;">object</span> sender, TlsStartedEventArgs e)
            	{
            		<span style="color: green;">// This will happen during Hello method execution.</span>
            		Console.WriteLine("TLS/SSL session started.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Subscribe to TlsStarted event.</span>
            		mailer.TlsStarted += <span style="color: blue;">new</span> TlsStartedEventHandler(OnTlsStarted);
            
            		<span style="color: green;">// Notify MailBee it should start TLS/SSL session when appropriate.</span>
            		<span style="color: green;">// The connection is made to the regular port so that STLS command</span>
            		<span style="color: green;">// will be used to start TLS/SSL session.</span>
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("smtp.company.com");
            		server.SslMode = SslStartupMode.UseStartTls;
            		mailer.SmtpServers.Add(server);
            
            		mailer.Connect();
            
            		Console.WriteLine("Connected to the server. Will send greeting now...");
            
            		<span style="color: green;">// TLS/SSL negotiation will take place here. Thus, any subseqeunt commands</span>
            		<span style="color: green;">// such as sending user credentials or mail message submission will take</span>
            		<span style="color: green;">// place under secure TLS/SSL layer.</span>
            		<span style="color: green;">// Note: EHLO command will be sent twice: first, before TLS/SSL negotiation;</span>
            		<span style="color: green;">// second, after. This is because capability list presented by EHLO response</span>
            		<span style="color: green;">// can change after TLS negotiation.</span>
            		mailer.Hello();
            
            		Console.WriteLine("Hello completed successfully.");
            
            		<span style="color: green;">// Can send mail, perform login or whatever here.</span>
            
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Public</span> <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' TlsStarted event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnTlsStarted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> TlsStartedEventArgs)
            		<span style="color: green;">' This will happen during Hello method execution.</span>
            		Console.WriteLine("TLS/SSL session started.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Subscribe to TlsStarted event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.TlsStarted, <span style="color: blue;">AddressOf</span> OnTlsStarted
            
            		<span style="color: green;">' Notify MailBee it should start TLS/SSL session when appropriate.</span>
            		<span style="color: green;">' The connection is made to the regular port so that STLS command</span>
            		<span style="color: green;">' will be used to start TLS/SSL session.</span>
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> SmtpServer = <span style="color: blue;">New</span> SmtpServer("smtp.company.com")
            		server.SslMode = SslStartupMode.UseStartTls
            		mailer.SmtpServers.Add(server)
            
            		mailer.Connect()
            
            		Console.WriteLine("Connected to the server. Will send greeting now...")
            
            		<span style="color: green;">' TLS/SSL negotiation will take place here. Thus, any subseqeunt commands</span>
            		<span style="color: green;">' such as sending user credentials or mail message submission will take</span>
            		<span style="color: green;">' place under secure TLS/SSL layer.</span>
            		<span style="color: green;">' Note: EHLO command will be sent twice: first, before TLS/SSL negotiation;</span>
            		<span style="color: green;">' second, after. This is because capability list presented by EHLO response</span>
            		<span style="color: green;">' can change after TLS negotiation.</span>
            		mailer.Hello()
            
            		Console.WriteLine("Hello completed successfully.")
            
            		<span style="color: green;">' Can send mail, perform login or whatever here.</span>
            
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.LoggedIn">
            <summary>
            Occurs when the component successfully authenticates the user on the SMTP server and logs
            in the user account.
            <seealso cref="M:MailBee.SmtpMail.Smtp.Login"/>
            </summary>
            <remarks>This event is raised only as a result of ESMTP authentication (performed by
            <see cref="M:MailBee.SmtpMail.Smtp.Login"/> method). Successful completion of POP-before-SMTP authentication
            does not cause this event to be raised.</remarks>
            <example>This sample connects to the SMTP server, and then authenticates the user on the server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// LoggedIn event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLoggedIn(<span style="color: blue;">object</span> sender, LoggedInEventArgs e)
            	{
            		Console.WriteLine("Successfully authenticated on the SMTP server");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify SMTP server and enable ESMTP authentication.</span>
            		<span style="color: green;">// Note, depending on your SMTP server settings, either jdoe or jdoe@domain.com </span>
            		<span style="color: green;">// should be used as user account name.</span>
            		mailer.SmtpServers.Add("smtp.domain.com", "jdoe@domain.com", "secret");
            
            		<span style="color: green;">// Subscribe to the LoggedIn event.</span>
            		mailer.LoggedIn += <span style="color: blue;">new</span> LoggedInEventHandler(OnLoggedIn);
            
            		mailer.Connect();
            		mailer.Hello();
            		mailer.Login();
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLoggedIn(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LoggedInEventArgs)
            		Console.WriteLine("Successfully authenticated on the SMTP server")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify SMTP server and enable ESMTP authentication.</span>
            		<span style="color: green;">' Note, depending on your SMTP server settings, either jdoe or jdoe@domain.com </span>
            		<span style="color: green;">' should be used as user account name.</span>
            		mailer.SmtpServers.Add("smtp.domain.com", "jdoe@domain.com", "secret")
            
            		<span style="color: green;">' Subscribe to the LoggedIn event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.LoggedIn, <span style="color: blue;">AddressOf</span> OnLoggedIn
            
            		mailer.Connect()
            		mailer.Hello()
            		mailer.Login()
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.SendingMessage">
            <summary>
            Occurs when the message is about to be sent.
            </summary>
            <remarks>
            <para>
            The developer can typically use this event for the following purposes:
            <list type="bullet">
            <item><description>Control whether particular messages should be skipped (not sent).
            This can be useful when performing mail merge tasks. To make the message be skipped,
            set <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.SendIt"/> to false.</description></item>
            <item><description>Fine-tune messages before they get sent.
            This is also useful in mail merge tasks if the developer wants to perform some actions
            on the messages which had already been merged. You can change properties of the mail message itself
            (returned by <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MailMessage"/> property), change
            <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualSenderEmail"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualRecipients"/>.</description></item>
            <item><description>Change Delivery Status Notification (DSN) settings of the message.
            It's easier to specify a template for DSN Tracking-ID via setting <c>mailer.DeliveryNotification.TrackingID</c> value
            (where <c>mailer</c> is <see cref="T:MailBee.SmtpMail.Smtp"/> instance) prior to calling <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> or <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>.
            However, other DSN values (<see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.NotifyCondition"/> and <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.ReturnPortion"/>)
            can be set for every e-mail separately only in <see cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/> event handler.
            This is because other DSN values are not strings and search-and-replace is not possible for them. However, most applications use the same
            <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.NotifyCondition"/> and <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.ReturnPortion"/> values for all
            e-mail messages within a mail merge job.</description></item>
            </list>
            </para>
            <note>If you changed the message sender or recipients via modification of
            the e-mail message itself (<see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MailMessage"/> property),
            you should also update <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualSenderEmail"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualRecipients"/> as well (for instance,
            set them to a null reference (<b>Nothing</b> in Visual Basic) to tell MailBee to grab these values from
            <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.MailMessage"/> property.
            Alternatively, if you only changed <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualSenderEmail"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSendingMessageEventArgs.ActualRecipients"/>, the corresponding message headers
            won't be changed (the message will be sent from or to addresses different from those specified in the message
            headers).
            </note>
            </remarks>
            <example>The example is available at <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> topic.</example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted">
            <summary>
            Occurs after the sender of the mail message was successfully submitted to the SMTP server.
            </summary>
            <remarks>If the message is being sent to multiple SMTP servers (such as to SMTP MX servers in direct mode),
            this event will be raised multiple times (once per each individual SMTP connection).</remarks>
            <example>This sample sends a message in direct send mode to 3 recipients on 2 domains.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/> event is raised 2 times (for each domain).
            <note>In some cases, it may be raised more than 2 times. If certain domain has more than one
            SMTP MX server assigned, and sending to high-priority MX server failed after the message
            sender has already been submitted, then backup MX servers are tried (so that the message sender
            is submitted again, and so does <see cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/> event).</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageSenderSubmitted event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageSenderSubmitted(<span style="color: blue;">object</span> sender,
            		SmtpMessageSenderSubmittedEventArgs e)
            	{
            		Console.WriteLine("SMTP server accepted " + e.SenderEmail + " address");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the MessageSenderSubmitted event.</span>
            		mailer.MessageSenderSubmitted +=
            			<span style="color: blue;">new</span> SmtpMessageSenderSubmittedEventHandler(OnMessageSenderSubmitted);
            
            		<span style="color: green;">// Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.Send();
            
            		Console.WriteLine("Message sent to: " + mailer.GetAcceptedRecipients().ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageSenderSubmitted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSenderSubmittedEventArgs)
            		Console.WriteLine("SMTP server accepted " &amp; e.SenderEmail &amp; " address")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the MessageSenderSubmitted event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSenderSubmitted, <span style="color: blue;">AddressOf</span> OnMessageSenderSubmitted
            
            		<span style="color: green;">' Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.Send()
            
            		Console.WriteLine("Message sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted">
            <summary>
            Occurs each time the next recipient in the mail message recipients list is
            accepted or refused by the SMTP server.
            </summary>
            <remarks>If the message contains multiple recipients, this event is raised for each recipient.
            The developer can use <see cref="P:MailBee.SmtpMail.SmtpMessageRecipientSubmittedEventArgs.Result"/>
            property to detremine whether the recipient was accepted or refused.
            <note>If refused recipients are not allowed (<see cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/> is <b>false</b>),
            the component will cancel the SMTP session after raising <see cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/> event.</note>
            </remarks>
            <example>This sample sends a message in direct send mode to 3 recipients on 2 domains.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageSenderSubmitted"/> event is raised 3 times (for each recipient).
            <note>In some cases, it may be raised more than 2 times. If certain domain has more than one
            SMTP MX server assigned, and sending to high-priority MX server failed after the message
            recipient has already been submitted, then backup MX servers are tried (so that the message recipient
            is submitted again, and so does <see cref="E:MailBee.SmtpMail.Smtp.MessageRecipientSubmitted"/> event).</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageRecipientSubmitted event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageRecipientSubmitted(<span style="color: blue;">object</span> sender,
            		SmtpMessageRecipientSubmittedEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Result)
            		{
            			Console.WriteLine("SMTP server accepted " + e.RecipientEmail + " address");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("SMTP server refused " + e.RecipientEmail + " address");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the MessageRecipientSubmitted event.</span>
            		mailer.MessageRecipientSubmitted +=
            			<span style="color: blue;">new</span> SmtpMessageRecipientSubmittedEventHandler(OnMessageRecipientSubmitted);
            
            		<span style="color: green;">// Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.Send();
            
            		Console.WriteLine("Message sent to: " + mailer.GetAcceptedRecipients().ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageRecipientSubmitted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageRecipientSubmittedEventArgs)
            		<span style="color: blue;">If</span> e.Result <span style="color: blue;">Then</span>
            			Console.WriteLine("SMTP server accepted " &amp; e.RecipientEmail &amp; " address")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("SMTP server refused " &amp; e.RecipientEmail &amp; " address")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the MessageRecipientSubmitted event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageRecipientSubmitted, <span style="color: blue;">AddressOf</span> OnMessageRecipientSubmitted
            
            		<span style="color: green;">' Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.Send()
            
            		Console.WriteLine("Message sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent">
            <summary>
            Occurs on progress of sending message source data to the SMTP server.
            <seealso cref="E:MailBee.SmtpMail.Smtp.DataSent"/>
            </summary>
            <remarks>
            <para>This event is a special case of <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> event. While
            <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> event occurs when any data is sent,
            <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> event indicates when message data is being sent.
            In other words, <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> event is a filtered version
            of more general <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> event.</para>
            <para>When both <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/>
            events are used, <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> is raised first.</para>
            </remarks>
            <example>This sample submits a mail message to the SMTP server.
            Both <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> and
            <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/> events are handled, and the corresponding
            messages are printed into console when each of these events is raised. This sample
            demonstrates that <see cref="E:MailBee.SmtpMail.Smtp.DataSent"/> is raised more often than
            <see cref="E:MailBee.SmtpMail.Smtp.MessageDataChunkSent"/>.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine(e.Data.Length + " bytes sent");
            	}
            
            	<span style="color: green;">// MessageDataChunkSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDataChunkSent(<span style="color: blue;">object</span> sender,
            		SmtpMessageDataChunkSentEventArgs e)
            	{
            		Console.WriteLine(e.BytesJustSent + " bytes of the message " +
            			e.MailMessage.MessageID + " sent");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Specify SMTP server and enable ESMTP authentication.</span>
            		<span style="color: green;">// Note, depending on your SMTP server settings, either </span>
            		<span style="color: green;">// "jdoe" or "jdoe@domain.com" should be used as user account name.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret");
            
            		<span style="color: green;">// Subscribe to events.</span>
            		mailer.DataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataSent);
            		mailer.MessageDataChunkSent +=
            			<span style="color: blue;">new</span> SmtpMessageDataChunkSentEventHandler(OnMessageDataChunkSent);
            
            		<span style="color: green;">// Send a message (attach a big file to make the message be sent </span>
            		<span style="color: green;">// in multiple data chunks).</span>
            		mailer.To.AsString = "recipient1@domain1.com, recipient2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.BodyPlainText = "The message with attachment";
            		mailer.AddAttachment(@"C:\bigfile.mdb");
            		mailer.Send();
            
            		Console.WriteLine("Message sent to: " +
            			mailer.GetAcceptedRecipients().ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' DataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine(e.Data.Length &amp; " bytes sent")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDataChunkSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageDataChunkSentEventArgs)
            		Console.WriteLine(e.BytesJustSent &amp; " bytes of the message " &amp; _
            			e.MailMessage.MessageID &amp; " sent")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Specify SMTP server and enable ESMTP authentication.</span>
            		<span style="color: green;">' Note, depending on your SMTP server settings, either </span>
            		<span style="color: green;">' "jdoe" or "jdoe@domain.com" should be used as user account name.</span>
            		mailer.SmtpServers.Add("mail.domain.com", "jdoe", "secret")
            
            		<span style="color: green;">' Subscribe to events.</span>
            		<span style="color: blue;">AddHandler</span> mailer.DataSent, <span style="color: blue;">AddressOf</span> OnDataSent
            		<span style="color: blue;">AddHandler</span> mailer.MessageDataChunkSent, <span style="color: blue;">AddressOf</span> OnMessageDataChunkSent
            
            		<span style="color: green;">' Send a message (attach a big file to make the message be sent </span>
            		<span style="color: green;">' in multiple data chunks).</span>
            		mailer.To.AsString = "recipient1@domain1.com, recipient2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.BodyPlainText = "The message with attachment"
            		mailer.AddAttachment("C:\bigfile.mdb")
            		mailer.Send()
            
            		Console.WriteLine("Message sent to: " &amp; _
            			mailer.GetAcceptedRecipients().ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer">
            <summary>
            Occurs each time the message is successfully submitted to the SMTP server.
            </summary>
            <remarks>If the message is sent to multiple SMTP servers (common case in direct
            send mode where the message is submitted to SMTP MX server of each recipient domain separately),
            this event is raised for each SMTP server the message was successfully submitted to.
            </remarks>
            <example>This sample sends a message in direct send mode to 3 recipients on 2 domains.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageSubmittedToServer"/> event is raised 2 times (for each domain).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageSubmittedToServer event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageSubmittedToServer(<span style="color: blue;">object</span> sender,
            		SmtpMessageSubmittedToServerEventArgs e)
            	{
            		Console.WriteLine(e.AcceptedRecipients.ToString() + " accepted");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the MessageRecipientSubmitted event.</span>
            		mailer.MessageSubmittedToServer +=
            			<span style="color: blue;">new</span> SmtpMessageSubmittedToServerEventHandler(OnMessageSubmittedToServer);
            
            		<span style="color: green;">// Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.Send();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageSubmittedToServer event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageSubmittedToServer(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSubmittedToServerEventArgs)
            		Console.WriteLine(e.AcceptedRecipients.ToString() &amp; " accepted")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the MessageRecipientSubmitted event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSubmittedToServer, <span style="color: blue;">AddressOf</span> OnMessageSubmittedToServer
            
            		<span style="color: green;">' Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.Send()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageSent">
            <summary>
            Occurs after the message was successfully sent.
            </summary>
            <remarks>If the message is sent to multiple SMTP servers (common case in direct
            send mode where the message is submitted to SMTP MX server of each recipient domain separately),
            this event is raised after the message was submitted to all SMTP servers.
            </remarks>
            <example>This sample sends a message in direct send mode to 3 recipients on 2 domains.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event is raised 1 time.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageSent(<span style="color: blue;">object</span> sender, SmtpMessageSentEventArgs e)
            	{
            		Console.WriteLine("Sent to: " + e.SuccessfulRecipients.ToString());
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the MessageSent event.</span>
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(OnMessageSent);
            
            		<span style="color: green;">// Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.Send();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' DataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		Console.WriteLine("Sent to: " &amp; e.SuccessfulRecipients.ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the MessageSent event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> OnMessageSent
            
            		<span style="color: green;">' Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.Send()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageNotSent">
            <summary>
            Occurs when the message was not sent due to an error.
            <seealso cref="E:MailBee.SmtpMail.Smtp.MessageSent"/>
            </summary>
            <remarks>
            <para>This event is a counterpart of <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event.</para>
            <para><see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> event occurs only when there was an attempt to send a message and this attempt failed.
            Such attempt could be complex, such as sending to a primary and a backup mail servers. If, however, MailBee was unable
            to send the e-mail to the primary server but managed to send it to the backup one (or send it using alternative method, such as
            direct send), <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> will not be raised.</para>
            <para><see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> may occur only for e-mail messages which have already been created. If the error
            occurred before the message was even built, this event will not occur. The same applies to the events which are raised
            when a message is about to be sent (or submitted to the pickup folder).</para>
            <para>For instance, if <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> or <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method is running and
            mail merge of a data row with the mail template failed for some reason,
            <see cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> events will not occur.</para>
            <para>If you have mail merge functionality in your application and need to subscribe to an event
            which occurs before performing mail merge of a data row with the template, use <see cref="E:MailBee.SmtpMail.Smtp.MergingMessage"/> event.</para>
            </remarks>
            <example>The example is available at <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> topic.</example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MergingMessage">
            <summary>
            Occurs when the component is about to merge the e-mail template with a single data table row.
            <seealso cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/>
            <seealso cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/>
            </summary>
            <remarks>
            <para>This event precedes any other <see cref="T:MailBee.SmtpMail.Smtp"/> events which occur for every e-mail message
            being sent. <see cref="E:MailBee.SmtpMail.Smtp.MergingMessage"/>, however, it not raised for e-mails which were
            supplied by the application rather than generated during mail merge.</para>
            <para>For mail merge jobs, this event allows the developer to control whether to proceed mail merge of a 
            particular data row with the template and send the resulting e-mail or skip this data row and continue.</para>
            <para>If you need to perform some post-processing of mail messages which have already been merged
            (i.e. an event which occurs AFTER mail merge of a data row with the template), use
            <see cref="E:MailBee.SmtpMail.Smtp.SendingMessage"/> event (if you're sending e-mails out) or <see cref="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder"/>
            event (if you're submitting them to the pickup folder).</para>
            </remarks>
            <example>The example is available at <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> topic.</example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.SubmittingMessageToPickupFolder">
            <summary>
            Occurs when the message is about to be saved into MailBee Message Queue or IIS SMTP pickup folder.
            </summary>
            <remarks>
            <para>
            The developer can typically use this event for the following purposes:
            <list type="bullet">
            <item><description>Control whether particular messages should be skipped (not saved to the pickup folder).
            This can be useful when performing mail merge tasks. To make the message be skipped,
            set <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.SubmitIt"/> to false.</description></item>
            <item><description>Fine-tune messages before they get saved to the pickup folder.
            This is also useful in mail merge tasks if the developer wants to perform some actions
            on the messages which had already been merged. You can change properties of the mail message itself
            (returned by <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MailMessage"/> property), change
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualSenderEmail"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualRecipients"/>.</description></item>
            <item><description>Change the pickup folder name or specify your own filename of the message file to be saved.
            This is useful if there is more than one pickup folder. Set
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.Filename"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.PickupFolderName"/> properties for this.</description></item>
            </list>
            </para>
            <note>If you changed the message sender or recipients via modification of
            the e-mail message itself (<see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MailMessage"/> property),
            you should also update <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualSenderEmail"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualRecipients"/> as well (for instance,
            set them to a null reference (<b>Nothing</b> in Visual Basic) to tell MailBee to grab these values from
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.MailMessage"/> property.
            Alternatively, if you only changed <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualSenderEmail"/> or
            <see cref="P:MailBee.SmtpMail.SmtpSubmittingMessageToPickupFolderEventArgs.ActualRecipients"/>, the corresponding message headers
            won't be changed (the message will be sent from or to addresses different from those specified in the message
            headers).
            </note>
            </remarks>
            <example>The example is available at <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> topic.</example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageSubmittedToPickupFolder">
            <summary>
            Occurs after the current message was saved to MailBee Message Queue or IIS SMTP pickup folder.
            </summary>
            <remarks>
            This event can help to keep track of submitting multiple e-mails to the pickup folder (initiated with <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> method),
            and find out which filename has been assigned to each e-mail's .EML file when it was saved to disk.
            </remarks>
            <example>The example is available at <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> topic.</example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone">
            <summary>
            Occurs in direct send mode after the component finished DNS MX lookup
            of SMTP MX servers of recipients domains.
            </summary>
            <remarks>If the message is sent without SMTP relay server directly to MX servers
            of recipient domains, the component must first discover these servers by
            performing MX lookup queries to DNS servers. Once this process is finished, the
            component raises <see cref="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone"/> and starts submitting the mail
            message to the discovered MX servers.
            </remarks>
            <example>This sample sends a message in direct send mode to 3 recipients on 2 domains.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone"/> event is raised 1 time.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Collections;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageMXLookupDone event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageMXLookupDone(<span style="color: blue;">object</span> sender,
            		SmtpMessageMXLookupDoneEventArgs e)
            	{
            		<span style="color: green;">// Create and display comma-separated list of domains for which </span>
            		<span style="color: green;">// SMTP MX servers have been found.</span>
            		<span style="color: blue;">string</span> domains = <span style="color: blue;">string</span>.Join(", ",
            			(<span style="color: blue;">string</span>[])ArrayList.Adapter(e.SuccessfulDomains).ToArray(<span style="color: blue;">typeof</span>(<span style="color: blue;">string</span>)));
            
            		Console.WriteLine("Will send to MX servers of the following domains: " + domains);
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Subscribe to the MessageMXLookupDone event.</span>
            		mailer.MessageMXLookupDone +=
            			<span style="color: blue;">new</span> SmtpMessageMXLookupDoneEventHandler(OnMessageMXLookupDone);
            
            		<span style="color: green;">// Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.Send();
            
            		Console.WriteLine("Sent to: " + mailer.GetAcceptedRecipients().ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Collections
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageMXLookupDone event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageMXLookupDone(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageMXLookupDoneEventArgs)
            		<span style="color: green;">' Create and display comma-separated list of domains for which </span>
            		<span style="color: green;">' SMTP MX servers have been found.</span>
            		<span style="color: blue;">Dim</span> domains <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		domains = <span style="color: blue;">String</span>.Join(", ", ArrayList.Adapter(e.SuccessfulDomains).ToArray())
            
            		Console.WriteLine("Will send to MX servers of the following domains: " &amp; domains)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Subscribe to the MessageMXLookupDone event.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageMXLookupDone, <span style="color: blue;">AddressOf</span> OnMessageMXLookupDone
            
            		<span style="color: green;">' Send a message to 3 recipients on 2 domains.</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.Send()
            
            		Console.WriteLine("Sent to: " &amp; mailer.GetAcceptedRecipients().ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone">
            <summary>
            Occurs in direct send mode when the component finished submitting the mail message
            to all SMTP MX servers of recipients domains.
            </summary>
            <remarks>In direct send mode, <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> event is immediately
            followed by <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event. However, if some recipients of the message
            failed and <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains low priority SMTP relay servers
            (with priority value lower than top priority DNS server in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection), the component will attempt to send the message to the failed recipients
            using these low priority SMTP relay servers. In this case, <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> event
            is raised noticeably later than <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> event (after the message
            was also sent to the backup SMTP relay servers).
            </remarks>
            <example>This sample sends a message in direct send mode to 3 recipients on 2 domains.
            <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> event is raised 1 time. However, a backup
            SMTP relay server is then used in order to send to the recipients failed during direct
            send. <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> and <see cref="E:MailBee.SmtpMail.Smtp.MessageSent"/> events
            are raised 1 time.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// MessageDirectSendDone event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageDirectSendDone(<span style="color: blue;">object</span> sender,
            		SmtpMessageDirectSendDoneEventArgs e)
            	{
            		Console.WriteLine("Sent using direct send to: " +
            			e.SuccessfulRecipients.ToString());
            	}
            
            	<span style="color: green;">// MessageSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnMessageSent(<span style="color: blue;">object</span> sender,
            		SmtpMessageSentEventArgs e)
            	{
            		Console.WriteLine("In the long run, sent to: " +
            			e.SuccessfulRecipients.ToString());
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Specify backup SMTP server and enable ESMTP authentication.</span>
            		<span style="color: green;">// Note, depending on your SMTP server settings, either </span>
            		<span style="color: green;">// "jdoe" or "jdoe@domain.com" should be used as user account name.</span>
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("mail.isp.com", "jdoe", "secret");
            		server.Priority = 100; <span style="color: green;">// low priority</span>
            		mailer.SmtpServers.Add(server);
            
            		<span style="color: green;">// Subscribe to events.</span>
            		mailer.MessageDirectSendDone +=
            			<span style="color: blue;">new</span> SmtpMessageDirectSendDoneEventHandler(OnMessageDirectSendDone);
            		mailer.MessageSent += <span style="color: blue;">new</span> SmtpMessageSentEventHandler(OnMessageSent);
            
            		<span style="color: green;">// Send a message to 3 recipients on 2 domains. Let's assume we send </span>
            		<span style="color: green;">// from a domain which has no its own MX record, and domain1.com checks </span>
            		<span style="color: green;">// this and rejects our message to user1@domain1.com. In this case, </span>
            		<span style="color: green;">// the message will be delivered to user1@domain1.com using ISP's mail </span>
            		<span style="color: green;">// server (we assume ISP's mail server has MX record assigned).</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com";
            		mailer.From.Email = "sender@domain.com";
            		mailer.Subject = "Test message";
            		mailer.Send();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' MessageDirectSendDone event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageDirectSendDone(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageDirectSendDoneEventArgs)
            		Console.WriteLine("Sent using direct send to: " &amp; _
            			e.SuccessfulRecipients.ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' MessageSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnMessageSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SmtpMessageSentEventArgs)
            		Console.WriteLine("In the long run, sent to: " &amp; _
            			e.SuccessfulRecipients.ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Get DNS servers from config file/OS settings.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Specify backup SMTP server and enable ESMTP authentication.</span>
            		<span style="color: green;">' Note, depending on your SMTP server settings, either </span>
            		<span style="color: green;">' "jdoe" or "jdoe@domain.com" should be used as user account name.</span>
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> <span style="color: blue;">New</span> SmtpServer("mail.isp.com", "jdoe", "secret")
            		server.Priority = 100 <span style="color: green;">' low priority</span>
            		mailer.SmtpServers.Add(server)
            
            		<span style="color: green;">' Subscribe to events.</span>
            		<span style="color: blue;">AddHandler</span> mailer.MessageDirectSendDone, <span style="color: blue;">AddressOf</span> OnMessageDirectSendDone
            		<span style="color: blue;">AddHandler</span> mailer.MessageSent, <span style="color: blue;">AddressOf</span> OnMessageSent
            
            		<span style="color: green;">' Send a message to 3 recipients on 2 domains. Let's assume we send </span>
            		<span style="color: green;">' from a domain which has no its own MX record, and domain1.com checks </span>
            		<span style="color: green;">' this and rejects our message to user1@domain1.com. In this case, </span>
            		<span style="color: green;">' the message will be delivered to user1@domain1.com using ISP's mail </span>
            		<span style="color: green;">' server (we assume ISP's mail server has MX record assigned).</span>
            		mailer.To.AsString = "user1@domain1.com, user2@domain1.com, user2@domain2.com"
            		mailer.From.Email = "sender@domain.com"
            		mailer.Subject = "Test message"
            		mailer.Send()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.Security.CryptoApiFuncs">
            <summary>
            Summary description for SmimeFuncs.
            </summary>
        </member>
        <member name="T:MailBee.Security.Impersonation">
            <summary>
            Provides access to the impersonation functions.
            <seealso cref="P:MailBee.Security.Powerup.LicenseKey"/>
            </summary>
            <remarks>
            <para>This class can be used to let the current thread programmatically impersonate another user.
            This can be useful if the application needs to access resources which
            belong to another user.</para>
            <para>If you need to impersonate web application based on which user accessed it, refer to ASP.NET impersonation
            section of MSDN library.</para>
            <para>To get the name of the user account being used by the current thread, call <c>System.Security.Principal.WindowsIdentity.GetCurrent().Name</c>.</para>
            <note>To use this class, make sure MailBee.NET Security Powerup is licensed
            (see <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property for details).</note>
            </remarks>
            <example>This sample displays the current user name, then impersontates the current thread and displays
            the current user name again (it's now different), then reverts back to the original user account and displays its name.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Security.Principal;
            
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Display the current domain\user name (such as "OurCompany\JohnDoe").</span>
            		Console.WriteLine(WindowsIdentity.GetCurrent().Name);
            
            		<span style="color: green;">// Impersonate as Administrator user of the current computer.</span>
            		Impersonation imperson = <span style="color: blue;">new</span> Impersonation();
            		imperson.LogonAs("Administrator", <span style="color: blue;">null</span>, "secret");
            
            		<span style="color: green;">// Display the current domain\user name (such as "JohnComputer\Administrator").</span>
            		Console.WriteLine(WindowsIdentity.GetCurrent().Name);
            
            		<span style="color: green;">// Revert back to the original user account.</span>
            		imperson.Logoff();
            
            		<span style="color: green;">// Display the current domain\user name (such as "OurCompany\JohnDoe").</span>
            		Console.WriteLine(WindowsIdentity.GetCurrent().Name);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.Security.Principal
            
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Display the current domain\user name (such as "OurCompany\JohnDoe").</span>
            		Console.WriteLine(WindowsIdentity.GetCurrent().Name)
            
            		<span style="color: green;">' Impersonate as Administrator user of the current computer.</span>
            		<span style="color: blue;">Dim</span> imperson <span style="color: blue;">As</span> Impersonation = <span style="color: blue;">New</span> Impersonation
            		imperson.LogonAs("Administrator", <span style="color: blue;">Nothing</span>, "secret")
            
            		<span style="color: green;">' Display the current domain\user name (such as "JohnComputer\Administrator").</span>
            		Console.WriteLine(WindowsIdentity.GetCurrent().Name)
            
            		<span style="color: green;">' Revert back to the original user account.</span>
            		imperson.Logoff()
            
            		<span style="color: green;">' Display the current domain\user name (such as "OurCompany\JohnDoe").</span>
            		Console.WriteLine(WindowsIdentity.GetCurrent().Name)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Impersonation.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MailBee.Security.Impersonation"/> class.
            </summary>
            <exception cref="T:MailBee.MailBeeLicenseException">MailBee.NET Security Powerup not licensed.</exception>
            <remarks>
            <para>If your application is multi-threaded and you need to have multiple impersonated threads, each such thread
            must maintain its own instance of <see cref="T:MailBee.Security.Impersonation"/> class. Single-threaded applications need only a single instance
            of this class.</para>
            <para>To get the name of the user account being used by the current thread, call <c>System.Security.Principal.WindowsIdentity.GetCurrent().Name</c>.</para>
            </remarks>
        </member>
        <member name="M:MailBee.Security.Impersonation.Dispose">
            <summary>
            Releases the resources associated with the <see cref="T:MailBee.Security.Impersonation"/> object.
            </summary>
        </member>
        <member name="M:MailBee.Security.Impersonation.LogonAs(System.String,System.String,System.String)">
            <summary>
            Makes the current thread impersonate the specified user account.
            </summary>
            <param name="accountName">The name of the account being impersonated.</param>
            <param name="domainName">The name of the domain the specified account belongs to.</param>
            <param name="password">The password of the specified account.</param>
            <returns><b>true</b> if succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="accountName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.Security.MailBeeImpersonationWin32Exception">Win32 returned an error on attempt to complete impersonation and <see cref="P:MailBee.Security.Impersonation.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The impersonation lasts until the current thread exits or <see cref="M:MailBee.Security.Impersonation.Logoff"/> method gets called.</remarks>
        </member>
        <member name="M:MailBee.Security.Impersonation.Logoff">
            <summary>
            Terminates the impersonation mode initiated with <see cref="M:MailBee.Security.Impersonation.LogonAs(System.String,System.String,System.String)"/> call and reverts back to the user account the current thread was created on.
            </summary>
            <returns><b>true</b> if succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">Not impersonated yet because <see cref="M:MailBee.Security.Impersonation.LogonAs(System.String,System.String,System.String)"/> method has not yet been called.</exception>
            <exception cref="T:MailBee.Security.MailBeeImpersonationWin32Exception">Win32 returned an error on attempt to complete impersonation and <see cref="P:MailBee.Security.Impersonation.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="P:MailBee.Security.Impersonation.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="P:MailBee.Security.Impersonation.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="P:MailBee.Security.Impersonation.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the object will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the object methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Security.Impersonation.LastResult"/> members to get more information about the error.
            <note>
            Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee.NET usage will still be thrown.
            <para>
            Typical example of such errors is passing invalid arguments to methods. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be supressed.
            </para>
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.Security.Impersonation.IsImpersonated">
            <summary>
            Gets whether the impersonation mode is on and the current thread is being impersonating another user.
            </summary>
            <value><b>true</b> if <see cref="M:MailBee.Security.Impersonation.LogonAs(System.String,System.String,System.String)"/> method has already been called on the current thread; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:MailBee.Mime.TextBodyPartCollection">
            <summary>
            Provides properties and methods for managing and examining the collection of <see cref="T:MailBee.Mime.TextBodyPart"/> objects.
            <seealso cref="P:MailBee.Mime.MailMessage.BodyParts"/>
            <seealso cref="T:MailBee.Mime.TextBodyPart"/>
            </summary>
            <remarks>
            To access text parts of the message, use <see cref="P:MailBee.Mime.MailMessage.BodyParts">MailMessage.BodyParts</see> property.
            Also, <see cref="T:MailBee.Mime.MailMessage"/> object provides <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> and <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/>
            properties for quick access to the HTML and plain-text body of the message.
            </remarks>
            <example>This sample loads the message from .EML file and displays the contents of all text parts of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (TextBodyPart textPart <span style="color: blue;">in</span> msg.BodyParts)
            {
            	Console.WriteLine("Part type: " + textPart.AsMimePart.ContentType);
            	Console.WriteLine(textPart.Text);
            	Console.WriteLine();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> textPart <span style="color: blue;">As</span> TextBodyPart <span style="color: blue;">In</span> msg.BodyParts
            	Console.WriteLine("Part type: " &amp; textPart.AsMimePart.ContentType)
            	Console.WriteLine(textPart.Text)
            	Console.WriteLine()
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.TextBodyPartCollection.Add(MailBee.Mime.TextBodyPart)">
            <overloads>Adds a text body part to the collection.</overloads>
            <summary>
            Adds the specified <see cref="T:MailBee.Mime.TextBodyPart"/> object to the collection.
            <seealso cref="T:MailBee.Mime.TextBodyPart"/>
            </summary>
            <param name="part">A <see cref="T:MailBee.Mime.TextBodyPart"/> object to be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="part"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new message, loads another message from .EML file, and adds
            all text parts of the second message to the <see cref="T:MailBee.Mime.TextBodyPartCollection"/> of the first message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg1 = <span style="color: blue;">new</span> MailMessage();
            MailMessage msg2 = <span style="color: blue;">new</span> MailMessage();
            msg2.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; msg2.BodyParts.Count; i++)
            {
            	msg1.BodyParts.Add(msg2.BodyParts[i]);
            }
            msg1.SaveMessage(@"C:\Temp\Result.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            <span style="color: blue;">Dim</span> msg1 <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            <span style="color: blue;">Dim</span> msg2 <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg2.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> msg2.BodyParts.Count - 1
            	msg1.BodyParts.Add(msg2.BodyParts(i))
            <span style="color: blue;">Next</span>
            msg1.SaveMessage("C:\Temp\Result.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.TextBodyPartCollection.Add(System.String)">
            <summary>
            Creates a new text body part of the specified content type and appends it to the collection.
            <seealso cref="T:MailBee.Mime.TextBodyPart"/>
            </summary>
            <param name="contentType">A string specifying the content type of the text part to be created.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="contentType"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new message, adds XML part to the message, and saves this message to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.BodyParts.Add("text/xml");
            msg.BodyParts["text/xml"].Text = "&lt;?xml version=\"1.0\" ?&gt;";
            msg.SaveMessage(@"C:\Temp\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.BodyParts.Add("text/xml")
            msg.BodyParts("text/xml").Text = "&lt;?xml version=""1.0"" ?&gt;"
            msg.SaveMessage("C:\Temp\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.TextBodyPartCollection.Add(System.String,MailBee.Mime.HeaderCollection,System.Boolean)">
            <summary>
            Creates a new text body part having the specified parameters and appends it to the collection.
            <seealso cref="T:MailBee.Mime.TextBodyPart"/>
            </summary>
            <param name="contentType">A string specifying the content type of the text part to be created.</param>
            <param name="customHeaders">A reference to the collection of user-defined headers to be placed into the header section of the text part,
            a null reference (<b>Nothing</b> in Visual Basic) if no user-defined headers available.</param>
            <param name="noDefaultHeaders">Indicates whether to add the standard headers.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="contentType"/> is a null reference (<b>Nothing</b> in Visual Basic) and <paramref name="noDefaultHeaders"/> is <b>false</b>.</exception>
            <remarks>
            By default, the newly created text part will contain Content-Type and (optionally) Content-Transfer-Encoding headers.
            If <paramref name="noDefaultHeaders"/> was <b>true</b>, these headers will not be added and <paramref name="contentType"/> value will be ignored.
            </remarks>
            <example>This sample creates a new message, sets plain-text body and alternative XML body with user-defined header, and saves it to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Create a message and set plain-text body.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.BodyPlainText = "See XML body";
            
            <span style="color: green;">// Prepare custom headers for XML part.</span>
            HeaderCollection userDefined = <span style="color: blue;">new</span> HeaderCollection();
            userDefined.Add("Content-Class", "document", <span style="color: blue;">true</span>);
            
            <span style="color: green;">// Create XML part and set its contents.</span>
            msg.BodyParts.Add("text/xml", userDefined, <span style="color: blue;">false</span>).Text = "&lt;?xml version=\"1.0\" ?&gt;";
            
            <span style="color: green;">// Save the message to disk.</span>
            msg.SaveMessage(@"C:\Docs\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Create a message and set plain-text body.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.BodyPlainText = "See XML body"
            
            <span style="color: green;">' Prepare custom headers for XML part.</span>
            <span style="color: blue;">Dim</span> userDefined <span style="color: blue;">As</span> HeaderCollection = <span style="color: blue;">New</span> HeaderCollection
            userDefined.Add("Content-Class", "document", <span style="color: blue;">True</span>)
            
            <span style="color: green;">' Create XML part and set its contents.</span>
            msg.BodyParts.Add("text/xml", userDefined, <span style="color: blue;">False</span>).Text = "&lt;?xml version=""1.0"" ?&gt;"
            
            <span style="color: green;">' Save the message to disk.</span>
            msg.SaveMessage("C:\Docs\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.TextBodyPartCollection.Clear">
            <summary>
            Removes all the text parts from the message.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <example>This sample loads the message from .EML file and removes all the text parts from this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all the text parts.</span>
            msg.BodyParts.Clear();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all the text parts.</span>
            msg.BodyParts.Clear()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.TextBodyPartCollection.Remove(System.String)">
            <summary>
            Removes the text part of the specified content type from the message.
            </summary>
            <param name="contentType">A string specifying the content type of text part to be removed.</param>
            <returns>
            <b>true</b> if the <see cref="T:MailBee.Mime.TextBodyPart"/> object having the specified content type was found in the collection;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="contentType"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            If more than one text part of the specified content type exist in the collection,
            only the first found text part will be deleted. To delete other text body parts of the specified content
            type, call this method until it starts returning <b>false</b>.
            </remarks>
            <example>This sample loads the message from .EML file and removes all HTML text parts from the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all HTML parts from the message.</span>
            <span style="color: blue;">while</span> (msg.BodyParts.Remove("text/html"));
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all HTML parts from the message.</span>
            <span style="color: blue;">While</span> msg.BodyParts.Remove("text/html")
            <span style="color: blue;">End</span> <span style="color: blue;">While</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.TextBodyPartCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the text part at the specified zero-based index from the collection.
            </summary>
            <param name="index">The zero-based index of the text part in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <example>This sample loads the message from .EML file and removes the first text part of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove the first body part from the collection.</span>
            <span style="color: blue;">if</span> (msg.BodyParts.Count &gt; 0)
            {
            	msg.BodyParts.RemoveAt(0);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove the first body part from the collection.</span>
            <span style="color: blue;">If</span> (msg.BodyParts.Count &gt; 0) <span style="color: blue;">Then</span>
            	msg.BodyParts.RemoveAt(0)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPartCollection.Html">
            <summary>
            Gets a reference to the HTML text part of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.BodyParts"/>
            </summary>
            <value>
            A reference to <see cref="T:MailBee.Mime.TextBodyPart"/> object representing the HTML body and its headers.
            </value>
            <remarks>
            <para>If the message contains more than one HTML body, this property will return the first found.
            If the message does not contain HTML body, accessing this property will create new one.</para>
            <para>If the above behaviour is not suitable for your case, you can always iterate through the collection
            and examine each text part as it appears in the message.</para>
            </remarks>
            <example>This sample creates a new message with HTML body part and saves this message to disk.
            In real-world apps, however, it would be easier to set HTML body contents using <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> property.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.BodyParts.Html.Text = "&lt;i&gt;Hello&lt;/i&gt;, &lt;b&gt;World&lt;/b&gt;!";
            msg.SaveMessage(@"C:\Docs\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.BodyParts.Html.Text = "&lt;i&gt;Hello&lt;/i&gt;, &lt;b&gt;World&lt;/b&gt;!"
            msg.SaveMessage("C:\Docs\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPartCollection.Plain">
            <summary>
            Gets a reference to the plain-text part of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.BodyParts"/>
            </summary>
            <value>
            A reference to <see cref="T:MailBee.Mime.TextBodyPart"/> object representing the plain-text body and its headers.
            </value>
            <remarks>
            <para>If the message contains more than one plain-text body, this property will return the first found.
            If the message does not contain plain-text body, accessing this property will create new one.</para>
            <para>If the above behaviour is not suitable for your case, you can always iterate through the collection
            and examine each text part as it appears in the message.</para>
            </remarks>
            <example>This sample creates a new message with the plain-text body and saves it to disk.
            In real-world apps, however, it would be easier to set plain-text body contents using <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/> property.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)ю</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.BodyParts.Plain.Text = "Hello, World!";
            msg.SaveMessage(@"C:\Docs\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.BodyParts.Plain.Text = "Hello, World!"
            msg.SaveMessage("C:\Docs\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPartCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Mime.TextBodyPart"/> object in the collection at the specified zero-based index.
            <seealso cref="T:MailBee.Mime.TextBodyPart"/>
            </summary>
            <param name="index">The zero-based index of the text part in the collection.</param>
            <value>
            A <see cref="T:MailBee.Mime.TextBodyPart"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <example>This sample loads the message from .EML file and displays the content of the first text body of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">if</span> (msg.BodyParts.Count &gt; 0)
            {
            	Console.WriteLine(msg.BodyParts[0].Text);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">If</span> (msg.BodyParts.Count &gt; 0) <span style="color: blue;">Then</span>
            	Console.WriteLine(msg.BodyParts(0).Text)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPartCollection.Item(System.String)">
            <summary>
            Gets a reference to the <see cref="T:MailBee.Mime.TextBodyPart"/> object representing the text part of the specified content type.
            <seealso cref="P:MailBee.Mime.MailMessage.ContentType"/>
            </summary>
            <param name="contentType">A string containing the content type of the text part to be searched (such as <i>text/plain</i>).</param>
            <value>
            A <see cref="T:MailBee.Mime.TextBodyPart"/> object  representing the text part of the specified content type, or
            a null reference (<b>Nothing</b> in Visual Basic) if the text part of the specified content type does not exist in the collection.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="contentType"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample loads the message from .EML file and displays the contents of XML body of the message (if any).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">if</span> (msg.BodyParts["text/xml"] != <span style="color: blue;">null</span>)
            {
            	Console.WriteLine(msg.BodyParts["text/xml"].Text);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> msg.BodyParts("text/xml") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine(msg.BodyParts("text/xml").Text)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.Mime.TextBodyPart">
            <summary>
            Represents a text body of the message.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            <seealso cref="T:MailBee.Mime.MimePart"/>
            </summary>
            <remarks>
            <para>The MIME parts of the message can include text parts and attachments.</para>
            <para>A MIME part is considered to be a text part if its <see cref="P:MailBee.Mime.MimePart.ContentType"/> starts with <i>text/</i> and this part is
            not attachment. For instance, MIME parts of the following content types are text parts:
            <list type="bullet">
            <item><description>text/plain</description></item>
            <item><description>text/html</description></item>
            <item><description>text/xml</description></item>
            <item><description>text/calendar</description></item>
            </list></para>
            <para>To get plain-text body of the message, use <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/> property.
            To get HTML body, use <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> property.</para>
            <para>To access all the text parts (in the case if you need specific part, such as XML body if any),
            use <see cref="P:MailBee.Mime.MailMessage.BodyParts"/> property.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TextBodyPartCollection"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPart.AsMimePart">
            <summary>
            Gets the text part as <see cref="T:MailBee.Mime.MimePart"/> object.
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.MimePart"/> object representing the text part as a MIME part.
            </value>
            <remarks>
            <para><see cref="T:MailBee.Mime.MimePart"/> corresponding to the given text part provides access to those properties that are not available 
            in <see cref="T:MailBee.Mime.TextBodyPart"/> but accessible in <see cref="T:MailBee.Mime.MimePart"/> only.</para>
            <para>To get the root part of the MIME parts tree of the message, use <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> property
            of <see cref="T:MailBee.Mime.MailMessage"/> object. <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> MIME part contains
            all the MIME parts of the message.</para>
            </remarks>
            <example>
            The example is available in  <see cref="T:MailBee.Mime.TextBodyPartCollection"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPart.IsOriginal">
            <summary>
            Indicates if the text part came with the message or it was
            added automatically during parsing the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <value>
            <b>true</b> if the text part is the original part of the message; otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>If the message does not have plain-text or HTML body,
            <see cref="P:MailBee.Mime.MailMessage.Parser"/> object can be configured to tell MailBee to generate such a body
            (in fact, create the corresponding <see cref="T:MailBee.Mime.TextBodyPart"/>) during parsing.
            MailBee will place automatically created parts of the message into <see cref="P:MailBee.Mime.MailMessage.BodyParts"/> collection.</para>
            <para>Also, the developer can manually add a text part into <see cref="P:MailBee.Mime.MailMessage.BodyParts"/> collection using its methods.</para>
            <para>The scenarios listed above will produce <see cref="T:MailBee.Mime.TextBodyPart"/> objects having <see cref="P:MailBee.Mime.TextBodyPart.IsOriginal"/> set to <b>false</b>.</para>
            </remarks>
            <example> This sample loads the message from .EML file, generates HTML body from the plain-text body,
            and reports whether HTML and plain-text parts are original.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load plain-text message and make HTML body automatically.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\PlainTextEmail.eml");
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfPlain;
            
            <span style="color: green;">// Report plain-text and HTML parts origin.</span>
            Console.WriteLine("Plain part IsOriginal = " + msg.BodyParts.Plain.IsOriginal.ToString());
            Console.WriteLine("HTML part IsOriginal = " + msg.BodyParts.Html.IsOriginal.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load plain-text message and make HTML body automatically.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\PlainTextEmail.eml")
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfPlain
            
            <span style="color: green;">' Report plain-text and HTML parts origin.</span>
            Console.WriteLine("Plain part IsOriginal = " &amp; msg.BodyParts.Plain.IsOriginal.ToString())
            Console.WriteLine("HTML part IsOriginal = " &amp; msg.BodyParts.Html.IsOriginal.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPart.Charset">
            <summary>
            Gets or sets the charset of the text part contents.
            <seealso cref="P:MailBee.Mime.MailMessage.Charset"/>
            </summary>
            <value>
            <value>A string containing the name of the charset of the text body part contents, or an empty string
            if the charset is not specified in the message.</value>
            </value>
            <remarks>
            <para>When composing a message, you can use this property to set different charsets for different text parts of the message.</para>
            <para>It has no effect on parsing messages. To set the encoding to be used during parsing messages, use
            <see cref="P:MailBee.Mime.MessageParserConfig.EncodingDefault"/> or <see cref="P:MailBee.Mime.MessageParserConfig.EncodingOverride"/> properties.</para>
            </remarks>
            <example>This sample creates a new message with HTML and plain-text bodies, sets different charsets for these bodies, and save the message to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.BodyHtmlText = "&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;World&lt;/i&gt;!";
            msg.BodyParts.Html.Charset = "utf-8";
            msg.BodyPlainText = "Hello, World!";
            msg.BodyParts.Plain.Charset = "us-ascii";
            msg.SaveMessage(@"C:\Docs\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.BodyHtmlText = "&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;World&lt;/i&gt;!"
            msg.BodyParts.Html.Charset = "utf-8"
            msg.BodyPlainText = "Hello, World!"
            msg.BodyParts.Plain.Charset = "us-ascii"
            msg.SaveMessage("C:\Docs\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPart.TransferEncoding">
            <summary>
            Gets or sets the mail transfer encoding of the text part contents.
            <seealso cref="P:MailBee.Mime.MailMessage.MailTransferEncodingHtml"/>
            <seealso cref="P:MailBee.Mime.MailMessage.MailTransferEncodingPlain"/>
            </summary>
            <value>
            The mail transfer encoding of the text part contents.
            The default value for new messages is <see cref="F:MailBee.Mime.MailTransferEncoding.QuotedPrintable"/>.
            </value>
            <remarks>
            <para>When parsing existing messages, the mail transfer encoding is taken from Content-Transfer-Encoding header. If the text part does not
            contain this header, the value will be <see cref="F:MailBee.Mime.MailTransferEncoding.None"/>. However,
            MailBee always decodes messages automatically so this property is just for information purposes only.</para>
            <para>When composing new messages, you use this property to set mail transfer encoding to non-<see cref="F:MailBee.Mime.MailTransferEncoding.QuotedPrintable"/>
            value. However, this can be useful under special circumstances only. Anyway, to change mail transfer encoding
            of HTML or plain-text parts of the message, it's easier to use <seealso cref="P:MailBee.Mime.MailMessage.MailTransferEncodingHtml"/> and
            <seealso cref="P:MailBee.Mime.MailMessage.MailTransferEncodingPlain"/> properties of the <see cref="T:MailBee.Mime.MailMessage"/> itself.</para>
            </remarks>
            <example>This sample creates a new message with HTML body, sets the mail transfer encoding for the XML part to
            <see cref="F:MailBee.Mime.MailTransferEncoding.Base64"/>, and saves it to disk. In real-world app, it would be a bit easier
            to use <seealso cref="P:MailBee.Mime.MailMessage.MailTransferEncodingHtml"/> property to achieve the same effect.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.BodyHtmlText = "&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;World&lt;/i&gt;!";
            msg.BodyParts.Html.TransferEncoding = MailTransferEncoding.Base64;
            msg.SaveMessage(@"C:\Docs\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.BodyHtmlText = "&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;World&lt;/i&gt;!"
            msg.BodyParts.Html.TransferEncoding = MailTransferEncoding.Base64
            msg.SaveMessage("C:\Docs\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPart.Headers">
            <summary>
            Gets the collection of the text part headers.
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.HeaderCollection"/> object containing the headers of the text part.
            </value>
            <example>This sample loads the message from .EML file and displays the values of headers of each text part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every text part...</span>
            <span style="color: blue;">foreach</span> (TextBodyPart part <span style="color: blue;">in</span> msg.BodyParts)
            {
            	<span style="color: green;">// Show the type of the text part.</span>
            	Console.WriteLine(<span style="color: blue;">string</span>.Format("Text part {0} headers values:", part.AsMimePart.ContentType));
            
            	<span style="color: green;">// For every header...</span>
            	<span style="color: blue;">foreach</span> (Header hdr <span style="color: blue;">in</span> part.Headers)
            	{
            		<span style="color: green;">// Show the value of the header.</span>
            		Console.WriteLine(hdr.Value);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: blue;">Dim</span> part <span style="color: blue;">As</span> TextBodyPart
            <span style="color: blue;">Dim</span> hdr <span style="color: blue;">As</span> Header
            
            <span style="color: green;">' For every text part...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">In</span> msg.BodyParts
            	<span style="color: green;">' Show the type of the text part.</span>
            	Console.WriteLine(<span style="color: blue;">String</span>.Format("Text part {0} headers values:", part.AsMimePart.ContentType))
            
            	<span style="color: green;">' For every header...</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> hdr <span style="color: blue;">In</span> part.Headers
            		<span style="color: green;">' Show the value of the header.</span>
            		Console.WriteLine(hdr.Value)
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TextBodyPart.Text">
            <summary>
            Gets or sets the contents of the text part as a string.
            </summary>
            <value>
            A string containing the actual contents of the text part.
            </value>
            <example>The example is available in <see cref="T:MailBee.Mime.TextBodyPartCollection"/> topic.</example>
        </member>
        <member name="T:MailBee.Mime.MailMessage">
            <summary>
            Provides properties and methods for constructing and examining a single e-mail message.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <remarks>
            <see cref="T:MailBee.Mime.MailMessage"/> is a standard container for e-mail messages.
            <list type="bullet">
            <item><description><see cref="T:MailBee.Pop3Mail.Pop3"/> and <see cref="T:MailBee.ImapMail.Imap"/> components return dowloaded e-mail messages as 
            <see cref="T:MailBee.Mime.MailMessage"/> or <see cref="T:MailBee.Mime.MailMessageCollection"/> objects</description></item>
            <item><description><see cref="T:MailBee.ImapMail.Imap"/> component can also upload e-mail messages into a folder on the mail server</description></item>
            <item><description><see cref="T:MailBee.SmtpMail.Smtp"/> component sends e-mail messages</description></item>
            <item><description><see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> method downloads an e-mail message from an array, stream or an .EML file</description></item>
            <item><description><see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/> method saves the message into a stream or an .EML file</description></item>
            <item><description><see cref="M:MailBee.Mime.MailMessage.GetMessageRawData"/> method returns the message source as an array</description></item>
            </list>
            <para>Moreover <see cref="T:MailBee.Mime.MailMessage"/></para>
            <list type="bullet">
            <item><description>Gives access to all parts of the message such as headers, bodies, attachments, time stamps (Received headers), etc</description></item>
            <item><description>Has comprehensive facilities for message modification (such as HTML to plain-text conversion, preparing HTML with embedded pictures for dispaying, etc)</description></item>
            <item><description>Offers the full support of international charsets</description></item>
            <item><description>Supports mail merge capabilitites, XML serialization, and much more</description></item>
            </list>
            </remarks>
            <example>This sample composes a mail message and saves it to disk using two methods: as .EML file and as .XML file.
            <code lang="C#">
            <span style="color: blue;">using</span> System.Text;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Set the recipient e-mail from string.</span>
            		msg.To.AddFromString("some_user@domain.com");
            
            		<span style="color: green;">// Add more recipient e-mail's along with recipient</span>
            		<span style="color: green;">// names and corresponding remarks.</span>
            		msg.To.Add("user1@domain.com", "User 1", "Remark");
            		msg.To.Add("user2@domain.com", "User 2", "");
            
            		<span style="color: green;">// Set the sender e-mail from string.</span>
            		msg.From.Email = "jdoe@domain.com";
            
            		<span style="color: green;">// Set the friendly name of the message sender.</span>
            		msg.From.DisplayName = "John Doe";
            
            		<span style="color: green;">// Set the subject of the message.</span>
            		msg.Subject = "Hello";
            
            		<span style="color: green;">// Set Carbon Copy (CC) recipient e-mail along with</span>
            		<span style="color: green;">// corresponding name and remarks.</span>
            		msg.Cc.Add("user3@domain.com", "User 3", "Remark");
            
            		<span style="color: green;">// Set the plain-formatted body of the message.</span>
            		msg.BodyPlainText = "Hello, World!";
            
            		<span style="color: green;">// Set the HTML-formatted body of the message.</span>
            		msg.BodyHtmlText = @"Hello, &lt;b&gt;World&lt;/b&gt;!&lt;br&gt;
            			&lt;IMG alt="""" hspace=0 src=""cid:12345"" align=baseline border=0&gt;&lt;br&gt;
            			&lt;IMG alt="""" hspace=0 src=""cid:67891"" align=baseline border=0&gt;";
            
            		<span style="color: green;">// Specify the charset of the message.</span>
            		msg.Charset = "utf-8";
            
            		<span style="color: green;">// Set the Quoted-Printable encoding for plain-formatted body.</span>
            		msg.MailTransferEncodingPlain = MailTransferEncoding.QuotedPrintable;
            
            		<span style="color: green;">// Set the Quoted-Printable encoding for HTML-formatted body.</span>
            		msg.MailTransferEncodingHtml = MailTransferEncoding.QuotedPrintable;
            
            		<span style="color: green;">// Add three different attachments to the message.</span>
            		msg.Attachments.Add(@"C:\Docs\new.gif", "1.gif", "12345");
            		msg.Attachments.Add(@"C:\Docs\old.gif", "2.gif", "67891");
            		msg.Attachments.Add(@"C:\Docs\2.jpg", "2.jpg");
            
            		<span style="color: green;">// Encode all message headers into Base64 encoding.</span>
            		msg.EncodeAllHeaders(Encoding.Default, HeaderEncodingOptions.Base64);
            
            		<span style="color: green;">// Set the unique message identifier.</span>
            		msg.SetUniqueMessageID("");
            
            		<span style="color: green;">// Save message to the disk as .eml file.</span>
            		msg.SaveMessage(@"C:\Temp\TestMail.eml");
            
            		<span style="color: green;">// Serialize message into .xml file on the disk.</span>
            		msg.Serialize(@"C:\Temp\TestMail.xml");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System.Text
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Set the recipient e-mail from string.</span>
            		msg.To.AddFromString("some_user@domain.com")
            
            		<span style="color: green;">' Add more recipient e-mail's along with recipient</span>
            		<span style="color: green;">' names and corresponding remarks.</span>
            		msg.To.Add("user1@domain.com", "User 1", "Remark")
            		msg.To.Add("user2@domain.com", "User 2", "")
            
            		<span style="color: green;">' Set the sender e-mail from string.</span>
            		msg.From.Email = "jdoe@domain.com"
            
            		<span style="color: green;">' Set the friendly name of the message sender.</span>
            		msg.From.DisplayName = "John Doe"
            
            		<span style="color: green;">' Set the subject of the message.</span>
            		msg.Subject = "Hello"
            
            		<span style="color: green;">' Set Carbon Copy (CC) recipient e-mail along with</span>
            		<span style="color: green;">' corresponding name and remarks.</span>
            		msg.Cc.Add("user3@domain.com", "User 3", "Remark")
            
            		<span style="color: green;">' Set the plain-formatted body of the message.</span>
            		msg.BodyPlainText = "Hello, World!"
            
            		<span style="color: green;">' Set the HTML-formatted body of the message.</span>
            		msg.BodyHtmlText = "Hello, &lt;b&gt;World&lt;/b&gt;!&lt;br&gt;" &amp; _
            			"&lt;IMG alt="""" hspace=0 src=""cid:12345"" align=baseline border=0&gt;&lt;br&gt;" &amp; _
            			"&lt;IMG alt="""" hspace=0 src=""cid:67891"" align=baseline border=0&gt;"
            
            		<span style="color: green;">' Specify the charset of the message.</span>
            		msg.Charset = "utf-8"
            
            		<span style="color: green;">' Set the Quoted-Printable encoding for plain-formatted body.</span>
            		msg.MailTransferEncodingPlain = MailTransferEncoding.QuotedPrintable
            
            		<span style="color: green;">' Set the Quoted-Printable encoding for HTML-formatted body.</span>
            		msg.MailTransferEncodingHtml = MailTransferEncoding.QuotedPrintable
            
            		<span style="color: green;">' Add three different attachments to the message.</span>
            		msg.Attachments.Add("C:\Docs\new.gif", "1.gif", "12345")
            		msg.Attachments.Add("C:\Docs\old.gif", "2.gif", "67891")
            		msg.Attachments.Add("C:\Docs\2.jpg", "2.jpg")
            
            		<span style="color: green;">' Encode all message headers into Base64 encoding.</span>
            		msg.EncodeAllHeaders(Encoding.Default, HeaderEncodingOptions.Base64)
            
            		<span style="color: green;">' Set the unique message identifier.</span>
            		msg.SetUniqueMessageID("")
            
            		<span style="color: green;">' Save message to disk as .eml file.</span>
            		msg.SaveMessage("C:\Temp\TestMail.eml")
            
            		<span style="color: green;">' Serialize message into .xml file on disk.</span>
            		msg.Serialize("C:\Temp\TestMail.xml")
            	<span style="color: blue;">End</span> <span style="color: blue;">sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Dispose">
            <summary>
            Removes the temporary folders and files that are associated with the mail message.
            </summary>
            <remarks>
            If the <see cref="F:MailBee.Mime.MessageFolderBehavior.CreateAndDelete"/> option was turned on when the
            <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> method was used, all temporary folders and files associated with the mail message
            will automatically be removed when <see cref="M:MailBee.Mime.MailMessage.Dispose"/> method gets called. Otherwise, nothing will happen.
            </remarks>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Finalize">
            <summary>
            Finalizes the instance of <see cref="T:MailBee.Mime.MailMessage"/> object.
            </summary>
            <remarks>
            The developer may call <see cref="M:MailBee.Mime.MailMessage.Dispose"/> method to finalize an instance of
            <see cref="T:MailBee.Mime.MailMessage"/> object manually.
            </remarks>
        </member>
        <member name="M:MailBee.Mime.MailMessage.AppendChunk(System.Byte[])">
            <summary>
            Adds a block of bytes to the source of the message.
            <seealso cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/>
            </summary>
            <param name="nextChunk">A reference to the byte array containing a portion of message data.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="nextChunk"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>This method can be used to assemble a message from smaller memory blocks (for instance, if the message is being
            read from the resource which cannot return all the data at once). However, since this method recreates the internal message data buffer on each call,
            it should be used only if the size of the data is not known until all the data received. If the size of the data is known
            from the very beginning, it's more effective to create a memory array of the required length, fill it with the data and then pass this array
            to <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.Byte[])"/> method. Or, if you're using streams, use <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.IO.Stream)"/> overload.</para>
            <para>To assembly a message which naturally comes as a series of smaller e-mail messages (also called partial messages), use
            <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> method.</para>
            </remarks>
            <example>This sample demonstrates loading 1000 bytes of the message data from a file using a buffer of a fixed length (100 bytes). It's assumed the file
            is at least 1000 bytes in size.
            <note>In real world applications, it's easier to load a message from a file/stream/memory using <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> method and its overloads.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		<span style="color: blue;">string</span> filename = @"C:\Docs\TestMail.eml";
            
            		<span style="color: green;">// Open the file for reading.</span>
            		<span style="color: blue;">using</span> (FileStream fs = <span style="color: blue;">new</span> FileStream(filename, FileMode.Open))
            		{
            			<span style="color: green;">// Create a 100 bytes buffer.</span>
            			<span style="color: blue;">byte</span>[] bytes = <span style="color: blue;">new</span> <span style="color: blue;">byte</span>[100];
            
            			<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 10; i++)
            			{
            				<span style="color: green;">// Read a portion of data (100 bytes) from the file and append it to the message source.</span>
            				fs.Read(bytes, i * bytes.Length, bytes.Length);
            				msg.AppendChunk(bytes);
            			}
            		}
            
            		<span style="color: green;">// The message will be parsed at this point (when we access any of its properties).</span>
            		Console.WriteLine(msg.Subject);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> msg = <span style="color: blue;">New</span> MailMessage
            		<span style="color: blue;">Dim</span> filename <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "C:\Docs\TestMail1.eml"
            
            		<span style="color: blue;">Dim</span> fs <span style="color: blue;">As</span> FileStream
            		<span style="color: blue;">Try</span>
            			<span style="color: green;">' Open the file for reading.</span>
            			fs = <span style="color: blue;">New</span> FileStream(filename, FileMode.Open)
            
            			<span style="color: green;">' Create a 100 bytes buffer.</span>
            			<span style="color: blue;">Dim</span> bytes <span style="color: blue;">As</span> <span style="color: blue;">Byte</span>()
            			<span style="color: blue;">ReDim</span> bytes(100)
            
            			<span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1 <span style="color: blue;">To</span> 10
            				<span style="color: green;">' Read a portion of data (100 bytes) from the file and append it to the message source.</span>
            				fs.Read(bytes, i * bytes.Length, bytes.Length)
            				msg.AppendChunk(bytes)
            			<span style="color: blue;">Next</span>
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> fs <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				fs.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' The message will be parsed at this point (when we access any of its properties).</span>
            		Console.WriteLine(msg.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)">
            <summary>
            Adds the specified partial message to this message.
            <seealso cref="P:MailBee.Mime.MailMessage.PartIndex"/>
            <seealso cref="P:MailBee.Mime.MailMessage.PartCount"/>
            <seealso cref="P:MailBee.Mime.MailMessage.IsEntire"/>
            </summary>
            <param name="nextPart">A portion of the message as another <see cref="T:MailBee.Mime.MailMessage"/> object.</param>
            <returns><b>true</b> if the partial message which was appended was the last one required; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="nextPart"/> is a null reference
            (<b>Nothing</b> in Visual Basic) or not a partial message.</exception>
            <exception cref="T:MailBee.MailBeeInvalidStateException">The message is not partial, so another partial message can't be added to it.</exception>
            <remarks>
            <para>Some mail client programs can split large messages into a number of smaller messages before sending
            and then send these smaller e-mails separately. This technique was used to overcome limitations of
            maximum size of a message which existed on some mail servers. Nowdays, this practice is not used but MailBee is still capable
            of parsing such messages. To assembly a message from its parts (they have <i>message/partial</i> in their <see cref="P:MailBee.Mime.MailMessage.ContentType"/>),
            you should get the first part (having <see cref="P:MailBee.Mime.MailMessage.PartIndex"/> set to 1), and append the remaining messages in the correct
            order (with <see cref="P:MailBee.Mime.MailMessage.PartIndex"/> set to 2, 3, etc) using <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> until it returns <b>true</b>.
            <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> returns <b>true</b> when you append a message having <see cref="P:MailBee.Mime.MailMessage.PartIndex"/> equal to <see cref="P:MailBee.Mime.MailMessage.PartCount"/>.</para>
            <para>Use <see cref="P:MailBee.Mime.MailMessage.PartCount"/> property to determine if the mail message is split
            (and so it's needed to get the remaining parts and join them with <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> method).</para>
            <para>
            Use <see cref="P:MailBee.Mime.MailMessage.PartIndex"/> property to obtain the index of the message so that you would be able to pass
            the messages to be appended by <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> method in proper order (from 1 to <see cref="P:MailBee.Mime.MailMessage.PartCount"/>).
            </para>
            </remarks>
            <example>This sample assemblies the message from 4 partial messages. It loads the first portion
            and then calls <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> for the remaining 3 portions.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		MailMessage newMsg = <span style="color: blue;">new</span> MailMessage();
            		MailMessage partialMsg = <span style="color: blue;">new</span> MailMessage();
            		newMsg.LoadMessage(@"C:\Docs\splitmail\1of4.eml");
            
            		<span style="color: green;">// Append 3 partial messages that are loaded from disk.</span>
            		<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 2; i &lt;= 4; i++)
            		{
            			partialMsg.LoadMessage(<span style="color: blue;">string</span>.Format(@"C:\Docs\splitmail\{0}of4.eml", i));
            			newMsg.AppendPartialMessage(partialMsg);
            		}
            
            		<span style="color: green;">// Save the entire message to disk.</span>
            		newMsg.SaveMessage(@"C:\Temp\entire.eml");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> newMsg = <span style="color: blue;">New</span> MailMessage
            		<span style="color: blue;">Dim</span> partialMsg = <span style="color: blue;">New</span> MailMessage
            		newMsg.LoadMessage("C:\Docs\splitmail\1of4.eml")
            
            		<span style="color: green;">' Append 3 partial messages that are loaded from disk.</span>
            		<span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 2 <span style="color: blue;">To</span> 4
            			partialMsg.LoadMessage(<span style="color: blue;">String</span>.Format("C:\Docs\splitmail\{0}of4.eml", i))
            			newMsg.AppendPartialMessage(partialMsg)
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Save the entire message to disk.</span>
            		newMsg.SaveMessage("C:\Temp\entire.eml")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Clear(MailBee.Mime.MessageElements)">
            <summary>
            Removes the specified elements from the message.
            <seealso cref="M:MailBee.Mime.MailMessage.Reset"/>
            </summary>
            <param name="elements">A set of <see cref="T:MailBee.Mime.MessageElements"/> flags specifying which elements should be removed from the message.</param>
            <remarks>
            To clear the entire message (i.e. to reset all its properties to default values), the developer should use <see cref="M:MailBee.Mime.MailMessage.Reset"/> method.
            </remarks>
            <example>This sample downloads the message from the specified POP3 account, removes all message attachments and recipients
            (other data is not removed), and saves this message to disk.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop.mail.com", "kathy", "password", 1);
            
            		<span style="color: green;">// Remove all attachments and recipients from the message and save this message to disk.</span>
            		msg.Clear(MessageElements.Attachments | MessageElements.Recipients);
            		msg.SaveMessage(@"C:\Temp\msg.eml");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop.mail.com", "kathy", "password", 1)
            
            		<span style="color: green;">' Remove all attachments and recipients from the message and save this message to disk.</span>
            		msg.Clear(MessageElements.Attachments <span style="color: blue;">Or</span> MessageElements.Recipients)
            		msg.SaveMessage("C:\Temp\msg.eml")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Clone">
            <summary>
            Creates a copy of the message.
            </summary>
            <returns>A <see cref="T:MailBee.Mime.MailMessage"/> object which represents the cloned message.</returns>
            <remarks>
            The deep clone is performed, that means the fully independent copy of the message is created and there
            are no shared objects between the original message and its copy.
            </remarks>
            <example>This sample demostrates that the message copy created by this method has its own copies of all internal objects.
            For instance, their <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collections are another objects, not just two references to the same object.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		MailMessage newMsg = msg;
            		MailMessage clonedMsg = msg.Clone();
            
            		<span style="color: green;">// Check if the attachments of two messages are equal</span>
            		<span style="color: green;">// and display the corresponding notification.</span>
            		<span style="color: blue;">if</span> (msg.Attachments == newMsg.Attachments)
            		{
            			Console.WriteLine("Equals");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("Not equals");
            		}
            
            		<span style="color: green;">// Check if the attachments of two messages are equal</span>
            		<span style="color: green;">// and display the corresponding notification.</span>
            		<span style="color: blue;">if</span> (msg.Attachments == clonedMsg.Attachments)
            		{
            			Console.WriteLine("Equals");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("Not equals");
            		}
            	}
            }
            
            <span style="color: green;">// Output:</span>
            <span style="color: green;">// Equals</span>
            <span style="color: green;">// Not equals</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: blue;">Dim</span> newMsg = msg
            		<span style="color: blue;">Dim</span> cloneMsg = msg.Clone()
            
            		<span style="color: green;">' Check if the attachments of two messages are equal</span>
            		<span style="color: green;">' and display the corresponding notification.</span>
            		<span style="color: blue;">If</span> msg.Attachments <span style="color: blue;">Is</span> newMsg.Attachments <span style="color: blue;">Then</span>
            			Console.WriteLine("Equals")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("Not equals")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Check if the attachments of two messages are equal</span>
            		<span style="color: green;">' and display the corresponding notification.</span>
            		<span style="color: blue;">If</span> msg.Attachments <span style="color: blue;">Is</span> cloneMsg.Attachments <span style="color: blue;">Then</span>
            			Console.WriteLine("Equals")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("Not equals")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            
            <span style="color: green;">' Output:</span>
            <span style="color: green;">' Equals</span>
            <span style="color: green;">' Not equals</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Deserialize(System.Xml.XmlTextReader)">
            <summary>
            Loads a message from XML stream using the specified <see cref="T:System.Xml.XmlTextReader"/> object. 
            </summary>
            <param name="xmlReader">An <see cref="T:System.Xml.XmlTextReader"/> object.</param>
            <returns>
            <b>true</b> if the message was successfully loaded from the XML stream; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="xmlReader"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and the <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> property is <b>true</b>.</exception>
            <remarks>
            This method can loada a message which was previously serialized using <see cref="M:MailBee.Mime.MailMessage.Serialize(System.Xml.XmlTextWriter)"/> method.
            </remarks>
            <example>This sample loads the message from .EML file, saves it into .XML file, and then loads
            this message back from the .XML file.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.Xml;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\msg.eml");
            
            		<span style="color: green;">// Display the subject of the message and</span>
            		<span style="color: green;">// save this message to .XML file.</span>
            		Console.WriteLine(msg.Subject);
            		msg.Serialize(@"C:\Temp\msg.xml");
            
            		XmlTextReader reader = <span style="color: blue;">null</span>;
            		<span style="color: blue;">try</span>
            		{
            			<span style="color: green;">// Open .XML file for reading.</span>
            			reader = <span style="color: blue;">new</span> XmlTextReader(File.OpenRead(@"C:\Temp\msg.xml"));
            
            			<span style="color: green;">// Load the message from .XML file.</span>
            			MailMessage newMsg = <span style="color: blue;">new</span> MailMessage();
            			newMsg.Deserialize(reader);
            
            			<span style="color: green;">// Display the subject of the message.</span>
            			Console.WriteLine(newMsg.Subject);
            		}
            		<span style="color: blue;">finally</span>
            		{
            			<span style="color: blue;">if</span> (reader != <span style="color: blue;">null</span>) reader.Close();
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> System.Xml
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\msg.eml")
            
            		<span style="color: green;">' Display the subject of the message and</span>
            		<span style="color: green;">' save this message to .XML file.</span>
            		Console.WriteLine(msg.Subject)
            		msg.Serialize("C:\Temp\msg.xml")
            
            		<span style="color: blue;">Dim</span> reader <span style="color: blue;">As</span> XmlTextReader = <span style="color: blue;">Nothing</span>
            		<span style="color: blue;">Try</span>
            			<span style="color: green;">' Open .xml file for reading.</span>
            			reader = <span style="color: blue;">New</span> XmlTextReader(File.OpenRead("C:\Temp\msg.xml"))
            
            			<span style="color: green;">' Load the message from .XML file.</span>
            			<span style="color: blue;">Dim</span> newMsg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            			newMsg.Deserialize(reader)
            
            			<span style="color: green;">' Display the subject of the message.</span>
            			Console.WriteLine(newMsg.Subject)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> reader <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span> reader.Close()
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Deserialize(System.String)">
            <overloads>Loads the message from the specified .XML file or from XML stream.</overloads>
            <summary>
            Loads a message from the specified .XML file.
            </summary>
            <param name="filename">A string containing the name of the .XML file.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method can load a message which was previously saved using <see cref="M:MailBee.Mime.MailMessage.Serialize(System.String)"/> method.
            </remarks>
            <returns>
            <b>true</b> if the message was successfully loaded from .XML file; otherwise, <b>false</b>.
            </returns>
            <example>This sample loads the message from .EML file, saves it to .XML file, and loads this message back from .XML file.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Display the subject of this message.</span>
            		Console.WriteLine(msg.Subject);
            
            		<span style="color: green;">// Save the message to .XML file.</span>
            		msg.Serialize(@"C:\Temp\msg.xml");
            
            		<span style="color: green;">// Load the message from .XML file and display</span>
            		<span style="color: green;">// the subject of this message.</span>
            		MailMessage newMsg = <span style="color: blue;">new</span> MailMessage();
            		newMsg.Deserialize(@"C:\Temp\msg.xml");
            		Console.WriteLine(newMsg.Subject);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Display the subject of this message.</span>
            		Console.WriteLine(msg.Subject)
            
            		<span style="color: green;">' Save the message to .XML file.</span>
            		msg.Serialize("C:\Temp\msg.xml")
            
            		<span style="color: green;">' Load the message from .XML file and display</span>
            		<span style="color: green;">' the subject of this message.</span>
            		<span style="color: blue;">Dim</span> newMsg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		newMsg.Deserialize("C:\Temp\msg.xml")
            		Console.WriteLine(newMsg.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.EncodeAllHeaders(System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)">
            <summary>
            Encodes all message headers into the specified encoding.
            <seealso cref="T:MailBee.Mime.HeaderEncodingOptions"/>
            </summary>
            <param name="targetEncoding">The charset which is used to encode the value of the specified header.</param>
            <param name="options">The additional options which affect how the message headers are encoded.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="targetEncoding"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>The developer should use this method before saving or sending an e-mail message if any message headers or
            attachment names contain international characters.</para>
            <para>The developer can also encode custom header names using <see cref="M:MailBee.Mime.MailMessage.GetEncodedHeaderValue(System.String,System.String,System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)"/> method.</para>
            </remarks>
            <example>This sample loads the message from .EML file, encodes it, and saves this message to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import the following namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.Text;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\source.eml");
            msg.EncodeAllHeaders(Encoding.UTF8, HeaderEncodingOptions.Base64);
            msg.SaveMessage(@"C:\Temp\result.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import the following namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.Text
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\source.eml")
            msg.EncodeAllHeaders(Encoding.UTF8, HeaderEncodingOptions.Base64)
            msg.SaveMessage("C:\Temp\result.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.ForwardAsAttachment">
            <summary>
            Forwards a mail message as attached .EML file.
            </summary>
            <returns>
            A new <see cref="T:MailBee.Mime.MailMessage"/> object containing the message as attached .EML file.
            </returns>
            <remarks>
            This method constructs a new e-mail message and adds original message as an attachment, all other fields of the new message remain empty (such as Subject, Body, To, Cc and Bcc fields, etc).
            </remarks>
            <example>This sample loads the message from .EML file, forwards it as attachment and sends the resulting message out.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\msg.eml");
            
            		<span style="color: green;">// Create a new message having the forwarded message as attachment.</span>
            		MailMessage newMsg = msg.ForwardAsAttachment();
            
            		<span style="color: green;">// Set up other fields of the envelope message.</span>
            		newMsg.From.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            		newMsg.To.AsString = "Alice &lt;al@company.com&gt;";
            		newMsg.Subject = "Forwarded message";
            		newMsg.BodyPlainText = "The message is attached.";
            
            		<span style="color: green;">// Send it.</span>
            		Smtp.QuickSend(newMsg);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\msg.eml")
            
            		<span style="color: green;">' Create a new message having the forwarded message as attachment.</span>
            		<span style="color: blue;">Dim</span> newMsg <span style="color: blue;">As</span> MailMessage = msg.ForwardAsAttachment()
            
            		<span style="color: green;">' Set up other fields of the envelope message.</span>
            		newMsg.From.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            		newMsg.To.AsString = "Alice &lt;al@company.com&gt;"
            		newMsg.Subject = "Forwarded message"
            		newMsg.BodyPlainText = "The message is attached."
            
            		<span style="color: green;">' Send it.</span>
            		Smtp.QuickSend(newMsg)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.GetAllRecipients">
            <summary>
            Gets the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object containing the e-mail addresses of all message recipients.
            </summary>
            <returns>
            An <see cref="T:MailBee.Mime.EmailAddressCollection"/> object containing the e-mail addresses of all message recipients.
            </returns>
            <remarks>
            The entire collection of the message recipients consists of the e-mail addresses that are contained in the <see cref="P:MailBee.Mime.MailMessage.To"/>, <see cref="P:MailBee.Mime.MailMessage.Cc"/> and <see cref="P:MailBee.Mime.MailMessage.Bcc"/> fields.
            </remarks>
            <example>
            This sample loads the message from .EML file and displays the e-mail addresses of all message recipients.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Display the e-mail address of each message recipient.</span>
            		Console.WriteLine("The message has the following recipient(s):");
            		<span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> msg.GetAllRecipients())
            		{
            			Console.WriteLine(adr.Email);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Display the e-mail address of each message recipient.</span>
            		Console.WriteLine("The message has the following recipient(s):")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> msg.GetAllRecipients()
            			Console.WriteLine(adr.Email)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.GetEncodedHeaderValue(System.String,System.String,System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)">
            <summary>
            Encodes the value of the specified header.
            <seealso cref="T:MailBee.Mime.HeaderEncodingOptions"/>
            </summary>
            <param name="headerName">The name of the header.</param>
            <param name="headerValue">The value of the header.</param>
            <param name="targetEncoding">The charset which is used to encode the value of the specified header.</param>
            <param name="options">The additional options which affect how the header is encoded.</param>
            <returns>A string containing the encoded value of the header.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="headerName"/> or <paramref name="headerValue"/> or <paramref name="targetEncoding"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample encodes Subject header into UTF-8 (Quoted-Printable version) and save the message into a file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import the following namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.Text;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.Subject = MailMessage.GetEncodedHeaderValue("Subject", "Any text here", Encoding.UTF8, HeaderEncodingOptions.ForceEncoding | HeaderEncodingOptions.Base64);
            msg.SaveMessage(@"C:\Temp\msg.eml");
            </code>
            <code lang="Visual basic">
            <span style="color: green;">' To use the code below, import the following namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.Text
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.Subject = MailMessage.GetEncodedHeaderValue("Subject", "Any text here", Encoding.UTF8, HeaderEncodingOptions.ForceEncoding <span style="color: blue;">Or</span> HeaderEncodingOptions.Base64)
            msg.SaveMessage("C:\Temp\msg.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles">
            <overloads>Extracts the HTML body of the message and saves the attached inline pictures and other related
            files to disk, replaces their Content-ID's with file paths in the temporary location where they were saved, and returns the modified HTML
            body as a string.</overloads>
            <summary>
            Extracts the HTML body of the message, saves the attached inline pictures and other related files to disk, and return the modified HTML body.
            </summary>
            <returns>
            A string containing the HTML body which is altered in such a way so that all Content-ID references (<i>cid:</i>) are replaced with
            paths to the related files as they were saved by this method.
            </returns>
            <remarks>
            The inline objects referenced in the HTML body of the message (i.e. embedded objects) are saved into the folder denoted by
            <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see> property.
            The links to the embedded objects in the returned HTML data are corrected automatically. The value of <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> property
            is left intact.
            </remarks>
            <example>This sample creates an HTML file from the e-mail message. The related files will also be saved into the same location.
            <note>You can also use <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/> method to save messages as HTML pages.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Set the folder where all related files should be saved.</span>
            		msg.Parser.WorkingFolder = @"C:\Temp";
            
            		<span style="color: green;">// Generate an HTML file.</span>
            		<span style="color: blue;">using</span> (StreamWriter sw = <span style="color: blue;">new</span> StreamWriter(@"C:\Temp\web_page.htm", <span style="color: blue;">false</span>))
            		{
            			sw.Write(msg.GetHtmlAndSaveRelatedFiles());
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Set the folder where all related files should be saved.</span>
            		msg.Parser.WorkingFolder = "C:\Temp"
            
            		<span style="color: green;">' Generate an HTML file.</span>
            		<span style="color: blue;">Dim</span> sw <span style="color: blue;">As</span> StreamWriter
            		<span style="color: blue;">Try</span>
            			sw = <span style="color: blue;">New</span> StreamWriter("C:\Temp\web_page.htm", <span style="color: blue;">False</span>)
            			sw.Write(msg.GetHtmlAndSaveRelatedFiles())
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> sw <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				sw.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)">
            <summary>
            Prepares the HTML body of the message for displaying in a web application: saves all embedded objects to a temporary location,
            replaces their Content-ID's with their virtual paths in the temporary location, and returns the modified HTML body as a string.
            <seealso cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/>
            </summary>
            <param name="virtualPath">The virtual path to the <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see> of the message. 
            If <paramref name="mappingType"/> is <see cref="F:MailBee.Mime.VirtualMappingType.NonWeb"/>, this
            parameter value is ignored, and the developer can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="mappingType">The mode of mapping physical paths to virtual paths.</param>
            <param name="folderMode">Specifies whether to create and use a unique message folder in the <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see>.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="virtualPath"/> is a null reference (<b>Nothing</b> in Visual Basic) and <paramref name="mappingType"/> is not <see cref="F:MailBee.Mime.VirtualMappingType.NonWeb"/>.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method can be used by the web application developer to display an HTML-formatted mail message with embedded pictures
            in the browser. In addition to the basic functionality provided by <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> overload,
            this method is also capable of:
            <list type="number">
            <item><description>Using virtual paths instead of physical paths when referencing embedded objects in HTML body. This is important for
            web applications where files are saved to disk using physical paths but referenced in HTML body using virtual paths.</description></item>
            <item><description>Creating a unique message folder in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see> and storing all message files there
            instead of placing all the files into <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see> itself. This is important when multiple clients
            can use the system simultaneously and thus multiple messages can be stored in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see> at the same time.
            The name of this folder is an MD5 digest of <see cref="P:MailBee.Mime.MailMessage.MessageID"/> of the message. Since Message-ID's are unique, any particular
            message folder name is unique as well. Having unique subfolder for each message guarantees there will be no any collisions in multi-user environment.
            <note>
            If <paramref name="folderMode"/> is <see cref="F:MailBee.Mime.MessageFolderBehavior.CreateOnly"/>,
            the unique folder will be created and filled with the message files, but not deleted after the
            <see cref="T:MailBee.Mime.MailMessage"/> object destruction. This is useful in web applications where all objects get automatically deleted once a response to
            the client has been generated. In this case, the message files/folder must retain after <see cref="T:MailBee.Mime.MailMessage"/> destruction, and should only be deleted
            when the user has finished viewing the message (the user requested another page or the current
            session timed out). To remember which temporary folder to delete later, the application should save
            the names of the created unique folder in Session, database, or any other store which retains its data between round-trips to the server.
            To get this name, the developer can call <see cref="M:MailBee.Mime.MessageParserConfig.GetMessageFolder">MailMessage.Parser.GetMessageFolder</see> method after the unique folder
            has been created during <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method call.
            </note>
            </description></item>
            </list>
            <para>
            <paramref name="mappingType"/> specifies how physical paths to embedded pictures (and other
            inline attachments related in an HTML body and saved into temporary location by this method)
            are mapped into URI's placed into SRC elements of corresponding HTML tags.
            </para>
            <para>For instance, if there is an HTML message with the following properties:
            <list type="bullet">
            <item><description>the HTML body contains <i>&lt;IMG SRC="cid:pic1"&gt;</i></description></item>
            <item><description>the message contains the inline attachment <i>picture.gif</i>
            with <see cref="P:MailBee.Mime.Attachment.ContentID"/> (CID) <i>pic1</i></description></item>
            <item><description>the <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> is <i>C:\Inetpub\wwwroot</i></description></item>
            <item><description>the <see cref="P:MailBee.Mime.MailMessage.MessageID"/> is <i>576201c5f939$0bfb96cb$19d717af@domain.com</i></description></item>
            </list>
            then <c>GetHtmlAndSaveRelatedFiles("http://www.domain.com", mappingType, MessageFolderBehavior.DoNotCreate)</c> method call will replace
            <i>cid:pic1</i> with the following value:
            <list type="table">
            <listheader><term>mappingType</term><term>IMG SRC value</term></listheader>
            <item><description><b>NonWeb</b></description><description>C:\Inetpub\wwwroot\picture.gif</description></item>
            <item><description><b>Static</b></description><description>http://www.domain.com/picture.gif</description></item>
            <item><description><b>Dynamic</b></description><description>See description below</description></item>
            </list>
            </para>
            <para>
            If <paramref name="mappingType"/> is <see cref="F:MailBee.Mime.VirtualMappingType.Dynamic"/>, the <i>virtualPath</i> parameter must point to a downloader page.
            Downloader page is a dynamic web page (such as an ASP.NET script) which should accept <i>message_id</i> and <i>file_id</i> parameters,
            grab <i>file_id</i> file in <i>message_id</i> folder and send its binary contents to the client. This allows the developer
            to save all inline attachments in the folder which is not directly visible from the web, and use the downloader script to push the file
            contents to the client. The downloader script can also check user credentials or SessionID to validate the user and do not return
            the attachment content if the user does not pass the authentication or session check.
            </para>
            <para><i>message_id</i> folder is the name of a unique message folder where all the files of the mail message are saved.
            If <i>folderMode</i> is <see cref="F:MailBee.Mime.MessageFolderBehavior.DoNotCreate"/>, the message files are saved directly in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/>, and
            <i>message_id</i> is an empty string.
            </para>
            <para><i>file_id</i> is a <see cref="P:MailBee.Mime.Attachment.Filename"/> of the inline attachment being referenced.</para>
            <para>Thus, in <see cref="F:MailBee.Mime.VirtualMappingType.Dynamic"/> mode, MailBee replaces Content-ID (CID) with:<br/>
            <i>virtualPath + "message_id=" + MD5Digest(Message-ID) + "&amp;file_id=" + InlineAttachmentFilename</i>.</para>
            <para>For instance, <c>GetHtmlAndSaveRelatedFiles("http://www.domain.com/download.aspx?session_id=12345&amp;", VirtualMappingType.Dynamic, MessageFolderBehavior.CreateOnly)</c>
            method call will replace <i>cid:pic1</i> with <i>http://www.domain.com/download.aspx?session_id=12345&amp;message_id=D41D8CD98F00B204E9800998ECF8427E&amp;file_id=picture.gif</i>.</para>
            </remarks>
            <example>This sample saves the email message as HTML file along with its related files (if any).
            <note><para>You can also use <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/> method to save messages as HTML pages.</para>
            <para>URI is a synonym of an URL.</para>
            </note>
            <code lang="C#">
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Set the folder where all related files should be saved.</span>
            		msg.Parser.WorkingFolder = @"C:\Temp";
            
            		<span style="color: green;">// Generate a web page at the specified location.</span>
            		<span style="color: blue;">using</span> (StreamWriter sw = <span style="color: blue;">new</span> StreamWriter(@"C:\Temp\web_page.htm", <span style="color: blue;">false</span>))
            		{
            			sw.Write(msg.GetHtmlAndSaveRelatedFiles(@"C:\Temp",
            				VirtualMappingType.NonWeb, MessageFolderBehavior.CreateAndDelete));
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Set the folder where all related files should be saved.</span>
            		msg.Parser.WorkingFolder = "C:\Temp"
            
            		<span style="color: green;">' Generate a web page at the specified location.</span>
            		<span style="color: blue;">Dim</span> sw <span style="color: blue;">As</span> StreamWriter
            		<span style="color: blue;">Try</span>
            			sw = <span style="color: blue;">New</span> StreamWriter("C:\Temp\web_page.htm", <span style="color: blue;">False</span>)
            			sw.Write(msg.GetHtmlAndSaveRelatedFiles("C:\Temp", _
            				VirtualMappingType.NonWeb, MessageFolderBehavior.CreateAndDelete))
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> sw <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				sw.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.GetMessageRawData">
            <summary>
            Gets the source of the message as a byte array.
            </summary>
            <returns>
            A byte array representing the MIME source of the message.
            </returns>
            <remarks>
            To get only a header section of the message, use <see cref="P:MailBee.Mime.MailMessage.RawHeader"/> property.
            To save the message to disk or into a stream, use <see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/> method.
            </remarks>
            <example>This sample saves the MIME source of the message into .EML file for demonstration purposes only.
            Real-world applications should use <see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/> method for this.
            <code lang="C#">
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("mail.company.com", "jdoe", "password", 1);
            
            		<span style="color: green;">// Save message as .EML file.</span>
            		<span style="color: blue;">using</span> (BinaryWriter bw = <span style="color: blue;">new</span> BinaryWriter(File.Open(@"C:\Temp\msg.eml",
            			FileMode.OpenOrCreate)))
            		{
            			bw.Write(msg.GetMessageRawData());
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("mail.company.com", "jdoe", "password", 1)
            
            		<span style="color: green;">' Save message as .EML file.</span>
            		<span style="color: blue;">Dim</span> bw <span style="color: blue;">As</span> BinaryWriter
            		<span style="color: blue;">Try</span>
            			bw = <span style="color: blue;">New</span> BinaryWriter(File.Open("C:\Temp\msg.eml", FileMode.OpenOrCreate))
            			bw.Write(msg.GetMessageRawData())
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> bw <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				bw.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)">
            <summary>
            Adds all the related files (referenced in HTML part of the message) as inline attachments.
            <seealso cref="T:MailBee.Mime.ImportRelatedFilesOptions"/>
            <seealso cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/>
            </summary>
            <param name="options">The additional options which affect how the files related to the HTML body are added to the message.</param>
            <returns>
            <b>true</b> if the related files were successfully added as inline attachments; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>All links to the related files (external documents which are referenced in <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/>) are
            replaced with Content-IDs generated for these files when they were attached.</para>
            <para>To detect which URIs in the HTML body reference resources which can be added as related
            files to the message, MailBee examines each URI and checks if it's a web resource or local file system resource.
            Web resources are ignored unless <see cref="F:MailBee.Mime.ImportRelatedFilesOptions.ImportFromUris"/> option is specified.
            If the URI contains absolute path on the filesystem, this path is used to load the file.
            If the URI contains relative path, MailBee by gets the file from
            <see cref="P:MailBee.Mime.MessageBuilderConfig.RelatedFilesFolder">MailMessage.Builder.RelatedFilesFolder</see> location.
            If MailBee was unable to find a resource based on the denoted by the given URIs, such URI is left intact and
            the inline attachment for that URI is not added.
            </para>
            </remarks>
            <example>This sample generates a new mail message from HTML file and sends it.
            <code lang="C#">
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the HTML content from the specified file.</span>
            		<span style="color: blue;">string</span> textHtml = <span style="color: blue;">string</span>.Empty;
            		<span style="color: blue;">using</span> (StreamReader sr = <span style="color: blue;">new</span> StreamReader(@"C:\Temp\web_page.htm"))
            		{
            			textHtml = sr.ReadToEnd();
            		}
            
            		<span style="color: green;">// Create a new message and set HTML body of this message.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.BodyHtmlText = textHtml;
            
            		<span style="color: green;">// Import all related files from URIs and then send the message.</span>
            		msg.ImportRelatedFiles(ImportRelatedFilesOptions.ImportFromUris);
            		Smtp.QuickSend(msg);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the HTML content from the specified file.</span>
            		<span style="color: blue;">Dim</span> textHtml <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">String</span>.Empty
            		<span style="color: blue;">Dim</span> sr <span style="color: blue;">As</span> StreamReader
            		<span style="color: blue;">Try</span>
            			sr = <span style="color: blue;">New</span> StreamReader("C:\Temp\web_page.htm")
            			textHtml = sr.ReadToEnd()
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> sr <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				sr.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' Create a new message and set HTML body of this message.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.BodyHtmlText = textHtml
            
            		<span style="color: green;">' Import all related files from URIs and then send the message.</span>
            		msg.ImportRelatedFiles(ImportRelatedFilesOptions.ImportFromUris)
            		Smtp.QuickSend(msg)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.IsBodyAvail(System.String,System.Boolean)">
            <summary>
            Indicates if the body of the specified format is present in the message.
            <seealso cref="P:MailBee.Mime.MailMessage.BodyParts"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <param name="bodyFormat">The content type of the body to be searched (e.g. <i>text/plain</i>).</param>
            <param name="originalBodyOnly">Indicates if only the original parts of the message should be processed.</param>
            <returns>
            <b>true</b> if the body of specified format is present in the message; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="bodyFormat"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>A message may contain original MIME parts (they had already been present in the existing message when it was parsed)
            and MIME parts added by MailBee (for instance, they may appear when the existing message gets parsed by MailBee
            and MailBee automatically creates plain-text part if only HTML part is available in the message).</para>
            <para>To access text bodies of the message, you can use <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/>, <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/>,
            and <see cref="P:MailBee.Mime.MailMessage.BodyParts"/> properties.</para>
            <para>To make the plain-text body be automatically created from the HTML body if the plain-text body is missing,
            set <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/> property to <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.IfNoPlain"/> value.
            See <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/> and <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> topics for more information.</para>
            </remarks>
            <example>This sample loads the message from .EML file and checks if it has an XML body.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">if</span> (msg.IsBodyAvail("text/xml", <span style="color: blue;">false</span>))
            {
            	Console.WriteLine("Message does contain XML body.");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("Message does not contain XML body.");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">If</span> msg.IsBodyAvail("text/html", <span style="color: blue;">False</span>) <span style="color: blue;">Then</span>
            	Console.WriteLine("Message does contain XML body.")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("Message does not contain XML body.")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)">
            <overloads>Loads the contents of the specified file (or URI) into HTML or plain-text body.</overloads>
            <summary>
            Loads the contents of the specified file or web page into HTML or plain-text body of the message,
            also attaching related objects such as inline images if necessary.
            <seealso cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Builder"/>
            </summary>
            <param name="path">The path to the file containing the text to be loaded into the message body. This path can be an URI (such as web page URL
            or file path specified as <i>file:///</i>) if <paramref name="options"/> value includes <see cref="F:MailBee.Mime.ImportBodyOptions.PathIsUri"/> flag.</param>
            <param name="bodyType">Denotes whether to load the data into HTML body or into plain-text body.</param>
            <param name="sourceEncoding">The charset of the data in the file being loaded. If a null reference (<b>Nothing</b> in Visual Basic), <see cref="P:MailBee.Global.DefaultEncoding"/> will be assumed (unless
            the charset information is available in META tag of the HTML data being loaded).</param>
            <param name="options">A set of flags which affect how the data is loaded from the file into the message body and whether (and how) the related objects should be attached.</param>
            <returns><b>true</b> if succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="path"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeWebException">A downloading error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>When <paramref name="bodyType"/> is <see cref="F:MailBee.Mime.MessageBodyType.Plain"/>, this method loads the data into <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/>.</para>
            <para>When <paramref name="bodyType"/> is <see cref="F:MailBee.Mime.MessageBodyType.Html"/>, this method loads the data into <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> and optionally
            adds all related files (objects referenced in the HTML body) as inline attachments. Automatic attaching of related files can be enabled
            with <see cref="F:MailBee.Mime.ImportBodyOptions.ImportRelatedFiles"/> flag specified in <paramref name="options"/> parameter.</para>
            <para>To embed related files if the HTML body is not available as a file (for instance, if it's taken from database or created in memory),
            use <see cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/> method. The current method simply loads the data from the file (or URL) and then calls <see cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/>.
            <see cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/> topic also describes advanced topics of embedding related files into the message.</para>
            </remarks>
            <example>This sample creates a new message, loads HTML body from .HTM file, and adds all files referenced in this body as attachments.
            Although the .HTM file itself it taken from disk (not from web location), we use <see cref="F:MailBee.Mime.ImportBodyOptions.ImportRelatedFilesFromUris"/> flag
            to make related files be attached to the message even if they are not on the local filesystem but on the web. For instance,
            if the .HTM file being loaded contains <i>&lt;IMG SRC="http://www.company.com/logo.gif"&gt;</i>, the resulting HTML body
            will have this text replaced with something like <i>&lt;IMG SRC="cid:de78fa3042283932f4e2"&gt;</i> and the <i>logo.gif</i> file
            will be embedded as inline attachment into the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            msg.LoadBodyText(@"C:\Temp\report.htm", MessageBodyType.Html, System.Text.Encoding.Default,
            	ImportBodyOptions.ImportRelatedFiles | ImportBodyOptions.ImportRelatedFilesFromUris);
            
            msg.SaveMessage(@"C:\Temp\msg.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            msg.LoadBodyText("C:\Temp\report.htm", MessageBodyType.Html, System.Text.Encoding.Default, _
            	ImportBodyOptions.ImportRelatedFiles <span style="color: blue;">Or</span> ImportBodyOptions.ImportRelatedFilesFromUris)
            
            msg.SaveMessage("C:\Temp\msg.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType)">
            <summary>
            Loads the contents of the specified file into HTML or plain-text body of the message.
            <seealso cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Builder"/>
            </summary>
            <param name="filename">The absolute or relative path to the file containing the text to be imported.</param>
            <param name="bodyType">Denotes whether to load the data into HTML body or into plain-text body.</param>
            <returns>
            <b>true</b> if the text was successfully imported; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>This method does not automatically attach pictures and other files referenced in the HTML content being imported. Use
            <see cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/> method or <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/>
            for this. The latter can also be used to load HTML body from a web location rather than from local filesystem.</remarks>
            <example>This sample creates a new message and loads HTML body from .HTM file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadBodyText(@"C:\Temp\web_page.htm", MessageBodyType.Html);
            msg.SaveMessage(@"C:\Temp\msg.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadBodyText("C:\Temp\web_page.htm", MessageBodyType.Html)
            msg.SaveMessage("C:\Temp\msg.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.LoadMessage(System.String)">
            <summary>
            Loads the message from the specified file.
            <seealso cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/>
            </summary>
            <param name="filename">The path to the file containing the message in MIME format. The common extension of MIME files is <i>.EML</i>.</param>
            <returns>
            <b>true</b> if the message was successfully loaded; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>To save a message into a file, use <see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.String)"/> method.</remarks>
            <example>This sample loads the message from .EML file and displays the subject of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            Console.WriteLine(msg.Subject);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            Console.WriteLine(msg.Subject)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.LoadMessage(System.Byte[])">
            <overloads>Loads the message from a byte array, a stream, or a file.</overloads>
            <summary>
            Loads the message from a byte array.
            <seealso cref="M:MailBee.Mime.MailMessage.GetMessageRawData"/>
            </summary>
            <param name="rawData">The byte array containing the MIME source of the message.</param>
            <returns>
            <b>true</b> if the message was successfully loaded; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="rawData"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>The MIME source of the message is the contents of .EML file (which you can import with <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> method).</para>
            <para>To get an existing message as a byte array, use <see cref="M:MailBee.Mime.MailMessage.GetMessageRawData"/> method.</para>
            </remarks>
            <example>This sample loads the message from a byte array and displays the subject of the message.
            Reading from a stream is used for demonstration purposes only. In real-world apps, it's easier to
            use <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> method to load a message from a file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            <span style="color: blue;">byte</span>[] msgBytes = <span style="color: blue;">null</span>;
            <span style="color: blue;">using</span> (BinaryReader br = <span style="color: blue;">new</span> BinaryReader(File.OpenRead(@"C:\Docs\TestMail.eml")))
            {
            	FileInfo fi = <span style="color: blue;">new</span> FileInfo(@"C:\Docs\TestMail.eml");
            	msgBytes = br.ReadBytes((<span style="color: blue;">int</span>)fi.Length);
            }
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(msgBytes);
            Console.WriteLine(msg.Subject);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msgBytes <span style="color: blue;">As</span> <span style="color: blue;">Byte</span>() = <span style="color: blue;">Nothing</span>
            
            <span style="color: blue;">Dim</span> br <span style="color: blue;">As</span> BinaryReader
            <span style="color: blue;">Try</span>
            	br = <span style="color: blue;">New</span> BinaryReader(File.OpenRead("C:\Docs\TestMail.eml"))
            	<span style="color: blue;">Dim</span> fi <span style="color: blue;">As</span> <span style="color: blue;">New</span> FileInfo("C:\Docs\TestMail.eml")
            	msgBytes = br.ReadBytes(fi.Length)
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> br <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		br.Close()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage(msgBytes)
            Console.WriteLine(msg.Subject)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.LoadMessage(System.IO.Stream)">
            <summary>
            Loads the message from a stream.
            <seealso cref="M:MailBee.Mime.MailMessage.SaveMessage(System.IO.Stream)"/>
            </summary>
            <param name="stream">The stream containing the MIME source of the message.</param>
            <returns><b>true</b> if the message was successfully loaded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="stream"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeStreamException">A stream error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>To save a message into a stream, use <see cref="M:MailBee.Mime.MailMessage.SaveMessage(System.IO.Stream)"/> method.</remarks>
            <example>This sample loads the message from the stream and displays the subject of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            <span style="color: blue;">using</span> (FileStream fs = <span style="color: blue;">new</span> FileStream(@"C:\Docs\TestMail.eml", FileMode.Open))
            {
            	MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            	msg.LoadMessage(fs);
            
            	Console.WriteLine(msg.Subject);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            <span style="color: blue;">Dim</span> fs <span style="color: blue;">As</span> FileStream
            <span style="color: blue;">Try</span>
            	fs = <span style="color: blue;">New</span> FileStream("C:\Docs\TestMail.eml", FileMode.Open)
            	msg.LoadMessage(fs)
            	Console.WriteLine(msg.Subject)
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> fs <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		fs.Close()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.MakePlainBodyFromHtmlBody">
            <summary>
            Creates a plain text body from the existing HTML body of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Builder"/>
            </summary>
            <returns>
            <b>true</b> if the plain-text body was successfully generated from the HTML body; <b>false</b> if the message
            did not have an HTML body.
            </returns>
            <remarks>
            <para>This method overwrites the original value of <see cref="P:MailBee.Mime.MailMessage.BodyPlainText"/> property if any.
            <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> is left intact (i.e. this method does not replace HTML body with plain-text body,
            it rather adds alternative plain-text version of the HTML body to the message).</para>
            <para>To make plain-text body be generated automatically when the message contains only HTML body,
            set <c>msg.<b>Builder</b>.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain</c> prior to sending the message (assuming <c>msg</c>
            is <see cref="T:MailBee.Mime.MailMessage"/> instance).</para>
            <para>If you are parsing an existing message (received from the mail server, loaded from file, etc) rather than composing a new one,
            set <c>msg.<b>Parser</b>.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain</c> instead.</para>
            </remarks>
            <example>This sample creates the HTML body of the message from .HTM file and converts it into the
            plain text body. Reading from stream and using <see cref="M:MailBee.Mime.MailMessage.MakePlainBodyFromHtmlBody"/> is for demonstration purposes only.
            In real world apps, it's easier to use <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/> method to load the file and
            <see cref="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainMode">MailMessage.Builder.HtmlToPlainMode</see> property
            to enable automatic creating plain-text version of the HTML body.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            <span style="color: blue;">using</span> (StreamReader sr = <span style="color: blue;">new</span> StreamReader(@"C:\Temp\doc.htm"))
            {
            	MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            	msg.BodyHtmlText = sr.ReadToEnd();
            	msg.MakePlainBodyFromHtmlBody();
            
            	Console.WriteLine(msg.BodyPlainText);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            <span style="color: blue;">Dim</span> sr <span style="color: blue;">As</span> StreamReader
            <span style="color: blue;">Try</span>
            	sr = <span style="color: blue;">New</span> StreamReader("C:\Temp\doc.htm")
            	msg.BodyHtmlText = sr.ReadToEnd()
            	msg.MakePlainBodyFromHtmlBody()
            
            	Console.WriteLine(msg.BodyPlainText)
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> sr <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		sr.Close()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Reset">
            <summary>
            Resets all the properties of the <see cref="T:MailBee.Mime.MailMessage"/> object to the default values.
            <seealso cref="M:MailBee.Mime.MailMessage.Clear(MailBee.Mime.MessageElements)"/>
            </summary>
            <remarks>
            <para>This method allows processing multiple messages without re-creating <see cref="T:MailBee.Mime.MailMessage"/> object for every message.</para>
            <para>All information contained in the fields of the <see cref="T:MailBee.Mime.MailMessage"/> object will be lost after using this method.
            Also, this method will delete any temporary files which could have been earlier created for this <see cref="T:MailBee.Mime.MailMessage"/> object: although MailBee parses messages in memory,
            the developer may explicitly request automatic saving of the message as HTML file with <see cref="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode">MailMessage.Parser.AutoSaveHtmlMode</see> property or
            using <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method.
            Such temporary files are deleted by the object destructor and by <see cref="M:MailBee.Mime.MailMessage.Reset"/> and <see cref="M:MailBee.Mime.MailMessage.Dispose"/> methods.</para>
            </remarks>
            <example> This sample loads the message from .EML file, shows its subject, resets the message and displays the subject again (it will be empty value second time).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            Console.WriteLine(msg.Subject);
            msg.Reset();
            Console.WriteLine(msg.Subject);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            Console.WriteLine(msg.Subject)
            msg.Reset()
            Console.WriteLine(msg.Subject)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)">
            <summary>
            Saves the HTML body of the message and all inline pictures and other inline objects to disk.
            <seealso cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/>
            </summary>
            <param name="filename">The HTML file to be written to.</param>
            <returns>
            <b>true</b> if the body was successfully saved; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>All links to the embedded objects (pictures, CSS tables, etc) contained in the generated HTML file
            are automatically corrected to match the filenames assigned to these files when they were saved to disk.</para>
            <para>By default, embedded objects are saved in the same folder where the HTML file resides. To store related files in another folder,
            set <c>msg.Parser.WorkingFolder</c> property prior to calling any method which can save related files.</para>
            <para>You can also tell MailBee to automatically save the message as HTML file to disk when the message gets parsed
            by setting <c>msg.Parser.AutoSaveHtmlMode = HtmlMessageAutoSaving.SaveMessageHtmAndRelatedFiles</c>
            (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance). Another option is using <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> method and its overloads.</para>
            </remarks>
            <example>This sample loads the message from .EML file and generates HTML file containing the HTML body of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.SaveHtmlAndRelatedFiles(@"C:\Temp\doc.htm");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.SaveHtmlAndRelatedFiles("C:\Temp\doc.htm")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.SaveMessage(System.String)">
            <summary>
            Saves a message into the specified file.
            <seealso cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            </summary>
            <param name="filename">The name of the file where it should be saved.</param>
            <returns>
            <b>true</b> if the message was successfully saved; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            The common file extension of e-mails in MIME format is .EML.
            </para>
            <para>
            The developer can use <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> method to load the previously saved message.
            </para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> class overview.
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.SaveMessage(System.IO.Stream)">
            <overloads>Saves a message into the specified file or stream.</overloads>
            <summary>
            Saves a message into the specified stream.
            <seealso cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            </summary>
            <param name="stream">The stream where the message should be saved.</param>
            <returns>
            <b>true</b> if the message was successfully saved; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="stream"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeStreamException">The given stream does not support writing or stream I/O error occurred, and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is true.</exception>
            <remarks>
            <para>
            The stream should already be opened for reading before this method can be called.
            </para>
            <para>
            The developer can use <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.IO.Stream)"/> method to load the previously saved message.
            </para>
            </remarks>
            <example>This sample loads the message from .EML file and saves it into the stream.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">using</span> (FileStream fs = <span style="color: blue;">new</span> FileStream(@"C:\Temp\msg.eml", FileMode.CreateNew))
            {
            	msg.SaveMessage(fs);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">Dim</span> fs <span style="color: blue;">As</span> FileStream
            <span style="color: blue;">Try</span>
            	fs = <span style="color: blue;">New</span> FileStream("C:\Temp\msg.eml", FileMode.CreateNew)
            	msg.SaveMessage(fs)
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> fs <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		fs.Close()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.SetDateFromString(System.String)">
            <summary>
            Sets the date of the message creation as a string.
            <seealso cref="P:MailBee.Mime.MailMessage.Date"/>
            </summary>
            <param name="date">A string in RFC822 data format containing the date and time of the moment when the message was composed.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="date"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>This method sets the value of Date header of the message. The value should be in RFC822 format (like <i>Tue, 09 Oct 2007 12:36:00 -0300</i>),
            but this method allows setting any value except a null reference. If you specify it as an empty string,
            Date header will not be added to the message at all.</para>
            <para>To set this date as <see cref="T:System.DateTime"/> value, use <see cref="P:MailBee.Mime.MailMessage.Date"/> property.</para>
            <note>MailBee sets the date automatically to the current datetime when the message gets
            sent or submitted to the pickup folder. To suppress this, set <c>msg.Builder.SetDateOnSend = false</c> (assuming <c>msg</c> is
            <see cref="T:MailBee.Mime.MailMessage"/> instance) prior to sending the message.</note>
            </remarks>
            <example>This sample creates a new message and sets the the date when it was composed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            Console.WriteLine(msg.Date.ToString());
            msg.SetDateFromString("Thu, 31 Mar 2005 17:34:25 -0400");
            Console.WriteLine(msg.Date.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            Console.WriteLine(msg.Date.ToString())
            msg.SetDateFromString("Thu, 31 Mar 2005 17:34:25 -0400")
            Console.WriteLine(msg.Date.ToString())
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the message into XML stream using the specified <see cref="T:System.Xml.XmlTextWriter"/> object.
            </summary>
            <param name="xmlWriter">An <see cref="T:System.Xml.XmlTextWriter"/> object.</param>
            <returns>
            <b>true</b> if the message was successfully saved to .XML file; otherwise, <b>false</b>.
            </returns>
            <remarks>
            The saved message can be loaded back from .XML file using the <see cref="M:MailBee.Mime.MailMessage.Deserialize(System.Xml.XmlTextReader)"/> method.
            </remarks>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="xmlWriter"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample loads the message from .EML file and saves this message to .XML file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.Xml;
            <span style="color: blue;">using</span> System.Text;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            XmlTextWriter xtw = <span style="color: blue;">null</span>;
            <span style="color: blue;">try</span>
            {
            	xtw = <span style="color: blue;">new</span> XmlTextWriter(@"C:\Temp\msg.xml", Encoding.UTF8);
            	msg.Serialize(xtw);
            }
            <span style="color: blue;">finally</span>
            {
            	<span style="color: blue;">if</span> (xtw != <span style="color: blue;">null</span>) xtw.Close();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.Xml
            <span style="color: blue;">Imports</span> System.Text
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">Dim</span> xtw <span style="color: blue;">As</span> XmlTextWriter = <span style="color: blue;">Nothing</span>
            <span style="color: blue;">Try</span>
            	xtw = <span style="color: blue;">New</span> XmlTextWriter("C:\Temp\msg.xml", Encoding.UTF8)
            	msg.Serialize(xtw)
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> xtw <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		xtw.Close()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.Serialize(System.String)">
            <overloads>Saves the message into the specified .XML file or XML stream.</overloads>
            <summary>
            Saves the message into the specified .XML file.
            <seealso cref="M:MailBee.Mime.MailMessage.Deserialize(System.Xml.XmlTextReader)"/>
            </summary>
            <param name="filename">The path to the .XML file to be saved.</param>
            <returns>
            <b>true</b> if the message was successfully saved to .XML file; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The saved message can be loaded back with <see cref="M:MailBee.Mime.MailMessage.Deserialize(System.String)"/> method.
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Mime.MailMessage.Deserialize(System.Xml.XmlTextReader)"/> method documentation.
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessage.SetUniqueMessageID(System.String)">
            <summary>
            Sets a new unique value of Message-ID header and returns it.
            </summary>
            <param name="domain">The domain name to be put in the <see cref="P:MailBee.Mime.MailMessage.MessageID"/> field. 
            If a null reference or an empty string, the local computer name is used.</param>
            <returns>
            A string containing the new unique value Message-ID value (without angle brackets).
            </returns>
            <remarks>
            <para>
            Message-ID value is composed of the current thread ID + "." + the random string + "@" + the domain name.
            This value is assigned to <see cref="P:MailBee.Mime.MailMessage.MessageID"/> property. Also, MailBee encloses it with angle brackets (&lt;&gt;)
            and puts it into Message-ID header value.
            </para>
            <para>You can set Message-ID value manually using <see cref="P:MailBee.Mime.MailMessage.MessageID"/> property.</para>
            <note>MailBee automatically sets unique Message-ID value when the mail message is being sent (or submitted to the pickup folder)
            unless <see cref="P:MailBee.Mime.MessageBuilderConfig.SetMessageIDOnSend">MailMessage.Builder.SetMessageIDOnSend</see> property is set to <b>false</b>.</note>
            </remarks>
            <example>This sample creates a new message and sets its Message-ID.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            Console.WriteLine(msg.MessageID);
            msg.SetUniqueMessageID("afterlogic.com");
            Console.WriteLine(msg.MessageID);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            Console.WriteLine(msg.MessageID)
            msg.SetUniqueMessageID("afterlogic.com")
            Console.WriteLine(msg.MessageID)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.MimePartTree">
            <summary>
            Gets the root MIME part of the message.  
            <seealso cref="M:MailBee.Mime.MimePart.GetAllParts"/>
            </summary>
            <value>
            A <see cref="P:MailBee.Mime.MailMessage.MimePart"/> object containing the root MIME part of the message.
            </value>
            <remarks>
            <para>A mail message can be represented as a set of MIME parts which have headers, body, or sub-parts (if
            this MIME part is multi-part). For instance, a message which consists of the plain text only can be represented
            as a single MIME part (without any sub-parts).</para>
            <para>On the other hand, complex messages having attachments or alternative bodies can be represented as a tree structure.
            In this case, the given property gets the root MIME part which is associated with the message itself.</para>
            <para>To get all MIME parts of the message as an array rather than a tree, call <c>msg.MimePartTree.GetAllParts()</c> (assuming <c>msg</c>
            is <see cref="T:MailBee.Mime.MailMessage"/> instance).</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the size of the root MIME part of the message in bytes.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Display the size of root MIME part in bytes.</span>
            		Console.WriteLine(msg.MimePartTree.Size.ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Display the size of root MIME part in bytes.</span>
            		Console.WriteLine(msg.MimePartTree.Size.ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Bcc">
            <summary>
            Gets or sets the list of blind carbon copy (BCC) recipients of the message.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.QuickDownloadMessage(System.String,System.String,System.String,System.Int32,System.Int32)"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Cc"/>
            </summary>
            <value>
            An <see cref="T:MailBee.Mime.EmailAddressCollection"/> object containing a collection of e-mail addresses
            of blind carbon copy recipients of the message. The default value is an empty collection.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>To specify it as a string, set <c>msg.Bcc.AsString</c> value 
            (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).
            Thus you can construct a list of BCC recipients as a string delimited with comma or semicolon.</para>
            Although the message is sent to all recipients which are set in <see cref="P:MailBee.Mime.MailMessage.Bcc"/> property,
            <i>BCC</i> field will not be included in the message header unless 
            <see cref="P:MailBee.Mime.MessageBuilderConfig.RemoveBccOnSend">MailMessage.Builder.RemoveBccOnSend</see> property is set to <b>false</b>.
            </remarks>
            <example>This sample loads the message from .EML file and displays the e-mail addresses of BCC recipients.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Quickly download the first message from the specified POP3 account</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "dan_brown", "password", 1);
            
            		Console.WriteLine("The list of BCC recipients of the message:");
            
            		<span style="color: green;">// For each BCC recipient...</span>
            		<span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> msg.Bcc)
            		{
            			<span style="color: green;">// ...show its e-mail address.</span>
            			Console.WriteLine(adr.Email);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Quickly download the first message from the specified POP3 account</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "dan_brown", "password", 1)
            
            		Console.WriteLine("The list of BCC recipients of the message:")
            
            		<span style="color: green;">' For each BCC recipient...</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> msg.Bcc
            			<span style="color: green;">' ...show its e-mail address.</span>
            			Console.WriteLine(adr.Email)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Cc">
            <summary>
            Gets or sets the list of carbon copy (CC) recipients of the message.
            <seealso cref="T:MailBee.Mime.EmailAddressCollection"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Bcc"/>
            </summary>
            <value>
            An <see cref="T:MailBee.Mime.EmailAddressCollection"/> object containing a collection of e-mail addresses
            of carbon copy recipients of the message. The default value is an empty collection.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            To specify <see cref="P:MailBee.Mime.MailMessage.Cc"/> as a string, set <c>msg.Cc.AsString</c> value 
            (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).
            <para>If it's necessary to add some hidden recipients that should not be displayed in the mail message,
            the developer should use the <see cref="P:MailBee.Mime.MailMessage.Bcc"/> property.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the e-mail addresses of CC recipients.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		Console.WriteLine("The list of CC recipients of the message:");
            
            		<span style="color: green;">// For each carbon copy recipient...</span>
            		<span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> msg.Cc)
            		{
            			<span style="color: green;">// ...show e-mail address.</span>
            			Console.WriteLine(adr.Email);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		Console.WriteLine("The list of CC recipients of the message:")
            
            		<span style="color: green;">' For each carbon copy recipient...</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> msg.Cc
            			<span style="color: green;">' ...show e-mail address.</span>
            			Console.WriteLine(adr.Email)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.ConfirmRead">
            <summary>
            Gets or sets the e-mail address of an entity which should receive the read confirmation message.
            <seealso cref="P:MailBee.Mime.MailMessage.ConfirmReceipt"/>
            </summary>
            <value>
            A string containing the e-mail address of the entity which should receive the read confirmation message, or an
            empty string if no read confirmation is set.
            </value>
            <remarks>
            <p>
            The value of this property is taken from Disposition-Notification-To header. Usually it will contain the same e-mail address 
            as <see cref="P:MailBee.Mime.MailMessage.From"/> or <see cref="P:MailBee.Mime.MailMessage.ReplyTo"/> field.
            </p>
            <note>This property will not have effect if the e-mail client software of the recipient does not support this feature.</note>
            <p>
            To get or set the delivery confirmation, the developer should use <see cref="P:MailBee.Mime.MailMessage.ConfirmReceipt"/> property.
            </p>
            </remarks>
            <example>This sample downloads the first message from the specified POP3 account and displays the
            e-mail address of read confirmation recipient if any.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> System;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1);
            
            		<span style="color: green;">// Show the e-mail address of recipient of the read confirmation message.</span>
            		<span style="color: blue;">if</span> (msg.ConfirmRead != String.Empty)
            		{
            			Console.WriteLine("Send read confirmation to " + msg.ConfirmRead);
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("There is no read confirmation recipient available");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> System
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1)
            
            		<span style="color: green;">' Show the e-mail address of recipient of the read confirmation message.</span>
            		<span style="color: blue;">If</span> msg.ConfirmRead &lt;&gt; <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            			Console.WriteLine("Send read confirmation to " &amp; msg.ConfirmRead)
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("There is no read confirmation recipient available")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.ConfirmReceipt">
            <summary>
            Gets or sets the e-mail address of an entity which should receive the delivery confirmation message 
            (when the message gets into mailbox of the server).
            <seealso cref="P:MailBee.Mime.MailMessage.ConfirmRead"/>
            <seealso cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.NotifyCondition"/>
            </summary>
            <value>
            A string containing the e-mail address of a person which should receive the delivery confirmation message, or an
            empty string if no delivery confirmation is set.
            </value>
            <remarks>
            <p>
            The value of this property is taken from Return-Receipt-To header. Usually (if set) it will contain the same e-mail address 
            as <see cref="P:MailBee.Mime.MailMessage.From"/> or <see cref="P:MailBee.Mime.MailMessage.ReplyTo"/> field.
            </p>
            <note>This property will not have effect if the e-mail server software of the recipient does not support this feature.</note>
            <para>Another method of requesting delivery receipt is using <c>mailer.DeliveryNotification.NotifyCondition = DsnNotifyCondition.Always</c> 
            (assuming <c>mailer</c> is an instance of <see cref="T:MailBee.SmtpMail.Smtp"/> class).</para>
            To get or set the read confirmation, the developer should use <see cref="P:MailBee.Mime.MailMessage.ConfirmRead"/> property.
            </remarks>
            <example>This sample creates new mail message, sets the e-mail address of delivery confirmation
            message recipient, and saves this message to disk.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> System;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Set the e-mail address of confirmation message recipient.</span>
            		msg.ConfirmReceipt = "jdoe@domain.com";
            
            		<span style="color: green;">// Save message to the specified .eml file.</span>
            		msg.SaveMessage(@"C:\Temp\MyMail.eml");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> System
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Set the e-mail address of confirmation message recipient.</span>
            		msg.ConfirmReceipt = "jdoe@domain.com"
            
            		<span style="color: green;">' Save message to the specified .eml file.</span>
            		msg.SaveMessage("C:\Temp\MyMail.eml")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.ContentType">
            <summary>
            Gets the content type of the message.
            </summary>
            <value>
            A string containing the content type of the mail message. The default value for a new message is <i>text/plain</i>.
            </value>
            <remarks>
            <para>The value of this property is taken from the <i>Content-Type</i> header.
            The typical content types are:
            <list type="bullet">
            <item><description>text/plain</description></item>
            <item><description>text/html</description></item>
            <item><description>text/calendar</description></item>
            <item><description>multipart/alternative</description></item>
            <item><description>multipart/mixed</description></item>
            <item><description>application/x-zip-compressed</description></item>
            </list>
            If the content-type is missing in the message being parsed, this property will return an empty string.</para>
            <para>You do not need to manually set the content-type of the message. It will be set automatically depending
            on the structure of the message (e.g. its text bodies and attachments).</para>
            </remarks>
            <example>This sample downloads the first message from the specified POP3 account and displays the content type
            of the message.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Quickly download the first message from the specified POP3 account</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "dan_brown", "password", 1);
            
            		<span style="color: green;">// Show the content type of the message.</span>
            		Console.WriteLine("Content type is " + msg.ContentType);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Quickly download the first message from the specified POP3 account</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "dan_brown", "password", 1)
            
            		<span style="color: green;">' Show the content type of the message.</span>
            		Console.WriteLine("Content type is " &amp; msg.ContentType)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Date">
            <summary>
            Gets or sets the date and the time when the mail message was composed.
            <seealso cref="P:MailBee.Mime.MailMessage.DateReceived"/>
            <seealso cref="M:MailBee.Mime.MailMessage.SetDateFromString(System.String)"/>
            <seealso cref="P:MailBee.Mime.MessageBuilderConfig.SetDateOnSend"/>
            </summary>
            <exception cref="T:MailBee.MailBeeDateParsingException">A date parsing error occurred and <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> is <b>true</b>.</exception>
            <value>
            The date when the mail message was composed. The default value is <see cref="F:System.DateTime.MinValue"/>.
            </value>
            <remarks>
            <para>In the case when an existing message gets parsed, the value of this property is taken from Date header.</para>
            <para>
            Otherwise, if a new message is being sent or submitted to the pickup folder and <see cref="P:MailBee.Mime.MessageBuilderConfig.SetDateOnSend"/>
            property is <b>true</b>, <see cref="P:MailBee.Mime.MailMessage.Date"/> value will be set to <see cref="P:System.DateTime.Now"/> directly at the moment of sending.
            </para>
            <para>
            On other hand, if <see cref="P:MailBee.Mime.MessageBuilderConfig.SetDateOnSend"/> property is set to <b>false</b>, the existing value of
            <see cref="P:MailBee.Mime.MailMessage.Date"/> header will be used. If it's <see cref="F:System.DateTime.MinValue"/>, Date header will not be added to the message.
            </para>
            <para>When the message gets built without sending (for instance, when you save it into a file), <see cref="P:MailBee.Mime.MailMessage.Date"/> value is not changed.
            Thus, if you did not set it manually, no Date header will present in the resulting message.
            </para>
            <para>
            To set the date to the current date and time, you can use <c>msg.Date=DateTime.Now</c> (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).
            </para>
            <para>
            You can also use <see cref="M:MailBee.Mime.MailMessage.SetDateFromString(System.String)"/> method to set Date header value from a string.
            </para>
            <para>
            To get the date when the message was delivered to the mailbox (rather than composed), use <see cref="P:MailBee.Mime.MailMessage.DateReceived"/> property.
            </para>
            <note>By default, all dates are adjusted to UTC (GMT) timezone. To adjust to local time, set <see cref="P:MailBee.Mime.MessageParserConfig.DatesAsUtc"/>
            property of <see cref="P:MailBee.Mime.MailMessage.Parser"/> object to <b>true</b>.</note>
            </remarks>
            <example>
            <para>This sample loads the message from .EML file and changes the date and time when
            the message was composed. In the modified message, it will appear that the message was
            composed earlier today at midnight, not at the current moment.</para>
            <para>Then, the sample suppresses automatic setting the date and time to <see cref="P:System.DateTime.Now"/>
            during sending, and sends the message.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Set the date to the current date and 00-00 time.</span>
            		msg.Date = DateTime.Today;
            
            		<span style="color: green;">// Suppress automatic setting Date to the current datetime</span>
            		<span style="color: green;">// when the message gets sent.</span>
            		msg.Builder.SetDateOnSend = <span style="color: blue;">false</span>;
            
            		<span style="color: green;">// Send it.</span>
            		Smtp.QuickSend(msg);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Set the date to the current date and 00-00 time.</span>
            		msg.Date = DateTime.Today
            
            		<span style="color: green;">' Suppress automatic setting Date to the current datetime</span>
            		<span style="color: green;">' when the message gets sent.</span>
            		msg.Builder.SetDateOnSend = <span style="color: blue;">False</span>
            
            		<span style="color: green;">' Send it.</span>
            		Smtp.QuickSend(msg)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.MessageID">
            <summary>
            Gets or sets the Message-ID header of the message.
            <seealso cref="P:MailBee.Mime.MessageBuilderConfig.SetMessageIDOnSend"/>
            </summary>
            <value>
            A string containing the Message-ID. For newly created messages,
            it's an empty string; for existing messages (received from mail servers, loaded from disk, etc),
            it's set from the Message-ID header value during parsing the message. 
            </value>
            <remarks>
            During sending the message or submitting it to the pickup folder, this property is set to
            a new unique value (unless <see cref="P:MailBee.Mime.MessageBuilderConfig.SetMessageIDOnSend">MailMessage.Builder.SetMessageIDOnSend</see> is <b>false</b>).
            <para>You can also set Message-ID manually using <see cref="M:MailBee.Mime.MailMessage.SetUniqueMessageID(System.String)"/> method.</para>
            <para>In MIME, Message-ID value is enclosed in angle brackets (&lt;&gt;). This property returns Message-ID value without angle brackets.
            Also, if you assign a new value with trailing angle brackets, they will be removed from <see cref="P:MailBee.Mime.MailMessage.MessageID"/> value. However, the angle brackets will appear
            in the generated MIME source when the message gets built.</para>
            <note>
            Message-ID (MID) is NOT the same as Unique-ID (UID) which is assigned to each message in the mailbox
            by the POP3 or IMAP4 server.
            </note>
            </remarks>
            <example>This sample loads the message from .EML file and displays the Message-ID of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = new MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Show the Message-ID.</span>
            Console.WriteLine("The message ID is " + msg.MessageID);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Show the Message-ID.</span>
            Console.WriteLine("The message ID is " &amp; msg.MessageID)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Organization">
            <summary>
            Gets or sets the name of organization to which the sender of the message belongs.
            </summary>
            <value>
            A string containing the value of Organization header of the message. The default value is an empty string.
            </value>
            <example>This sample loads the message from .EML file and displays the name of the
            organization which sent this message.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1);
            
            		<span style="color: green;">// Display the name of organization which have sent the message.</span>
            		<span style="color: blue;">if</span> (msg.Organization != String.Empty)
            		{
            			Console.WriteLine("The message was sent by " + msg.Organization);
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("The message was sent by unknown organization or by person.");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1)
            
            		<span style="color: green;">' Display the name of organization which have sent the message.</span>
            		<span style="color: blue;">If</span> msg.Organization &lt;&gt; <span style="color: blue;">String</span>.Empty <span style="color: blue;">Then</span>
            			Console.WriteLine("The message was sent by " &amp; msg.Organization)
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("The message was sent by unknown organization or by person.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Priority">
            <summary>
            Gets or sets the priority of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Importance"/>
            </summary>
            <value>The message priority level, or <see cref="F:MailBee.Mime.MailPriority.None"/> if not set. The default value is <see cref="F:MailBee.Mime.MailPriority.None"/>.</value>
            <remarks>
            <para>
            Different mail clients may set or interpret the priority settings differently while some of them may
            ignore it.
            </para>
            <para>
            The value of this property is taken from the X-Priority and X-MSMail-Priority headers.
            </para>
            </remarks>
            <example>This sample loads the message from .EML file, sets <see cref="F:MailBee.Mime.MailPriority.High"/> priority level for it, and sends this message.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Set the High priority level for the message.</span>
            		msg.Priority = MailPriority.High;
            
            		<span style="color: green;">// Send it.</span>
            		Smtp.QuickSend(msg);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Set the High priority level for the message.</span>
            		msg.Priority = MailPriority.High
            
            		<span style="color: green;">' Send it.</span>
            		Smtp.QuickSend(msg)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.ReturnPath">
            <summary>
            Gets the value of Return-Path header.
            <seealso cref="P:MailBee.Mime.MailMessage.TimeStamps"/>
            </summary>
            <value>
            A string containing the e-mail address of the actual sender of the message.
            The default value is an empty string.
            </value>
            <remarks>
            <para>The mail server which transmitted the message may add this header to specify the email address of the original sender of the mail message.
            If the message was never sent, this property will contain an empty string. With <see cref="P:MailBee.Mime.MailMessage.TimeStamps"/> property (which represents Received headers),
            <see cref="P:MailBee.Mime.MailMessage.ReturnPath"/> provides trace route information about the message.</para>
            <para>You cannot set <see cref="P:MailBee.Mime.MailMessage.ReturnPath"/> directly (because it's set by the mail server, not by MailBee).
            However, if you need to send a message from the address different from <see cref="P:MailBee.Mime.MailMessage.From"/> address, you can
            pass it as <i>senderEmail</i> parameter value of <see cref="M:MailBee.SmtpMail.Smtp.Send(System.String,System.String)"/> method.
            In this case, the mail server will set Return-Path header to <i>senderEmail</i> value, not to
            <see cref="P:MailBee.Mime.MailMessage.From"/> value.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the email address of the originator of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = new MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Show the return path of the message.</span>
            Console.WriteLine("The return path is " + msg.ReturnPath);		
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Show the return path of the message.</span>
            Console.WriteLine("The return path is " &amp; msg.ReturnPath)		
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Subject">
            <summary>
            Gets or sets the subject of the message.
            </summary>
            <value>
            A string containing the subject of the message. The default value is an empty string.
            </value>
            <remarks>This value is taken from Subject header of the message.</remarks>
            <example>
            The sample is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.To">
            <summary>
            Gets or sets the e-mail addresses of the primary recipients of the mail message.
            </summary>
            <value>A reference to the collection of the e-mail addresses of the primary recipients of the mail message. The default value is an empty collection.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>To specify this property as a string, set <c>msg.To.AsString</c> value (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).</para>
            To send a message, you should specify at least one recipient's e-mail address in <see cref="P:MailBee.Mime.MailMessage.To"/>, <see cref="P:MailBee.Mime.MailMessage.Cc"/>, or <see cref="P:MailBee.Mime.MailMessage.Bcc"/> property.
            It's possible, however, to send a mail message even if no recipients specified in the message itself using
            <see cref="M:MailBee.SmtpMail.Smtp.Send(System.String,System.String)">Smtp.Send</see> method.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.XMailer">
            <summary>
            Gets or sets the details about the software which was used to create the message.
            </summary>
            <value>
            A string containing the information about the software which was used to create the message.
            By default, it's <i>MailBee.NET N</i>, where <i>N</i> - is <see cref="P:MailBee.Mime.MailMessage.Version"/>.
            </value>
            <example>This sample loads the message from .EML file and displays the details of the software, which were used to create the message.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Show the details of software which was used</span>
            		<span style="color: green;">// to compose the message.</span>
            		Console.WriteLine("The mailer is " + msg.XMailer);
            	}
            
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Show the details of software which was used</span>
            		<span style="color: green;">' to compose the message.</span>
            		Console.WriteLine("The mailer is " &amp; msg.XMailer)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.SizeOnServer">
            <summary>
            Gets the actual message size on the mail server.
            <seealso cref="P:MailBee.Mime.MailMessage.Size"/>
            </summary>
            <value>
            The actual message size in bytes.
            </value>
            <remarks>
            This property indicates the actual message size and may not be equal to the value
            of <see cref="P:MailBee.Mime.MailMessage.Size"/> property, which indicates the size of the received message.
            For instance, if only the message headers were received from mail server, <see cref="P:MailBee.Mime.MailMessage.Size"/>
            property will contain the size of the message headers.
            However, <see cref="P:MailBee.Mime.MailMessage.SizeOnServer"/> property will still return
            the size of the entire message.
            </remarks>
            <example>
            The sample is available in <see cref="P:MailBee.Mime.MailMessage.Size"/> property overview.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Attachments">
            <summary>
            Gets the <see cref="T:MailBee.Mime.AttachmentCollection"/> object containing the attachments of the mail message.
            </summary>
            <value>
            An <see cref="T:MailBee.Mime.AttachmentCollection"/> object containing all the attachments of the mail message. The default value is an empty collection.
            </value>
            <remarks>
            <para>Although <see cref="P:MailBee.Mime.MailMessage.Attachments"/> property itself is read-only, the collection it returns can be modified through its 
            <see cref="M:MailBee.Mime.AttachmentCollection.Add(MailBee.Mime.Attachment)"/>, <see cref="M:MailBee.Mime.AttachmentCollection.Clear"/>, 
            <see cref="M:MailBee.Mime.AttachmentCollection.Remove(System.String)"/>, <see cref="M:MailBee.Mime.AttachmentCollection.RemoveAt(System.Int32)"/> and other methods.
            </para>
            The developer can iterate through this collection using <c>foreach</c> operator (<c>For Each</c> in Visual Basic), 
            access individual attachments using <see cref="P:MailBee.Mime.AttachmentCollection.Item(System.Int32)"/> property, or use <see cref="M:MailBee.Mime.AttachmentCollection.SaveAll(System.String)"/> 
            method to save all attachments into a folder with a single method call.
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.AttachmentCollection"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.MailTransferEncodingHtml">
            <summary>
            Gets or sets the transfer encoding of the HTML body of the message.
            <seealso cref="M:MailBee.Mime.MailMessage.EncodeAllHeaders(System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)"/>
            </summary>
            <value>The mail encoding (like Base64, 7-bit, etc) of the HTML body of the message.
            The default value for new messages is <see cref="F:MailBee.Mime.MailTransferEncoding.QuotedPrintable"/>.</value>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.MailTransferEncodingPlain">
            <summary>
            Gets or sets the transfer encoding of the plain-text body of the message.
            <seealso cref="M:MailBee.Mime.MailMessage.EncodeAllHeaders(System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)"/>
            </summary>
            <value>The mail encoding (like Base64, 7-bit, etc) of the plain-text body of the message.
            The default value for new messages is <see cref="F:MailBee.Mime.MailTransferEncoding.QuotedPrintable"/>.</value>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.BodyHtmlText">
            <summary>
            Gets or sets the HTML body of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.BodyPlainText"/>
            </summary>
            <value>
            A string containing the HTML body of the message, or an empty string if the message does not have an HTML body.
            </value>
            <remarks>
            If the mail message doesn't contain HTML-formatted body and it's desired to get it from plain text, 
            you should set <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode">MailMessage.Parser.PlainToHtmlMode</see> to <see cref="F:MailBee.Mime.PlainToHtmlAutoConvert.IfNoHtml"/> value.
            MailBee will generate HTML body automatically and you can then get it from <see cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/> property as usually.
            <note><see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode">MailMessage.Parser.PlainToHtmlMode</see> should be set before any property of <see cref="T:MailBee.Mime.MailMessage"/> object gets accessed and
            the message gets parsed. If message was already parsed, you will have to call <see cref="M:MailBee.Mime.MessageParserConfig.Apply">MailMessage.Parser.Apply</see> method to reparse it.</note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.BodyPlainText">
            <summary>
            Gets or sets the plain-text body of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.BodyHtmlText"/>
            </summary>
            <value>
            A string containing the plain-text message body, or an empty string if the message does not have a plain text body.
            </value>
            <remarks>
            In the case when mail message does not have plain-text body, you can generate it from 
            the HTML body using <see cref="M:MailBee.Mime.MailMessage.MakePlainBodyFromHtmlBody"/> method.
            <para>
            Alternatively, to make plain-text version of HTML body of an existing message, you should 
            set <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode">MailMessage.Parser.HtmlToPlainMode</see> property to <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.IfNoPlain"/> value. This property must be set
            BEFORE any property of the <see cref="T:MailBee.Mime.MailMessage"/> gets accessed.
            </para>
            <para>
            Or, for a new message (the one you're composing), to make the outgoing message contain the plain-text body,
            set <see cref="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainMode">MailMessage.Builder.HtmlToPlainMode</see>
            to <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.IfNoPlain"/> value. This property must be set BEFORE the message gets sent or saved to disk.
            </para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.BodyParts">
            <summary>
            Gets all the text bodies of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.MimePartTree"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Attachments"/>
            </summary>
            <value>A reference to the collection containing all the text parts of the message. The default value is an empty collection.</value>		
            <remarks>
            <para>All the MIME parts of the message (except of multipart parts which are just containers of another parts)
            either fall into <see cref="P:MailBee.Mime.MailMessage.Attachments"/> or <see cref="P:MailBee.Mime.MailMessage.BodyParts"/> collections.</para>
            <para>If <see cref="P:MailBee.Mime.MimePart.ContentType"/> of certain MIME part contains <i>text</i> string
            (for instance, it is <i>text/plain</i> or <i>text/html</i>) and this part is not attachment,
            this part of the message is considered to be a text part.</para>
            <para>If you need to get the list or the hierarchy of all MIME parts of the message, use
            <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> property.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TextBodyPartCollection"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Charset">
            <summary>
            Gets or sets the name of the charset which was used to compose the message.
            <seealso cref="P:MailBee.Mime.TextBodyPart.Charset"/>
            </summary>
            <value>A string containing the name of the charset which was used to compose the message, or an empty string
            if the charset is not specified.</value>
            <remarks>
            <para>Every part of an e-mail message may have its own charset (although it's not recommended). E-mails composed with MailBee have the same
            charset value across the message (unless you manually specified different charsets of text parts using <see cref="P:MailBee.Mime.TextBodyPart.Charset">TextBodyPart.Charset</see> property).
            If text parts of the message (originally composed with another program and being parsed with MailBee now)
            have different charsets, <see cref="P:MailBee.Mime.MailMessage.Charset"/> property will return charset of the last text part of this message.</para>
            <para>For existing e-mail messages being parsed (rather than for new messages being composed) <see cref="P:MailBee.Mime.MailMessage.Charset"/> property value is not important
            for the developer because MailBee automatically converts the message content accordingly the charset information in the message and the application
            received the already decoded content. In this case, <see cref="P:MailBee.Mime.MailMessage.Charset"/> property value has the informative feature only.</para>
            <para>However, when composing a new message (with international characters), you should specify the charset using <see cref="P:MailBee.Mime.MailMessage.Charset"/> property
            (or using <see cref="P:MailBee.Mime.TextBodyPart.Charset">TextBodyPart.Charset</see> property if you need different charset settings for different text parts).</para>
            <para>If <see cref="P:MailBee.Mime.MailMessage.Charset"/> is not specified, MailBee will use the following properties to determine encoding for string-to-byte and byte-to-string conversions:
            <list type="bullet">
            <item><description><see cref="P:MailBee.Mime.MessageParserConfig.EncodingDefault">MailMessage.Parser.EncodingDefault</see> property when parsing e-mail messages
            (received from the mail server, loaded from disk or memory, etc)</description></item>
            <item><description><see cref="P:MailBee.Mime.TextBodyPart.Charset">TextBodyPart.Charset</see> property when composing an e-mail message and building its source in MIME format</description></item>
            </list></para>
            <para>Setting <see cref="P:MailBee.Mime.MailMessage.Charset"/> property will overwrite <see cref="P:MailBee.Mime.TextBodyPart.Charset">TextBodyPart.Charset</see> values for all text parts of the message.
            But if you specified <see cref="P:MailBee.Mime.TextBodyPart.Charset">TextBodyPart.Charset</see> value for a certain text part AFTER <see cref="P:MailBee.Mime.MailMessage.Charset"/> had been set, that text part
            will retain the specified <see cref="P:MailBee.Mime.TextBodyPart.Charset">TextBodyPart.Charset</see> in the resulting message (while <see cref="P:MailBee.Mime.MailMessage.Charset"/> will be used for other text parts of the message).</para>
            <note>If any characters of the message contents are not defined in the specified charset, they will be replaced with "?" characters.</note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.DateReceived">
            <summary>
            Gets the date and the time when the message was received by the server.
            <seealso cref="P:MailBee.Mime.MailMessage.Date"/>
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value containing the date and time when the message was delivered into the mailbox (obtained from Received header) or <see cref="F:System.DateTime.MinValue"/> if no Received header is available in the message.
            The default value is <see cref="F:System.DateTime.MinValue"/>.
            </value>
            <remarks>
            <para>
            For an existing message, this property value is taken from Received headers of this message. When a new message is created using MailBee or
            if the eixsting message does not contain any Received
            headers, this property will return <see cref="F:System.DateTime.MinValue"/>.
            If the e-mail message contains several Received headers, then the most recent one will be used to obtain <see cref="P:MailBee.Mime.MailMessage.DateReceived"/> value.
            </para>
            <para>When downloading messages from IMAP server, it's more reliable to use
            <see cref="P:MailBee.ImapMail.Envelope.DateReceived">Envelope.DateReceived</see> instead.
            Date information is always available in an IMAP envelope while Received header may be missing in a message.</para>
            <para>
            To get or set the date when the message was composed, use <see cref="P:MailBee.Mime.MailMessage.Date"/> property.
            </para>
            <note>By default, all dates are adjusted to UTC (GMT) timezone. To adjust to local time, set <see cref="P:MailBee.Mime.MessageParserConfig.DatesAsUtc"/>
            property of <see cref="P:MailBee.Mime.MailMessage.Parser"/> object to <b>true</b>.</note>
            </remarks>
            <example>This sample downloads the first message from the specified POP3 account and displays
            the date and time when this message was received by the POP3 server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("mail.company.com", "bill", "secret", 1);
            
            		Console.WriteLine("This message was received at " + msg.DateReceived.ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("mail.company.com", "bill", "secret", 1)
            
            		Console.WriteLine("This message was received at " &amp; msg.DateReceived.ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.From">
            <summary>
            Gets or sets the e-mail address of the message sender.
            </summary>
            <value>An <see cref="T:MailBee.Mime.EmailAddress"/> object containing the e-mail address of the message sender.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            The value of this property is taken from From header.
            <para>To specify it as a string, set <c>msg.From.AsString</c> value (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).</para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessage"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.HasAttachments">
            <summary>
            Indicates if the message has any attachments.
            </summary>
            <value>
            <b>true</b> if the message has at least one attachment; otherwise, <b>false</b>.
            </value>
            <remarks>
            If only the headers of the message were received from the mail server, this property may not be 100% accurate.
            The developer should download the entire message to be sure if it really has any attachments or not.
            </remarks>
            <example>This sample downloads the message from the specified POP3 account and displays the number of
            the message attachments.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1);
            
            		<span style="color: green;">// Check if the mail message has any attachments and display the corresponding message.</span>
            		<span style="color: blue;">if</span> (msg.HasAttachments)
            		{
            			Console.WriteLine("This message has " + msg.Attachments.Count.ToString() + " attachments");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("This message does not have any attachments");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1)
            
            		<span style="color: green;">' Check if the mail message has any attachments and display the corresponding message.</span>
            		<span style="color: blue;">If</span> msg.HasAttachments <span style="color: blue;">Then</span>
            			Console.WriteLine("This message has " &amp; msg.Attachments.Count.ToString() &amp; " attachments")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("This message does not have any attachments")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Importance">
            <summary>
            Gets or sets the importance of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Priority"/>
            </summary>
            <value>
            The importance of the message, or <see cref="P:MailBee.Mime.MailMessage.Priority">None</see> if not specified. The default value is <see cref="P:MailBee.Mime.MailMessage.Priority">None</see>.
            </value>
            <remarks>
            <para>
            The importance of the message is taken from Importance header.
            </para>
            <para>
            To get or set the message priority (rather than the message importance), use
            <see cref="P:MailBee.Mime.MailMessage.Priority"/> property. It's common practice to set both <see cref="P:MailBee.Mime.MailMessage.Priority"/> and <see cref="P:MailBee.Mime.MailMessage.Importance"/>
            properties. Some e-mail clients do not support Importance or Priority but still support
            one of these fields. Thus, if you specify both, all e-mail clients will be able to understand at least
            one of the fields.
            </para>
            </remarks>
            <example>This sample sends a message only if it's very important.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            		<span style="color: green;">// Send the message if it's very important.</span>
            		<span style="color: blue;">if</span> (msg.Importance == MailPriority.Highest)
            		{
            			Smtp.QuickSend(msg);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail.eml")
            
            		<span style="color: green;">' Send the message if it's very important.</span>
            		<span style="color: blue;">If</span> msg.Importance = MailPriority.Highest <span style="color: blue;">Then</span>
            			Smtp.QuickSend(msg)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.IndexOnServer">
            <summary>
            Gets the index of the mail message stored on the mail server.
            </summary>
            <value>Gets the ordinal position of the mail message in the mailbox on the mail server (starting from 1),
            or 0 if this message was created from another source rather than received from the mail server.</value>
            <remarks>Use <see cref="P:MailBee.Mime.MailMessage.UidOnServer"/> property if you need to determine Unique-ID of the message rather
            than its ordinal position in the mailbox.</remarks>
        </member>
        <member name="P:MailBee.Mime.MailMessage.UidOnServer">
            <summary>
            Gets Unique-ID (UID) of the message in the mailbox on the server.
            </summary>
            <value>
            Returns a null reference (<b>Nothing</b> in Visual Basic) if the message was not received from the mail server;
            if received from IMAP4 server, returns a long value (<see cref="T:System.Int64"/>) containing positive 32bit value of
            IMAP4 UID, or -1 if UID could not be retrieved;
            if received from POP3 server, returns a string containing POP3 UID of this message, or a null reference if the UID value
            is not available.
            </value>
            <remarks>By default, MailBee does not download the list of POP3 UIDs unless any method which accesses UIDs
            (such as <see cref="M:MailBee.Pop3Mail.Pop3.GetMessageUids"/>) is called. To make sure UIDs are downloaded,
            set <see cref="F:MailBee.Pop3Mail.Pop3InboxPreloadOptions.Uidl"/> flag in <see cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            property value prior to connecting to the POP3 server. However, some old POP3 servers do not support UIDs, and thus this property
            will still return null if UIDs are not supported by the server.
            <note>The developer should use type casting from <see cref="T:System.Object"/> when using this property.</note>
            </remarks>
            <example>
            This sample shows how to obtain UID values of two messages (one received from POP3 server while another - from IMAP4 server).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Assume msgPop3 and msgImap are MailMessage objects which already</span>
            <span style="color: green;">// have been received from POP3 and IMAP4 servers.</span>
            <span style="color: blue;">string</span> pop3Uid = (<span style="color: blue;">string</span>)msgPop3.UidOnServer;
            <span style="color: blue;">long</span> imapUid = (<span style="color: blue;">long</span>)msgImap.UidOnServer;
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Assume msgPop3 and msgImap are MailMessage objects which already</span>
            <span style="color: green;">' have been received from POP3 and IMAP4 servers.</span>
            <span style="color: blue;">Dim</span> pop3UID <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">CType</span>(msgPop3.UidOnServer, <span style="color: blue;">String</span>)
            <span style="color: blue;">Dim</span> imapUid <span style="color: blue;">As</span> <span style="color: blue;">Long</span> = <span style="color: blue;">CType</span>(msgImap.UidOnServer, <span style="color: blue;">Long</span>)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.IsEncrypted">
            <summary>
            Indicates if the message is encrypted.
            <seealso cref="P:MailBee.Mime.MailMessage.IsSigned"/>
            </summary>
            <value>
            <b>true</b> if the message is encrypted; otherwise, <b>false</b>.
            </value>
            <remarks>
            Messages can also be signed with a digital signature. To check if a message is signed or not,
            use <see cref="P:MailBee.Mime.MailMessage.IsSigned"/> property.
            <para>To operate with <see cref="P:MailBee.Mime.MailMessage.IsEncrypted"/> or <see cref="P:MailBee.Mime.MailMessage.IsSigned"/> messages, use <see cref="T:MailBee.Security.Smime"/> object.</para>
            </remarks>
            <example>This sample downloads a message from the POP3 server and reports whether this message is encrypted.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1);
            
            		<span style="color: green;">// Display the subject of the message if it's not encrypted.</span>
            		<span style="color: blue;">if</span> (msg.IsEncrypted)
            		{
            			Console.WriteLine("The subject can not be displayed because the message is encrypted.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("The message has the following subject:\r\n" + msg.Subject);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "kathy1981", "password", 1)
            
            		<span style="color: green;">' Display the subject of the message if it's not encrypted.</span>
            		<span style="color: blue;">If</span> msg.IsEncrypted <span style="color: blue;">Then</span>
            			Console.WriteLine("The subject can not be displayed because the message is encrypted.")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("The message has the following subject:" &amp; vbCrLf &amp; msg.Subject)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.IsEntire">
            <summary>
            Indicates if the message was received completely.
            <seealso cref="P:MailBee.Mime.MailMessage.PartIndex"/>
            <seealso cref="P:MailBee.Mime.MailMessage.PartCount"/>
            <seealso cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/>
            </summary>
            <value>
            <b>true</b> if the message is complete; otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>If the e-mail message is not entire, the developer can use <see cref="P:MailBee.Mime.MailMessage.PartCount"/> property to examine whether the e-mail message
            is composite (i.e. actually consists of several messages which must be joined to get the complete message).
            To get the index of the part the message represents, use <see cref="P:MailBee.Mime.MailMessage.PartIndex"/> property.</para>
            <para>However, the message may be incomplete even if it's a normal message. For instance, if you downloaded only a message header
            from the mail server, the message will be incomplete too (you'll need to download the entire message to get it completely).</para>
            </remarks>
            <example>This sample gets the headers of the message and the first 10 lines of its body message from the POP3 server and determines whatever the message is entire, partial or
            incomplete. It will be partial if it's a composite message split into smaller ones, or it will be entire if the entire message body fits into 10 lines,
            or it will be incomplete if its body does not fit into 10 lines which have been downloaded.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("mail.domain.com", "jdoe", "password", 1, 10);
            
            		<span style="color: green;">// Check whatever the message is entire, partial,</span>
            		<span style="color: green;">// or it was received incompletely.</span>
            		<span style="color: blue;">if</span> (msg.IsEntire)
            		{
            			Console.WriteLine("The message was completely received");
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (msg.PartCount &gt; 1)
            		{
            			Console.WriteLine(@"The message is partial (part index is " + 
            				msg.PartIndex + ")");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine(@"The message was not completely received 
            				(the body is larger than 10 lines downloaded)");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("mail.domain.com", "jdoe", "password", 1, 10)
            
            		<span style="color: green;">' Check whatever the message is entire, partial,</span>
            		<span style="color: green;">' or it was received incompletely.</span>
            		<span style="color: blue;">If</span> msg.IsEntire <span style="color: blue;">Then</span>
            			Console.WriteLine("The message was completely received")
            		<span style="color: blue;">ElseIf</span> msg.PartCount &gt; 1 <span style="color: blue;">Then</span>
            			Console.WriteLine("The message is partial (part index is " &amp; _
            				msg.PartIndex.ToString &amp; ")")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("The message was not completely received " &amp; _
            				"(the body is larger than 10 lines downloaded)")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.IsSigned">
            <summary>
            Indicates if the message has a digital signature.
            <seealso cref="P:MailBee.Mime.MailMessage.IsEncrypted"/>
            </summary>
            <value>
            <b>true</b> if the message is signed with a digital signature; otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>To operate with <see cref="P:MailBee.Mime.MailMessage.IsEncrypted"/> or <see cref="P:MailBee.Mime.MailMessage.IsSigned"/> message, use <see cref="T:MailBee.Security.Smime"/> object.</para>
            </remarks>
            <example>This sample loads the message from .EML file and reports
            whether the message is signed.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            	
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\TestMail1.eml");
            
            		<span style="color: blue;">if</span> (msg.IsSigned)
            		{
            			Console.WriteLine("The message is signed.");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            	
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\TestMail1.eml")
            
            		<span style="color: blue;">If</span> msg.IsSigned <span style="color: blue;">Then</span>
            			Console.WriteLine("The message is signed.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.LastResult">
            <summary>
            Gets the code of the last occurred error.
            <seealso cref="T:MailBee.ErrorCodes"/>
            <seealso cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/>
            </summary>
            <value>
            An integer value containing a numeric code of the last error, or the <see cref="F:MailBee.ErrorCodes.OK"/>
            value if no errors occurred. The default value is <see cref="F:MailBee.ErrorCodes.OK"/>.
            </value>
            <remarks>
            This property always contains the code of last occurred error (even if <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/>
            property is set to <b>true</b>).
            </remarks>
            <example>
            The example is available in <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Merge">
            <summary>
            Gets the <see cref="T:MailBee.Mime.MailMerge"/> object which can be used to perform mail merge using the current e-mail message as a template.
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.MailMerge"/> object which can be used to perform mail merge of the given <see cref="T:MailBee.Mime.MailMessage"/> object (acting as a template) with actual data.
            </value>
            <remarks>If you need to perform mail merge over database, it's easier to use <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)">Smtp.SendMailMerge</see> method.</remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.MailMerge"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Builder">
            <summary>
            Gets or sets the options which affect how the mail message is built by MailBee.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.MessageBuilderConfig"/> object containing the options which affect how the mail message is built by MailBee.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            This property returns a reference to the instance of configuration class which allows the developer
            to tune how the mail message is being produced from the current values of the <see cref="T:MailBee.Mime.MailMessage"/> object
            into MIME format. Using this property, you can, for example, tell MailBee to automatically
            generate plain-text version of the message body if you supplied only the HTML version.
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.MessageBuilderConfig"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Parser">
            <summary>
            Gets or sets the options which affect how the <see cref="T:MailBee.Mime.MailMessage"/> object is parsed.
            <seealso cref="P:MailBee.Mime.MailMessage.Builder"/>
            </summary>
            <value>A <see cref="T:MailBee.Mime.MessageParserConfig"/> object containing the options which affect how the <see cref="T:MailBee.Mime.MailMessage"/> object is parsed.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>
            This property provides access to such features as automatic creation of plain-text or HTML parts
            of the message, automatic saving of the message to disk, converting URLs to HTML links, etc.
            </para>
            <para>
            To set options which affect how the mail message is being built (for instance, when it gets sent or saved to disk),
            use the <see cref="P:MailBee.Mime.MailMessage.Builder"/> property.
            </para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MessageParserConfig"/> topic.</example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.PartCount">
            <summary>
            Gets the number of parts of the composite message which is split into the several smaller mail messages.
            <seealso cref="P:MailBee.Mime.MailMessage.IsEntire"/>
            <seealso cref="P:MailBee.Mime.MailMessage.PartIndex"/>
            <seealso cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/>
            </summary>
            <value>
            The number of parts of the composite message which is split into the several smaller mail messages.
            If the message is not split, the return value is 1. 
            </value>
            <remarks>
            <para>
            Splitting the messages into the several smaller parts is a common way of transmitting large messages which exceed
            the maximum message size that is allowed by the mail server. The developer can use the <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/> method
            to restore the entire original message from its smaller parts.
            </para>
            <para>
            Besides that, the developer can use the <see cref="P:MailBee.Mime.MailMessage.IsEntire"/> property to determine whatever a message was
            received completely and the <see cref="P:MailBee.Mime.MailMessage.PartIndex"/> property to get the index of partial message.
            </para>
            </remarks>
            <example>
            The example is available in <see cref="P:MailBee.Mime.MailMessage.IsEntire"/> property overview.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.PartIndex">
            <summary>
            Gets the index of the current part in the sequence of parts of a composite message.
            <seealso cref="P:MailBee.Mime.MailMessage.PartCount"/>
            <seealso cref="P:MailBee.Mime.MailMessage.IsEntire"/>
            <seealso cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/>
            </summary>
            <value>
            The index of the current sub-message in the sequence of sub-messages of a composite message,
            which is split into several smaller ones. If the message is not a part of the composite message,
            the return value is 1. 
            </value>
            <remarks>
            The developer can use the <see cref="P:MailBee.Mime.MailMessage.PartCount"/> property to examine whatever mail message is composite
            or not and the <see cref="P:MailBee.Mime.MailMessage.IsEntire"/> property to determine if a message was received completely.
            </remarks>
            <example>
            The example is available in <see cref="P:MailBee.Mime.MailMessage.IsEntire"/> property overview.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.RawHeader">
            <summary>
            Gets the message header section exactly as it is contained in the message.
            <seealso cref="M:MailBee.Mime.MailMessage.GetMessageRawData"/>
            </summary>
            <value>
            A string containing the full header of the message.
            </value>
            <remarks>
            To get the entire source of the message including its header and body sections, use <see cref="M:MailBee.Mime.MailMessage.GetMessageRawData"/> method.
            <note>In MIME, the header of the message constists of name-value pairs which are also called headers. <see cref="P:MailBee.Mime.MailMessage.RawHeader"/>
            refers to the former (also known as "full header"). Similar reusage of the same term takes place for a body. In MIME, a body section
            is the remaining part of the message after the header section. It includes attachments and text bodies of a message.
            The entire source of the message (the header section and the body section) is often called raw body.
            </note>
            </remarks>
            <example>This sample loads the message from .EML file and displays the raw header of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail1.eml");
            
            Console.WriteLine(msg.RawHeader);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail1.eml")
            
            Console.WriteLine(msg.RawHeader)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.References">
            <summary>
            Gets or sets the references of the message.
            </summary>
            <value>
            A string containing the references of the message. The default value is an empty string.
            </value>
            <remarks>
            <para>The value of this property is taken from References header.</para>
            <para>This header usually contains a space-separated list of Message-ID values
            of all messages in a thread. However, building message threads using this header is not reliable
            since many e-mail clients do not support this mechanism.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the references of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Data\example.eml");
            Console.WriteLine(msg.References);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Data\example.eml")
            Console.WriteLine(msg.References)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.ReplyTo">
            <summary>
            Gets or sets the list of the e-mail addresses where to send a reply to this message.
            <seealso cref="P:MailBee.Mime.MailMessage.ConfirmReceipt"/>
            </summary>
            <value>
            A reference to the collection of e-mail addresses which are intended recipients of a reply to this message.
            The default value is an empty collection.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>To specify it as a string, set <c>msg.ReplyTo.AsString</c> value (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).</para>
            <para>This value is obtained from Reply-To header of the message. If you need to reply to a message which does not contain Reply-To header,
            send the reply to <see cref="P:MailBee.Mime.MailMessage.From"/> address.</para>
            </remarks>
            <example>This sample gets a message from POP3 server and sends autoresponse to its Reply-To address.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("mail.company.com", "bill", "password", 1);
            
            		<span style="color: green;">// Send the autoresponse message.</span>
            		Smtp.QuickSend("bill@company.com", msg.ReplyTo.ToString(), "Warning notification",
            			"Since I'm currently on vacations, I'll reply your message after 01/08/06.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("mail.company.com", "bill", "password", 1)
            
            		<span style="color: green;">' Send the autoresponse message.</span>
            		Smtp.QuickSend("bill@company.com", msg.ReplyTo.ToString, "Warning notification", _
            			"Since I'm currently on vacations, I'll reply your message after 01/08/06.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Sensitivity">
            <summary>
            Gets or sets the sensitivity of the message.
            </summary>
            <value>
            The sensitivity of the message, or <see cref="F:MailBee.Mime.MailSensitivity.None"/> if not set. The default value is <see cref="F:MailBee.Mime.MailSensitivity.None"/>.
            </value>
            <remarks>
            <remarks>
            The value of this property is taken from Sensitivity header.
            </remarks>
            </remarks>
            <example>This sample loads the message from .EML file and sets the private level of sensitivity of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail1.eml");
            
            msg.Sensitivity = MailSensitivity.Private;
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail1.eml")
            
            msg.Sensitivity = MailSensitivity.Private
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Size">
            <summary>
            Gets the size of the message in bytes.
            <seealso cref="P:MailBee.Mime.MailMessage.SizeOnServer"/>
            </summary>
            <value>
            The size of the message in bytes.
            </value>
            <remarks>
            If only the message headers were received from mail server, this property contains the size of these
            headers, but not of the entire message.
            To get the size of the entire message, use <see cref="P:MailBee.Mime.MailMessage.SizeOnServer"/> property.
            </remarks>
            <example>This sample downloads the message from the mail server (only the header and the first 10 lines of the body are downloaded)
            and checks if the message was received completely (and thus its body fits into 10 lines). 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first mail message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("mail.domain.com", "jdoe", "password", 1, 10);
            
            		<span style="color: blue;">if</span> (msg.Size == msg.SizeOnServer)
            		{
            			Console.WriteLine("The message was received completely");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine(@"The message was not received completely
            				(maybe only the message headers were received)");
            		}
            	}
            
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Download the first mail message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("mail.domain.com", "jdoe", "password", 1, 10)
            
            		<span style="color: blue;">If</span> msg.Size = msg.SizeOnServer <span style="color: blue;">Then</span>
            			Console.WriteLine("The message was received completely")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("The message was not received completely" &amp; _
            				"(maybe only the message headers were received)")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.ThrowExceptions">
            <summary>
            Gets or sets whether the <see cref="T:MailBee.Mime.MailMessage"/> object will throw exceptions on errors.
            <seealso cref="T:MailBee.MailBeeException"/>
            <seealso cref="P:MailBee.Mime.MailMessage.LastResult"/>
            </summary>
            <value>
            <b>true</b> if <see cref="T:MailBee.Mime.MailMessage"/> object will throw exceptions on errors; otherwise, <b>false</b>.
            The default value is <b>true</b>.
            </value>
            <remarks>
            <para>
            If this property is set to <b>true</b> and an error occurs, an exception derived from <see cref="T:MailBee.MailBeeException"/> is thrown.
            </para>
            <note>
            The code of the last occurred error is always contained in <see cref="P:MailBee.Mime.MailMessage.LastResult"/> property.
            The list of all error codes is available in <see cref="T:MailBee.ErrorCodes"/> class overview.
            <para>Even if this property is set to false, the exceptions which occur due to errors in MailBee usage 
            will still be thrown. Typical example of such errors is passing invalid arguments to methods.</para>
            </note>
            </remarks>
            <example>This sample simulates an error and exception by attempting to load a file with non-existent name.
            The first attempt is made with exceptions turned off, the second - with exceptions turned on.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Turn off exception handling.</span>
            		msg.ThrowExceptions = <span style="color: blue;">false</span>;
            
            		<span style="color: green;">// Generate an error.</span>
            		<span style="color: blue;">if</span> (!msg.LoadMessage("Wrong Path"))
            		{
            			Console.WriteLine("Error occurred. Error code is " + msg.LastResult.ToString());
            		}
            
            		<span style="color: green;">// Turn on exception handling.</span>
            		msg.ThrowExceptions = <span style="color: blue;">true</span>;
            
            		<span style="color: green;">// The code below will throw an exception.</span>
            		<span style="color: blue;">try</span>
            		{
            			msg.LoadMessage("Wrong Path");
            		}
            		<span style="color: blue;">catch</span> (MailBeeException ex)
            		{
            			<span style="color: green;">// But we catch it. We display the type of the exception. In your app,</span>
            			<span style="color: green;">// you can check other useful properties such as Message or ErrorCode.</span>
            			Console.WriteLine("\r\nThe following exception was thrown:\r\n" + ex.GetType().ToString());
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Turn off exception handling.</span>
            		msg.ThrowExceptions = <span style="color: blue;">False</span>
            
            		<span style="color: green;">' Generate an error.</span>
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> msg.LoadMessage("Wrong Path") <span style="color: blue;">Then</span>
            			Console.WriteLine("Error occurred. Error code is " &amp; msg.LastResult.ToString())
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Turn on exception handling.</span>
            		msg.ThrowExceptions = <span style="color: blue;">True</span>
            
            		<span style="color: green;">' Throw an exception.</span>
            		<span style="color: blue;">Try</span>
            			msg.LoadMessage("Wrong Path")
            		<span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            			<span style="color: green;">' But we catch it. We display the type of the exception. In your app,</span>
            			<span style="color: green;">' you can check other useful properties such as Message or ErrorCode.</span>
            			Console.WriteLine(vbCrLf &amp; "The following exception was thrown:" &amp; vbCrLf &amp; _
            				ex.GetType().ToString())
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.TimeStamps">
            <summary>
            Gets the collection of which represents the trace route of the message.
            <seealso cref="T:MailBee.Mime.TimeStamp"/>
            </summary>
            <value>
            A reference to the collection which contains the list of entries added to the message
            by all mail gateways the message has passed through while being delivered. The default value is an empty collection.
            </value>
            <remarks>
            This collection is populated from Received headers of the message. They represent the route of delivery of the
            message from the sender to the recipient.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Version">
            <summary>
            Gets the current version of MailBee.NET Objects.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            A string containing the current version of MailBee.NET Objects (such as
            <i>major.minor.build.revision</i>).
            </value>
            <example>This sample creates the new message and displays the version of MailBee.NET Objects.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		Console.WriteLine("You are using MailBee.NET Objects v" + msg.Version);
            	}
            
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		Console.WriteLine("You are using MailBee.NET Objects v" &amp; msg.Version)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessage.Headers">
            <summary>
            Gets the collection of the message headers.
            <seealso cref="P:MailBee.Mime.MailMessage.RawHeader"/>
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.HeaderCollection"/> object containing the headers of the message.
            </value>
            <remarks>
            <para>This property allows the developer to access any headers of the message, add new headers, or modify/delete existing ones.</para>
            <para>Use <see cref="P:MailBee.Mime.MailMessage.RawHeader"/> property to get the header section of the message as a string.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.Header"/> topic.
            </example>
        </member>
        <member name="T:MailBee.ImapMail.FolderStatus">
            <summary>
            Provides properties used to examine the status of a single folder of the mail account.
            <seealso cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/>
            </summary>
            <remarks>To obtain the status of a particular folder, the developer can call
            <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method.
            <note><see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method obtains the status information about
            the requested folder without selecting it. The currently selected folder (if any) remains
            selected after calling this method.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.FolderName">
            <summary>
            Gets the full name of the folder including parent folder names if any.
            <seealso cref="P:MailBee.ImapMail.FolderStatus.RawFolderName"/>
            </summary>
            <value>The string containing the full name of the folder including parent folder names if any,
            or a null reference (<b>Nothing</b> in Visual Basic) if the folder name is not available.</value>
            <remarks>
            <para>
            The typical values returned by this property are: "Inbox", "Sent.Orders", "INBOX\From John Doe".
            </para>
            <para>MailBee automatically decodes international folder names presented in UTF-7 Modified encoding
            (see IMAP4 protocol specification in RFC3501 for details on UTF-7 Modified encoding).
            <see cref="P:MailBee.ImapMail.FolderStatus.RawFolderName"/> provides access to the original name as it was returned by the server.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.RawFolderName">
            <summary>
            Gets the full name of the folder as was returned by the server including parent folder names if any.
            <seealso cref="P:MailBee.ImapMail.FolderStatus.FolderName"/>
            </summary>
            <value>The string containing the full name of the folder as was returned by the server including parent folder names if any,
            or a null reference (<b>Nothing</b> in Visual Basic) if the folder name is not available.
            </value>
            <remarks>
            Unlike <see cref="P:MailBee.ImapMail.FolderStatus.FolderName"/>, <see cref="P:MailBee.ImapMail.FolderStatus.RawFolderName"/> is not automatically decoded from UTF-7 Modified encoding.
            The developer can use <see cref="P:MailBee.ImapMail.FolderStatus.RawFolderName"/> in conjuction with <see cref="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames"/> set to <b>false</b>
            to preserve the original names of folders when passing them back to the server. This can be useful if the account contains
            some folder names encoded with the encoding different from UTF-7M. In this case, automatic re-encoding them into UTF-7M
            would cause problems.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.MessageCount">
            <summary>
            Gets the number of messages in the folder.
            </summary>
            <value>The non-negative <see cref="T:System.Int32"/> value containing the number of messages in the folder,
            or -1 if this information is not available.</value>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.RecentCount">
            <summary>
            Gets the number of recent messages in the folder.
            </summary>
            <value>The non-negative <see cref="T:System.Int32"/> value containing the number of recent messages in the folder,
            or -1 if this information is not available.</value>
            <remarks>Recent messages are messages having "\Recent" flag set. See <see cref="F:MailBee.ImapMail.SystemMessageFlags.Recent"/> topic
            for more information regarding recent messages.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.UnseenCount">
            <summary>
            Gets the number of unseen messages in the folder.
            </summary>
            <value>The non-negative <see cref="T:System.Int32"/> value containing the number of messages which have not been read,
            or -1 if this information is not available.</value>
            <remarks>
            Unseen (unread) messages are messages not having "\Seen" flag set. See <see cref="F:MailBee.ImapMail.SystemMessageFlags.Seen"/> topic
            for more information regarding unread messages.
            <note>This value is different from <see cref="P:MailBee.ImapMail.Imap.Unseen"/> which returns the ordinal message number of the first unseen
            message in the folder, not the count of the unseen messages.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.UidNext">
            <summary>
            Gets the next UID value to be assigned to a new message.
            </summary>
            <value>The positive 32-bit <see cref="T:System.Int64"/> value containing the next UID value of the folder,
            or -1 if this information is not available.</value>
            <remarks>
            This is the UID value which will be assigned to a new message when it's gets placed to the folder.
            <see cref="P:MailBee.ImapMail.FolderStatus.UidNext"/> value conforms the following conditions: first, the next UID value WILL NOT change
            unless new messages are added to the mailbox; and second, the next UID value WILL change whenever
            new messages are added to the folder, even if those new messages are subsequently expunged.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.UidValidity">
            <summary>
            Gets the UID validity value of the folder.
            </summary>
            <value>The positive 32-bit <see cref="T:System.Int64"/> value containing the UID validity value of the folder,
            or -1 if this information is not available.</value>
            <remarks>
            <para>
            If UIDs from an earlier session fail to persist in this session,
            the <see cref="P:MailBee.ImapMail.FolderStatus.UidValidity"/> value will be greater than the one used in the earlier session.
            </para>
            <para>The client may save this property value for each folder and then, on each new session, compare saved value
            with the value obtained from the server. If UID validity value returned by the server in the current session
            is larger than saved value, the client cannot rely the UIDs of messages in the folder
            are the same as they were during the earlier session. However, mail servers which fail to
            persist UIDs between sessions are very uncommon nowdays.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderStatus.IsValid">
            <summary>
            Gets if the server response containing the folder status information has been successfully parsed. 
            </summary>
            <value><b>true</b> if the server response containing the folder status information was correct; <b>false</b> otherwise.</value>
            <remarks>
            <para>Due to complexity of IMAP4 responses, some server implementations fail to produce
            100% correct responses sometimes. If MailBee cannot parse the folder status response,
            it sets <see cref="P:MailBee.ImapMail.FolderStatus.IsValid"/> to <b>false</b>.
            </para>
            <para>When the folder status response is correct (<see cref="P:MailBee.ImapMail.FolderStatus.IsValid"/> is <b>true</b>), all
            numeric values are non-negative, and <see cref="P:MailBee.ImapMail.FolderStatus.FolderName"/> is not a null reference (<b>Nothing</b> in Visual Basic).</para>
            </remarks>
        </member>
        <member name="T:MailBee.Html.TagAttribute">
            <summary>
            Represents an attribute of an HTML tag.
            </summary>
            <remarks>To access attributes of an HTML <see cref="T:MailBee.Html.Element"/>, use <see cref="P:MailBee.Html.Element.Attributes"/> property.</remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,System.Boolean)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MailBee.Html.TagAttribute"/> object with the specified attribute definition.
            </summary>
            <param name="attribute">The definition of the HTML tag attribute.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attribute"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <remarks><paramref name="attribute"/> examples: <c>img="picture.gif"</c>, <c>TYPE=BUTTON</c>, <c>SELECTED</c>,
            <c>onclick='javascript:void(0)'</c>.</remarks>
        </member>
        <member name="M:MailBee.Html.TagAttribute.GetProtocol">
            <summary>
            Gets the protocol of the HTML attribute value.
            </summary>
            <returns>The string containing the protocol name (<i>http</i>, <i>javascript</i>, <i>about</i>, etc),
            or an empty string if there is no protocol name in the attribute value.</returns>
        </member>
        <member name="M:MailBee.Html.TagAttribute.Remove">
            <summary>
            Removes this attribute from the HTML tag definition.
            </summary>
        </member>
        <member name="P:MailBee.Html.TagAttribute.Name">
            <summary>
            Gets or sets the name of the HTML tag attribute.
            </summary>
            <value>The name of the HTML attribute.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
        </member>
        <member name="P:MailBee.Html.TagAttribute.Value">
            <summary>
            Gets or sets the value of the HTML tag attribute.
            <seealso cref="P:MailBee.Html.TagAttribute.Definition"/>
            </summary>
            <value>A string with the value of the HTML attribute, or a null reference if this attribute has no value at all.</value>
            <remarks><see cref="P:MailBee.Html.TagAttribute.Definition"/> of an attribute with a value looks like <i>name=value</i> or <i>name="value"</i> or <i>name='value'</i>.
            <see cref="P:MailBee.Html.TagAttribute.Definition"/> of an attribute without a value looks like <i>name</i>.
            </remarks>
        </member>
        <member name="P:MailBee.Html.TagAttribute.Definition">
            <summary>
            Gets or sets the definition of the HTML tag attribute.
            <seealso cref="P:MailBee.Html.TagAttribute.Value"/>
            </summary>
            <value>The definition of the HTML tag attribute.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <remarks>See <see cref="P:MailBee.Html.TagAttribute.Value"/> topic for examples of attribute definitions.</remarks>
        </member>
        <member name="T:MailBee.Html.TagRuleTypes">
            <summary>
            Defines the available modes of processing of an HTML tag for the <see cref="T:MailBee.Html.Rule"/> object.
            <seealso cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/>
            <seealso cref="M:MailBee.Html.RuleSet.AddTagProcessingRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,System.Boolean)"/>
            <seealso cref="M:MailBee.Html.RuleSet.AddTagRemovalRule(System.String,MailBee.Html.TagAttributeCollection)"/>
            <seealso cref="M:MailBee.Html.RuleSet.AddTagReplacementRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.Element)"/>
            </summary>
            <remarks>
            <para>These modes define actions to be performed when <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method
            encounters HTML tag matching certain <see cref="T:MailBee.Html.Rule"/> in the <see cref="T:MailBee.Html.RuleSet"/>
            (denoted by <i>rules</i> parameter).</para>
            <para>Rules of all types cause execution of the delegate when their conditions are met. Rules of all types
            except <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> honor returned value of the delegate and do not apply
            the rule if the delegate returned <b>false</b>. <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> does not do anything
            itself anyway and thus returned value is not important.</para>
            <para>The delegate will only be executed if it was defined (<i>del</i> parameter of <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method
            is not a null reference).</para>
            <para>The above also applies to <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method in the same way as to <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic.</example>
        </member>
        <member name="F:MailBee.Html.TagRuleTypes.ProcessingCondition">
            <summary>
            Just execute the delegate.
            </summary>
        </member>
        <member name="F:MailBee.Html.TagRuleTypes.ProcessingRule">
            <summary>
            Execute the delegate (if defined). If the delegate returned <b>true</b> or was not defined,
            process the HTML element.
            </summary>
        </member>
        <member name="F:MailBee.Html.TagRuleTypes.RemovalRule">
            <summary>
            Execute the delegate (if defined). Ff the delegate returned <b>true</b> or was not defined,
            remove the HTML element with its inner contents.
            </summary>
        </member>
        <member name="F:MailBee.Html.TagRuleTypes.ReplacementRule">
            <summary>
            Execute the delegate (if defined). If the delegate returned <b>true</b> or was not defined,
            replace the HTML element with another tag definition or entire HTML element. The degree of the replacement
            (replace just the tag defintion or the entire tag including its inner contents) depends on the rule settings.
            </summary>
        </member>
        <member name="T:MailBee.Html.Rule">
            <summary>
            Represents a condition (an HTML tag name and a set of its attributes)
            and an action to perform when the condition is met.
            <seealso cref="T:MailBee.Html.RuleSet"/>
            </summary>
            <remarks>
            <para>A rule specifies for which tag to apply a certain action.
            The rule can additionally specify that only tags with certain attributes should be processed
            (for instance, &lt;A&gt; tags with HREF attributes).</para>
            <para>The actions can be pre-defined or user-defined (see <see cref="T:MailBee.Html.TagRuleTypes"/>).
            To implement user-defined action, create a method of <see cref="T:MailBee.Html.ProcessElementDelegate"/>
            type and pass a reference to it when calling <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> or <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method.
            </para>
            <para>To define rules, use <see cref="T:MailBee.Html.RuleSet"/> object methods.</para>
            <para>To define a set of rules which tells <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method
            to remove any ponentially unsafe contents from the HTML document, use <see cref="M:MailBee.Html.RuleSet.GetSafeHtmlRules"/> method.</para>
            <note>A rule, once created and added to the <see cref="T:MailBee.Html.RuleSet"/>, cannot be changed.
            You can, however, remove an existing rule from the <see cref="T:MailBee.Html.RuleSet"/> and add anonther one.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Html.Rule.RuleType">
            <summary>
            Gets the type of the action to perform when processing HTML tags which match the rule condition.
            </summary>
            <value>The type of the action to perform when processing HTML tags which match the rule condition.</value>
        </member>
        <member name="P:MailBee.Html.Rule.TagName">
            <summary>
            Gets the name of the HTML tag for which to apply the rule.
            <seealso cref="P:MailBee.Html.Rule.TagAttributes"/>
            </summary>
            <value>The name of the HTML tag for which this rule should be applied.</value>
            <remarks>If <see cref="P:MailBee.Html.Rule.TagAttributes"/> is not a null reference (<b>Nothing</b> in Visual Basic),
            the rule's action will be applied only to those HTML tags which have <see cref="P:MailBee.Html.Rule.TagName"/> as a tag name
            and any of <see cref="P:MailBee.Html.Rule.TagAttributes"/> as their attributes.</remarks>
        </member>
        <member name="P:MailBee.Html.Rule.TagAttributes">
            <summary>
            Gets the list of attributes any of which must exist in the tag definiton in
            order to satisfy the rule condition for <see cref="P:MailBee.Html.Rule.TagName"/> tag.
            <seealso cref="P:MailBee.Html.Rule.TagName"/>
            </summary>
            <value>A reference to the collection of attributes any of which must exist
            in <see cref="P:MailBee.Html.Rule.TagName"/> tag being processed in order to satisfy
            the rule condition and apply the action, or a null reference (<b>Nothing</b> in Visual Basic)
            if any tags with <see cref="P:MailBee.Html.Rule.TagName"/> name should be processed regardless
            of which attributes they have.</value>
        </member>
        <member name="T:MailBee.DnsMX.DnsReplyCode">
            <summary>
            Lists DNS server known reply codes.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsReplyCode.NoError">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsReplyCode.FormatError">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsReplyCode.ServerFailure">
            <summary>
            Server failure - The name server was unable to process this query
            due to a problem with the name server.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsReplyCode.NameError">
            <summary>
            Name Error - Meaningful only for responses from an authoritative
            name server, this code signifies that the domain name referenced
            in the query does not exist.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsReplyCode.NotImplemented">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsReplyCode.Refused">
            <summary>
            Refused - The name server refuses to perform the specified operation
            for policy reasons.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.IMailBeeSendException">
            <summary>
            When implemented by an exception class, indicates the exception is related to send mail
            operation. The list of the recipients, the sender e-mail address, and the mail
            message itself is available.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.IMailBeeSendException.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.IMailBeeSendException.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.IMailBeeSendException.ActualRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.IMailBeeSendException.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
        </member>
        <member name="T:MailBee.SmtpMail.IMailBeeSmtpSendException">
            <summary>
            When implemented by an exception class, indicates the exception is related to send mail
            to an SMTP server.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.IMailBeeSmtpSendNeedsResetException">
            <summary>
            When implemented by an exception class, indicates RSET command was issued to the SMTP
            server to reset SMTP session and prepare it for sending another message.
            </summary>
            <remarks>If the SMTP server returned a negative response during send mail operation
            and the connection was not closed, MailBee sends RSET command to the SMTP server
            in order to prepare the session for subsequent commands.
            </remarks>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpMessageNotAllowedException">
            <summary>
            An abstract parent for all exceptions that are thrown when the component determines
            the message could not be submitted to the SMTP server even before starting the actual submission.
            </summary>
            <remarks>For instance, if the message source data size exceeds the maximum size of
            the message allowed by the SMTP server for submission, it makes no sense to start
            the actual submission. The server would reject the message anyway.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpMessageNotAllowedException.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.MailBeeSmtpMessageNotAllowedException.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpMessageNotAllowedException.ActualRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpMessageNotAllowedException.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpMessageSizeOutOfRangeException">
            <summary>
            The exception that is thrown when the component determines the size of the message data
            exceeds the maximum size allowed by the SMTP server.
            </summary>
            <remarks>
            <para>MailBee uses ESMTP SIZE extension to determine the maximum allowed message size
            on the server. If ESMTP SIZE extension is not supported or disabled, MailBee will not
            check the message size prior to sending, and this exception will not be thrown.</para>
            <para>The message size can be determined from <see cref="P:MailBee.Mime.MailMessage.Size"/> property value
            of <see cref="P:MailBee.SmtpMail.MailBeeSmtpMessageNotAllowedException.MailMessage"/> object.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpMessageSizeOutOfRangeException.MaxAllowedMessageSize">
            <summary>
            Gets the maximum length of the message (in bytes) which is allowed by
            the SMTP server in order to accept the message from the client.
            </summary>
            <value>An integer value specifying the maximum length of the message (in bytes) which is allowed by
            the SMTP server in order to accept the message from the client.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpNoAcceptedRecipientsException">
            <summary>
            The exception that is thrown when the SMTP server refuses all the recipients submitted
            during the send mail operation.
            </summary>
            <remarks>This exception can be thrown only when refused recipients are allowed. When
            refused recipients are not allowed, the component does not wait until all recipients
            get refused, and throws <see cref="T:MailBee.SmtpMail.MailBeeSmtpRefusedRecipientException"/> if at least one
            recipient fails.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpNoAcceptedRecipientsException.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.MailBeeSmtpNoAcceptedRecipientsException.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpNoAcceptedRecipientsException.ActualRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpNoAcceptedRecipientsException.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException">
            <summary>
            The exception that is thrown when the message contains 8bit data while the SMTP server
            is capable of transmitting 7bit data only.
            <seealso cref="T:MailBee.SmtpMail.Smtp8bitDataConversion"/>
            </summary>
            <remarks>See <see cref="P:MailBee.SmtpMail.Smtp.Conversion8BitTo7bit"/> property documentation for more
            information.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException.ActualRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException">
            <summary>
            The exception that is thrown when the SMTP server responds with a negative reply
            (<i>4xx</i> or <i>5xx</i>, such as <i>501</i>) during send mail operation.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException.ActualRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the sender of the mail message.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the address of the message sender.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpRefusedSenderException">
            <summary>
            The exception that is thrown when the SMTP server refuses to deliver the mail message
            from the specified sender.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpRefusedRecipientException">
            <summary>
            The exception that is thrown when the SMTP server refuses to deliver the mail message
            to the specified recipient.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpRefusedRecipientException.RefusedRecipientEmail">
            <summary>
            Gets the e-mail address of the refused recipient.
            </summary>
            <value>The pure e-mail address (<i>user@domain.com</i>, i.e. without display name or remarks)
            which was submitted to the SMTP server as the recipient's address.</value>
        </member>
        <member name="P:MailBee.SmtpMail.MailBeeSmtpRefusedRecipientException.RefusedRecipientIndex">
            <summary>
            Gets the index of the refused recipient in <see cref="P:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException.ActualRecipients"/> collection.
            </summary>
            <value>An integer value containing zero-based index of
            the refused recipient in <see cref="P:MailBee.SmtpMail.MailBeeSmtpSendNegativeResponseException.ActualRecipients"/> collection.</value>
        </member>
        <member name="T:MailBee.SmtpMail.MailBeeSmtpRefusedDataException">
            <summary>
            The exception that is thrown when the SMTP server refuses the message data submitted
            by the client or even refuses to start receiving the message data from the client.
            </summary>
            <remarks>The developer can use <see cref="P:MailBee.MailBeeEmailProtocolNegativeResponseException.ResponseString"/> and
            <see cref="P:MailBee.MailBeeException.ErrorCode"/> property values to obtain more
            detailed information about the error.</remarks>
        </member>
        <member name="T:MailBee.SmtpMail.SendFailureThreshold">
            <summary>
            Specifies whether <see cref="M:MailBee.SmtpMail.Smtp.TestSend(MailBee.SmtpMail.SendFailureThreshold)"/> method should report error if sending
            failed to at least one recipient, or to all recipients.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.SendFailureThreshold.Default">
            <summary>
            Use the same rules which are used when sending with <see cref="M:MailBee.SmtpMail.Smtp.Send"/>
            methods. In "send to SMTP relay server" mode, <see cref="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients"/>
            value is used. In direct send mode (through DNS MX lookup), failed recipients
            would be always allowed.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.SendFailureThreshold.AnyRecipientsFailed">
            <summary>
            Report error if at least one recipient is refused by the SMTP server, or any other
            error occurred (such as failed to resolve a domain into IP address,
            find SMTP MX server name for a domain, connect to an SMTP MX server, etc).
            Other recipients are not tested (i.e. the method completes once a failed recipient
            detected).
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.SendFailureThreshold.AllRecipientsFailed">
            <summary>
            Report error if all recipients of the message failed, and the message cannot be
            sent to anybody of them.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.TestSendResult">
            <summary>
            Provides values returned by <see cref="M:MailBee.SmtpMail.Smtp.TestSend(MailBee.SmtpMail.SendFailureThreshold)"/> method as
            the result of test send operation.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.OK">
            <summary>
            Successful completion.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoSender">
            <summary>
            No sender was specified.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoRecipients">
            <summary>
            No recipients were specified.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.BadSender">
            <summary>
            Sender e-mail address was refused by the SMTP server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.BadRecipient">
            <summary>
            Recipient e-mail was refused by the SMTP server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoAcceptedRecipients">
            <summary>
            No recipients have been accepted by the SMTP server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoCredentials">
            <summary>
            ESMTP or POP-before-SMTP authentication failed because
            no user account name and/or password was provided.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoSupportedAuth">
            <summary>
            No suitable ESMTP authentication method is supported by the SMTP server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.BadAuthMethod">
            <summary>
            The requested authentication method is not supported by the SMTP server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.BadCredentials">
            <summary>
            ESMTP or POP-before-SMTP authentication failed because
            invalid user account name and/or password was provided.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NegativeSmtpResponse">
            <summary>
            The SMTP server returned negative response.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NegativePop3Response">
            <summary>
            The POP3 server returned negative response during POP-before-SMTP authentication.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.SmtpResolveHostError">
            <summary>
            The SMTP server name could not be resolved into IP address.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.SmtpConnectionError">
            <summary>
            There was connection error with the SMTP server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.Pop3ResolveHostError">
            <summary>
            The POP3 server name could not be resolved into IP address. POP-before-SMTP authentication
            could not start.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.Pop3ConnectionError">
            <summary>
            There was connection error with the POP3 server during POP-before-SMTP authentication.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoDomainInRecipientEmail">
            <summary>
            Recipient was specified as <i>jdoe</i> (or <i>jdoe@</i>) rather than <i>jdoe@domain.com</i>,
            and <see cref="P:MailBee.Global.LocalSmtpMXServerName"/> is set to an empty string.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.NoMXRecord">
            <summary>
            No MX or A records have been found for a recipient domain. This domain cannot accept mail. 
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.DnsProtocolError">
            <summary>
            The DNS server responded with an error on DNS MX lookup query from MailBee.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.DnsConnectionError">
            <summary>
            There was connection error with the DNS server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.TestSendResult.UnknownError">
            <summary>
            Other error.
            </summary>
        </member>
        <member name="T:MailBee.Pop3Mail.MailBeePop3NegativeResponseException">
            <summary>
            The exception that is thrown when the POP3 server responds with a negative reply (i.e. <i>-ERR</i>).
            </summary>
        </member>
        <member name="T:MailBee.Pop3Mail.MailBeePop3OptionalCommandNotSupportedException">
            <summary>
            The exception that is thrown when the POP3 server responds with a negative reply to
            an optional POP3 command.
            </summary>
            <remarks>
            <para>This exception is never thrown in the application code. Instead, MailBee catches
            it, and raises <see cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred"/> event passing the exception instance as
            the <i>Reason</i> parameter value.</para>
            <para>This exception indicates the POP3 server does not support an optional POP3 command which
            was sent to the server by MailBee. For instance, MailBee may try to send <i>CAPA</i> command
            in order to learn the server capabilities. The POP3 server, however, may not support it.
            In this case, MailBee continues normal execution and tries another methods to perform
            the current task or disables POP3 extensions which could be supported if the failed
            command succeeded. However, <see cref="E:MailBee.Pop3Mail.Pop3.ErrorOccurred"/> event is still raised to let
            the application code know that some features will be disabled.</para>
            </remarks>
        </member>
        <member name="T:MailBee.Pop3Mail.MailBeePop3LoginNegativeResponseException">
            <summary>
            An abstract parent for all exceptions which indicate the POP3 server replied with a negative
            response during authentication of the user. 
            </summary>
        </member>
        <member name="T:MailBee.Pop3Mail.MailBeePop3LoginBadCredentialsException">
            <summary>
            The exception that is thrown when the POP3 server reports the given user account name
            and/or password is incorrect.
            </summary>
        </member>
        <member name="P:MailBee.Pop3Mail.MailBeePop3LoginBadCredentialsException.AccountName">
            <summary>
            Gets the account name which was used during the authentication.
            </summary>
            <value>The account name which was used during the authentication.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.MailBeePop3LoginBadCredentialsException.Password">
            <summary>
            Gets the account password which was used during the authentication.
            </summary>
            <value>The account password which was used during the authentication.</value>
        </member>
        <member name="T:MailBee.Pop3Mail.MailBeePop3LoginBadMethodException">
            <summary>
            The exception that is thrown when the POP3 server reports the given SASL authentication
            method is not supported and use of another authentication methods is not allowed by the
            application.
            <seealso cref="T:MailBee.AuthenticationMethods"/>
            <seealso cref="T:MailBee.AuthenticationOptions"/>
            <seealso cref="T:MailBee.Pop3Mail.MailBeePop3LoginBadCredentialsException"/>
            </summary>
            <remarks>By default, if a particular SASL authentication method is not supported by the server,
            MailBee switches to the previous method listed in <i>authMethods</i> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method.
            If no more methods left, <see cref="T:MailBee.MailBeeLoginNoSupportedMethodsException"/> is thrown.
            However, if <see cref="F:MailBee.AuthenticationOptions.UseSingleMethodOnly"/> flag is set in
            <i>authOptions</i> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method, MailBee will not try other methods. Instead, if will immediately
            throw <see cref="T:MailBee.Pop3Mail.MailBeePop3LoginBadMethodException"/>.
            <note>This exception does not indicate that authentication using the given method failed.
            Instead, it indicates the method itself is not supported by the server. When the method
            is supported but the authentication using this method fails (invalid account name/password),
            MailBee does not try another methods (there would be no sense if it did),
            and throws <see cref="T:MailBee.Pop3Mail.MailBeePop3LoginBadCredentialsException"/>.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.MailBeePop3LoginBadMethodException.BadMethod">
            <summary>
            Gets the authentication method which was rejected by the server.
            </summary>
            <value>A <see cref="T:MailBee.AuthenticationMethods"/> value having only a single bit set, which
            indicates the method which is requested by the application but not supported by the server.</value>
            <remarks>Although <see cref="T:MailBee.AuthenticationMethods"/> allows bitwise combination
            of its member values, the result returned by this property always contains a single
            member value indicating the specific method which was rejected.</remarks>
        </member>
        <member name="T:MailBee.Mime.MailMergeTargets">
            <summary>
            Defines mail message elements where patterns should be searched and replaced with actual values
            during mail merge operation.
            <seealso cref="P:MailBee.Mime.MailMessage.Merge"/>
            </summary>
            <remarks>
            <see cref="M:MailBee.Mime.MailMerge.Replace(System.String,System.String,MailBee.Mime.MailMergeTargets)">MailMerge.Replace</see> method performs search and replacement
            in the parts of the message specified by <i>targets</i> parameter (which has <see cref="T:MailBee.Mime.MailMergeTargets"/> type).
            <see cref="T:MailBee.Mime.MailMergeTargets"/> has no effect on attachments. This is because <see cref="M:MailBee.Mime.MailMerge.Replace(System.String,System.String)"/> 
            method can add attachments only if their patterns have been added through <see cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/> method. 
            </remarks>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.None">
            <summary>
            No elements.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.BodyPlainText">
            <summary>
            The plain-text body of the message.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.BodyHtmlText">
            <summary>
            The HTML body of the message.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.From">
            <summary>
            The <see cref="P:MailBee.Mime.MailMessage.From"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.ReplyTo">
            <summary>
            The <see cref="P:MailBee.Mime.MailMessage.ReplyTo"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.Recipients">
            <summary>
            The <see cref="P:MailBee.Mime.MailMessage.To"/>, <see cref="P:MailBee.Mime.MailMessage.Cc"/>, <see cref="P:MailBee.Mime.MailMessage.Bcc"/> fields.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.Subject">
            <summary>
            The <see cref="P:MailBee.Mime.MailMessage.Subject"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.Other">
            <summary>
            All other parts of the message excluding attachments. Examples are custom headers and text body parts.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailMergeTargets.All">
            <summary>
            All message elements listed above.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MailMerge">
            <summary>
            Provides properties and methods for creating customized messages based on a template.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.MailMergeTargets"/>
            </summary>
            <remarks>
            <see cref="T:MailBee.Mime.MailMerge"/> class is very flexible and can be used for creating of e-mail messages based on a template and data from any source.
            <para>However, if such flexibility is not needed and the source of the data is a database, then it's easier to use
            <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)">Smtp.SendMailMerge</see> method. </para>
            </remarks>
            <example>
            This sample defines a template and generates 3 e-mail messages based on it. The template includes
            both static fields (for instance, From field remains the same for all e-mails in the series)
            and dynamic patterns which are replaced with actual values for every e-mail generated. Two
            attachments are added to each message: one static and one pattern-based.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.Collections;
            <span style="color: blue;">using</span> System.Collections.Specialized;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Create an object to store the list of e-mail addresses and friendly names...</span>
            StringDictionary sd = <span style="color: blue;">new</span> StringDictionary();
            
            <span style="color: green;">// ...add populate it with some values.</span>
            sd.Add("jdoe@domain.com", "John Doe");
            sd.Add("kathy@example.com", "Kathy");
            sd.Add("mark@company.com", "Mark");
            
            <span style="color: green;">// Set up an e-mail template.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.To.AsString = @"""%%NAME%%"" &lt;%%EMAIL%%&gt;";
            msg.From.Email = "john.smith@site.com";
            msg.Subject = "Hello, %%NAME%%.";
            msg.BodyPlainText = @"Hello, %%NAME%%. Your e-mail is %%EMAIL%%.";
            msg.BodyHtmlText = @"&lt;html&gt;
            &lt;body&gt;
            Hello, &lt;b&gt;%%NAME%%&lt;/b&gt;. Your e-mail is &lt;i&gt;%%EMAIL%%&lt;/i&gt;.
            Attached File: &lt;font color=""red""&gt;%%FILENAME%%&lt;/font&gt;
            &lt;br&gt;
            &lt;img src=""cid:123456"" alt="".NET""&gt;
            &lt;/body&gt;
            &lt;/html&gt;";
            
            <span style="color: green;">// The template also includes the attachment which is common for all e-mails in the series...</span>
            msg.Attachments.Add(@"C:\Docs\image17b.gif", "logo.gif", "123456");
            
            <span style="color: green;">// ... and the attachment which is unique for each e-mail.</span>
            msg.Merge.AddAttachmentPattern(@"C:\Docs\%%FILENAME%%");
            
            <span style="color: green;">// Create array of actual filenames which will substitute %%FILENAME%% pattern in merged e-mails.</span>
            <span style="color: blue;">string</span>[] strArrays = {"image1.jpg", "image2.gif", "image3.gif"};
            
            <span style="color: green;">// Perform actual mail merge and save the resulting e-mails to disk.</span>
            <span style="color: blue;">int</span> i = 1;
            <span style="color: blue;">foreach</span> (DictionaryEntry de <span style="color: blue;">in</span> sd)
            {
            	msg.Merge.Replace(@"%%NAME%%", (<span style="color: blue;">string</span>)de.Value);
            	msg.Merge.Replace(@"%%FILENAME%%", strArrays[i-1], MailMergeTargets.BodyHtmlText);
            	msg.Merge.Replace(@"%%EMAIL%%", (<span style="color: blue;">string</span>)de.Key, MailMergeTargets.Recipients |
            		MailMergeTargets.Subject | MailMergeTargets.BodyHtmlText | MailMergeTargets.BodyPlainText);
            
            	msg.Merge.MergedMessage.SaveMessage(<span style="color: blue;">string</span>.Format(@"C:\Temp\merge{0}.eml", i));
            
            	msg.Merge.Reset();
            	i++;
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.Collections.Specialized
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Create an object to store the list of e-mail addresses and friendly names...</span>
            <span style="color: blue;">Dim</span> sd = <span style="color: blue;">New</span> StringDictionary
            
            <span style="color: green;">' ...add populate it with some values.</span>
            sd.Add("jdoe@domain.com", "John Doe");
            sd.Add("kathy@example.com", "Kathy");
            sd.Add("mark@company.com", "Mark");
            
            <span style="color: green;">' Set up an e-mail template.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.To.AsString = """%%NAME%%"" &lt;%%EMAIL%%&gt;"
            msg.From.Email = "john.smith@site.com"
            msg.Subject = "Hello, %%NAME%%."
            msg.BodyPlainText = "Hello, %%NAME%%. Your e-mail is %%EMAIL%%. Visit us (www.afterlogic.com)"
            msg.BodyHtmlText = "&lt;html&gt;" &amp; VbCrLf &amp; _
            	"&lt;body&gt;" &amp; VbCrLf &amp; _
            	"Hello, &lt;b&gt;%%NAME%%&lt;/b&gt;. Your e-mail is &lt;i&gt;%%EMAIL%%&lt;/i&gt;. Visit us &lt;a href=""http://www.afterlogic.com/""&gt;Afterlogic&lt;/a&gt;" &amp; VbCrLf &amp; _
            	"Attached File: &lt;font color=""red""&gt;%%FILENAME%%&lt;/font&gt;" &amp; VbCrLf &amp; _
            	"&lt;br&gt;" &amp; VbCrLf &amp; _
            	"&lt;img src=""cid:123456"" alt="".NET""&gt;" &amp; VbCrLf &amp; _
            	"&lt;/body&gt;" &amp; VbCrLf &amp; _
            	"&lt;/html&gt;"
            
            <span style="color: green;">' The template also includes the attachment which is common for all e-mails in the series...</span>
            msg.Attachments.Add("C:\Docs\image17b.gif", "logo.gif", "123456");
            
            msg.Merge.AddAttachmentPattern("%%FILENAME%%")
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1
            <span style="color: blue;">Dim</span> strArrays <span style="color: blue;">As</span> <span style="color: blue;">String</span>() = {"C:\Docs\image1.jpg", "C:\Docs\image2.gif", "C:\Docs\image3.gif"}
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> de <span style="color: blue;">As</span> DictionaryEntry <span style="color: blue;">In</span> sd
            	msg.Merge.Replace("%%NAME%%", de.Value)
            	msg.Merge.Replace("%%FILENAME%%", strArrays(i - 1), MailMergeTargets.BodyHtmlText)
            	msg.Merge.Replace("%%EMAIL%%", de.Key, MailMergeTargets.Recipients <span style="color: blue;">Or</span> _
            	 MailMergeTargets.Subject <span style="color: blue;">Or</span> MailMergeTargets.BodyHtmlText <span style="color: blue;">Or</span> MailMergeTargets.BodyPlainText)
            
            	msg.Merge.MergedMessage.SaveMessage(<span style="color: blue;">String</span>.Format("C:\Temp\merge{0}.eml", i))
            
            	msg.Merge.Reset()
            	i = i + 1
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)">
            <summary>
            Adds the attachment pattern to the collection of attachment patterns.
            <seealso cref="M:MailBee.Mime.MailMerge.ClearAttachmentPatterns"/>
            </summary>
            <param name="filenamePattern">The attachment pattern.</param>
            <remarks>
            The attachment pattern is a string (like <i>!filename!</i>) which denotes a placeholder
            to be replaced with the actual attachment filename during mail merge operation. When <see cref="M:MailBee.Mime.MailMerge.Replace(System.String,System.String)"/>
            method is called with the value of <i>pattern</i> parameter equal to the filename pattern previously added
            with <see cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/> method, the file denoted by the path specified in <i>actualValue</i>
            parameter of <see cref="M:MailBee.Mime.MailMerge.Replace(System.String,System.String)"/> method will be automatically attached.
            <note> Pattern of the message template is case-sensitive! For instance, if the pattern is <i>#filename#</i>
            and the attachment patterns contain <i>#FILENAME#</i> and <i>#filename#</i>, then only <i>#filename#</i> will be replaced with the actual value.
            </note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMerge"/> class overview.
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMerge.ClearAttachmentPatterns">
            <summary>
            Clears the collection of the attachments patterns.
            <seealso cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/>
            </summary>
            <remarks>Unlike <see cref="M:MailBee.Mime.MailMerge.Reset"/> method (which should be called each time you need to merge
            another portion of data with the same template and produce another e-mail within the same series),
            <see cref="M:MailBee.Mime.MailMerge.ClearAttachmentPatterns"/> should only be called when you want to start another series and
            define another template.</remarks>
        </member>
        <member name="M:MailBee.Mime.MailMerge.Reset">
            <summary>
            Resets the merged message.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <remarks>
            <para>This method sets <see cref="P:MailBee.Mime.MailMerge.MergedMessage"/> property to a null reference (<b>Nothing</b> in Visual Basic).
            In fact, this method reverts the merged message back to the template.</para>
            <para>After you finished merging a portion of actual values with a template and sending the resulting message,
            call this method if you need to proceed with creating another message based on the same template.</para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMerge"/> topic.</example>
        </member>
        <member name="M:MailBee.Mime.MailMerge.Replace(System.String,System.String)">
            <summary>
            Replaces all occurrences of the specified pattern in the message template with the specified actual value.
            <seealso cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/>
            </summary>
            <param name="pattern">The pattern to be searched.</param>
            <param name="actualValue">The actual value to replace the found pattern with.</param>
            <remarks>
            <para>This method performs search and replace operation in ALL parts of the message. If it's desired to only limit the scope of search and replace operation to certain message only
            (such as message headers only), use <see cref="M:MailBee.Mime.MailMerge.Replace(System.String,System.String,MailBee.Mime.MailMergeTargets)"/> overload.</para>
            <para>If you previously added an attachment pattern (using <seealso cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/> method) which contains <paramref name="pattern"/> in its value,
            <paramref name="pattern"/> will be replaced with the <paramref name="actualValue"/> in the attachment pattern
            and the resulting value will be used as a path to the file to be attached to the message.</para>
            <note>Pattern of the message template is case-sensitive. For instance, if the pattern is <i>e-mail</i>
            and the message body contains <i>E-MAIL</i> and <i>e-mail</i>, then only <i>e-mail</i> will be replaced with the actual value.
            </note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMerge"/> topic.
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMerge.Replace(System.String,System.String,MailBee.Mime.MailMergeTargets)">
            <summary>
            Replaces all occurrences of the specified case-sensitive pattern in the specified parts of the message with the actual value.
            <seealso cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/>
            </summary>
            <param name="pattern">The pattern to be searched.</param>
            <param name="actualValue">The actual value to replace the found pattern with.</param>
            <param name="targets">The elements of the message where the pattern text should be searched and replaced with the actual value.</param>
            <remarks>
            <para>This method performs search and replace operation in <paramref name="targets"/> parts of the message.</para>
            <para>If you previously added an attachment pattern (using <seealso cref="M:MailBee.Mime.MailMerge.AddAttachmentPattern(System.String)"/> method) which contains <paramref name="pattern"/> in its value,
            <paramref name="pattern"/> will be replaced with the <paramref name="actualValue"/> in the attachment pattern
            and the resulting value will be used as a path to the file to be attached to the message.</para>
            <note>Pattern of the message template is case-sensitive. For instance, if the pattern is <i>e-mail</i>
            and the message body contains <i>E-MAIL</i> and <i>e-mail</i>, then only <i>e-mail</i> will be replaced with the actual value.</note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMerge"/> topic.</example>
        </member>
        <member name="P:MailBee.Mime.MailMerge.MergedMessage">
            <summary>
            Contains the completed mail message which is a result of mail merge operation. 
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            A merged <see cref="T:MailBee.Mime.MailMessage"/> object. The default value is a null reference (<b>Nothing</b> in Visual Basic).
            </value>
            <remarks>
            To make this property return non-null object, you should call
            <see cref="M:MailBee.Mime.MailMerge.Replace(System.String,System.String)"/> method (or its overloads) at least once.
            <see cref="M:MailBee.Mime.MailMerge.Reset"/> method call sets <see cref="P:MailBee.Mime.MailMerge.MergedMessage"/> value back to a null reference.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMerge"/> class overview.
            </example>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapNegativeResponseException">
            <summary>
            The exception that is thrown when the IMAP server responds with a negative reply (i.e. "BAD" or "NO").
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapNegativeResponseException.CompletionResult">
            <summary>
            Gets the response status code.
            </summary>
            <value>The string containing uppercased value of the negative status response code: "BAD" or "NO".</value>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapNegativeResponseException.OptionalResponse">
            <summary>
            Gets the contents of the optional response code of the response.
            </summary>
            <value>The string containing the inner contents of the optional response (the part of the status response enclosed in square brackets),
            or a null reference (<b>Nothing</b> in Visual Basic) if the response does not have the optional response code.</value>
            <remarks>For instance, if the optional response code is "[alert]", this property returns "alert".
            The square brackets themselves are not returned.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapNegativeResponseException.HumanReadable">
            <summary>
            Gets the human readable part of the status response.
            </summary>
            <value>The string containing the human readable part of the status response,
            or a null reference (<b>Nothing</b> in Visual Basic) if the response does not have the human readable part.</value>
            <remarks>For instance, if the entire status response string is
            "MBN00000002 NO incorrect password or account name", this property returns
            "incorrect password or account name".</remarks>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapLoginNegativeResponseException">
            <summary>
            An abstract parent for all exceptions which indicate the IMAP server replied with a negative
            response during authentication of the user. 
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapLoginBadCredentialsException">
            <summary>
            The exception that is thrown when the IMAP server reports the given user account name
            and/or password is incorrect.
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapLoginBadCredentialsException.AccountName">
            <summary>
            Gets the account name which was used during the authentication.
            </summary>
            <value>The account name which was used during the authentication.</value>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapLoginBadCredentialsException.Password">
            <summary>
            Gets the account password which was used during the authentication.
            </summary>
            <value>The account password which was used during the authentication.</value>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapLoginBadMethodException">
            <summary>
            The exception that is thrown when the IMAP server reports the given SASL authentication
            method is not supported and use of another authentication methods is not allowed by the
            application.
            <seealso cref="T:MailBee.AuthenticationMethods"/>
            <seealso cref="T:MailBee.AuthenticationOptions"/>
            <seealso cref="T:MailBee.ImapMail.MailBeeImapLoginBadCredentialsException"/>
            </summary>
            <remarks>By default, if a particular SASL authentication method is not supported by the server,
            MailBee switches to the previous method listed in <i>authMethods</i> parameter of <see cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method.
            If no more methods left, <see cref="T:MailBee.MailBeeLoginNoSupportedMethodsException"/> is thrown.
            However, if <see cref="F:MailBee.AuthenticationOptions.UseSingleMethodOnly"/> flag is set in
            <i>authOptions</i> parameter of <see cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method, MailBee will not try other methods. Instead, if will immediately
            throw <see cref="T:MailBee.ImapMail.MailBeeImapLoginBadMethodException"/>.
            <note>This exception does not indicate that authentication using the given method failed.
            Instead, it indicates the method itself is not supported by the server. When the method
            is supported but the authentication using this method fails (invalid account name/password),
            MailBee does not try another methods (there would be no sense if it did),
            and throws <see cref="T:MailBee.ImapMail.MailBeeImapLoginBadCredentialsException"/>.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapLoginBadMethodException.BadMethod">
            <summary>
            Gets the authentication method which was rejected by the server.
            </summary>
            <value>A <see cref="T:MailBee.AuthenticationMethods"/> value having only a single bit set, which
            indicates the method which is requested by the application but not supported by the server.</value>
            <remarks>Although <see cref="T:MailBee.AuthenticationMethods"/> allows bitwise combination
            of its member values, the result returned by this property always contains a single
            member value indicating the specific method which was rejected.</remarks>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapResponseNotFoundException">
            <summary>
            The exception that is thrown when the IMAP server did not return the expected response.
            </summary>
            <remarks>If this exception occurs, it indicates the IMAP4 server returned wrong response (not that one which was expected).
            This can only happen if there are serious errors in the mail server implementation (for instance, certain command
            is not properly implemented).
            </remarks>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException">
            <summary>
            The exception that is thrown when the message with the specified index cannot be downloaded because
            this index does not correspond to any message in the currently selected folder on the server.
            </summary>
            <remarks>If this exception occurs, it indicates that the specified index (ordinal message number or UID)
            is not valid in the current folder state.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException.MessageIndex">
            <summary>
            Gets the message index of the non-existent message.
            </summary>
            <value>The UID (if <see cref="P:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException.IndexIsUid"/> is <b>true</b>) or the message number
            (if <see cref="P:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException.IndexIsUid"/> is <b>false</b>) of the non-existent message.</value>
            <remarks>Valid message numbers are positive integer values. Valid UIDs are positive 32-bit values.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException.IndexIsUid">
            <summary>
            Gets whether <see cref="P:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException.MessageIndex"/> designates a UID rather than an ordinal message number.
            </summary>
            <value>If <b>true</b>, <see cref="P:MailBee.ImapMail.MailBeeImapMessageIndexNotFoundException.MessageIndex"/> designates a UID; otherwise, an ordinal message number.</value>
        </member>
        <member name="T:MailBee.ImapMail.MailBeeImapInvalidEnvelopeException">
            <summary>
            The exception that is thrown when MailBee encounters FETCH response which could not be completely parsed.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
            <remarks>
            <para>If this exception occurs, the <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> property of the corresponding <see cref="T:MailBee.ImapMail.Envelope"/> object will be set to
            <b>false</b>. The common reason of occurrence of this exception is errors in the
            mail server implementation.
            </para>
            <para>This exception is thrown to the application code only when it occurs during execution of
            methods which return a single object (such as <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/>). Methods which
            return collections of objects (such as <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>, <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>, etc)
            only raise <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event passing this exception as <see cref="P:MailBee.ErrorEventArgs.Reason"/> value.
            The execution then continues. This allows the application to skip the invalid envelope or message and proceed with subsequent messages if any.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.MailBeeImapInvalidEnvelopeException.InvalidEnvelope">
            <summary>
            Gets the invalid envelope which could not parsed.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.Envelope"/> object representing the FETCH
            response which could not be completely parsed.</value>
            <remarks>Methods which download mail messages (such as <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>)
            internally call <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> to get envelopes, and then
            return mail messages by extracting them from <see cref="P:MailBee.ImapMail.Envelope.MessagePreview"/>
            property of the <see cref="T:MailBee.ImapMail.Envelope"/> objects. Thus, <see cref="T:MailBee.ImapMail.MailBeeImapInvalidEnvelopeException"/>
            can be thrown not only with <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> methods, but also with the methods
            which download entire messages or message headers, including <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/>,
            <see cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/>, etc.</remarks>
        </member>
        <member name="T:MailBee.ImapMail.ImapBodyStructureCollection">
            <summary>
            Provides properties and methods for examining the collection of the <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> objects.
            <seealso cref="T:MailBee.ImapMail.ImapBodyStructure"/>
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.ImapBodyStructureCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> object at the specified zero-based index in the collection.
            <seealso cref="T:MailBee.ImapMail.ImapBodyStructure"/>
            </summary>
            <param name="index">The zero-based index of the <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> object in the collection.</param>
            <value>
            A <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.ImapMail.Imap">
            <summary>
            Provides properties and methods for connecting to an IMAP4 server, downloading, searching, and
            managing folders and e-mail messages in a user account.
            </summary>
            <remarks>You can perform the following operations using this class:
            <list type="bullet">
            <item><description>Download entire messages with body and attachments</description></item>
            <item><description>Download message headers (and optionally, the part of message bodies)</description></item>
            <item><description>Download message envelopes or any parts or attributes of messages</description></item>
            <item><description>Download and manage IMAP4 folders</description></item>
            <item><description>Delete messages from the server, examine and set message flags</description></item>
            <item><description>Send user-defined commands to the IMAP4 server</description></item>
            <item><description>Login to a user account using a number of authentication methods (including secure methods)</description></item>
            <item><description>Process multiple messages in a batch</description></item>
            <item><description>Search messages</description></item>
            <item><description>Upload, copy, and move messages between folders</description></item>
            <item><description>Collect folder and accounts statistics like number of messages and total size of all messages</description></item>
            <item><description>Download entire messages or message headers with a single line of code (using static methods)</description></item>
            <item><description>Take advantage of many IMAP4 extensions (UIDPLUS, LITERAL+, QUOTA, IDLE, SORT, etc)</description></item>
            <item><description>Establish secure connection with TLS/SSL enabled IMAP4 server</description></item>
            <item><description>Establish connection via a proxy server (SOCKS4, SOCKS5, and HTTP proxy are supported)</description></item>
            </list>
            </remarks>
            <example>This sample connects to an IMAP4 server, logs in using the most secure method
            supported by this server, downloads envelopes for the last 10 messages in the inbox, and prints From:, To:, and
            Subject: field values for every message into Console, newer messages first.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.somecompany.com");
            		imp.Login("jdoe@somecompany.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: blue;">string</span> range;
            
            		<span style="color: green;">// Does the inbox contain at least 10 mails?</span>
            		<span style="color: blue;">if</span> (imp.MessageCount &gt;= 10)
            		{
            			<span style="color: green;">// We'll get last 10 mails.</span>
            			range = (imp.MessageCount - 9).ToString() + ":" + "*";
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// We'll get all mails.</span>
            			range = Imap.AllMessages;
            		}
            
            		<span style="color: green;">// Get envelopes for the specified messages.</span>
            		EnvelopeCollection envelopes = imp.DownloadEnvelopes(range, <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Make newer messages be displayed first.</span>
            		envelopes.Reverse();
            
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envelopes)
            		{
            			Console.WriteLine("Message #" + env.MessageNumber);
            			Console.WriteLine("From: " + env.From.ToString());
            			Console.WriteLine("To: " + env.To.ToString());
            			Console.WriteLine("Subject: " + env.Subject);
            			Console.WriteLine();
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.somecompany.com")
            		imp.Login("jdoe@somecompany.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: blue;">Dim</span> range <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            
            		<span style="color: green;">' Does the inbox contain at least 10 mails?</span>
            		<span style="color: blue;">If</span> imp.MessageCount &gt;= 10 <span style="color: blue;">Then</span>
            			<span style="color: green;">' We'll get last 10 mails.</span>
            			range = (imp.MessageCount - 9).ToString() &amp; ":" &amp; "*"
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' We'll get all mails.</span>
            			range = Imap.AllMessages
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Get envelopes for the specified messages.</span>
            		<span style="color: blue;">Dim</span> envelopes <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(range, <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Make newer messages be displayed first.</span>
            		envelopes.Reverse()
            
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envelopes
            			Console.WriteLine("Message #" &amp; env.MessageNumber)
            			Console.WriteLine("From: " &amp; env.From.ToString())
            			Console.WriteLine("To: " &amp; env.To.ToString())
            			Console.WriteLine("Subject: " &amp; env.Subject)
            			Console.WriteLine()
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.InternalUse.ImapEventSink">
            <summary>
            This class is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.ImapEventSink.OnEnvelopeDownloaded(MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.ImapEventSink.OnEnvelopeDataChunkReceived(MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.ImapEventSink.OnServerStatus(MailBee.ImapMail.ImapServerStatusEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.ImapEventSink.OnMessageStatus(MailBee.ImapMail.ImapMessageStatusEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.InternalUse.ImapEventSink.OnIdling(MailBee.ImapMail.ImapIdlingEventArgs)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.Imap.AllMessages">
            <summary>
            Specifies the message set (sequence) which includes all messages in the folder.
            </summary>
            <value>"1:*" string.</value>
            <remarks>
            This constant can be passed as <paramref name="messageIndexSet"/> parameter
            value of the <see cref="T:MailBee.ImapMail.Imap"/> class method accepting this parameter to specify
            that all messages in the currently selected folder should be processed (downloaded, deleted, etc).
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Dispose">
            <summary>
            Closes all opened network connections (if any) and releases any used system resources.
            </summary>
            <remarks>Usually, the developer does not need to call this method. It's recommended
            to call <see cref="M:MailBee.ImapMail.Imap.Disconnect"/> method to close the connections and free the resources.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, must release unmanaged and optionally managed
            resources used by the component.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.</param>
            <remarks>If the derived class does not use any additional resources, this method
            does not need to be overridden. If, however, it's overridden, the developer must also
            call <see cref="M:MailBee.ImapMail.Imap.Dispose"/> method of the base class.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnErrorOccurred(MailBee.ErrorEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnLogNewEntry(MailBee.LogNewEntryEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.LogNewEntry"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.LogNewEntry"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Abort">
            <summary>
            Forces MailBee to cancel all pending operations and close all opened connections
            as soon as possible.
            <seealso cref="P:MailBee.ImapMail.Imap.IsAborted"/>
            <seealso cref="M:MailBee.ImapMail.Imap.ResetState"/>
            </summary>
            <remarks>A method which was in progress when <see cref="M:MailBee.ImapMail.Imap.Abort"/> method has been called
            will throw <see cref="T:MailBee.MailBeeUserAbortException"/>
            (unless <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is not <b>false</b>).
            If the component was not doing any work at the moment (<see cref="P:MailBee.ImapMail.Imap.IsBusy"/> was <b>false</b>),
            the connection is aborted but no exception is thrown.
            <note>No events will be raised after this method has been called.</note>
            To restore the component from the aborted state, the developer can use <see cref="M:MailBee.ImapMail.Imap.ResetState"/>
            method.
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Wait">
            <summary>
            Waits until the currently running (if any) asynchronous method is finished.
            </summary>
            <exception cref="T:MailBee.MailBeeInvalidStateException"><see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/> is <b>true</b></exception>
            <remarks>This method should only be used in WinForms applications in the scenarios when the application message loop
            is blocked and events raised by asynchronous methods get no chance to be processed.
            <note type="caution"><see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/> property
            must be set to <b>false</b> prior to using this method. This is required in order
            to switch event marshaling mechanism from sending events to the application message loop
            to the internal thread-independent event processor.</note>
            <para>Usually, when the developer uses asynchronous methods which might raise events,
            it's not possible to use methods like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/>,
            since they would block the message loop and thus prevent events (which are raised
            on the message loop thread) from getting processed. <see cref="M:MailBee.ImapMail.Imap.Wait"/> method provides an alternative
            approach which addresses the problem.</para>
            <para>Another alternative (in WinForms application) to using <see cref="M:MailBee.ImapMail.Imap.Wait"/> method
            is to never block the application message loop. See <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/>
            method for the code example.</para>
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.ImapMail.Imap"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Wait(System.Int32)">
            <summary>
            Waits the completion of the currently running (if any) asynchronous method
            for the specified amount of time.
            </summary>
            <param name="timeoutInterval">The amount of time (in milliseconds) the method will wait
            completion of the currently running asynchronous method before returning <b>false</b>.</param>
            <returns><b>true</b> if the asynchronous method has finished execution during the specified
            amount of time, <b>false</b> if it's still running.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException"><see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/> is <b>true</b></exception>
            <remarks>This method should only be used in WinForms applications in the scenarios when the application message loop
            is blocked and events raised by asynchronous methods get no chance to be processed.
            <note type="caution"><see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/> property
            must be set to <b>false</b> prior to using this method. This is required in order
            to switch event marshaling mechanism from sending events to the application message loop
            to the internal thread-independent event processor.</note>
            Usually, when the developer wants to use asynchronous methods which might raise events
            in a WinForm application,
            it's not possible to use methods like <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/>,
            since they would block the message loop and thus prevent events (which are raised
            on the message loop thread) from getting processed. <see cref="M:MailBee.ImapMail.Imap.Wait"/> method provides an alternative
            approach which addresses the problem.
            <note>The developer can also use this method with <paramref name="timeoutInterval"/> set to 0 in
            order to process currently pending MailBee events. This is useful if some lengthy work
            is performed on the message loop thread, and the developer wants to periodically
            let MailBee events get processed and then continue the lengthy work without waiting
            for the completion of the asynchronous method. See <see cref="M:MailBee.ImapMail.Imap.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)"/> method
            for examples.</note>
            Another alternative (in WinForms application) to using <see cref="M:MailBee.ImapMail.Imap.Wait"/> method
            is to never block the application message loop. See <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/>
            method for the code example.
            <note>In many cases, it's easier not to use events at all but derive a new class from
            <see cref="T:MailBee.ImapMail.Imap"/> class and override corresponding <i>OnEventName</i> method in order
            to get the developer-supplied code executed. See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method
            documentation for more information.</note> 
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetErrorDescription">
            <summary>
            Returns a textual description of the last occurred error.
            </summary>
            <returns>A string value containing a textual description of the last occurred error.</returns>
            <remarks>Error descriptions can be localized or edited by deriving from <see cref="T:MailBee.Resources"/>
            class.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.DataReceived"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.DataSent"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.DataSent"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetSocket">
            <summary>
            Returns the underlying <see cref="T:System.Net.Sockets.Socket"/> MailBee uses for the
            current network connection.
            </summary>
            <returns>A reference to the underlying <see cref="T:System.Net.Sockets.Socket"/> MailBee uses for the
            current network connection, or a null reference (<b>Nothing</b> in Visual Basic) if there is no active
            connection.</returns>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetSocketError">
            <summary>
            Returns a Win32 error code of the last socket-related error.
            </summary>
            <returns>An integer value containing the last socket-related error code, or 0 if there is no error.</returns>
            <remarks>This error code is obtained from <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnLowLevelDataReceived(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnLowLevelDataSent(MailBee.DataTransferEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnHostResolved(MailBee.HostResolvedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.HostResolved"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.HostResolved"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnSocketConnected(MailBee.SocketConnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.SocketConnected"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.SocketConnected"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.Connected"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.Connected"/>
            <seealso cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>
            <para>When <see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/> is <b>true</b> (i.e. default value),
            MailBee uses this method to raise <see cref="E:MailBee.ImapMail.Imap.Connected"/> event. In WinForms application,
            the event will be raised on the message loop thread. In other applications (such as
            web or console applications), threading is not a concern, and the current thread
            MailBee is running on will be used.</para>
            <para>You can override this method in a derived class to force MailBee execute your own code
            instead of raising <see cref="E:MailBee.ImapMail.Imap.Connected"/> event. This may help to avoid threading issues
            in WinForms applications (because events may not be raised if the message loop thread
            is blocked for some reason, while calling overridden methods does not depend on the message
            loop thread state).</para>
            <para>Another solution of this problem is setting <see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/> to <b>false</b>
            and using <see cref="M:MailBee.ImapMail.Imap.Wait"/> method to block the message loop thread if needed. This way, you do not need
            to derive any descendant class from <see cref="T:MailBee.ImapMail.Imap"/> class.</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnDisconnected(MailBee.DisconnectedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.Disconnected"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.Disconnected"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnTlsStarted(MailBee.TlsStartedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.TlsStarted"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.TlsStarted"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnLoggedIn(MailBee.LoggedInEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.LoggedIn"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.LoggedIn"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Disconnect">
            <summary>
            Disconnects from the IMAP4 server and releases any used resources.
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>Unlike POP3, where all the messages marked as deleted are expunged when
            <see cref="M:MailBee.ImapMail.Imap.Disconnect"/> method is called, the IMAP4 protocol requires the client
            to explicitly expunge messages marked as deleted using <see cref="M:MailBee.ImapMail.Imap.Close(System.Boolean)"/> or <see cref="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)"/>
            method call.</remarks>
            <example>This sample connects to the IMAP4 server and then disconnects.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a disconnection from the mail server.
            <seealso cref="M:MailBee.ImapMail.Imap.Disconnect"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous disconnection.</returns>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.Disconnect"/>.</remarks>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndDisconnect">
            <summary>
            Ends a pending asynchronous disconnection request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDisconnect(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Noop">
            <summary>
            Sends a <i>NOOP</i> command to the mail server.
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method is useful for keeping the connection alive when there is no real activity.</para>
            <para>To issue <i>NOOP</i> asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.ResetState">
            <summary>
            Resets the internal state of the component.
            </summary>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method will close the connection if it's open, and will remove <see cref="P:MailBee.ImapMail.Imap.IsAborted"/>
            status if <see cref="M:MailBee.ImapMail.Imap.Abort"/> method was previously called. Typically, the developer may use this
            method to reuse the component after it went into aborted state due to <see cref="M:MailBee.ImapMail.Imap.Abort"/> method call.
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetExtensions">
            <summary>
            Returns a reference to the key-value list of the mail server capabilities.
            </summary>
            <returns>The key-value list of the mail server capabilities, or a null reference
            (<b>Nothing</b> in Visual Basic) if the capabilities list is not available.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>You should already be connected to the IMAP4 server in order to use this method.</para>
            <para>In the returned <see cref="T:System.Collections.Specialized.StringDictionary"/>,
            each key is a capability name (always lowercase) and its value is an empty string
            (because IMAP4's capabilities have no parameters).</para>
            </remarks>
            <example>This sample displays the list of all capabilities supported by the mail server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            System.Collections.Specialized.StringDictionary caps = imp.GetExtensions();
            <span style="color: blue;">if</span> (caps == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The given server does not support any IMAP4 extensions");
            }
            <span style="color: blue;">else</span>
            {
            	<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> cap <span style="color: blue;">in</span> caps.Keys)
            	{
            		Console.WriteLine(cap);
            	}
            }
            imp.Disconnect();
            
            <span style="color: green;">// The output (the actual content will be different for a particular mail server).</span>
            auth=plain
            multiappend
            imap4
            auth=login
            literal+
            auth=digest-md5
            imap4rev1
            auth=ntlm
            quota
            uidplus
            starttls
            auth=cram-md5
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            <span style="color: blue;">Dim</span> caps <span style="color: blue;">As</span> System.Collections.Specialized.StringDictionary = imp.GetExtensions()
            <span style="color: blue;">If</span> caps <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The given server does not support any IMAP4 extensions")
            <span style="color: blue;">Else</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> cap <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> caps.Keys
            		Console.WriteLine(cap)
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            imp.Disconnect()
            
            <span style="color: green;">' The output (the actual content will be different for a particular mail server).</span>
            auth=plain
            multiappend
            imap4
            auth=login
            literal+
            auth=digest-md5
            imap4rev1
            auth=ntlm
            quota
            uidplus
            starttls
            auth=cram-md5
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetExtension(System.String)">
            <summary>
            Returns the name of the specified IMAP4 capability if it's supported by the mail server.
            </summary>
            <param name="name">The name of the capability.</param>
            <returns>If the specified capability is supported, the return value is the lowercased name
            of the capability. If the given capability is not supported, the return value is a
            null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>You should already be connected to the IMAP4 server in order to use this method.</remarks>
            <example>This sample displays whether the server supports UIDPLUS capability.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            <span style="color: blue;">string</span> ext = imp.GetExtension("UIDPLUS");
            <span style="color: blue;">if</span> (ext == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("The given IMAP4 server does not support UIDPLUS");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("UIDPLUS is supported");
            }
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            <span style="color: blue;">Dim</span> ext <span style="color: blue;">As</span> <span style="color: blue;">String</span> = imp.GetExtension("UIDPLUS")
            <span style="color: blue;">If</span> ext <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("The given IMAP4 server does not support UIDPLUS")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("UIDPLUS is supported")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetServerResponse">
            <summary>
            Returns the last response from the server.
            </summary>
            <returns>A string value which contains the last response from the server, or a null
            reference (<b>Nothing</b> in Visual Basic) if not connected to the server.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetServerResponses(System.String)">
            <summary>
            Returns the specified individual responses from the last group of responses received from the server.
            </summary>
            <param name="responseName">The name (case-insensitive) of the individual responses to be returned, or a null reference
            (<b>Nothing</b> in Visual Basic) if all available responses should be returned.</param>
            <returns>Array of strings containing the responses with the given name.</returns>
            <remarks>
            <para>The IMAP4 server may return multiple responses to a single request from the client. While
            <see cref="M:MailBee.ImapMail.Imap.GetServerResponse"/> method returns the very last response, <see cref="M:MailBee.ImapMail.Imap.GetServerResponses(System.String)"/>
            method can be used to obtain any of the responses returned as the result of
            the last executed command.</para>
            <para>The typical names of IMAP4 responses are: OK, BAD, FETCH, SEARCH, LIST, etc.
            This method can return both tagged and untagged responses.
            See the IMAP4 protocol specification (RFC3501) for more information regarding IMAP4 responses.
            </para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetSupportedAuthMethods">
            <summary>
            Returns a set of flags indicating which authentication methods are supported by the server.
            <seealso cref="M:MailBee.ImapMail.Imap.GetExtensions"/>
            </summary>
            <returns>A set of flags indicating which authentication methods are supported by the server.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>If the IMAP4 server advertises LOGINDISABLED capability, regular authentication
            may not be supported by the server. However, this often indicates the client should call
            <see cref="M:MailBee.ImapMail.Imap.StartTls"/> method to establish TLS/SSL secure connection. After that,
            regular authentication option will become available.</remarks>
            <example>This sample indicates whether NTLM authentication (also known as Secure Password Authentication - SPA) is supported by the server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            AuthenticationMethods authMethods = imp.GetSupportedAuthMethods();
            
            <span style="color: blue;">if</span> ((authMethods &amp; AuthenticationMethods.SaslNtlm) &gt; 0)
            {
            	Console.WriteLine("NTLM secure authentication (SPA) is supported");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("The IMAP4 server does not support NTLM (SPA)");
            }
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            <span style="color: blue;">Dim</span> authMethods <span style="color: blue;">As</span> AuthenticationMethods = imp.GetSupportedAuthMethods()
            
            <span style="color: blue;">If</span> ((authMethods <span style="color: blue;">And</span> AuthenticationMethods.SaslNtlm) &gt; 0) <span style="color: blue;">Then</span>
            	Console.WriteLine("NTLM secure authentication (SPA) is supported")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("The IMAP4 server does not support NTLM (SPA)")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)">
            <summary>
            Connects to an IMAP4 server.
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <param name="port">The port on which to communicate with the server. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993
            (however, TLS/SSL connections via regular port are possible too, see <see cref="P:MailBee.ImapMail.Imap.SslMode"/> and <see cref="M:MailBee.ImapMail.Imap.StartTls"/> topics).</param>
            <returns><b>true</b> if a connection attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample connects to the IMAP4 server, logs in the account and selects "Inbox" folder, then downloads the last message entirely,
            and displays filenames of all attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com", 143);
            imp.Login("jdoe", "secret");
            imp.SelectFolder("Inbox");
            MailMessage msg = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">false</span>);
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	Console.WriteLine(attach.Filename);
            }
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com", 143)
            imp.Login("jdoe", "secret")
            imp.SelectFolder("Inbox")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">False</span>)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	Console.WriteLine(attach.Filename)
            <span style="color: blue;">Next</span>
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Connect(System.String)">
            <summary>
            Connects to an IMAP4 server on the standard IMAP4 port (143).
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <returns><b>true</b> if a connection attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample connects to the IMAP4 server, logs in the account, selects "Inbox" folder, downloads the last message entirely,
            and displays its body text. If the message is HTML formatted, plain-text version is displayed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Login("jdoe", "secret");
            imp.SelectFolder("Inbox");
            MailMessage msg = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">false</span>);
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain;
            Console.WriteLine(msg.BodyPlainText);
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Login("jdoe", "secret")
            imp.SelectFolder("Inbox")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">False</span>)
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain
            Console.WriteLine(msg.BodyPlainText)
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connecting to an IMAP4 server.
            <seealso cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/>
            <seealso cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Wait"/>
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <param name="port">The port on which to communicate with the server. The standard IMAP4 port is 143.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>
            <para>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/>.</para>
            <para>A reference to the <paramref name="state"/> object will be available in the events raised
            by this method through the <see cref="P:MailBee.CommonEventArgs.State"/> property value. This is also valid
            for the rest of asynchronous methods in MailBee.</para>
            </remarks>
            <example>Asynchronous connecting to an IMAP4 server in WinForms application. This sample
            also handles <see cref="E:MailBee.ImapMail.Imap.Connected"/> event. <see cref="M:MailBee.ImapMail.Imap.Wait"/> method is used to wait
            for the asynchronous method completion, since .NET's standard
            <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/> cannot process events.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// "Connected" event handler.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            {
            	Console.WriteLine("Connected to the server");
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Imap imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	imp.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	imp.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            	<span style="color: green;">// Initiate an asynchronous connection.</span>
            	imp.BeginConnect("imap.somehost.com", 143, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		imp.Wait(0);
            	}
            
            	<span style="color: green;">// If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">// work, wait until it's established.</span>
            	imp.Wait();
            
            	<span style="color: green;">// End the connection request.</span>
            	imp.EndConnect();
            
            	<span style="color: green;">// Connected to the server!</span>
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	imp.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' "Connected" event handler.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> System.Object, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            	Console.WriteLine("Connected to the server")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> System.Object, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' Let MailBee process events.</span>
            	imp.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	<span style="color: blue;">AddHandler</span> imp.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            	<span style="color: green;">' Initiate an asynchronous connection.</span>
            	imp.BeginConnect("imap.somehost.com", 143, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">'Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">'Process events which were raised during execution of the work above.</span>
            		imp.Wait(0)
            	<span style="color: blue;">Next</span>
            	<span style="color: green;">' If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">' work, wait until it's established.</span>
            	imp.Wait()
            
            	<span style="color: green;">' End the connection request.</span>
            	imp.EndConnect()
            
            	<span style="color: green;">' Connected to the server!</span>
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	imp.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
            <example>Asynchronous connecting to an IMAP4 server in non-WinForms application.
            Applications which do not have message loop (such as console or web applications)
            can raise events on any thread and do not require any special events processing.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// "Connected" event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Connected to the server");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		<span style="color: green;">// Initiate an asynchronous connection.</span>
            		imp.BeginConnect("imap.somehost.com", 143, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Simulate some lengthy work here...</span>
            		System.Threading.Thread.Sleep(1000);
            
            		<span style="color: green;">// If the connection was not established during execution of the lengthy work,</span>
            		<span style="color: green;">// wait until it's established, and end the connection request.</span>
            		imp.EndConnect();
            
            		<span style="color: green;">// Connected to the server!</span>
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Public</span> <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' "Connected" event handler.</span>
            	<span style="color: blue;">Public</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> System.Object, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Connected to the server")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            	
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            		<span style="color: blue;">AddHandler</span> imp.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		<span style="color: green;">' Initiate an asynchronous connection.</span>
            		imp.BeginConnect("imap.somehost.com", 143, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Simulate some lengthy work here...</span>
            		System.Threading.Thread.Sleep(1000)
            
            		<span style="color: green;">' If the connection was not established during execution of the lengthy work,</span>
            		<span style="color: green;">' wait until it's established, and end the connection request.</span>
            		imp.EndConnect()
            
            		<span style="color: green;">' Connected to the server!</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndConnect">
            <summary>
            Ends the pending asynchronous connection request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.StartTls">
            <summary>
            Requests the mail server to start TLS/SSL negotiation and protect the connection with
            security layer.
            <seealso cref="P:MailBee.ImapMail.Imap.SslMode"/>
            <seealso cref="P:MailBee.ImapMail.Imap.SslProtocol"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginStartTls(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if TLS/SSL negotiation succeeded and the connection is now secured with TLS/SSL layer; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            As alternative to calling <see cref="M:MailBee.ImapMail.Imap.StartTls"/> method, the developer can ask MailBee to start
            TLS/SSL negotiation automatically by setting <see cref="P:MailBee.ImapMail.Imap.SslMode"/> property value to <see cref="F:MailBee.Security.SslStartupMode.OnConnect"/>
            or <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/>.
            <note>Not all mail servers support TLS/SSL functionality.</note>
            </remarks>
            <example>
            This sample attempts to establish TLS/SSL connection with the IMAP4 server and displays the number
            of messages in the inbox on success.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.StartTls();
            imp.Login("jdoe", "secret");
            imp.SelectFolder("Inbox");
            Console.WriteLine(imp.MessageCount);
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            Dim imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.StartTls()
            imp.Login("jdoe", "secret")
            imp.SelectFolder("Inbox")
            Console.WriteLine(imp.MessageCount)
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginStartTls(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to start TLS/SSL negotiation with the server.
            <seealso cref="M:MailBee.ImapMail.Imap.StartTls"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous TLS/SSL negotiation.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.StartTls"/>.</remarks>
            <example>
            Asynchronous TLS/SSL negotiation with the IMAP4 server in WinForms application. This sample
            also handles <see cref="E:MailBee.ImapMail.Imap.TlsStarted"/> event. <see cref="M:MailBee.ImapMail.Imap.Wait"/> method is used to wait
            for the asynchronous method completion, since .NET's standard
            <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)"/> cannot process events.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// TlsStarted event handler.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnTlsStarted(<span style="color: blue;">object</span> sender, TlsStartedEventArgs e)
            {
            	MessageBox.Show("TLS/SSL negotiation complete. Secure connection is ready.");
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Imap imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// Let MailBee process events.</span>
            	imp.RaiseEventsViaMessageLoop = <span style="color: blue;">false</span>;
            
            	imp.TlsStarted += <span style="color: blue;">new</span> TlsStartedEventHandler(OnTlsStarted);
            
            	imp.Connect("mail.company.com");
            
            	<span style="color: green;">// Initiate an asynchronous TLS/SSL negotiation.</span>
            	imp.BeginStartTls(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Simulate some lengthy work here...</span>
            	<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 100; i++)
            	{
            		<span style="color: green;">// Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10);
            
            		<span style="color: green;">// Process events which were raised during execution of the work above.</span>
            		imp.Wait(0);
            	}
            
            	<span style="color: green;">// If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">// work, wait until it's established.</span>
            	imp.Wait();
            
            	<span style="color: green;">// End the connection request.</span>
            	imp.EndStartTls();
            
            	<span style="color: green;">// The connection is now under TLS/SSL layer!</span>
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	imp.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' TlsStarted event handler.</span>
            <span style="color: blue;">Public</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnTlsStarted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> TlsStartedEventArgs)
            	MsgBox("TLS/SSL negotiation complete. Secure connection is ready.")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Public</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' Let MailBee process events.</span>
            	imp.RaiseEventsViaMessageLoop = <span style="color: blue;">False</span>
            
            	<span style="color: blue;">AddHandler</span> imp.TlsStarted, <span style="color: blue;">AddressOf</span> OnTlsStarted
            
            	imp.Connect("mail.company.com")
            
            	<span style="color: green;">' Initiate an asynchronous TLS/SSL negotiation.</span>
            	imp.BeginStartTls(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Simulate some lengthy work here...</span>
            	<span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1 <span style="color: blue;">To</span> 100
            		<span style="color: green;">' Make a portion of the work.</span>
            		System.Threading.Thread.Sleep(10)
            
            		<span style="color: green;">' Process events which were raised during execution of the work above.</span>
            		imp.Wait(0)
            	<span style="color: blue;">Next</span>
            
            	<span style="color: green;">' If the connection was not established during execution of the lengthy </span>
            	<span style="color: green;">' work, wait until it's established.</span>
            	imp.Wait()
            
            	<span style="color: green;">' End the connection request.</span>
            	imp.EndStartTls()
            
            	<span style="color: green;">' The connection is now under TLS/SSL layer!</span>
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	imp.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndStartTls">
            <summary>
            Ends a pending asynchronous TLS/SSL negotiation request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginStartTls(System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)">
            <summary>
            Logs in a mail account on the IMAP4 server.
            <seealso cref="T:MailBee.SaslMethod"/>
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when logging in a mailbox.</param>
            <param name="authOptions">Specifies the options which affect login process.</param>
            <param name="authUserDefined">A reference to the instance of user defined authentication method,
            or a null reference (<b>Nothing</b> in Visual Basic) if user defined authentication is not used.</param>
            <returns><b>true</b> if a login attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>By default, MailBee won't even try to use authentication methods which are not
            listed by the server in its capabilities. This behavior can be changed by setting
            <see cref="F:MailBee.AuthenticationOptions.TryUnsupportedMethods"/> bit in <paramref name="authOptions"/>.
            If, during the authentication attempt, the server reports that the method is unsupported,
            MailBee will try the next method in <paramref name="authMethods"/> until the compatible
            method is found or no more methods left. This behavior can be changed by setting
            <see cref="F:MailBee.AuthenticationOptions.UseSingleMethodOnly"/> bit in <paramref name="authOptions"/>.</para>
            <para>Authentication methods are tried from more secure to less secure. If <paramref name="authMethods"/>
            is set to <see cref="F:MailBee.AuthenticationMethods.Auto"/> and <paramref name="authOptions"/> is
            <see cref="F:MailBee.AuthenticationOptions.None"/>, MailBee will try to use the most secure method
            supported by the server but will downgrade to less secure methods (to the simplest
            "LOGIN account password" authentication in the worst case) if better methods are not available.
            However, if the IMAP4 server prohibit using LOGIN command (LOGINDISABLED extension is enabled),
            regular authentication option won't be available.</para>
            </remarks>
            <example>This sample connects to an IMAP4 server and attempts to log in a user account
            using SASL NTLM method in Windows Integrated Authentication mode (passing credentials of the currently logged Windows user) even if
            NTLM is not listed in the server capabilities (the server may still support NTLM while not advertising this).
            Use of other authentication methods is not allowed by this sample (they do not support obtaining
            the current Windows user's credentials and thus will raise exception is empty credentials are supplied by the caller).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Login(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, AuthenticationMethods.SaslNtlm, AuthenticationOptions.TryUnsupportedMethods, <span style="color: blue;">null</span>);
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Login(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, AuthenticationMethods.SaslNtlm, AuthenticationOptions.TryUnsupportedMethods, <span style="color: blue;">Nothing</span>)
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods)">
            <summary>
            Logs in a mail account on the IMAP4 server.
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when logging in a mailbox.</param>
            <returns><b>true</b> if a login attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            Authentication methods are tried from more secure to less secure. If <paramref name="authMethods"/>
            is set to <see cref="F:MailBee.AuthenticationMethods.Auto"/>, MailBee will try to use the most secure method
            supported by the server but will downgrade to less secure methods (to the simplest
            "LOGIN account password" authentication in the worst case) if better methods are not available.
            </remarks>
            <example>This sample connects to an IMAP4 server and logs in a user account
            using secure authentication methods only. Use of insecure methods is not allowed.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Login("jdoe@domain.com", "secret", AuthenticationMethods.SaslCramMD5 | AuthenticationMethods.SaslNtlm);
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Login("jdoe@domain.com", "secret", AuthenticationMethods.SaslCramMD5 <span style="color: blue;">Or</span> AuthenticationMethods.SaslNtlm)
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Login(System.String,System.String)">
            <summary>
            Logs in a mail account on the IMAP4 server.
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <returns><b>true</b> if a login attempt succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method will try to authenticate using the best (the most secure) authentication method
            supported by the server, but will downgrade to less secure methods (to the simplest
            "LOGIN account password" authentication in the worst case) if better methods are not available.
            <note>If <see cref="P:MailBee.Global.SafeMode"/> is <b>true</b>, MailBee will use the simplest "LOGIN account password" authentication
            by default. This can often help to troubleshoot login problems (many mail servers implement
            secure authentication methods incorrectly).</note>
            </remarks>
            <example>This sample connects to an IMAP4 server, logs in a user account, selects Inbox folder, and displays
            the total number of messages in this folder.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Login("jdoe", "secret");
            imp.SelectFolder("INBOX");
            Console.WriteLine(imp.MessageCount + " message(s) in inbox");
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Login("jdoe", "secret")
            imp.SelectFolder("INBOX")
            Console.WriteLine(imp.MessageCount &amp; " message(s) in inbox")
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginLogin(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a logging in an account on an IMAP4 server.
            <seealso cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)"/>
            <seealso cref="T:MailBee.SaslMethod"/>
            </summary>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when logging in a mailbox.</param>
            <param name="authOptions">Specifies the options which affect login process.</param>
            <param name="authUserDefined">A reference to the instance of user defined authentication method,
            or a null reference (<b>Nothing</b> in Visual Basic) if user defined authentication is not used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous login process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>.</remarks>
            <example>This sample demonstrates asynchronous logging in an account and use of a callback function
            in a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// A callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> LoginCallback(IAsyncResult result)
            	{
            		Imap imp = (Imap)result.AsyncState;
            		imp.EndLogin();
            		imp.SelectFolder("INBOX");
            		Console.WriteLine("Message #" + imp.Unseen + " is first unseen");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("imap.somehost.com");
            
            		<span style="color: green;">// Initiate an asynchronous login attempt.</span>
            		IAsyncResult ar = imp.BeginLogin("jdoe", "secret",
            			AuthenticationMethods.Auto, AuthenticationOptions.None,
            			<span style="color: blue;">null</span>, <span style="color: blue;">new</span> AsyncCallback(LoginCallback), imp);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// login is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the login attempt is still in progress, then wait until it's finished.</span>
            		<span style="color: blue;">while</span> (imp.IsBusy) ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' A callback function.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> LoginCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            		imp = result.AsyncState
            		imp.EndLogin()
            		imp.SelectFolder("INBOX")
            		Console.WriteLine("Message #" &amp; imp.Unseen &amp; " is first unseen")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            		
            		imp.Connect("iamp.somehost.com")
            		
            		<span style="color: green;">' Initiate an asynchronous login attempt.</span>
            		<span style="color: blue;">Dim</span> ar = imp.BeginLogin("jdoe", "secret", _
            			AuthenticationMethods.Auto, AuthenticationOptions.None, _
            			<span style="color: blue;">Nothing</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> LoginCallback), imp)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time </span>
            		<span style="color: green;">' login is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' If the login attempt is still in progress, then wait until it's finished.</span>
            		<span style="color: blue;">While</span> imp.IsBusy
            			ar.AsyncWaitHandle.WaitOne()
            		<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndLogin">
            <summary>
            Ends the pending asynchronous login request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginLogin(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnEnvelopeDownloaded(MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnEnvelopeDataChunkReceived(MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnServerStatus(MailBee.ImapMail.ImapServerStatusEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.ServerStatus"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.ServerStatus"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnMessageStatus(MailBee.ImapMail.ImapMessageStatusEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.MessageStatus"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.MessageStatus"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.OnIdling(MailBee.ImapMail.ImapIdlingEventArgs)">
            <summary>
            Used by MailBee to raise <see cref="E:MailBee.ImapMail.Imap.Idling"/> event.
            <seealso cref="E:MailBee.ImapMail.Imap.ServerStatus"/>
            <seealso cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/>
            </summary>
            <param name="args">The object containing event data.</param>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.OnConnected(MailBee.ConnectedEventArgs)"/> method documentation on more information
            regarding <i>OnEventName</i> methods in MailBee.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.ExecuteCustomCommand(System.String,System.String)">
            <summary>
            Sends user-defined command to the server and receives the server response to this command.
            </summary>
            <param name="command">User-defined command text (without line terminator).</param>
            <param name="commandID">The ID (tag in IMAP4 terms) which will be prepended to the command text,
            or an empty string to let MailBee autogenerate the ID value,
            or a null reference (<b>Nothing</b> in Visual Basic) to send command without ID.</param>
            <returns><b>true</b> if the command was executed successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To use this method, the developer should have some knowledge of the IMAP4 protocol.</para>
            <para>If <paramref name="commandID"/> is non-empty string and not a null reference, MailBee will send the following request
            to the server (in C# terms): <c>commandID + " " + command + "\r\n"</c>.</para>
            <para>If <paramref name="commandID"/> is "" (<see cref="F:System.String.Empty"/>), the entire request would be
            <c>"MBNxxxxxxxx" + " " + command + "\r\n"</c> where "xxxxxxxx" is an ordinal number of
            the issued command since the moment of establishing connection with the server.</para>
            <para>If <paramref name="commandID"/> is a null reference, the entire request would be
            <c>command + "\r\n"</c> (untagged request, also called "command continuation request").</para>
            <para>To analyze results of user-defined commands, the developer can use <see cref="M:MailBee.ImapMail.Imap.GetServerResponse"/>
            and <see cref="M:MailBee.ImapMail.Imap.GetServerResponses(System.String)"/> methods.</para>
            <para>To check if the server supports the particular extension/capability, the developer can use <see cref="M:MailBee.ImapMail.Imap.GetExtension(System.String)"/> method
            passing the name of the capability.</para>
            </remarks>
            <example>This sample connects to the IMAP4 server, logs in the mail account, and sends
            IDLE and DONE commands (the server must support IDLE extension).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("imap.company.com");
            imp.Login("jdoe", "secret");
            imp.ExecuteCustomCommand("IDLE", <span style="color: blue;">string</span>.Empty);
            imp.ExecuteCustomCommand("DONE", <span style="color: blue;">null</span>);
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("imap.company.com")
            imp.Login("jdoe", "secret")
            imp.ExecuteCustomCommand("IDLE", <span style="color: blue;">String</span>.Empty)
            imp.ExecuteCustomCommand("DONE", <span style="color: blue;">Nothing</span>)
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for sending the specified user-defined command to the server and getting the response.
            <seealso cref="M:MailBee.ImapMail.Imap.ExecuteCustomCommand(System.String,System.String)"/>
            </summary>
            <param name="command">User-defined command text (without line terminator).</param>
            <param name="commandID">The ID (tag in IMAP4 terms) which will be prepended to the command text,
            or an empty string to let MailBee autogenerate the ID value,
            or a null reference (<b>Nothing</b> in Visual Basic) to send command without ID.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous user-defined command execution.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.ExecuteCustomCommand(System.String,System.String)"/>.</remarks>
            <example>
            <para>This console sample shows how manage folders (create, delete, rename, subscribe, unsubscribe), expunge deleted messages, and issue NOOP asynchronously.</para>
            <para><see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic also includes the second WinForms sample of sending NOOP command asynchronously (see below).</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Console.WriteLine("Input a new folder name to manage");
            		<span style="color: blue;">string</span> folderName = Console.ReadLine();
            
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap.domain.com");
            		imp.Login("jdoe@domain.com", "secret");
            
            		<span style="color: green;">// Issue NOOP</span>
            		imp.BeginExecuteCustomCommand("NOOP", <span style="color: blue;">string</span>.Empty, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Create a new folder</span>
            		imp.BeginExecuteCustomCommand(
            			"CREATE " + ImapUtils.ToUtf7QuotedString(folderName),
            			<span style="color: blue;">string</span>.Empty, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Select the created folder (to demonstrate asynchronous Expunge).</span>
            		imp.BeginSelectFolder(folderName, <span style="color: blue;">false</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndSelectFolder();
            
            		<span style="color: green;">// Expunge deleted messages from this folder. This will actually do</span>
            		<span style="color: green;">// nothing since the folder is empty but it shows the idea.</span>
            		imp.BeginExecuteCustomCommand("EXPUNGE", <span style="color: blue;">string</span>.Empty, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Deselect the folder (we could also call BeginClose(true, ...)</span>
            		<span style="color: green;">// to close the folder and expunge the deleted messages instead of</span>
            		<span style="color: green;">// sending EXPUNGE and calling BeginClose(false, ...).</span>
            		imp.BeginClose(<span style="color: blue;">false</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndClose();
            
            		<span style="color: green;">// Subscribe the created folder</span>
            		imp.BeginExecuteCustomCommand(
            			"SUBSCRIBE " + ImapUtils.ToUtf7QuotedString(folderName),
            			<span style="color: blue;">string</span>.Empty, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Unsubscribe the created folder</span>
            		imp.BeginExecuteCustomCommand(
            			"UNSUBSCRIBE " + ImapUtils.ToUtf7QuotedString(folderName),
            			<span style="color: blue;">string</span>.Empty, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Rename the created folder into "MyFolder".</span>
            		imp.BeginExecuteCustomCommand(
            			"RENAME " + ImapUtils.ToUtf7QuotedString(folderName) + " " +
            			ImapUtils.ToQuotedString("MyFolder"), <span style="color: blue;">string</span>.Empty, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Delete the created folder</span>
            		imp.BeginExecuteCustomCommand(
            			"DELETE " + ImapUtils.ToQuotedString("MyFolder"), <span style="color: blue;">string</span>.Empty,
            			<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		imp.EndExecuteCustomCommand();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		Console.WriteLine("Input a new folder name to manage")
            		<span style="color: blue;">Dim</span> folderName <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Console.ReadLine()
            
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap.domain.com")
            		imp.Login("jdoe@domain.com", "secret")
            
            		<span style="color: green;">' Issue NOOP</span>
            		imp.BeginExecuteCustomCommand("NOOP", <span style="color: blue;">String</span>.Empty, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Create a new folder</span>
            		imp.BeginExecuteCustomCommand( _
            			"CREATE " &amp; ImapUtils.ToUtf7QuotedString(folderName), _
            			<span style="color: blue;">String</span>.Empty, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Select the created folder (to demonstrate asynchronous Expunge).</span>
            		imp.BeginSelectFolder(folderName, <span style="color: blue;">False</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndSelectFolder()
            
            		<span style="color: green;">' Expunge deleted messages from this folder. This will actually do</span>
            		<span style="color: green;">' nothing since the folder is empty but it shows the idea.</span>
            		imp.BeginExecuteCustomCommand("EXPUNGE", <span style="color: blue;">String</span>.Empty, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Deselect the folder (we could also call BeginClose(true, ...)</span>
            		<span style="color: green;">' to close the folder and expunge the deleted messages instead of</span>
            		<span style="color: green;">' sending EXPUNGE and calling BeginClose(false, ...).</span>
            		imp.BeginClose(<span style="color: blue;">False</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndClose()
            
            		<span style="color: green;">' Subscribe the created folder</span>
            		imp.BeginExecuteCustomCommand( _
            			"SUBSCRIBE " &amp; ImapUtils.ToUtf7QuotedString(folderName), _
            			<span style="color: blue;">String</span>.Empty, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Unsubscribe the created folder</span>
            		imp.BeginExecuteCustomCommand( _
            			"UNSUBSCRIBE " &amp; ImapUtils.ToUtf7QuotedString(folderName), _
            			<span style="color: blue;">String</span>.Empty, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Rename the created folder into "MyFolder".</span>
            		imp.BeginExecuteCustomCommand( _
            			"RENAME " &amp; ImapUtils.ToUtf7QuotedString(folderName) &amp; " " &amp; _
            			ImapUtils.ToQuotedString("MyFolder"), <span style="color: blue;">String</span>.Empty, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Delete the created folder</span>
            		imp.BeginExecuteCustomCommand( _
            			"DELETE " &amp; ImapUtils.ToQuotedString("MyFolder"), <span style="color: blue;">String</span>.Empty, _
            			<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		imp.EndExecuteCustomCommand()
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
            <example>This WinForms sample shows how to send NOOP command asynchronously to keep the connection with the server alive for a long period of time.
            The same approach can be used to execute any IMAP4 command asynchronously.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            System.Timers.Timer t = <span style="color: blue;">null</span>;
            Imap imp = <span style="color: blue;">null</span>;
            
            <span style="color: green;">// A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">// WinForms timer cannot be used here because it can only be used</span>
            <span style="color: green;">// on message loop thread.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> ExecuteCustomCommandCallback(IAsyncResult result)
            {
            	Imap imp = (Imap)result.AsyncState;
            	imp.EndExecuteCustomCommand();
            	imp.Log.WriteLine("NOOP done");
            	t.Start();
            }
            
            <span style="color: green;">// System.Timers.Timer.Elapsed event handler.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> OnElapsed(<span style="color: blue;">object</span> sender, System.Timers.ElapsedEventArgs e)
            {
            	t.Stop();
            
            	<span style="color: green;">// Execute NOOP command in Imap worker thread.</span>
            	imp.BeginExecuteCustomCommand("NOOP", <span style="color: blue;">string</span>.Empty,
            		<span style="color: blue;">new</span> AsyncCallback(ExecuteCustomCommandCallback), imp);
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// Enable logging to monitor background activity.</span>
            	imp.Log.Filename = @"C:\Temp\log.txt";
            	imp.Log.Enabled = <span style="color: blue;">true</span>;
            	imp.Log.Clear();
            
            	<span style="color: green;">// Connect to the server, login and select inbox.</span>
            	imp.Connect("imap.domain.com");
            	imp.Login("jdoe", "secret");
            	imp.SelectFolder("Inbox");
            
            	<span style="color: green;">// Initialize timer to raise Elapsed event every 10 seconds.</span>
            	t = <span style="color: blue;">new</span> System.Timers.Timer();
            	t.Elapsed += <span style="color: blue;">new</span> System.Timers.ElapsedEventHandler(OnElapsed);
            	t.Interval = 10000;
            	t.Start();
            }
            
            <span style="color: green;">// Shutdown Imap component on form closing.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Closing(<span style="color: blue;">object</span> sender,
            	System.ComponentModel.CancelEventArgs e)
            {
            	t.Stop();
            	<span style="color: blue;">if</span> (imp.IsBusy)
            	{
            		imp.EndExecuteCustomCommand();
            	}
            	<span style="color: green;">// Disconnect from the server.</span>
            	imp.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: blue;">Dim</span> t <span style="color: blue;">As</span> System.Timers.Timer = <span style="color: blue;">Nothing</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">Nothing</span>
            
            <span style="color: green;">' A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">' WinForms timer cannot be used here because it can only be used</span>
            <span style="color: green;">' on message loop thread.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> ExecuteCustomCommandCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">CType</span>(result.AsyncState, Imap)
            	imp.EndExecuteCustomCommand()
            	imp.Log.WriteLine("NOOP done")
            	t.Start()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' System.Timers.Timer.Elapsed event handler.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnElapsed(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.Timers.ElapsedEventArgs)
            	t.Stop()
            
            	<span style="color: green;">' Execute NOOP command in Imap worker thread.</span>
            	imp.BeginExecuteCustomCommand("NOOP", <span style="color: blue;">String</span>.Empty, _
            		<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> ExecuteCustomCommandCallback), imp)
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	imp = <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' Enable logging to monitor background activity.</span>
            	imp.Log.Filename = "C:\Temp\log.txt"
            	imp.Log.Enabled = <span style="color: blue;">True</span>
            	imp.Log.Clear()
            
            	<span style="color: green;">' Connect to the server, login and select inbox.</span>
            	imp.Connect("imap.domain.com")
            	imp.Login("jdoe", "secret")
            	imp.SelectFolder("Inbox")
            
            	<span style="color: green;">' Initialize timer to raise Elapsed event every 10 seconds.</span>
            	t = <span style="color: blue;">New</span> System.Timers.Timer
            	<span style="color: blue;">AddHandler</span> t.Elapsed, <span style="color: blue;">AddressOf</span> OnElapsed
            	t.Interval = 10000
            	t.Start()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Shutdown Imap component on form closing.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Closing(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.ComponentModel.CancelEventArgs)
            	t.Stop()
            	<span style="color: blue;">If</span> imp.IsBusy <span style="color: blue;">Then</span>
            		imp.EndExecuteCustomCommand()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: green;">' Disconnect from the server.</span>
            	imp.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndExecuteCustomCommand">
            <summary>
            Ends the pending asynchronous request for sending user-defined command to the server.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.CreateFolder(System.String)">
            <summary>
            Creates a new folder (mailbox in IMAP4 terms) in the IMAP4 account.
            </summary>
            <param name="folderName">The full name of the folder to be created.</param>
            <returns><b>true</b> if the folder was created successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>The developer should specify the full name of the folder (including all parent folders' names
            if the new folder should be a subfolder of another existing folder). For instance, <c>imap.CreateFolder("Orders")</c>
            call will create "Orders" folder, not "Inbox/Orders" even if "Inbox" folder is currently selected.</para>
            <para>This method automatically creates parent folders if required. For instance, if <paramref name="folderName"/> is "Archive/April/29"
            and there is no "Archive" folder in the account, this method will create "Archive", "Archive/April", and "Archive/April/29" folders.</para>
            <note>Although the most popular delimiter char for separating folder levels is "/", some
            IMAP4 servers may use "\", ".", etc, or even do not support folder hierarchy at all (flat names).
            The developer can obtain the folder delimiter char adopted by the current server using <see cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/>
            method.</note>
            <note>Depending on the mail server implementation, folder names other than "Inbox"
            may be case-sensitive ("Drafts", "DRAFTS", and "drafts" may designate different folder names).</note>
            <para>MailBee fully supports international folder names encoded with UTF-7 Modified encoding.</para>
            <para>To create a folder asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
            <example>This sample connects to the IMAP4 server, logs in the mail account, and creates
            Orders subfolder in Inbox. If the server does not support subfolders, "Inbox/Orders" folder is created.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            
            <span style="color: green;">// Connect to the server and log in the account.</span>
            imp.Connect("imap4.company.com");
            imp.Login("jdoe@company.com", "secret");
            
            <span style="color: green;">// Determine what delimiter char is on the server.</span>
            FolderCollection delim = imp.DownloadFolders(<span style="color: blue;">false</span>, <span style="color: blue;">string</span>.Empty, <span style="color: blue;">string</span>.Empty);
            
            <span style="color: blue;">string</span> folderName = <span style="color: blue;">null</span>;
            <span style="color: blue;">if</span> (delim.Count == 0)
            {
            	Console.WriteLine("Bad IMAP4 server");
            }
            <span style="color: blue;">else</span> <span style="color: blue;">if</span> (delim[0].Delimiter == <span style="color: blue;">null</span>)
            {
            	folderName = "Inbox/Orders";
            	Console.WriteLine("Folder names are flat. Will create " + folderName + " folder.");
            }
            <span style="color: blue;">else</span>
            {
            	folderName = "Inbox" + delim[0].Delimiter + "Orders";
            	Console.WriteLine("Will create " + folderName + " folder.");
            }
            
            <span style="color: green;">// Create folder</span>
            imp.CreateFolder(folderName);
            Console.WriteLine(folderName + " folder successfully created.");
            
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            <span style="color: green;">' Connect to the server and log in the account.</span>
            imp.Connect("imap4.company.com")
            imp.Login("jdoe@company.com", "secret")
            
            <span style="color: green;">' Determine what delimiter char is on the server.</span>
            <span style="color: blue;">Dim</span> delim <span style="color: blue;">As</span> FolderCollection = _
            	imp.DownloadFolders(<span style="color: blue;">False</span>, <span style="color: blue;">String</span>.Empty, <span style="color: blue;">String</span>.Empty)
            
            <span style="color: blue;">Dim</span> folderName <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            
            <span style="color: blue;">If</span> delim.Count = 0 <span style="color: blue;">Then</span>
            	Console.WriteLine("Bad IMAP4 server")
            <span style="color: blue;">ElseIf</span> delim(0).Delimiter <span style="color: blue;">Is Nothing</span> <span style="color: blue;">Then</span>
            	folderName = "Inbox/Orders"
            	Console.WriteLine("Folder names are flat. Will create " &amp; folderName &amp; " folder.")
            <span style="color: blue;">Else</span>
            	folderName = "Inbox" &amp; delim(0).Delimiter &amp; "Orders"
            	Console.WriteLine("Will create " &amp; folderName &amp; " folder.")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            <span style="color: green;">' Create folder</span>
            imp.CreateFolder(folderName)
            Console.WriteLine(folderName &amp; " folder successfully created.")
            
            <span style="color: green;">' Disconnect from the server.</span>
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DeleteFolder(System.String)">
            <summary>
            Deletes an existing folder (mailbox in IMAP4 terms) from the IMAP4 account.
            </summary>
            <param name="folderName">The full name of the folder to be deleted.</param>
            <returns><b>true</b> if the folder was deleted successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>The developer should specify the full name of the folder (including all parent folders' names
            if the folder is a a subfolder of another existing folder). See <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/> topic
            for details regarding folder names.</para>
            <note>If the folder contains subfolders, the mail server may not allow the client to delete it. It's permitted, however,
            to delete a folder which does not contain any subfolders but does contain some e-mail messages in it. The currently selected folder and
            Inbox folder cannot be deleted under any circumstances.</note>
            <para>To delete a folder asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
            <example>This sample connects to the IMAP4 server, logs in the mail account, and removes
            all folders except Inbox, Sent, Drafts and their subfolders. If certain folders to be removed contain
            subfolders, these subfolders are removed first.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            
            <span style="color: green;">// Connect to the server and log in the account.</span>
            imp.Connect("imap4.company.com");
            imp.Login("jdoe@company.com", "secret");
            
            FolderCollection folders = <span style="color: blue;">null</span>;
            
            <span style="color: green;">// We may need to iterate through folders collection multiple</span>
            <span style="color: green;">// times. For instance, if certain folder to be deleted contains</span>
            <span style="color: green;">// subfolders, we should delete this subfolders first and then</span>
            <span style="color: green;">// try again. However, using folders.Reverse() optimization</span>
            <span style="color: green;">// reduces the number of iterations. Without Reverse, subfolders</span>
            <span style="color: green;">// usually appear in the end of the list (thus, all parent folders</span>
            <span style="color: green;">// which are in the beginning of the list could not be deleted during</span>
            <span style="color: green;">// the first iteration). With Reverse, subfolders will come before</span>
            <span style="color: green;">// their parent folders in the list. Thus, if we use Reverse and</span>
            <span style="color: green;">// the mail server always returns parent folders before their</span>
            <span style="color: green;">// subfolders, we'll delete all the folders in a single pass.</span>
            <span style="color: blue;">for</span> (;;)
            {
            	<span style="color: blue;">bool</span> deletedAnything = <span style="color: blue;">false</span>;
            	<span style="color: blue;">int</span> processedCount = 0;
            
            	<span style="color: green;">// Get the list of folders in descending order (so that</span>
            	<span style="color: green;">// subfolders come first). Alternatively, we could use</span>
            	<span style="color: green;">// 'for' loop (instead of 'foreach') with descending</span>
            	<span style="color: green;">// counter variable (i.e. i-- instead of i++).</span>
            	folders = imp.DownloadFolders();
            	folders.Reverse();
            
            	<span style="color: blue;">foreach</span> (Folder imapFolder <span style="color: blue;">in</span> folders)
            	{
            		<span style="color: blue;">if</span> (!imapFolder.IsValid)
            		{
            			Console.WriteLine("IMAP4 folder list is corrupted");
            			<span style="color: blue;">break</span>;
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: blue;">string</span> folderName = imapFolder.Name.ToLower();
            
            			<span style="color: green;">// Check folder names in case-insensitive manner...</span>
            			<span style="color: blue;">if</span> (folderName == "inbox" ||
            				folderName == "sent" ||
            				folderName == "drafts")
            			{
            				processedCount++;
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: blue;">try</span>
            				{
            					<span style="color: green;">// ...but pass original name when deleting.</span>
            					imp.DeleteFolder(imapFolder.Name);
            
            					<span style="color: green;">// Remember this deletion attempt succeeded.</span>
            					processedCount++;
            					deletedAnything = <span style="color: blue;">true</span>;
            				}
            				<span style="color: blue;">catch</span> (MailBeeImapNegativeResponseException e)
            				{
            					<span style="color: green;">// If the server responded with "NO" response,</span>
            					<span style="color: green;">// it usually means the folder contains,</span>
            					<span style="color: green;">// sub-folders so we need to delete them first</span>
            					<span style="color: green;">// (i.e. that's normal situation). If, however,</span>
            					<span style="color: green;">// the response is BAD, this is the real problem,</span>
            					<span style="color: green;">// and we'll re-throw the exception in this case.</span>
            					<span style="color: blue;">if</span> (e.CompletionResult != "NO")
            					{
            						<span style="color: blue;">throw</span>;
            					}
            				}
            			}
            		}
            	}
            
            	<span style="color: blue;">if</span> (processedCount == folders.Count || !deletedAnything)
            	{
            		<span style="color: green;">// If we successfully processed all the folders or</span>
            		<span style="color: green;">// no folders have been deleted during the last iteration,</span>
            		<span style="color: green;">// it means we deleted everything we should or could.</span>
            		<span style="color: blue;">break</span>;
            	}
            }
            
            <span style="color: green;">// Display the list of folders remained after performing clean-up.</span>
            folders = imp.DownloadFolders();
            <span style="color: blue;">foreach</span> (Folder imapFolder <span style="color: blue;">in</span> folders)
            {
            	Console.WriteLine(imapFolder.Name);
            }
            
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            <span style="color: green;">' Connect to the server and log in the account.</span>
            imp.Connect("imap4.company.com")
            imp.Login("jdoe@company.com", "secret")
            
            <span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = <span style="color: blue;">Nothing</span>
            
            <span style="color: green;">' We may need to iterate through folders collection multiple</span>
            <span style="color: green;">' times. For instance, if certain folder to be deleted contains</span>
            <span style="color: green;">' subfolders, we should delete this subfolders first and then</span>
            <span style="color: green;">' try again. However, using folders.Reverse() optimization</span>
            <span style="color: green;">' reduces the number of iterations. Without Reverse, subfolders</span>
            <span style="color: green;">' usually appear in the end of the list (thus, all parent folders</span>
            <span style="color: green;">' which are in the beginning of the list could not be deleted during</span>
            <span style="color: green;">' the first iteration). With Reverse, subfolders will come before</span>
            <span style="color: green;">' their parent folders in the list. Thus, if we use Reverse and</span>
            <span style="color: green;">' the mail server always returns parent folders before their</span>
            <span style="color: green;">' subfolders, we'll delete all the folders in a single pass.</span>
            
            <span style="color: blue;">Do</span>
            	<span style="color: blue;">Dim</span> deletedAnything <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            	<span style="color: blue;">Dim</span> processedCount <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            
            	<span style="color: green;">' Get the list of folders in descending order (so that</span>
            	<span style="color: green;">' subfolders come first). Alternatively, we could use</span>
            	<span style="color: green;">' 'For' loop (instead of 'For Each') with descending</span>
            	<span style="color: green;">' counter variable (i.e. 'i -= 1' instead of 'i += 1').</span>
            	folders = imp.DownloadFolders()
            	folders.Reverse()
            
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> imapFolder <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imapFolder.IsValid <span style="color: blue;">Then</span>
            			Console.WriteLine("IMAP4 folder list is corrupted")
            			<span style="color: blue;">Exit</span> <span style="color: blue;">Do</span>
            		<span style="color: blue;">Else</span>
            			<span style="color: blue;">Dim</span> folderName <span style="color: blue;">As</span> <span style="color: blue;">String</span> = imapFolder.Name.ToLower()
            
            			<span style="color: green;">' Check folder names in case-insensitive manner...</span>
            			<span style="color: blue;">If</span> folderName = "inbox" <span style="color: blue;">OrElse</span> folderName = "sent" <span style="color: blue;">OrElse</span> _
            				folderName = "drafts" <span style="color: blue;">Then</span>
            
            				processedCount += 1
            			<span style="color: blue;">Else</span>
            				<span style="color: blue;">Try</span>
            					<span style="color: green;">' ...but pass original name when deleting.</span>
            					imp.DeleteFolder(imapFolder.Name)
            
            					<span style="color: green;">' Remember this deletion attempt succeeded.</span>
            					processedCount += 1
            					deletedAnything = <span style="color: blue;">True</span>
            
            				<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeImapNegativeResponseException
            					<span style="color: green;">' If the server responded with "NO" response,</span>
            					<span style="color: green;">' it usually means the folder contains,</span>
            					<span style="color: green;">' sub-folders so we need to delete them first</span>
            					<span style="color: green;">' (i.e. that's normal situation). If, however,</span>
            					<span style="color: green;">' the response is BAD, this is the real problem,</span>
            					<span style="color: green;">' and we'll re-throw the exception in this case.</span>
            					<span style="color: blue;">If</span> e.CompletionResult &lt;&gt; "NO" <span style="color: blue;">Then</span>
            						<span style="color: blue;">Throw</span>
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">Next</span>
            
            	<span style="color: blue;">If</span> processedCount = folders.Count <span style="color: blue;">OrElse</span> <span style="color: blue;">Not</span> deletedAnything <span style="color: blue;">Then</span>
            		<span style="color: green;">' If we successfully processed all the folders or</span>
            		<span style="color: green;">' no folders have been deleted during the last iteration,</span>
            		<span style="color: green;">' it means we deleted everything we should or could.</span>
            		<span style="color: blue;">Exit</span> <span style="color: blue;">Do</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Loop</span> <span style="color: blue;">While</span> <span style="color: blue;">True</span>
            
            <span style="color: green;">' Display the list of folders remained after performing clean-up.</span>
            folders = imp.DownloadFolders()
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> imapFolder <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            	Console.WriteLine(imapFolder.Name)
            <span style="color: blue;">Next</span>
            
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.RenameFolder(System.String,System.String)">
            <summary>
            Renames an existing folder (mailbox in IMAP4 terms) of the IMAP4 account.
            </summary>
            <param name="oldName">The full name of the folder to be renamed.</param>
            <param name="newName">The new full name of the folder.</param>
            <returns><b>true</b> if the folder was renamed successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The developer should specify the full names of the folder (including all parent folders' names
            if the folder is or should become a subfolder of another existing folder). See <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/> topic
            for details regarding folder names.
            <note>Inbox folder cannot be renamed.</note>
            <para>To rename a folder asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
            <example>This sample connects to the IMAP4 server, logs in the mail account, and renames "Sent" to "Sent Items".
            Before renaming, the sample code checks if "Sent" exists and "Sent Items" does not already exist, and
            displays the corresponding warning is these conditions are not met.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            
            <span style="color: green;">// Connect to the server and log in the account.</span>
            imp.Connect("imap4.company.com");
            imp.Login("jdoe@company.com", "secret");
            
            <span style="color: green;">// First, check if "Sent" exists and "Sent Items" does not exist. To</span>
            <span style="color: green;">// determine this, we'll will get the list of root level folders only</span>
            <span style="color: green;">// (we could have received all the folders, but it's more effecient</span>
            <span style="color: green;">// to download only root ones since we're going to rename a root level</span>
            <span style="color: green;">// folder into another root level name).</span>
            
            <span style="color: blue;">string</span> sentFolderName = <span style="color: blue;">null</span>;
            <span style="color: blue;">bool</span> isSentItems = <span style="color: blue;">false</span>;
            FolderCollection folders = imp.DownloadFolders(<span style="color: blue;">false</span>, <span style="color: blue;">string</span>.Empty, "%");
            
            <span style="color: blue;">foreach</span> (Folder imapFolder <span style="color: blue;">in</span> folders)
            {
            	<span style="color: blue;">string</span> folderName = imapFolder.Name.ToLower();
            	<span style="color: blue;">if</span> (folderName == "sent")
            	{
            		sentFolderName = imapFolder.Name;
            	} 
            	<span style="color: blue;">else</span> <span style="color: blue;">if</span> (folderName == "sent items")
            	{
            		isSentItems = <span style="color: blue;">true</span>;
            	}
            }
            
            <span style="color: blue;">if</span> (sentFolderName == <span style="color: blue;">null</span>)
            {
            	Console.WriteLine("Sent folder does not exist.");
            }
            <span style="color: blue;">else</span> <span style="color: blue;">if</span> (isSentItems)
            {
            	Console.WriteLine("'Sent Items' folder already exists.");
            }
            <span style="color: blue;">else</span>
            {
            	imp.RenameFolder(sentFolderName, "Sent Items");
            	Console.WriteLine(sentFolderName + " renamed to 'Sent Items'.");
            }
            
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            <span style="color: green;">' Connect to the server and log in the account.</span>
            imp.Connect("imap4.company.com")
            imp.Login("jdoe@company.com", "secret")
            
            <span style="color: green;">' First, check if "Sent" exists and "Sent Items" does not exist. To</span>
            <span style="color: green;">' determine this, we'll will get the list of root level folders only</span>
            <span style="color: green;">' (we could have received all the folders, but it's more efficient</span>
            <span style="color: green;">' to download only root ones since we're going to rename a root level</span>
            <span style="color: green;">' folder into another root level name).</span>
            
            <span style="color: blue;">Dim</span> sentFolderName <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">Nothing</span>
            <span style="color: blue;">Dim</span> isSentItems <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            <span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = _
            	imp.DownloadFolders(<span style="color: blue;">False</span>, <span style="color: blue;">String</span>.Empty, "%")
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> imapFolder <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            	<span style="color: blue;">Dim</span> folderName <span style="color: blue;">As</span> <span style="color: blue;">String</span> = imapFolder.Name.ToLower()
            	<span style="color: blue;">If</span> folderName = "sent" <span style="color: blue;">Then</span>
            		sentFolderName = imapFolder.Name
            	<span style="color: blue;">ElseIf</span> folderName = "sent items" <span style="color: blue;">Then</span>
            		isSentItems = <span style="color: blue;">True</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            
            <span style="color: blue;">If</span> sentFolderName <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine("Sent folder does not exist.")
            <span style="color: blue;">ElseIf</span> isSentItems <span style="color: blue;">Then</span>
            	Console.WriteLine("'Sent Items' folder already exists.")
            <span style="color: blue;">Else</span>
            	imp.RenameFolder(sentFolderName, "Sent Items")
            	Console.WriteLine(sentFolderName &amp; " renamed to 'Sent Items'.")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.SubscribeFolder(System.String)">
            <summary>
            Subscribes to the specified folder (mailbox in IMAP4 terms) of the IMAP4 account.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean)"/>
            </summary>
            <param name="folderName">The full name of the folder to be subscribed.</param>
            <returns><b>true</b> if the folder was subscribed successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method adds the specified folder to the server's set of "active" or "subscribed" folders as returned by
            <see cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean)"/> method when <b>subscribedOnly</b> is set to <b>true</b>.</para>
            <para>
            The developer should specify the full name of the folder (including all parent folders' names
            if the folder is  subfolder of another existing folder). See <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/> topic
            for details regarding folder names.
            </para>
            <para>To subscribe to a folder asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.UnsubscribeFolder(System.String)">
            <summary>
            Unsubscribes the previously subscribed folder (mailbox in IMAP4 terms) of the IMAP4 account.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean)"/>
            </summary>
            <param name="folderName">The full name of the folder to be unsubscribed.</param>
            <returns><b>true</b> if the folder was unsubscribed successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method removes the specified folder from the server's set of "active" or "subscribed" folders as returned by
            <see cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean)"/> method when <b>subscribedOnly</b> is set to <b>true</b>.</para>
            <para>
            The developer should specify the full name of the folder (including all parent folders' names
            if the folder is  subfolder of another existing folder). See <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/> topic
            for details regarding folder names.
            </para>
            <para>To unsubscribe a folder asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)">
            <summary>
            Selects the specified folder (mailbox in IMAP4 terms) for read-only access.
            <seealso cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/>
            <seealso cref="P:MailBee.ImapMail.Imap.IsFolderSelected"/>
            </summary>
            <param name="folderName">The full name of the folder to be selected.</param>
            <returns><b>true</b> if the folder was selected successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            When the folder is selected for read-only access, the selected folder is identified as read-only.
            No changes to the permanent state of the folder, including per-user state, are permitted;
            in particular, when messages are downloaded, they won't lose the \Recent flag.</para>
            <para>To select the folder for read-write access, the developer should use <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> method.</para>
            <para>
            The developer should specify the full name of the folder (including all parent folders' names
            if the folder is  subfolder of another existing folder). See <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/> topic
            for details regarding folder names.
            </para>
            </remarks>
            <example>This sample connects to the IMAP4 server, logs in the mail account, selects Inbox folder in read-only mode, and downloads the last message
            without loosing \Recent flag (if the message has this flag set).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Select the folder in read-only mode.</span>
            		imp.ExamineFolder("Inbox");
            
            		<span style="color: blue;">if</span> (imp.MessageCount &gt; 0)
            		{
            			<span style="color: green;">// Download and save last message into a file.</span>
            			<span style="color: green;">// If the message is recent, it won't loose \Recent flag.</span>
            			MailMessage msg = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">false</span>);
            			msg.SaveMessage(@"C:\Temp\msg.eml");
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' The actual code (put it into a method of your class)</span>
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select the folder in read-only mode.</span>
            		imp.ExamineFolder("Inbox")
            
            		<span style="color: blue;">If</span> imp.MessageCount &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Download and save last message into a file.</span>
            			<span style="color: green;">' If the message is recent, it won't loose \Recent flag.</span>
            			<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">False</span>)
            			msg.SaveMessage("C:\Temp\msg.eml")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.SelectFolder(System.String)">
            <summary>
            Selects the specified folder (mailbox in IMAP4 terms) for read-write access.
            <seealso cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/>
            <seealso cref="P:MailBee.ImapMail.Imap.IsFolderSelected"/>
            </summary>
            <param name="folderName">The full name of the folder to be selected.</param>
            <returns><b>true</b> if the folder was selected successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To select the folder for read-only access, the developer should use <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> method.</para>
            <para>
            The developer should specify the full name of the folder (including all parent folders' names
            if the folder is  subfolder of another existing folder). See <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/> topic
            for details regarding folder names.
            </para>
            </remarks>
            <example>This sample connects to the IMAP4 server, logs in the mail account, selects Inbox folder, and marks all messages as seen (read).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	 <span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	 {
            		 Imap imp = <span style="color: blue;">new</span> Imap();
            
            		 <span style="color: green;">// Connect to the server and log in the account.</span>
            		 imp.Connect("imap.company.com");
            		 imp.Login("jdoe", "secret");
            
            		 <span style="color: green;">// Select the folder in read-only mode.</span>
            		 imp.SelectFolder("Inbox");
            
            		 imp.SetMessageFlags(Imap.AllMessages, <span style="color: blue;">false</span>,
            			 SystemMessageFlags.Seen, MessageFlagAction.Add);
            
            		 imp.Disconnect();
            	 }
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' The actual code (put it into a method of your class)</span>
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select the folder in read-only mode.</span>
            		imp.SelectFolder("Inbox")
            
            		<span style="color: blue;">If</span> imp.MessageCount &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Download and save last message into a file.</span>
            			<span style="color: green;">' If the message is recent, it won't loose \Recent flag.</span>
            			<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailBee.Mime.MailMessage = _
            				imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">False</span>)
            			msg.SaveMessage("C:\Temp\msg.eml")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginSelectFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for selecting a folder in an account on an IMAP4 server.
            <seealso cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/>
            </summary>
            <param name="folderName">The full name of the folder to be selected.</param>
            <param name="readOnly">Indicates if the folder should be selected in read-only mode.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous select folder process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> (if <paramref name="readOnly"/> is <b>false</b>) or
            <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> (if <paramref name="readOnly"/> is <b>true</b>).</remarks>
            <example>This sample demonstrates asynchronous selecting a folder and use of a callback function
            in a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// A callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> SelectFolderCallback(IAsyncResult result)
            	{
            		Imap imp = (Imap)result.AsyncState;
            		imp.EndSelectFolder();
            		Console.WriteLine("Overall size of all messages in the inbox is " +
            			imp.GetFolderSize() + " bytes");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("imap4.somehost.com");
            		imp.Login("jdoe@somehost.com", "secret");
            
            		<span style="color: green;">// Initiate an asynchronous select folder attempt.</span>
            		IAsyncResult ar = imp.BeginSelectFolder("Inbox", <span style="color: blue;">false</span>,
            			<span style="color: blue;">new</span> AsyncCallback(SelectFolderCallback), imp);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// folder selection is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the folder selection attempt is still in progress,</span>
            		<span style="color: green;">// then wait until it's finished.</span>
            		<span style="color: blue;">while</span> (imp.IsBusy) ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            
            	<span style="color: green;">' A callback function.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> SelectFolderCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">CType</span>(result.AsyncState, Imap)
            		imp.EndSelectFolder()
            		Console.WriteLine("Overall size of all messages in the inbox is " &amp; _
            			imp.GetFolderSize() &amp; " bytes")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' The actual code (put it into a method of your class)</span>
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Initiate an asynchronous select folder attempt.</span>
            		<span style="color: blue;">Dim</span> ar <span style="color: blue;">As</span> IAsyncResult = imp.BeginSelectFolder("Inbox", <span style="color: blue;">False</span>, _
            			<span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> SelectFolderCallback), imp)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">' folder selection is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' If the folder selection attempt is still in progress,</span>
            		<span style="color: green;">' then wait until it's finished.</span>
            		<span style="color: blue;">While</span> imp.IsBusy
            			ar.AsyncWaitHandle.WaitOne()
            		<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndSelectFolder">
            <summary>
            Ends the pending asynchronous select folder request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSelectFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Close(System.Boolean)">
            <summary>
            Unselects the currently selected folder and optionally removes all messages having \Deleted flag set from the folder.
            <seealso cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)"/>
            </summary>
            <param name="expungeDeleted">If <b>true</b>, the messages marked as deleted will be permanently removed from the folder.</param>
            <returns><b>true</b> if the folder was unselected successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>If <paramref name="expungeDeleted"/> is <b>true</b>, this method sends CLOSE command to the IMAP4 server.
            This commands expunges all messages marked as deleted from the selected folder, and then unselects the folder.
            </para>
            <para>If <paramref name="expungeDeleted"/> is <b>false</b>, this method simply unselects the currently selected folder.
            No messages are expunged. Unselecting is performed either via UNSELECT command if the server supports UNSELECT capability
            or via SELECT command without argument if UNSELECT capability is not supported.</para>
            <note>Another way of keeping messages marked as deleted without expunging them is calling <see cref="M:MailBee.ImapMail.Imap.Disconnect"/> method or
            selecting another folder using <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> or <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> method.
            <c>Close(false)</c> should only be used when the developer needs to close the current folder but retain the connection
            and do not select another folder.
            </note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Close">
            <summary>
            Unselects the currently selected folder and removes all messages having \Deleted flag set from the folder.
            <seealso cref="M:MailBee.ImapMail.Imap.Disconnect"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)"/>
            </summary>
            <returns><b>true</b> if the folder was unselected successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To avoid expunging messages marked as deleted, the developer should not call this method and simply close
            the connection with <see cref="M:MailBee.ImapMail.Imap.Disconnect"/> method. Another way is to select a different folder or simply unselect
            the current folder using <c>Close(false)</c> call.
            </para>
            <para>To expunge messages marked as deleted without unselecting the current folder, <see cref="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)"/> method should be called.</para>
            </remarks>
            <example>This sample marks the first message in Sent folder as deleted, and then closes this folder expunging deleted messages.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap.company.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Select Sent folder.</span>
            		imp.SelectFolder("Sent");
            
            		<span style="color: green;">// Mark message #1 as deleted.</span>
            		imp.SetMessageFlags("1", <span style="color: blue;">false</span>,
            			SystemMessageFlags.Deleted, MessageFlagAction.Add);
            
            		<span style="color: green;">// Close the folder and expunge deleted messages.</span>
            		imp.Close();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' The actual code (put it into a method of your class)</span>
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select Sent folder.</span>
            		imp.SelectFolder("Sent")
            
            		<span style="color: green;">' Mark message #1 as deleted.</span>
            		imp.SetMessageFlags("1", <span style="color: blue;">False</span>, _
            			SystemMessageFlags.Deleted, MessageFlagAction.Add)
            
            		<span style="color: green;">' Close the folder and expunge deleted messages.</span>
            		imp.Close()
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginClose(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for closing (unselecting) the currently selected folder and optional removing of messages marked as deleted from this folder.
            <seealso cref="M:MailBee.ImapMail.Imap.Close(System.Boolean)"/>
            </summary>
            <param name="expungeDeleted">Indicates if the messages marked as deleted must be expunged.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous unselecting folder and expunging deleted messages process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.Close(System.Boolean)"/>.</remarks>
            <example>This WinForms sample demonstrates asynchronous unselecting the Inbox folder and expunging of all deleted messages if any.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            Imap imp = <span style="color: blue;">null</span>;
            <span style="color: blue;">bool</span> finished = <span style="color: blue;">false</span>;
            
            <span style="color: green;">// A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">// it cannot update controls on the form or otherwise access UI.</span>
            <span style="color: green;">// The only UI-related action permitted in worker thread is</span>
            <span style="color: green;">// displaying a message box (MessageBox.Show).</span>
            <span style="color: green;">// Any updates of UI must take place on message loop thread.</span>
            <span style="color: green;">// See BeginSearch method example on how to update UI in callbacks.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> CloseCallback(IAsyncResult result)
            {
            	imp.EndClose();
            	finished = <span style="color: blue;">true</span>;
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// Connect to the server, login and select inbox.</span>
            	imp.Connect("mail.company.com");
            	imp.Login("jdoe@company.com", "secret");
            	imp.SelectFolder("Inbox");
            
            	<span style="color: green;">// Start async close/expunge operation.</span>
            	imp.BeginClose(<span style="color: blue;">true</span>, <span style="color: blue;">new</span> AsyncCallback(CloseCallback), <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Wait until it's finished.</span>
            	<span style="color: blue;">while</span> (!finished)
            	{
            		<span style="color: green;">// Process events on message loop thread.</span>
            		<span style="color: green;">// Alternatively, we could set imp.RaiseEventsOnMessageLoop</span>
            		<span style="color: green;">// to false and use imp.Wait method to perform waiting.</span>
            		System.Threading.Thread.Sleep(1);
            		Application.DoEvents();
            	}
            
            	<span style="color: green;">// Close the connection.</span>
            	imp.Disconnect();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">Nothing</span>
            <span style="color: blue;">Dim</span> finished <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            <span style="color: green;">' A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">' it cannot update controls on the form or otherwise access UI.</span>
            <span style="color: green;">' The only UI-related action permitted in worker thread is</span>
            <span style="color: green;">' displaying a message box (MessageBox.Show).</span>
            <span style="color: green;">' Any updates of UI must take place on message loop thread.</span>
            <span style="color: green;">' See BeginSearch method example on how to update UI in callbacks.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> CloseCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	imp.EndClose()
            	finished = <span style="color: blue;">True</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' Connect to the server, login and select inbox.</span>
            	imp.Connect("imap.domain.com")
            	imp.Login("jdoe", "secret")
            	imp.SelectFolder("Inbox")
            
            	<span style="color: green;">' Start async close/expunge operation.</span>
            	imp.BeginClose(<span style="color: blue;">True</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> CloseCallback), <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Wait until it's finished.</span>
            	<span style="color: blue;">While</span> <span style="color: blue;">Not</span> finished
            		<span style="color: green;">' Process events on message loop thread.</span>
            		<span style="color: green;">' Alternatively, we could set imp.RaiseEventsOnMessageLoop</span>
            		<span style="color: green;">' to false and use imp.Wait method to perform waiting.</span>
            		System.Threading.Thread.Sleep(1)
            		Application.DoEvents()
            	<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            	<span style="color: green;">' Close the connection.</span>
            	imp.Disconnect()
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndClose">
            <summary>
            Ends the pending asynchronous close folder request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginClose(System.Boolean,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)">
            <summary>
            Permanently removes the messages marked as deleted from the currently selected folder.
            </summary>
            <param name="uidSet">The comma-separated list of UIDs of the messages to be deleted, or a null reference
            (<b>Nothing</b> in Visual Basic) if all messages marked as deleted should be removed.</param>
            <param name="forceUidExpunge">If <b>true</b> and <paramref name="uidSet"/> is not a null reference, allows
            MailBee to use UID EXPUNGE command only to expunge the messages. If <b>false</b>, MailBee is allowed to
            simulate UID EXPUNGE using standard commands if UID EXPUNGE is not supported by the server.</param>
            <returns><b>true</b> if the command succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeProtocolExtensionNotSupportedException">UID EXPUNGE required but not supported by the server and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This overload can be used to expunge the specified messages only. Often, it's required to remove certain message
            from the folder but leave other messages marked as deleted intact. The standard IMAP4 protocol does not allow this to be done but
            if the server supports UIDPLUS extension, it becomes possible (via UID EXPUNGE command).
            </para>
            <para>This method always issues EXPUNGE if <paramref name="uidSet"/> is not set. If <paramref name="uidSet"/> is not a null reference,
            the method will attempt to delete the messages having UIDs from <paramref name="uidSet"/> list and \Deleted flag set. If, however,
            UIDPLUS is not supported, the method will either simulate effect of UID EXPUNGE using a number of regular IMAP4 commands
            (if <paramref name="forceUidExpunge"/> is <b>false</b>)
            or report error and do not expunge any messages (if <paramref name="forceUidExpunge"/> is <b>true</b>).</para>
            <para>In most cases, it's ok to set <paramref name="forceUidExpunge"/> to <b>false</b>. The only reason for not doing so is
            when the component is used with the IMAP folder where messages are added very often by another clients. In this case, while the component
            executes a sequence of commands to expunge certain messages, another mail client can add, remove, or manage messages in the same folder.
            In this case, the folder state may go out of sync. In all other cases, if no other mail agents access the same folder at the same time,
            it's safe to use MailBee simulation of UID EXPUNGE command when it's not supported by the server.
            </para>
            </remarks>
            <example>This sample marks the first message in inbox as deleted, and then expunges it. It there are some other messages marked as deleted
            in inbox, they will not be expunged.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap.domain.com");
            		imp.Login("jdoe@domain.com", "secret");
            
            		<span style="color: green;">// Select Inbox folder.</span>
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Mark message #1 as deleted.</span>
            		imp.SetMessageFlags("1", <span style="color: blue;">false</span>,
            			SystemMessageFlags.Deleted, MessageFlagAction.Add);
            
            		<span style="color: green;">// To expunge specific message, we need to know its UID.</span>
            		EnvelopeCollection uidList = imp.DownloadEnvelopes("1", <span style="color: blue;">false</span>, EnvelopeParts.Uid, 0);
            
            		<span style="color: blue;">if</span> (uidList.Count &gt; 0)
            		{
            			<span style="color: green;">// Expunge message #1 by its UID.</span>
            			imp.Expunge(uidList[0].Uid.ToString(), <span style="color: blue;">false</span>);
            		}
            
            		<span style="color: green;">// We do not call Close() here to prevent remaining messages</span>
            		<span style="color: green;">// marked as deleted from being expunged.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select Inbox folder.</span>
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Mark message #1 as deleted.</span>
            		imp.SetMessageFlags("1", <span style="color: blue;">False</span>, _
            			SystemMessageFlags.Deleted, MessageFlagAction.Add)
            
            		<span style="color: green;">' To expunge specific message, we need to know its UID.</span>
            		<span style="color: blue;">Dim</span> uidList <span style="color: blue;">As</span> EnvelopeCollection = _
            			imp.DownloadEnvelopes("1", <span style="color: blue;">False</span>, EnvelopeParts.Uid, 0)
            
            		<span style="color: blue;">If</span> uidList.Count &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Expunge message #1 by its UID.</span>
            			imp.Expunge(uidList(0).Uid.ToString(), <span style="color: blue;">False</span>)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' We do not call Close() here to prevent remaining messages</span>
            		<span style="color: green;">' marked as deleted from being expunged.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Expunge">
            <summary>
            Permanently removes all the messages marked as deleted from the currently selected folder.
            <seealso cref="M:MailBee.ImapMail.Imap.Close(System.Boolean)"/>
            </summary>
            <returns><b>true</b> if the command succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This overload can be used to expunge all messages marked as deleted from the current folder without closing it.</para>
            <para>To expunge only certain messages (so that some messages having \Deleted flag set would remain),
            the developer should use <see cref="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)"/> overload.</para>
            <para>To expunge deleted messages asynchronously, see the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/> topic.</para>
            </remarks>
            <example>This sample removes last 10 messages from Sent folder. If there were another messages marked as deleted in this folder,
            they will be removed as well.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap.domain.com");
            		imp.Login("jdoe@domain.com", "secret");
            
            		<span style="color: green;">// Select Sent folder.</span>
            		imp.SelectFolder("Sent");
            
            		<span style="color: green;">// Mark last 10 messages as deleted.</span>
            		<span style="color: blue;">if</span> (imp.MessageCount &gt;= 10)
            		{
            			<span style="color: blue;">string</span> range = (imp.MessageCount - 9).ToString() + ":" + imp.MessageCount.ToString();
            			imp.SetMessageFlags(range, <span style="color: blue;">false</span>, SystemMessageFlags.Deleted, MessageFlagAction.Add);
            		}
            
            		<span style="color: green;">// Expunge all messages marked as deleted.</span>
            		imp.Expunge();
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select Sent folder.</span>
            		imp.SelectFolder("Sent")
            
            		<span style="color: green;">' Mark last 10 messages as deleted.</span>
            		<span style="color: blue;">If</span> (imp.MessageCount &gt;= 10) <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> range <span style="color: blue;">As</span> <span style="color: blue;">String</span> = (imp.MessageCount - 9).ToString() &amp; _
            				":" &amp; imp.MessageCount.ToString()
            			imp.SetMessageFlags(range, <span style="color: blue;">False</span>, SystemMessageFlags.Deleted, _
            				MessageFlagAction.Add)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Expunge all messages marked as deleted.</span>
            		imp.Expunge()
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)">
            <summary>
            Gets the status of the specified folder without selecting it.
            </summary>
            <param name="folderName">The full name of the folder to get the status information of.</param>
            <returns><see cref="T:MailBee.ImapMail.FolderStatus"/> object if the status information was downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method can be used to obtain the folder status information such as total count of messages, recent messages count, unseen messages count, etc without
            selecting the folder.
            </remarks>
            <example>This sample gets Inbox status information and displays unseen messages count. No folder is selected.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	 <span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	 {
            		 Imap imp = <span style="color: blue;">new</span> Imap();
            
            			<span style="color: green;">// Connect to the server and log in the account.</span>
            			imp.Connect("imap.server.com");
            			imp.Login("jdoe@server.com", "secret");
            
            			<span style="color: green;">// Download Inbox folder status information.</span>
            			FolderStatus status = imp.GetFolderStatus("Inbox");
            
            			Console.WriteLine(status.UnseenCount + " unseen message(s) in inbox");
            
            			imp.Disconnect();
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Download Inbox folder status information.</span>
            		<span style="color: blue;">Dim</span> status <span style="color: blue;">As</span> FolderStatus = imp.GetFolderStatus("Inbox")
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetFolderQuota(System.String)">
            <summary>
            Gets the quota (resource usage limit) of the specified folder.
            <seealso cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/>
            </summary>
            <param name="folderName">The full name of the folder to get the quota of.</param>
            <returns><see cref="T:MailBee.ImapMail.FolderQuota"/> object if the quota information was downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeProtocolExtensionNotSupportedException">QUOTA not supported by the server and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            This method can be used to obtain the folder quota information such as maximum allowed size of the folder, the current size of the folder, etc.
            </para>
            <para>
            To get the quota set for the entire account on the IMAP4 server, the developer can use <see cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/> method.
            </para>
            <note>
            This method uses QUOTA capability be supported by the IMAP4 server. The developer can check if QUOTA capability is supported
            using <see cref="M:MailBee.ImapMail.Imap.GetExtension(System.String)"/> method.
            </note>
            </remarks>
            <example>This sample gets Inbox folder quota information and displays the maximum allowed size of the folder
            (the top limit of the total size in bytes of all messages in the folder).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: blue;">if</span> (imp.GetExtension("QUOTA") != <span style="color: blue;">null</span>)
            		{
            			<span style="color: green;">// Download Inbox folder quota information.</span>
            			FolderQuota quota = imp.GetFolderQuota("Inbox");
            
            			<span style="color: blue;">if</span> (quota.MaxStorageSize &gt; -1)
            			{
            				Console.WriteLine(quota.MaxStorageSize +
            					" is the maximum allowed total size (in bytes) " +
            					"of all messages in the folder.");
            			}
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("QUOTA capability not supported, sorry");
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.GetExtension("QUOTA") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			<span style="color: green;">' Download Inbox folder status information.</span>
            			<span style="color: blue;">Dim</span> quota <span style="color: blue;">As</span> FolderQuota = imp.GetFolderQuota("Inbox")
            
            			<span style="color: blue;">If</span> quota.MaxStorageSize &gt; -1 <span style="color: blue;">Then</span>
            				Console.WriteLine(quota.MaxStorageSize &amp; _
            				" is the maximum allowed total size (in bytes) " &amp; _
            				"of all messages in the folder.")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("QUOTA capability not supported, sorry")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetAccountQuota">
            <summary>
            Gets the quota (resource usage limit) of the entire mail account on the server.
            <seealso cref="M:MailBee.ImapMail.Imap.GetFolderQuota(System.String)"/>
            </summary>
            <returns><see cref="T:MailBee.ImapMail.FolderQuota"/> object if the quota information was downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeProtocolExtensionNotSupportedException">QUOTA not supported by the server and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            This method can be used to obtain the account quota and current usage (in bytes). Also, the current and the maximum number of messages
            in the account can be set too. However, most servers limit account usage in bytes only. Number of messages is usually not limited and not counted.
            </para>
            <note>
            This method uses QUOTA capability be supported by the IMAP4 server. The developer can check if QUOTA capability is supported
            using <see cref="M:MailBee.ImapMail.Imap.GetExtension(System.String)"/> method.
            </note>
            </remarks>
            <example>This sample gets the account quota information and displays the maximum size (in bytes) and
            the current usage (in percent) of the account storage.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap.company.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: blue;">if</span> (imp.GetExtension("QUOTA") != <span style="color: blue;">null</span>)
            		{
            			<span style="color: green;">// Download quota information for the entire account.</span>
            			FolderQuota quota = imp.GetAccountQuota();
            
            			<span style="color: blue;">if</span> (quota.MaxStorageSize &gt; -1 &amp;&amp; quota.CurrentStorageSize &gt; -1)
            			{
            				<span style="color: blue;">long</span> percent = (quota.CurrentStorageSize * 100) / quota.MaxStorageSize;
            				Console.WriteLine("You are using " + percent.ToString() + "% of your " +
            					quota.MaxStorageSize + " space");
            			}
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("QUOTA capability not supported, sorry");
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.GetExtension("QUOTA") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			<span style="color: green;">' Download Inbox folder status information.</span>
            			<span style="color: blue;">Dim</span> quota <span style="color: blue;">As</span> FolderQuota = imp.GetAccountQuota()
            
            			<span style="color: blue;">If</span> quota.MaxStorageSize &gt; -1 <span style="color: blue;">AndAlso</span> quota.CurrentStorageSize &gt; -1 <span style="color: blue;">Then</span>
            				Console.WriteLine(quota.MaxStorageSize &amp; _
            				" is the maximum allowed total size (in bytes) " &amp; _
            				"of all messages in the folder.")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("QUOTA capability not supported, sorry")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)">
            <summary>
            Downloads the list of IMAP folders matching the specified criteria.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="subscribedOnly">If <b>true</b>, only subscribed folders will be downloaded; otherwise, all the folders.</param>
            <param name="parentFolderName">The full name of the folder which subfolders must be downloaded, or a null reference (<b>Nothing</b> in Visual Basic) to download all the folders.</param>
            <param name="pattern">The exact or wildcard name (relative to <paramref name="parentFolderName"/>) of the folder or folders to be downloaded, or a null reference (<b>Nothing</b> in Visual Basic) to download all the folders.</param>
            <returns><see cref="T:MailBee.ImapMail.FolderCollection"/> object if the folder list was downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            This overload is the encapsulation of LIST and LSUB commands of the IMAP4 protocol described in RFC3501. <paramref name="parentFolderName"/> parameter corresponds to
            'reference name' argument of LIST/LSUB command, and <paramref name="pattern"/> parameter corresponds to 'mailbox name' argument.
            </para>
            <para>If <paramref name="parentFolderName"/> is null, 'reference name' will be empty string.</para>
            <para>If <paramref name="pattern"/> is null, 'mailbox name' will be "*" wildcard.</para>
            <para><paramref name="parentFolderName"/> specifies the root to returns subfolders for.</para>
            <para>"*" wildcard used as <paramref name="pattern"/> means all folders including subfolders of the given root. "%" wildcard
            will force the server to return only immediate subfolders of the given root, without their own subfolders. Wildcards can appear in patterns multiple times
            (see <see cref="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> topic for the sample code).</para>
            <para>The developer can refer to RFC3501 to find the further information regarding listing folders.</para>
            <para>
            This method fully supports international folder names in both <paramref name="parentFolderName"/> and <paramref name="pattern"/> parameters.
            </para>
            </remarks>
            <example>
            <para>
            This sample downloads the list of Inbox's immediate subfolders (without sub-sub-folders) having names starting with "Order".
            Thus, "Inbox/Orders", "Inbox/Order", "Inbox/Orders April 2006" will be listed while "Orders", "Inbox/Other", "Inbox/Orders April 2006/29" will not.
            </para>
            <para>In this description, it's assumed "/" character is a delimiter of folder levels (some servers may use another delimiter, such as ".").
            However, the sample code correctly determines the delimiter and does not rely on assumption that the delimiter is "/".
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: green;">// Download both subscribed and unsubscribed immediate subfolders</span>
            		<span style="color: green;">// of Inbox, having names starting with "Order".</span>
            		FolderCollection folders = imp.DownloadFolders(<span style="color: blue;">false</span>, "Inbox", "Order%");
            
            		<span style="color: green;">// Display downloaded folders' names.</span>
            		<span style="color: blue;">foreach</span> (Folder fold <span style="color: blue;">in</span> folders)
            		{
            			Console.WriteLine(fold.Name);
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Download both subscribed and unsubscribed immediate subfolders</span>
            		<span style="color: green;">' of Inbox, having names starting with "Order".</span>
            		<span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.DownloadFolders(<span style="color: blue;">False</span>, "Inbox", "Order%")
            
            		<span style="color: green;">' Display downloaded folders' names.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> fold <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            			Console.WriteLine(fold.Name)
            		<span style="color: blue;">Next</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean)">
            <summary>
            Downloads the list of IMAP folders of the mail account.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="subscribedOnly">If <b>true</b>, only subscribed folders will be downloaded; otherwise, all the folders.</param>
            <returns><see cref="T:MailBee.ImapMail.FolderCollection"/> object if the folder list was downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>
            This sample downloads the list of all subscribed folders of the mail account, and displays their full names.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: green;">// Download only subscribed folders.</span>
            		FolderCollection folders = imp.DownloadFolders(<span style="color: blue;">true</span>);
            
            		<span style="color: green;">// Print full names of the folders.</span>
            		<span style="color: blue;">foreach</span> (Folder fold <span style="color: blue;">in</span> folders)
            		{
            			Console.WriteLine(fold.Name);
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Download only subscribed folders.</span>
            		<span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.DownloadFolders(<span style="color: blue;">True</span>)
            
            		<span style="color: green;">' Print full names of the folders.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> fold <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            			Console.WriteLine(fold.Name)
            		<span style="color: blue;">Next</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadFolders">
            <summary>
            Downloads the list of all IMAP folders of the mail account.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><see cref="T:MailBee.ImapMail.FolderCollection"/> object if the folder list was downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>
            This sample downloads the list of all folders of the mail account, and displays them with in user-friendly view
            with indentation of folder nesting levels.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.server.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Download all the folders.</span>
            		FolderCollection folders = imp.DownloadFolders();
            
            		<span style="color: green;">// Used for indentation of folder levels in the output.</span>
            		System.Text.StringBuilder sb = <span style="color: blue;">new</span> System.Text.StringBuilder();
            
            		<span style="color: blue;">foreach</span> (Folder fold <span style="color: blue;">in</span> folders)
            		{
            			<span style="color: green;">// Indent each nesting level with two space characters.</span>
            			sb.Length = 0;
            			sb.Append(' ', fold.NestingLevel * 2);
            
            			<span style="color: green;">// Print formatted name of the folder.</span>
            			Console.WriteLine(sb.ToString() + fold.ShortName);
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Download only subscribed folders.</span>
            		<span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.DownloadFolders()
            
            		<span style="color: green;">' Used for indentation of folder levels in the output.</span>
            		<span style="color: blue;">Dim</span> sb <span style="color: blue;">As</span> <span style="color: blue;">New</span> System.Text.StringBuilder
            
            		<span style="color: green;">' Print full names of the folders.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> fold <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            			<span style="color: green;">' Indent each nesting level with two space characters.</span>
            			sb.Length = 0
            			sb.Append(" ", fold.NestingLevel * 2)
            
            			<span style="color: green;">' Print formatted name of the folder.</span>
            			Console.WriteLine(sb.ToString() &amp; fold.ShortName)
            		<span style="color: blue;">Next</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for downloading IMAP folders matching the specified criteria.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/>
            </summary>
            <param name="subscribedOnly">If <b>true</b>, only subscribed folders will be downloaded; otherwise, all the folders.</param>
            <param name="parentFolderName">The full name of the folder which subfolders must be downloaded, or a null reference (<b>Nothing</b> in Visual Basic) to download all the folders.</param>
            <param name="pattern">The exact or wildcard name (relative to <paramref name="parentFolderName"/>) of the folder or folders to be downloaded, or a null reference (<b>Nothing</b> in Visual Basic) to download all the folders.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download folder list process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/>.</remarks>
            <example>This sample demonstrates asynchronous downloading of folders list using complex pattern in a console application.
            <see cref="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> method is called twice. First, to get a delimiter of folders level.
            Second, to get the list of folders which are subfolders of the 1st level. Thus, "Inbox/Orders" and "Sent Items/Personal" will be
            listed while "Inbox", "Sent Items", "Drafts", "Inbox/Orders/April 2006", "Inbox/Orders/April 2006/29" will not (because
            they are either parent folders or subfolders of deeper levels such as 2, 3, etc).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("mail.somehost.com");
            
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Initiate an asynchronous download folder list attempt.</span>
            		<span style="color: green;">// This will download a single empty Folder element having only delimiter</span>
            		<span style="color: green;">// field set. We need it in order to correctly combine pattern value for</span>
            		<span style="color: green;">// subsequent folder list download.</span>
            		IAsyncResult ar = imp.BeginDownloadFolders(<span style="color: blue;">false</span>, "", "", <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// folders are being downloaded is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the download is still in progress, then wait until it's finished,</span>
            		<span style="color: green;">// and get the delimiter.</span>
            		FolderCollection folders = imp.EndDownloadFolders();
            
            		<span style="color: blue;">if</span> (folders.Count == 0)
            		{
            			Console.WriteLine("Bad IMAP4 server.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: blue;">string</span> delim = folders[0].Delimiter;
            
            			<span style="color: blue;">if</span> (delim == <span style="color: blue;">null</span>)
            			{
            				Console.WriteLine("Folder names are flat. Hierarchy is not supported.");
            			}
            			<span style="color: blue;">else</span>
            			{
            
            				<span style="color: green;">// Initiate an asynchronous download folder list attempt.</span>
            				<span style="color: green;">// Here, we request to download all 1st level subfolders of the account.</span>
            				ar = imp.BeginDownloadFolders(<span style="color: blue;">false</span>, "", "%" + delim + "%", <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            				<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            				<span style="color: green;">// folders are being downloaded is executed on another thread.</span>
            				System.Threading.Thread.Sleep(3000);
            
            				<span style="color: green;">// If the download is still in progress, then wait until it's finished,</span>
            				<span style="color: green;">// and get the folders.</span>
            				folders = imp.EndDownloadFolders();
            
            				<span style="color: green;">// Print folder names matching the specified criteria.</span>
            				<span style="color: blue;">foreach</span> (Folder fold <span style="color: blue;">in</span> folders)
            				{
            					Console.WriteLine(fold.Name);
            				}
            			}
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Connect("imap4.company.com")
            
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Initiate an asynchronous download folder list attempt.</span>
            		<span style="color: green;">' This will download a single empty Folder element having only delimiter</span>
            		<span style="color: green;">' field set. We need it in order to correctly combine pattern value for</span>
            		<span style="color: green;">' subsequent folder list download.</span>
            		<span style="color: blue;">Dim</span> ar <span style="color: blue;">As</span> IAsyncResult = imp.BeginDownloadFolders(<span style="color: blue;">False</span>, "", "", <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">' folders are being downloaded is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' If the download is still in progress, then wait until it's finished,</span>
            		<span style="color: green;">' and get the delimiter.</span>
            		<span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.EndDownloadFolders()
            
            		<span style="color: blue;">If</span> folders.Count = 0 <span style="color: blue;">Then</span>
            			Console.WriteLine("Bad IMAP4 server.")
            		<span style="color: blue;">Else</span>
            			<span style="color: blue;">Dim</span> delim <span style="color: blue;">As</span> <span style="color: blue;">String</span> = folders(0).Delimiter
            
            			<span style="color: blue;">If</span> delim <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				Console.WriteLine("Folder names are flat. Hierarchy is not supported.")
            			<span style="color: blue;">Else</span>
            				<span style="color: green;">' Initiate an asynchronous download folder list attempt.</span>
            				<span style="color: green;">' Here, we request to download all 1st level subfolders of the account.</span>
            				ar = imp.BeginDownloadFolders(<span style="color: blue;">False</span>, "", "%" &amp; delim &amp; "%", <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            				<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            				<span style="color: green;">' folders are being downloaded is executed on another thread.</span>
            				System.Threading.Thread.Sleep(3000)
            
            				<span style="color: green;">' If the download is still in progress, then wait until it's finished,</span>
            				<span style="color: green;">' and get the folders.</span>
            				folders = imp.EndDownloadFolders()
            
            				<span style="color: green;">' Print folder names matching the specified criteria.</span>
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> fold <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            					Console.WriteLine(fold.Name)
            				<span style="color: blue;">Next</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndDownloadFolders">
            <summary>
            Ends the pending asynchronous download folders request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDownloadFolders(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns>On success, a <see cref="T:MailBee.ImapMail.FolderCollection"/> object representing
            the downloaded folders; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)">
            <summary>
            Searches the currently selected folder for messages that meet the specified criteria.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="returnUids">If <b>true</b>, search results will be returned as <see cref="T:MailBee.ImapMail.UidCollection"/>; otherwise, as
            <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>.</param>
            <param name="searchCondition">Search expression in IMAP4 language, or a null reference (<b>Nothing</b> in Visual Basic) to make
            the method return all messages in the folder.</param>
            <param name="charset">Charset used in <paramref name="searchCondition"/>, or a null reference to use US-ASCII setting.</param>
            <returns><see cref="T:MailBee.ImapMail.UidCollection"/> or <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> object if the command succeeded; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>
            The developer must type-cast returned value to <see cref="T:MailBee.ImapMail.UidCollection"/> type (if <paramref name="returnUids"/> was <b>true</b>)
            or to <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> (if <paramref name="returnUids"/> was <b>false</b>).
            </para>
            <para>
            If <paramref name="searchCondition"/> is specified, it must strictly match search expression rules defined by the IMAP4 protocol (RFC3501).
            MailBee simply passes this value to the server without alteration.
            </para>
            <para>
            When multiple keys are specified, the result is the intersection (AND function) of all the messages that match those keys. For example,
            the criteria <i>DELETED FROM "SMITH" SINCE 1-Feb-1994</i> refers to all deleted messages from Smith that were placed in the folder
            since February 1, 1994.  A search key can also be a parenthesized list of one or more search keys (e.g., for use with the OR and NOT keys).
            </para>
            <para>
            The entire list of the currently defined IMAP4 search keys:
            <list type="table">
            <listheader><term>Key</term><term>Meaning</term></listheader>
            <item><description>&lt;sequence set&gt;</description><description>Messages with message sequence numbers
            corresponding to the specified message sequence number set. Examples: "1", "589, 1067", "1:*", "5,7,10:25,37:*", "3:4".
            Multiple values are delimited with commas (,). Colon (:) is used to specify a range. For instance, "1:10" designates message indices in the range from 1 to 10.
            "*" is a wildcard. When used in a range, sets higher boundary of the range to the index of the last message in the folder.</description></item>
            <item><description>ALL</description><description>All messages in the folder; the default initial key for ANDing.</description></item>
            <item><description>ANSWERED</description><description>Messages with the \Answered flag set.</description></item>
            <item><description>BCC &lt;string&gt;</description><description>Messages that contain the specified string in the envelope structure's BCC field.</description></item>
            <item><description>BEFORE &lt;date&gt;</description><description>Messages whose internal date (disregarding time and timezone) is earlier than the specified date.</description></item>
            <item><description>BODY &lt;string&gt;</description><description>Messages that contain the specified string in the body of the message.</description></item>
            <item><description>CC &lt;string&gt;</description><description>Messages that contain the specified string in the envelope structure's CC field.</description></item>
            <item><description>DELETED</description><description>Messages with the \Deleted flag set.</description></item>
            <item><description>DRAFT</description><description>Messages with the \Draft flag set.</description></item>
            <item><description>FLAGGED</description><description>Messages with the \Flagged flag set.</description></item>
            <item><description>FROM &lt;string&gt;</description><description>Messages that contain the specified string in the envelope structure's FROM field.</description></item>
            <item><description>HEADER &lt;field-name&gt; &lt;string&gt;</description><description>Messages that have a header with the specified field-name (as defined in [RFC-2822]) and that contains the specified string in the text of the header (what comes after the colon).  If the string to search is zero-length, this matches all messages that have a header line with the specified field-name regardless of the contents.</description></item>
            <item><description>KEYWORD &lt;flag&gt;</description><description>Messages with the specified keyword flag set.</description></item>
            <item><description>LARGER &lt;n&gt;</description><description>Messages with an [RFC-2822] size larger than the specified number of octets.</description></item>
            <item><description>NEW</description><description>Messages that have the \Recent flag set but not the \Seen flag. This is functionally equivalent to "(RECENT UNSEEN)".</description></item>
            <item><description>NOT &lt;search-key&gt;</description><description>Messages that do not match the specified search key.</description></item>
            <item><description>OLD</description><description>Messages that do not have the \Recent flag set. This is functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").</description></item>
            <item><description>ON &lt;date&gt;</description><description>Messages whose internal date (disregarding time and timezone) is within the specified date.</description></item>
            <item><description>OR &lt;search-key1&gt; &lt;search-key2&gt;</description><description>Messages that match either search key.</description></item>
            <item><description>RECENT</description><description>Messages that have the \Recent flag set.</description></item>
            <item><description>SEEN</description><description>Messages that have the \Seen flag set.</description></item>
            <item><description>SENTBEFORE &lt;date&gt;</description><description>Messages whose [RFC-2822] Date: header (disregarding time and timezone) is earlier than the specified date.</description></item>
            <item><description>SENTON &lt;date&gt;</description><description>Messages whose [RFC-2822] Date: header (disregarding time and timezone) is within the specified date.</description></item>
            <item><description>SENTSINCE &lt;date&gt;</description><description>Messages whose [RFC-2822] Date: header (disregarding time and timezone) is within or later than the specified date.</description></item>
            <item><description>SINCE &lt;date&gt;</description><description>Messages whose internal date (disregarding time and timezone) is within or later than the specified date.</description></item>
            <item><description>SMALLER &lt;n&gt;</description><description>Messages with an [RFC-2822] size smaller than the specified number of octets.</description></item>
            <item><description>SUBJECT &lt;string&gt;</description><description>Messages that contain the specified string in the envelope structure's SUBJECT field.</description></item>
            <item><description>TEXT &lt;string&gt;</description><description>Messages that contain the specified string in the header or body of the message.</description></item>
            <item><description>TO &lt;string&gt;</description><description>Messages that contain the specified string in the envelope structure's TO field.</description></item>
            <item><description>UID &lt;sequence set&gt;</description><description>Messages with unique identifiers corresponding to the specified unique identifier set. Sequence set ranges are permitted.</description></item>
            <item><description>UNANSWERED</description><description>Messages that do not have the \Answered flag set.</description></item>
            <item><description>UNDELETED</description><description>Messages that do not have the \Deleted flag set.</description></item>
            <item><description>UNDRAFT</description><description>Messages that do not have the \Draft flag set.</description></item>
            <item><description>UNFLAGGED</description><description>Messages that do not have the \Flagged flag set.</description></item>
            <item><description>UNKEYWORD &lt;flag&gt;</description><description>Messages that do not have the specified keyword flag set.</description></item>
            <item><description>UNSEEN</description><description>Messages that do not have the \Seen flag set.</description></item>
            </list>
            &lt;string&gt; means a quoted string (like <i>"Annual report"</i> or <i>"String with quote \" and backslash \\ inside"</i>). Certain
            key arguments specifying numbers (like <i>&lt;n&gt;</i>) must not be quoted.
            <para>Dates must be written in IMAP4 format and enclosed with quotes. Example: <i>"06-Apr-2006"</i>.
            See the sample code in <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> topic on how to perform search by date.</para>
            Angle brackets (i.e. <i>&lt;&gt;</i> in <i>&lt;string&gt;</i>) only indicate placeholder for
            actual value, they are not actually a part of the key. For instance, <i>TO &lt;string&gt;</i> means the actual key will look like <i>TO "jdoe@domain.com"</i>.
            </para>
            <note>Although searching is case-insensitive, some server implementations cannot perform search of strings containing
            international characters in case-insensitive manner even if the correct <paramref name="charset"/> value is specified.
            Also, most IMAP server implementations cannot find searched string when it appears in the message in encoded form
            (such as Base64, quoted-printable, etc). Due to this, text search via IMAP4 is not as reliable as downloading entire messages
            and performing search over local copies.</note>
            </remarks>
            <example>
            This sample highlights common practices of IMAP4 search. You can also find
            additional examples in <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> and <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> topics.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("imap.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: green;">// Select Inbox folder.</span>
            		imp.SelectFolder("INBOX");
            
            		UidCollection uids = <span style="color: blue;">null</span>;
            		MessageNumberCollection msgNums = <span style="color: blue;">null</span>;
            		<span style="color: blue;">string</span> input = <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// Determine charset to use. This will let us perform search of</span>
            		<span style="color: green;">// messages written in the charset of the current computer.</span>
            		<span style="color: blue;">string</span> localComputerCharset = System.Text.Encoding.Default.WebName;
            
            		<span style="color: green;">// -----------------------------------------------------------------</span>
            		<span style="color: green;">// Section 1: Search in Subject field.</span>
            		<span style="color: green;">// Demonstrates text search and usage of charsets (for international</span>
            		<span style="color: green;">// applications) and quoted strings (for searching arbitrary text,</span>
            		<span style="color: green;">// including spaces, quotes, and other special characters).</span>
            		<span style="color: green;">// -----------------------------------------------------------------</span>
            
            		Console.WriteLine("Input string to be searched in Subject field:");
            		input = Console.ReadLine();
            
            		<span style="color: green;">// 1.1: US-ASCII search (case-insensitive).</span>
            
            		<span style="color: green;">// 1.1.1: Search for UIDs.</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>,
            			"SUBJECT " + ImapUtils.ToQuotedString(input), <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine("UIDs of found messages (US-ASCII mode):");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// 1.1.2: Search for ordinal message numbers. This demonstrates</span>
            		<span style="color: green;">// how to get search results as message numbers rather UIDs.</span>
            		msgNums = (MessageNumberCollection)imp.Search(<span style="color: blue;">false</span>,
            			"SUBJECT " + ImapUtils.ToQuotedString(input), <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine("Message numbers of found messages (US-ASCII mode):");
            		Console.WriteLine(msgNums.ToString());
            
            		<span style="color: green;">// 1.2: Search with support of international characters of the current</span>
            		<span style="color: green;">// computer's charset. US-ASCII characters will be searched in case-insensitive</span>
            		<span style="color: green;">// manner but there is no such guarantee for non-US-ASCII characters.</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>,
            			"SUBJECT " + ImapUtils.ToQuotedString(input),
            			localComputerCharset);
            
            		Console.WriteLine();
            		Console.WriteLine("UIDs of found messages (" + localComputerCharset + " mode):");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// 1.3: Search with support of UTF-8. This will let us perform search of messages</span>
            		<span style="color: green;">// written in UTF-8 (provided that UTF-8 data in messages are not encoded in</span>
            		<span style="color: green;">// Base64, quoted-printable, etc).</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>,
            			"SUBJECT " + ImapUtils.ToQuotedString(input),
            			System.Text.Encoding.UTF8.WebName);
            
            		Console.WriteLine();
            		Console.WriteLine("UIDs of found messages (UTF-8 mode):");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// -----------------------------------------------------------------</span>
            		<span style="color: green;">// Section 2: Search of messages with specific flags set.</span>
            		<span style="color: green;">// Also demonstrates how to specify OR and AND conditions.</span>
            		<span style="color: green;">// -----------------------------------------------------------------</span>
            
            		<span style="color: green;">// 2.1: Search for messages having \Deleted flag set.</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "DELETED", <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine(@"UIDs of \Deleted messages:");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// 2.2: Search for messages having \Deleted or \Seen flags set.</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "OR DELETED SEEN", <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine(@"UIDs of \Deleted or \Seen messages:");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// 2.3: Search for messages having \Deleted or \Seen or \Answered flags set.</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "OR (OR DELETED SEEN) ANSWERED", <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine(@"UIDs of \Deleted or \Seen or \Answered messages:");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// 2.4: Search for messages having \Deleted or (\Seen and \Answered) flags set.</span>
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "OR DELETED (SEEN ANSWERED)", <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine(@"UIDs of \Deleted or (\Seen and \Answered) messages:");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// ------------------------------------------------------------------</span>
            		<span style="color: green;">// Section 3: Search of messages meeting complex criteria.</span>
            		<span style="color: green;">// The criteria set (in C# syntax):</span>
            		<span style="color: green;">// (size &gt; 10000 || Flagged || !Spam) &amp;&amp; BodyContains(string).</span>
            		<span style="color: green;">// I.e. the message is larger than 10000 bytes or flagged or not spam</span>
            		<span style="color: green;">// (there is no standard \Spam attribute so custom $Spam attribute</span>
            		<span style="color: green;">// is used) and, besides that, the message must contain the specified</span>
            		<span style="color: green;">// string (taken from user input) in the body.</span>
            		<span style="color: green;">// ------------------------------------------------------------------</span>
            
            		uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>,
            			"OR (OR LARGER 10000 FLAGGED) UNKEYWORD " + ImapUtils.ToQuotedString("$Spam") +
            			" BODY " + ImapUtils.ToQuotedString(input), <span style="color: blue;">null</span>);
            
            		Console.WriteLine();
            		Console.WriteLine("UIDs of messages meeting complex criteria:");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select Inbox folder.</span>
            		imp.SelectFolder("INBOX")
            
            		<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> UidCollection = <span style="color: blue;">Nothing</span>
            		<span style="color: blue;">Dim</span> msgNums <span style="color: blue;">As</span> MessageNumberCollection = <span style="color: blue;">Nothing</span>
            		<span style="color: blue;">Dim</span> input <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">Nothing</span>
            
            		<span style="color: green;">' Determine charset to use. This will let us perform search of</span>
            		<span style="color: green;">' messages written in the charset of the current computer.</span>
            		<span style="color: blue;">Dim</span> localComputerCharset <span style="color: blue;">As</span> <span style="color: blue;">String</span> = System.Text.Encoding.Default.WebName
            
            		<span style="color: green;">' -----------------------------------------------------------------</span>
            		<span style="color: green;">' Section 1: Search in Subject field.</span>
            		<span style="color: green;">' Demonstrates text search and usage of charsets (for international</span>
            		<span style="color: green;">' applications) and quoted strings (for searching arbitrary text,</span>
            		<span style="color: green;">' including spaces, quotes, and other special characters).</span>
            		<span style="color: green;">' -----------------------------------------------------------------</span>
            
            		Console.WriteLine("Input string to be searched in Subject field:")
            		input = Console.ReadLine()
            
            		<span style="color: green;">' 1.1: US-ASCII search (case-insensitive).</span>
            		<span style="color: green;">' 1.1.1: Search for UIDs.</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "SUBJECT " &amp; ImapUtils.ToQuotedString(input), _
            			<span style="color: blue;">Nothing</span>), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of found messages (US-ASCII mode):")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' 1.1.2: Search for ordinal message numbers. This demonstrates</span>
            		<span style="color: green;">' how to get search results as message numbers rather UIDs.</span>
            		msgNums = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">False</span>, "SUBJECT " &amp; ImapUtils.ToQuotedString(input), _
            			<span style="color: blue;">Nothing</span>), MessageNumberCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("Message numbers of found messages (US-ASCII mode):")
            		Console.WriteLine(msgNums.ToString())
            
            		<span style="color: green;">' 1.2: Search with support of international characters of the current</span>
            		<span style="color: green;">' computer's charset. US-ASCII characters will be searched in case-insensitive</span>
            		<span style="color: green;">' manner but there is no such guarantee for non-US-ASCII characters.</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "SUBJECT " &amp; ImapUtils.ToQuotedString(input), _
            			localComputerCharset), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of found messages (" &amp; localComputerCharset &amp; " mode):")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' 1.3: Search with support of UTF-8. This will let us perform search of messages</span>
            		<span style="color: green;">' written in UTF-8 (provided that UTF-8 data in messages are not encoded in</span>
            		<span style="color: green;">' Base64, quoted-printable, etc).</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "SUBJECT " &amp; ImapUtils.ToQuotedString(input), _
            			System.Text.Encoding.UTF8.WebName), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of found messages (UTF-8 mode):")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' -----------------------------------------------------------------</span>
            		<span style="color: green;">' Section 2: Search of messages with specific flags set.</span>
            		<span style="color: green;">' Also demonstrates how to specify OR and AND conditions.</span>
            		<span style="color: green;">' -----------------------------------------------------------------</span>
            
            		<span style="color: green;">' 2.1: Search for messages having \Deleted flag set.</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "DELETED", <span style="color: blue;">Nothing</span>), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of \Deleted messages:")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' 2.2: Search for messages having \Deleted or \Seen flags set.</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "OR DELETED SEEN", <span style="color: blue;">Nothing</span>), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of \Deleted or \Seen messages:")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' 2.3: Search for messages having \Deleted or \Seen or \Answered flags set.</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "OR (OR DELETED SEEN) ANSWERED", <span style="color: blue;">Nothing</span>), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of \Deleted or \Seen or \Answered messages:")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' 2.4: Search for messages having \Deleted or (\Seen and \Answered) flags set.</span>
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "OR DELETED (SEEN ANSWERED)", <span style="color: blue;">Nothing</span>), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of \Deleted or (\Seen and \Answered) messages:")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' ------------------------------------------------------------------</span>
            		<span style="color: green;">' Section 3: Search of messages meeting complex criteria.</span>
            		<span style="color: green;">' The criteria set (in Visual Baisc syntax):</span>
            		<span style="color: green;">' (size &gt; 10000 OrElse Flagged OrElse Not Spam) AndAlso BodyContains(string).</span>
            		<span style="color: green;">' I.e. the message is larger than 10000 bytes or flagged or not spam</span>
            		<span style="color: green;">' (there is no standard \Spam attribute so custom $Spam attribute</span>
            		<span style="color: green;">' is used) and, besides that, the message must contain the specified</span>
            		<span style="color: green;">' string (taken from user input) in the body.</span>
            		<span style="color: green;">' ------------------------------------------------------------------</span>
            
            		uids = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "OR (OR LARGER 10000 FLAGGED) UNKEYWORD " &amp; _
            			ImapUtils.ToQuotedString("$Spam") &amp; " BODY " &amp; _
            			ImapUtils.ToQuotedString(input), <span style="color: blue;">Nothing</span>), UidCollection)
            
            		Console.WriteLine()
            		Console.WriteLine("UIDs of messages meeting complex criteria:")
            		Console.WriteLine(uids.ToString())
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Search">
            <summary>
            Returns the collection of UIDs of all messages in the currently selected folder.
            <seealso cref="T:MailBee.ImapMail.UidCollection"/>
            </summary>
            <returns><see cref="T:MailBee.ImapMail.UidCollection"/> object if the command succeeded; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            This method can be used to enumerate UID values of all messages in the folder.
            </remarks>
            <example>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("mail.host.com");
            
            		imp.Login("jdoe@host.com", "secret");
            
            		<span style="color: green;">// Select Inbox folder.</span>
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Enumerate UIDs into uids variable.</span>
            		UidCollection uids = imp.Search();
            
            		<span style="color: green;">// Print UID list as a message set (this message set can then be</span>
            		<span style="color: green;">// supplied as messageIndexSet argument of Imap object methods).</span>
            		Console.WriteLine("uids as message set (i.e. message sequence):");
            		Console.WriteLine(uids.ToString());
            
            		<span style="color: green;">// Print each UID value individually.</span>
            		Console.WriteLine();
            		Console.WriteLine("uids as a list of UIDs:");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">long</span> uid <span style="color: blue;">in</span> uids)
            		{
            			Console.WriteLine(uid);
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Connect("imap4.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Select Inbox folder.</span>
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Enumerate UIDs into uids variable.</span>
            		<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> UidCollection = imp.Search()
            
            		<span style="color: green;">' Print UID list as a message set (this message set can then be</span>
            		<span style="color: green;">' supplied as messageIndexSet argument of Imap object methods).</span>
            		Console.WriteLine("uids as message set (i.e. message sequence):")
            		Console.WriteLine(uids.ToString())
            
            		<span style="color: green;">' Print each UID value individually.</span>
            		Console.WriteLine()
            		Console.WriteLine("uids as a list of UIDs:")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> uid <span style="color: blue;">As</span> <span style="color: blue;">Long</span> <span style="color: blue;">In</span> uids
            			Console.WriteLine(uid)
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>		
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for searching the currently selected folder for messages meeting the specified criteria.
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            </summary>
            <param name="returnUids">If <b>true</b>, search results will be returned as <see cref="T:MailBee.ImapMail.UidCollection"/>; otherwise, as
            <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>.</param>
            <param name="searchCondition">Search expression in IMAP4 language, or a null reference (<b>Nothing</b> in Visual Basic) to make
            the method return all messages in the folder.</param>
            <param name="charset">Charset used in <paramref name="searchCondition"/>, or a null reference to use US-ASCII setting.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous search process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>.</remarks>
            <example>This WinForms sample demonstrates asynchronous search of messages arrived into the Inbox folder since yesterday.
            Also, it demonstrates how to handle exceptions and update the application user interface (UI) when using callback functions
            (which are not directly allowed to update UI due to threading limitations).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// Declaration of delegate which will update UI.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">delegate</span> <span style="color: blue;">void</span> UpdateUIDelegate(Imap imp);
            
            <span style="color: green;">// This method will be called as a delegate by Form.Invoke.</span>
            <span style="color: green;">// Since Form.Invoke always executes delegates on UI thread,</span>
            <span style="color: green;">// it's safe to update UI in this method (for instance, change</span>
            <span style="color: green;">// text in Label or Button controls, disable/enable/add/remove</span>
            <span style="color: green;">// controls, or do whatever you need to).</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> UpdateUI(Imap imp)
            {
            	<span style="color: green;">// It's important to use exception handling here because otherwise</span>
            	<span style="color: green;">// we could never know if exception was thrown. This is because this</span>
            	<span style="color: green;">// method is called by SearchCallback which is executed on the worker</span>
            	<span style="color: green;">// thread. If exception is thrown in UpdateUI method, Form.Invoke then</span>
            	<span style="color: green;">// propagates it to SearchCallback by throwing TargetInvocationException</span>
            	<span style="color: green;">// in SearchCallback. Now, because SearchCallback is executed on the worker</span>
            	<span style="color: green;">// thread, this thread is terminated but no exception is thrown on the UI</span>
            	<span style="color: green;">// thread. The worker thread just silently dies. Due to this, the developer</span>
            	<span style="color: green;">// should carefully guard all code blocks in callback functions and any</span>
            	<span style="color: green;">// methods called by these functions.</span>
            	<span style="color: green;">// In this sample, we catch MailBeeException directly in UpdateUI. However,</span>
            	<span style="color: green;">// we could also catch TargetInvocationException when calling Invoke in</span>
            	<span style="color: green;">// SearchCallback and display .InnerException. The result would be the same</span>
            	<span style="color: green;">// (because this sample can throw only MailBeeException in UpdateUI).</span>
            	<span style="color: green;">// If UpdateUI method could also throw exceptions of other types, catching</span>
            	<span style="color: green;">// TargetInvocationException when calling Invoke would also handle them all.</span>
            	<span style="color: green;">// Thus, we need to either catch all exceptions inside the code of the method</span>
            	<span style="color: green;">// being called by Form.Invoke or catch TargetInvocationException when calling</span>
            	<span style="color: green;">// Form.Invoke itself.</span>
            	<span style="color: blue;">try</span>
            	{
            		<span style="color: green;">// Obtain ordinal message numbers of found messages and display them.</span>
            		MessageNumberCollection msgNums = (MessageNumberCollection)imp.EndSearch();
            		MessageBox.Show(msgNums.ToString());
            	}
            	<span style="color: blue;">catch</span> (MailBeeException e)
            	{
            		MessageBox.Show(e.Message);
            	}
            
            	<span style="color: green;">// Update form's caption area to demonstrate</span>
            	<span style="color: green;">// that it's safe to update UI in this method.</span>
            	<span style="color: blue;">this</span>.Text = "Search finished";
            }
            
            <span style="color: green;">// A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">// it cannot update controls on the form or otherwise access UI.</span>
            <span style="color: green;">// The only UI-related action permitted in worker thread is</span>
            <span style="color: green;">// displaying a message box (MessageBox.Show).</span>
            <span style="color: green;">// Any updates of UI must take place on message loop thread.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> SearchCallback(IAsyncResult result)
            {
            	Imap imp = (Imap)result.AsyncState;
            
            	<span style="color: green;">// To end search and display results on UI thread, we use</span>
            	<span style="color: green;">// Form.Invoke passing Imap instance as a parameter.</span>
            	Invoke(<span style="color: blue;">new</span> UpdateUIDelegate(UpdateUI), <span style="color: blue;">new</span> <span style="color: blue;">object</span>[] {imp});
            
            	<span style="color: green;">// See comment in UpdateUI.</span>
            	<span style="color: blue;">try</span>
            	{
            		imp.Disconnect();
            	}
            	<span style="color: blue;">catch</span> (MailBeeException e)
            	{
            		MessageBox.Show(e.Message);
            	}
            }
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Imap imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// Connect to the server, login and select inbox.</span>
            	imp.Connect("imap4.mail.server.com");
            	imp.Login("jdoe@server.com", "secret");
            	imp.SelectFolder("Inbox");
            
            	<span style="color: green;">// Start async search of messages received since yesterday.</span>
            	imp.BeginSearch(<span style="color: blue;">false</span>,
            		"SINCE \"" + ImapUtils.GetImapDateString(DateTime.Today.AddDays(-1)) + "\"",
            		<span style="color: blue;">null</span>, <span style="color: blue;">new</span> AsyncCallback(SearchCallback), imp);
            
            	<span style="color: green;">// Note: we do not wait until search is finished here.</span>
            	<span style="color: green;">// Subsequent code calls will be made in SearchCallback.</span>
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' Declaration of delegate which will update UI.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Delegate</span> <span style="color: blue;">Sub</span> UpdateUIDelegate(<span style="color: blue;">ByVal</span> imp <span style="color: blue;">As</span> Imap)
            
            <span style="color: green;">' This method will be called as a delegate by Form.Invoke.</span>
            <span style="color: green;">' Since Form.Invoke always executes delegates on UI thread,</span>
            <span style="color: green;">' it's safe to update UI in this method (for instance, change</span>
            <span style="color: green;">' text in Label or Button controls, disable/enable/add/remove</span>
            <span style="color: green;">' controls, or do whatever you need to).</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> UpdateUI(<span style="color: blue;">ByVal</span> imp <span style="color: blue;">As</span> Imap)
            	<span style="color: green;">' It's important to use exception handling here because otherwise</span>
            	<span style="color: green;">' we could never know if exception was thrown. This is because this</span>
            	<span style="color: green;">' method is called by SearchCallback which is executed on the worker</span>
            	<span style="color: green;">' thread. If exception is thrown in UpdateUI method, Form.Invoke then</span>
            	<span style="color: green;">' propagates it to SearchCallback by throwing TargetInvocationException</span>
            	<span style="color: green;">' in SearchCallback. Now, because SearchCallback is executed on the worker</span>
            	<span style="color: green;">' thread, this thread is terminated but no exception is thrown on the UI</span>
            	<span style="color: green;">' thread. The worker thread just silently dies. Due to this, the developer</span>
            	<span style="color: green;">' should carefully guard all code blocks in callback functions and any</span>
            	<span style="color: green;">' methods called by these functions.</span>
            	<span style="color: green;">' In this sample, we catch MailBeeException directly in UpdateUI. However,</span>
            	<span style="color: green;">' we could also catch TargetInvocationException when calling Invoke in</span>
            	<span style="color: green;">' SearchCallback and display .InnerException. The result would be the same</span>
            	<span style="color: green;">' (because this sample can throw only MailBeeException in UpdateUI).</span>
            	<span style="color: green;">' If UpdateUI method could also throw exceptions of other types, catching</span>
            	<span style="color: green;">' TargetInvocationException when calling Invoke would also handle them all.</span>
            	<span style="color: green;">' Thus, we need to either catch all exceptions inside the code of the method</span>
            	<span style="color: green;">' being called by Form.Invoke or catch TargetInvocationException when calling</span>
            	<span style="color: green;">' Form.Invoke itself.</span>
            	<span style="color: blue;">Try</span>
            		<span style="color: green;">' Obtain ordinal message numbers of found messages and display them.</span>
            		<span style="color: blue;">Dim</span> msgNums <span style="color: blue;">As</span> MessageNumberCollection = <span style="color: blue;">CType</span>(imp.EndSearch(), MessageNumberCollection)
            		MessageBox.Show(msgNums.ToString())
            	<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            		MessageBox.Show(e.Message)
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            	<span style="color: green;">' Update form's caption area to demonstrate</span>
            	<span style="color: green;">' that it's safe to update UI in this method.</span>
            	<span style="color: blue;">Me</span>.Text = "Search finished"
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">' it cannot update controls on the form or otherwise access UI.</span>
            <span style="color: green;">' The only UI-related action permitted in worker thread is</span>
            <span style="color: green;">' displaying a message box (MessageBox.Show).</span>
            <span style="color: green;">' Any updates of UI must take place on message loop thread.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> SearchCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">CType</span>(result.AsyncState, Imap)
            
            	<span style="color: green;">' To end search and display results on UI thread, we use</span>
            	<span style="color: green;">' Form.Invoke passing Imap instance as a parameter.</span>
            	Invoke(<span style="color: blue;">New</span> UpdateUIDelegate(<span style="color: blue;">AddressOf</span> UpdateUI), <span style="color: blue;">New</span> <span style="color: blue;">Object</span>() {imp})
            
            	<span style="color: green;">' See comment in UpdateUI.</span>
            	<span style="color: blue;">Try</span>
            		imp.Disconnect()
            	<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            		MessageBox.Show(e.Message)
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' Connect to the server, login and select inbox.</span>
            	imp.Connect("imap4.mail.server.com")
            	imp.Login("jdoe@server.com", "secret")
            	imp.SelectFolder("Inbox")
            
            	<span style="color: green;">' Start async search of messages received since yesterday.</span>
            	imp.BeginSearch(<span style="color: blue;">False</span>, "SINCE """ &amp; _
            		ImapUtils.GetImapDateString(DateTime.Today.AddDays(-1)) &amp; _
            		"""", <span style="color: blue;">Nothing</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> SearchCallback), imp)
            
            	<span style="color: green;">' Note: we do not wait until search is finished here.</span>
            	<span style="color: green;">' Subsequent code calls will be made in SearchCallback.</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndSearch">
            <summary>
            Ends the pending asynchronous search request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns>On success, a <see cref="T:MailBee.ImapMail.UidCollection"/> or <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> object representing
            the indices (UIDs or ordinal message numbers) of the found messages; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The type of the collection returned (<see cref="T:MailBee.ImapMail.UidCollection"/> or <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>) depends on
            the value of <i>returnUids</i> parameter of <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> method called to initiate the search.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.SortedSearch(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Searches the currently selected folder for messages that meet the specified criteria and returns them as a
            collection sorted by the specified condition.
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSortedSearch(System.Boolean,System.String,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="returnUids">If <b>true</b>, search results will be returned as <see cref="T:MailBee.ImapMail.UidCollection"/>; otherwise, as
            <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>.</param>
            <param name="searchCondition">Search expression in IMAP4 language, or a null reference (<b>Nothing</b> in Visual Basic) to make
            the method return all messages in the folder.</param>
            <param name="charset">Charset used in <paramref name="searchCondition"/>, or a null reference to use US-ASCII setting.</param>
            <param name="orderBy">Sorting order expression in IMAP4 language, or a null reference (<b>Nothing</b> in Visual Basic) to make
            the method downgrade to the regular <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>.</param>
            <returns><see cref="T:MailBee.ImapMail.UidCollection"/> or <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> object if the command succeeded; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            All parameters except <paramref name="orderBy"/> have the same meaning as for <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> method.
            <note>Sorted search capability must be supported by the server ("sort" must be listed in <see cref="M:MailBee.ImapMail.Imap.GetExtensions"/> results).
            See "IMAP SORT" internet draft for more information.</note>
            <para>If <paramref name="orderBy"/> is specified, it must strictly match sort expression rules defined by "IMAP SORT" internet draft. MailBee simply passes this value to the server without alteration.</para>
            <para>Sorting is in ascending order. Earlier dates sort before later dates; smaller sizes sort before larger sizes; and strings are sorted according to ascending values established by their collation algorithm.</para>
            <para>If two or more messages exactly match according to the sorting criteria, these messages are sorted according to the order in which they appear in the mailbox. In other words, there is an implicit sort criterion of "sequence number".</para>
            <para>When multiple sort criteria are specified, the result is sorted in the priority order that the criteria appear. For example, "SUBJECT DATE" will sort messages in order by their base subject text; and for messages with the same base subject text will sort by their sent date.</para>
            <para>If the associated message header for a particular criterion is absent in the message, it is treated as the empty string. The empty string always collates before non-empty strings.</para>
            <para>The defined sort criteria are as follows:</para>
            <list type="table">
            <listheader><term>Key</term><term>Meaning</term></listheader>
            <item><description>ARRIVAL</description><description>Internal date and time of the message. This differs from the ON criteria in SEARCH, which uses just the internal date.</description></item>
            <item><description>CC</description><description>RFC-822 local-part of the first "cc" address.</description></item>
            <item><description>DATE</description><description>Sent date and time from the Date: header, adjusted by timezone. This differs from the SENTON criteria in SEARCH, which uses just the date and not the time, nor adjusts by time zone.</description></item>
            <item><description>FROM</description><description>RFC-822 local-part of the first "From" address.</description></item>
            <item><description>REVERSE</description><description>Followed by another sort criterion, has the effect of that criterion but in reverse (descending) order. Note: REVERSE only reverses a single criterion.</description></item>
            <item><description>SIZE</description><description>Size of the message in bytes.</description></item>
            <item><description>SUBJECT</description><description>Subject text.</description></item>
            <item><description>TO</description><description>RFC-822 local-part of the first "To" address.</description></item>
            </list>
            </remarks>
            <example>This sample performs sorted search in the inbox and downgrades to the regular search if SORT capability is not supported by the server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Set to true if SORT extension is available.</span>
            		<span style="color: blue;">bool</span> sortAvail = (imp.GetExtension("SORT") != <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// If SORT is supported, order messages by FROM field first (primary sort condition)</span>
            		<span style="color: green;">// and then order each group of messages coming from the same FROM by arrival date</span>
            		<span style="color: green;">// in descending order (secondary sort condition). If SORT is not supported, orderBy</span>
            		<span style="color: green;">// criteria will not be set and SortedSearch will downgrade to the regular Search.</span>
            		<span style="color: blue;">string</span> orderByCriteria = sortAvail ? "FROM REVERSE ARRIVAL" : <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// Get UIDs of all messages in the inbox, sorted accordingly orderByCriteria.</span>
            		UidCollection uids = (UidCollection)imp.SortedSearch(<span style="color: blue;">true</span>, "ALL", <span style="color: blue;">null</span>, orderByCriteria);
            
            		Console.WriteLine("SORT capability is " + (!sortAvail ? "NOT " : "") + "available");
            		Console.WriteLine("UIDs found: " + uids.ToString());
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe@company.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Set to true if SORT extension is available.</span>
            		<span style="color: blue;">Dim</span> sortAvail <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = (<span style="color: blue;">Not</span> imp.GetExtension("SORT") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' If SORT is supported, order messages by FROM field first (primary sort condition)</span>
            		<span style="color: green;">' and then order each group of messages coming from the same FROM by arrival date</span>
            		<span style="color: green;">' in descending order (secondary sort condition). If SORT is not supported, orderBy</span>
            		<span style="color: green;">' criteria will not be set and SortedSearch will downgrade to the regular Search.</span>
            		<span style="color: blue;">Dim</span> orderByCriteria <span style="color: blue;">As</span> <span style="color: blue;">String</span> = IIf(sortAvail, "FROM REVERSE ARRIVAL", <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Get UIDs of all messages in the inbox, sorted accordingly orderByCriteria.</span>
            		<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> UidCollection = <span style="color: blue;">CType</span>(imp.SortedSearch(<span style="color: blue;">True</span>, "ALL", <span style="color: blue;">Nothing</span>, orderByCriteria), UidCollection)
            
            		Console.WriteLine("SORT capability is " &amp; IIf(<span style="color: blue;">Not</span> sortAvail, "NOT ", "") &amp; "available")
            		Console.WriteLine("UIDs found: " &amp; uids.ToString())
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginSortedSearch(System.Boolean,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for searching the currently selected folder for messages meeting the specified criteria
            and sorting them accordingly the specified sort condition.
            <seealso cref="M:MailBee.ImapMail.Imap.SortedSearch(System.Boolean,System.String,System.String,System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="returnUids">If <b>true</b>, search results will be returned as <see cref="T:MailBee.ImapMail.UidCollection"/>; otherwise, as
            <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>.</param>
            <param name="searchCondition">Search expression in IMAP4 language, or a null reference (<b>Nothing</b> in Visual Basic) to make
            the method return all messages in the folder.</param>
            <param name="charset">Charset used in <paramref name="searchCondition"/>, or a null reference to use US-ASCII setting.</param>
            <param name="orderBy">Sorting order expression in IMAP4 language, or a null reference (<b>Nothing</b> in Visual Basic) to make
            the method downgrade to the regular <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous search process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.SortedSearch(System.Boolean,System.String,System.String,System.String)"/>.</remarks>
            <example>This console sample demonstrates asynchronous search of messages arrived into the Inbox folder since yesterday
            and sorting them by their Subject line.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// A callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> SortedSearchCallback(IAsyncResult result)
            	{
            		<span style="color: green;">// Extract values from state object.</span>
            		Imap imp = (Imap)((<span style="color: blue;">object</span> [])result.AsyncState)[0];
            		<span style="color: blue;">bool</span> sortAvail = (<span style="color: blue;">bool</span>)((<span style="color: blue;">object</span> [])result.AsyncState)[1];
            
            		<span style="color: green;">// Display the outcome.</span>
            		Console.WriteLine("SORT capability is " + (!sortAvail ? "NOT " : "") + "available");
            		<span style="color: blue;">try</span>
            		{
            			Console.WriteLine("UIDs found: " + ((UidCollection)imp.EndSortedSearch()).ToString());
            		}
            		<span style="color: blue;">catch</span> (Exception e)
            		{
            			<span style="color: green;">// Catching exception here is recommended. Because callback function is a separate</span>
            			<span style="color: green;">// thread, unhandled exception would silently terminate it without any message to</span>
            			<span style="color: green;">// the user (and it would be hard to understand what exactly happened).</span>
            			Console.WriteLine("Exception occurred: " + e.Message);
            			Console.WriteLine(e.StackTrace);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Set to true if SORT extension is available.</span>
            		<span style="color: blue;">bool</span> sortAvail = (imp.GetExtension("SORT") != <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// If SORT is supported, order messages by SUBJECT field. If SORT is not supported,</span>
            		<span style="color: green;">// orderBy criteria will not be set and SortedSearch will downgrade to the regular Search.</span>
            		<span style="color: blue;">string</span> orderByCriteria = sortAvail ? "SUBJECT" : <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// Initiate an asynchronous request for getting UIDs of messages received since yesterday,</span>
            		<span style="color: green;">// sorted accordingly orderByCriteria.</span>
            		IAsyncResult ar = imp.BeginSortedSearch(<span style="color: blue;">true</span>,
            			"SINCE \"" + ImapUtils.GetImapDateString(DateTime.Today.AddDays(-1)) + "\"",
            			<span style="color: blue;">null</span>, orderByCriteria,
            			<span style="color: blue;">new</span> AsyncCallback(SortedSearchCallback), <span style="color: blue;">new</span> <span style="color: blue;">object</span>[] {imp, sortAvail});
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// folder selection is executed on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the folder selection attempt is still in progress,</span>
            		<span style="color: green;">// then wait until it's finished.</span>
            		<span style="color: blue;">while</span> (imp.IsBusy) ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndSortedSearch">
            <summary>
            Ends the pending asynchronous sorted search request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSortedSearch(System.Boolean,System.String,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns>On success, a <see cref="T:MailBee.ImapMail.UidCollection"/> or <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> object representing
            the indices (UIDs or ordinal message numbers) of the found messages in the specified order; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>The type of the collection returned (<see cref="T:MailBee.ImapMail.UidCollection"/> or <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>) depends on
            the value of <i>returnUids</i> parameter of <see cref="M:MailBee.ImapMail.Imap.BeginSortedSearch(System.Boolean,System.String,System.String,System.String,System.AsyncCallback,System.Object)"/> method called to initiate the sorted search.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])">
            <summary>
            Fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[],System.AsyncCallback,System.Object)"/>
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            <seealso cref="T:MailBee.ImapMail.ImapBodyStructure"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="parts">Specifies which message elements or attributes to download.</param>
            <param name="bodyPreviewSize">If <paramref name="parts"/> includes <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> flag, specifies
            the length of the message body section (in bytes) to be downloaded in addition to the message header section; if 0, only the message header
            is downloaded; if -1, the entire message is downloaded.</param>
            <param name="extraHeaders">The array of names of message headers to be downloaded, or a null reference (<b>Nothing</b> in Visual Basic)
            if additional headers are not needed.</param>
            <param name="extraItems">The array of additional FETCH request items to download, or a null reference (<b>Nothing</b> in Visual Basic)
            if additional FETCH items are not needed.</param>
            <returns><see cref="T:MailBee.ImapMail.EnvelopeCollection"/> object if message envelopes were downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Ordinal message numbers and UIDs are one-based (minimum value is 1, not 0). However, the returned <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> is zero-based.
            The developer can use <see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/> or <see cref="P:MailBee.ImapMail.Envelope.Uid"/> properties to obtain ordinal message numbers and UIDs of the downloaded
            envelopes.</para>
            <para>
            To specify multiple message numbers or UIDs in <paramref name="messageIndexSet"/>, delimit them with comma (,) or use ranges (such as "5:10" which means "download messages in the range
            from message #5 to the message #10"). Wildcard character (*), can be used to specify range which spans till the last message in the folder. In particular, "1:*" means "download all messages in the folder".
            "1:*" is also declared as <see cref="F:MailBee.ImapMail.Imap.AllMessages"/> constant.
            </para>
            <para>Examples of valid message sequences: "1", "1:*", "1,2", "1:2", "5:10,12:45,99,101,105,141:*".</para>
            <note>A message sequence string may NOT contain whitespaces. The following is INCORRECT: "1, 2, 5". The correct one is: "1,2,5".</note>
            <para>When using a range of UIDs (<paramref name="indexIsUid"/> is <b>true</b>), it's important to understand the number of returned messages
            may be LESS than the length of the range (or even zero). This is because UIDs are not continuous. For instance, if the folder contains messages
            with UIDs 4, 5, 6, 10, and 22, the "1,2,8:20" sequence of UIDs corresponds to a single message with UID=10.</para>
            <para>
            <paramref name="parts"/> parameters can be used to specify which message elements to download. This allows the developer
            to request only required information from the server and thus reduce network traffic by not downloading unnecessary data.
            </para>
            <note>If certain message element, attribute, or group of elements/attributes is not requested from the server, the developer should not attempt
            to read the corresponding properties of <see cref="T:MailBee.ImapMail.Envelope"/> objects within the returned collection. For instance, if <paramref name="parts"/> didn't contain
            <see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/> (or <see cref="F:MailBee.ImapMail.EnvelopeParts.MailBeeEnvelope"/>, which is a superset of <see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/>),
            <see cref="P:MailBee.ImapMail.Envelope.From"/>, <see cref="P:MailBee.ImapMail.Envelope.To"/>, <see cref="P:MailBee.ImapMail.Envelope.Subject"/>, and some other properties will not return useful information.
            See remarks in <see cref="T:MailBee.ImapMail.EnvelopeParts"/> topic for more information on dependencies
            between downloaded parts of FETCH response and related properties of <see cref="T:MailBee.ImapMail.Envelope"/> object.</note>
            <para>
            <paramref name="bodyPreviewSize"/> parameter makes sense only when <paramref name="parts"/> includes <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> flag.
            When <paramref name="bodyPreviewSize"/> is 0, the component will download only header section of each message (accessible via <see cref="P:MailBee.ImapMail.Envelope.MessagePreview"/> property).
            If <paramref name="bodyPreviewSize"/> is larger than 0, the component will download the header and the specified count of bytes of the body.
            If <paramref name="bodyPreviewSize"/> is -1, the entire message is returned. Methods like <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/> or <see cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/>
            simply call <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> inside and then return <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> values.
            </para>
            <para>
            <paramref name="extraHeaders"/> can be used to request certain additional header fields
            which are not included into ENVELOPE item of FETCH response
            and thus not present in <see cref="T:MailBee.ImapMail.Envelope"/> object properties. Alternatively, the developer may request
            downloading the message header by setting <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> flag in <paramref name="parts"/>.
            Thus, all header fields would be downloaded. However, if the developer wants to reduce traffic and do not download
            entire header sections of messages, <paramref name="extraHeaders"/> should be used to retrieve specific header fields.
            The typical usage of <paramref name="extraHeaders"/> is getting "Importance" or "X-Priority" headers.
            </para>
            <para>
            Values specified in <paramref name="extraItems"/> are passed to the IMAP4 server without alteration. Using <paramref name="extraItems"/>,
            the developer can request any valid FETCH item from the server (for instance, the developer may request downloading the contents of certain attachment
            or text body part of the message via its <see cref="P:MailBee.ImapMail.ImapBodyStructure.PartID"/>). The downloaded items can than
            be obtained via <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)"/> method call.
            </para>
            <para>When using <paramref name="extraItems"/>, it's important to remember that item names in FETCH request
            can be different from their counterparts in the corresponding FETCH response. E.g. if requested item name is "BODY.PEEK[3.HEADER]&lt;0.100&gt;",
            the server will return "BODY[3.HEADER]&lt;0&gt;" name in the response. The developer may refer to the IMAP4
            protocol specification (RFC3501) for more information regarding FETCH requests and responses.</para>
            <note>Due to complexity of IMAP4 responses, some servers may return badly formed FETCH responses under certain circumstances.
            If MailBee detects this, it raises <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event and sets <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> to <b>false</b>.
            Since this is done on per-envelope basis, some <see cref="T:MailBee.ImapMail.Envelope"/> objects in the returned collection may have
            <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> set to <b>false</b> while others - to <b>true</b>. Anyway, the component does not throw exception
            when it encounters invalid envelope. This allows the application to skip invalid response and successfully receive subsequent messages.</note>
            </remarks>
            <example>
            <para>
            This sample downloads "X-Priority" and "X-MS-Mail-Priority" header fields for all messages in Inbox, then finds out which messages have High priority,
            and downloads body structures for these messages. From the body structures, the sample code obtains which messages have attachments. Then, these
            messages are completely downloaded, and all attachments are saved into "C:\Temp" folder.
            </para>
            <para>The sample performs search of high priority messages via downloading headers just to highlight how to download
            custom headers. In real world, it's more effective to use <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> method for this. The sample allows the developer
            to change code path to using <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> via setting <c>searchViaEnvelopes</c> variable value to <b>false</b>.</para>
            <para>The sample also keeps track of invalid IMAP responses in <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event handler.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.Reason <span style="color: blue;">is</span> MailBeeImapInvalidEnvelopeException)
            		{
            			MailBeeImapInvalidEnvelopeException invEnvEx =
            				(MailBeeImapInvalidEnvelopeException)e.Reason;
            
            			Console.WriteLine("Fetched data for message #" +
            				invEnvEx.InvalidEnvelope.MessageNumber +
            				" could not be completed parsed and will be ignored");
            		}
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("imap.somehost.com");
            
            		imp.Login("jdoe@somehost.com", "secret");
            
            		<span style="color: green;">// Select Inbox folder.</span>
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Subscribe to ErrorOccurred event to track invalid envelopes.</span>
            		<span style="color: green;">// We could also subscribe before calling Login or Connect since</span>
            		<span style="color: green;">// we check the type of occurred error in OnErrorOccurred handler.</span>
            		imp.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		EnvelopeCollection envs = <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// We'll collect UID of high priority messages in this collection. </span>
            		UidCollection uids = <span style="color: blue;">new</span> UidCollection();
            
            		<span style="color: green;">// If true, we'll search high priority messages using DownloadEnvelopes().</span>
            		<span style="color: green;">// Otherwise, we'll use Search() method (much more effective). Thus, this</span>
            		<span style="color: green;">// sample highlights both approaches.</span>
            		<span style="color: blue;">bool</span> searchViaEnvelopes = <span style="color: blue;">true</span>;
            
            		<span style="color: green;">// Download "X-Priority" and "X-MS-Mail-Priority" headers for each message.</span>
            		<span style="color: green;">// We could have used Search() instead (just set searchViaEnvelopes=false).</span>
            		<span style="color: green;">// Using Search() would be more effective. Imap.DownloadEnvelopes is used</span>
            		<span style="color: green;">// here only to demonstrate how to get custom header fields from the server.</span>
            		<span style="color: blue;">if</span> (searchViaEnvelopes)
            		{
            			envs = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">false</span>,
            				EnvelopeParts.Uid, 0, <span style="color: blue;">new</span> <span style="color: blue;">string</span>[] {"X-Priority", "X-MS-Mail-Priority"}, <span style="color: blue;">null</span>);
            
            			<span style="color: green;">// For each message, determine if it's high priority.</span>
            			<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            			{
            				<span style="color: blue;">bool</span> highPriority = <span style="color: blue;">false</span>;
            
            				<span style="color: blue;">if</span> (env.IsValid)
            				{
            					<span style="color: blue;">string</span> priority = env.ExtraHeaders["X-Priority"];
            					<span style="color: blue;">if</span> (priority != <span style="color: blue;">null</span> &amp;&amp; priority.Length &gt; 0)
            					{
            						<span style="color: blue;">if</span> (priority[0] == '1' || priority[0] == '2')
            						{
            							<span style="color: green;">// X-Priority is High or Highest</span>
            							highPriority = <span style="color: blue;">true</span>;
            						}
            					}
            					<span style="color: blue;">else</span>
            					{
            						priority = env.ExtraHeaders["X-MS-Mail-Priority"];
            						<span style="color: blue;">if</span> (priority != <span style="color: blue;">null</span> &amp;&amp; <span style="color: blue;">string</span>.Compare(priority, "High", <span style="color: blue;">true</span>) == 0)
            						{
            							<span style="color: green;">// X-MS-Mail-Priority is High</span>
            							highPriority = <span style="color: blue;">true</span>;
            						}
            					}
            				}
            
            				<span style="color: blue;">if</span> (highPriority)
            				{
            					uids.Add(env.Uid);
            				}
            			}
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// To search for High-Priority messages in the most effective way, set</span>
            			<span style="color: green;">// searchViaEnvelopes=false in the beginning of this sample. Search() method</span>
            			<span style="color: green;">// performs the same job as the code block above but produces much less</span>
            			<span style="color: green;">// traffic and consumes less resources.</span>
            			uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>,"OR OR HEADER \"X-Priority\" \"1\" " +
            				"HEADER \"X-Priority\" \"2\" HEADER \"X-MS-Mail-Priority\" \"High\"", <span style="color: blue;">null</span>);
            		}
            
            		<span style="color: blue;">if</span> (uids.Count &gt; 0)
            		{
            			<span style="color: green;">// Download envelope structures of high priority messages.</span>
            			envs = imp.DownloadEnvelopes(uids.ToString(), <span style="color: blue;">true</span>,
            				EnvelopeParts.BodyStructure, 0, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            			<span style="color: green;">// We'll collect UID of high priority messages with attachments in this collection.</span>
            			uids = <span style="color: blue;">new</span> UidCollection();
            
            			<span style="color: green;">// For each message, determine if it has attachments.</span>
            			<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            			{
            				<span style="color: blue;">if</span> (env.IsValid)
            				{
            					ImapBodyStructureCollection parts = env.BodyStructure.GetAllParts();
            					<span style="color: blue;">foreach</span> (ImapBodyStructure part <span style="color: blue;">in</span> parts)
            					{
            						<span style="color: green;">// Detect if this part is attachment.</span>
            						<span style="color: blue;">if</span> ((part.Disposition != <span style="color: blue;">null</span> &amp;&amp;
            							part.Disposition.ToLower() == "attachment") ||
            							(part.Filename != <span style="color: blue;">null</span> &amp;&amp;
            							part.Filename != <span style="color: blue;">string</span>.Empty) ||
            							(part.ContentType != <span style="color: blue;">null</span> &amp;&amp;
            							part.ContentType.ToLower() == "message/rfc822"))
            						{
            							uids.Add(env.Uid);
            							<span style="color: blue;">break</span>;
            						}
            					}
            				}
            			}
            
            			<span style="color: blue;">if</span> (uids.Count &gt; 0)
            			{
            				<span style="color: green;">// We could also call DownloadEntireMessages here. Internally,</span>
            				<span style="color: green;">// DownloadEntireMessages would call DownloadEnvelopes with the same</span>
            				<span style="color: green;">// parameters and returned MailMessageCollection where each MailMessage</span>
            				<span style="color: green;">// would be taken from Envelope.MessagePreview.</span>
            				envs = imp.DownloadEnvelopes(uids.ToString(), <span style="color: blue;">true</span>,
            					EnvelopeParts.MessagePreview, -1, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            				<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            				{
            					<span style="color: blue;">if</span> (env.IsValid)
            					{
            						<span style="color: green;">// Save all attachments. Note: if the folder already contains</span>
            						<span style="color: green;">// attachment with the given name, MailBee will generate unique name</span>
            						<span style="color: green;">// (e.g. pic.gif will be saved as pic[1].gif if pic.gif already exists</span>
            						<span style="color: green;">// in the target folder.</span>
            						env.MessagePreview.Attachments.SaveAll(@"C:\Temp");
            					}
            				}
            			}
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: blue;">If</span> (e.Reason <span style="color: blue;">Is</span> <span style="color: blue;">GetType</span>(MailBeeImapInvalidEnvelopeException)) <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> invEnvEx <span style="color: blue;">As</span> MailBeeImapInvalidEnvelopeException = _
            				<span style="color: blue;">CType</span>(e.Reason, MailBeeImapInvalidEnvelopeException)
            
            			Console.WriteLine("Fetched data for message #" &amp; invEnvEx.InvalidEnvelope.MessageNumber &amp; _
            				 " could not be completed parsed and will be ignored")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Connect("imap.somehost.com")
            
            		imp.Login("jdoe@somehost.com", "secret")
            
            		<span style="color: green;">' Select Inbox folder.</span>
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Subscribe to ErrorOccurred event to track invalid envelopes.</span>
            		<span style="color: green;">' We could also subscribe before calling Login or Connect since</span>
            		<span style="color: green;">' we check the type of occurred error in OnErrorOccurred handler.</span>
            		<span style="color: blue;">AddHandler</span> imp.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = <span style="color: blue;">Nothing</span>
            
            		<span style="color: green;">' We'll collect UID of high priority messages in this collection. </span>
            		<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> <span style="color: blue;">New</span> UidCollection
            
            		<span style="color: green;">' If true, we'll search high priority messages using DownloadEnvelopes().</span>
            		<span style="color: green;">' Otherwise, we'll use Search() method (much more effective). Thus, this</span>
            		<span style="color: green;">' sample highlights both approaches.</span>
            		<span style="color: blue;">Dim</span> searchViaEnvelopes <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">True</span>
            
            		<span style="color: green;">' Download "X-Priority" and "X-MS-Mail-Priority" headers for each message.</span>
            		<span style="color: green;">' We could have used Search() instead (just set searchViaEnvelopes=false).</span>
            		<span style="color: green;">' Using Search() would be more effective. Imap.DownloadEnvelopes is used</span>
            		<span style="color: green;">' here only to demonstrate how to get custom header fields from the server.</span>
            		<span style="color: blue;">If</span> searchViaEnvelopes <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> arr <span style="color: blue;">As</span> <span style="color: blue;">String</span>() = {"X-Priority", "X-MS-Mail-Priority"}
            			envs = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">False</span>, EnvelopeParts.Uid, 0, arr, <span style="color: blue;">Nothing</span>)
            
            			<span style="color: green;">' For each message, determine if it's high priority.</span>
            			<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            				<span style="color: blue;">Dim</span> highPriority <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            				<span style="color: blue;">If</span> env.IsValid <span style="color: blue;">Then</span>
            					<span style="color: blue;">Dim</span> priority <span style="color: blue;">As</span> <span style="color: blue;">String</span> = env.ExtraHeaders("X-Priority")
            					<span style="color: blue;">If</span> <span style="color: blue;">Not</span> priority <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> priority.Length &gt; 0 <span style="color: blue;">Then</span>
            						<span style="color: blue;">If</span> Left(priority, 1) = "1" <span style="color: blue;">OrElse</span> Left(priority, 1) = "2" <span style="color: blue;">Then</span>
            							<span style="color: green;">' X-Priority is High or Highest</span>
            							highPriority = <span style="color: blue;">True</span>
            						<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            					<span style="color: blue;">Else</span>
            						priority = env.ExtraHeaders("X-MS-Mail-Priority")
            						<span style="color: blue;">If</span> <span style="color: blue;">Not</span> priority <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> <span style="color: blue;">String</span>.Compare(priority, "High", <span style="color: blue;">True</span>) = 0 <span style="color: blue;">Then</span>
            							<span style="color: green;">' X-MS-Mail-Priority is High</span>
            							highPriority = <span style="color: blue;">True</span>
            						<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: blue;">If</span> highPriority <span style="color: blue;">Then</span>
            					uids.Add(env.Uid)
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">Next</span>
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' To search for High-Priority messages in the most effective way, set</span>
            			<span style="color: green;">' searchViaEnvelopes=false in the beginning of this sample. Search() method</span>
            			<span style="color: green;">' performs the same job as the code block above but produces much less</span>
            			<span style="color: green;">' traffic and consumes less resources.</span>
            			uids = imp.Search(<span style="color: blue;">True</span>, "OR OR HEADER ""X-Priority"" ""1"" " &amp; _
            				"HEADER ""X-Priority"" ""2"" HEADER ""X-MS-Mail-Priority"" ""High""", <span style="color: blue;">Nothing</span>)
            
            			<span style="color: blue;">If</span> uids.Count &gt; 0 <span style="color: blue;">Then</span>
            				<span style="color: green;">' Download envelope structures of high priority messages.</span>
            				envs = imp.DownloadEnvelopes(uids.ToString(), <span style="color: blue;">True</span>, EnvelopeParts.BodyStructure, _
            					0, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            				<span style="color: green;">' We'll collect UID of high priority messages with attachments in this collection.</span>
            				uids = <span style="color: blue;">New</span> UidCollection
            
            				<span style="color: green;">' For each message, determine if it has attachments.</span>
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            					<span style="color: blue;">If</span> env.IsValid <span style="color: blue;">Then</span>
            						<span style="color: blue;">Dim</span> parts <span style="color: blue;">As</span> ImapBodyStructureCollection = env.BodyStructure.GetAllParts()
            						<span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> ImapBodyStructure <span style="color: blue;">In</span> parts
            							<span style="color: green;">' Detect if this part is attachment.</span>
            							<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> part.Disposition <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> _
            								part.Disposition.ToLower() = "attachment") <span style="color: blue;">OrElse</span> _
            								(<span style="color: blue;">Not</span> part.Filename <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> _
            								part.Filename &lt;&gt; <span style="color: blue;">String</span>.Empty) <span style="color: blue;">OrElse</span> _
            								(<span style="color: blue;">Not</span> part.ContentType <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> _
            								part.ContentType.ToLower() = "message/rfc822") <span style="color: blue;">Then</span>
            
            								uids.Add(env.Uid)
            								<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            							<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            						<span style="color: blue;">Next</span>
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">Next</span>
            
            				<span style="color: blue;">If</span> uids.Count &gt; 0 <span style="color: blue;">Then</span>
            					<span style="color: green;">' We could also call DownloadEntireMessages here. Internally,</span>
            					<span style="color: green;">' DownloadEntireMessages would call DownloadEnvelopes with the same</span>
            					<span style="color: green;">' parameters and returned MailMessageCollection where each MailMessage</span>
            					<span style="color: green;">' would be taken from Envelope.MessagePreview.</span>
            					envs = imp.DownloadEnvelopes(uids.ToString(), <span style="color: blue;">True</span>, EnvelopeParts.MessagePreview, _
            							-1, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            					<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            						<span style="color: blue;">If</span> env.IsValid <span style="color: blue;">Then</span>
            							<span style="color: green;">' Save all attachments. Note: if the folder already contains</span>
            							<span style="color: green;">' attachment with the given name, MailBee will generate unique name</span>
            							<span style="color: green;">' (e.g. pic.gif will be saved as pic[1].gif if pic.gif already exists</span>
            							<span style="color: green;">' in the target folder.</span>
            							env.MessagePreview.Attachments.SaveAll("C:\Temp")
            						<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            					<span style="color: blue;">Next</span>
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32)">
            <summary>
            Fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            <seealso cref="T:MailBee.ImapMail.ImapBodyStructure"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="parts">Specifies which message elements or attributes to download.</param>
            <param name="bodyPreviewSize">If <paramref name="parts"/> includes <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> flag, specifies
            the length of the message body section (in bytes) to be downloaded in addition to the message header section; if 0, only the message header
            is downloaded; if -1, the entire message is downloaded.</param>
            <returns><see cref="T:MailBee.ImapMail.EnvelopeCollection"/> object if message envelopes were downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Ordinal message numbers and UIDs are one-based (minimum value is 1, not 0). However, the returned <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> is zero-based.
            The developer can use <see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/> or <see cref="P:MailBee.ImapMail.Envelope.Uid"/> properties to obtain ordinal message numbers and UIDs of the downloaded
            envelopes.</para>
            <para>
            To specify multiple message numbers or UIDs in <paramref name="messageIndexSet"/>, delimit them with comma (,) or use ranges (such as "5:10" which means "download messages in the range
            from message #5 to the message #10"). Wildcard character (*), can be used to specify range which spans till the last message in the folder. In particular, "1:*" means "download all messages in the folder".
            "1:*" is also declared as <see cref="F:MailBee.ImapMail.Imap.AllMessages"/> constant.
            </para>
            <para>Examples of valid message sequences: "1", "1:*", "1,2", "1:2", "5:10,12:45,99,101,105,141:*".</para>
            <note>A message sequence string may NOT contain whitespaces. The following is INCORRECT: "1, 2, 5". The correct one is: "1,2,5".</note>
            <para>When using a range of UIDs (<paramref name="indexIsUid"/> is <b>true</b>), it's important to understand the number of returned messages
            may be LESS than the length of the range (or even zero). This is because UIDs are not continuous. For instance, if the folder contains messages
            with UIDs 4, 5, 6, 10, and 22, the "1,2,8:20" sequence of UIDs corresponds to a single message with UID=10.</para>
            <para>
            <paramref name="parts"/> parameters can be used to specify which message elements to download. This allows the developer
            to request only required information from the server and thus reduce network traffic by not downloading unnecessary data.
            </para>
            <note>If certain message element, attribute, or group of elements/attributes is not requested from the server, the developer should not attempt
            to read the corresponding properties of <see cref="T:MailBee.ImapMail.Envelope"/> objects within the returned collection. For instance, if <paramref name="parts"/> didn't contain
            <see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/> (or <see cref="F:MailBee.ImapMail.EnvelopeParts.MailBeeEnvelope"/>, which is a superset of <see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/>),
            <see cref="P:MailBee.ImapMail.Envelope.From"/>, <see cref="P:MailBee.ImapMail.Envelope.To"/>, <see cref="P:MailBee.ImapMail.Envelope.Subject"/>, and some other properties will not return useful information.
            See remarks in <see cref="T:MailBee.ImapMail.EnvelopeParts"/> topic for more information on dependencies
            between downloaded parts of FETCH response and related properties of <see cref="T:MailBee.ImapMail.Envelope"/> object.</note>
            <para>
            <paramref name="bodyPreviewSize"/> parameter makes sense only when <paramref name="parts"/> includes <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> flag.
            When <paramref name="bodyPreviewSize"/> is 0, the component will download only header section of each message (accessible via <see cref="P:MailBee.ImapMail.Envelope.MessagePreview"/> property).
            If <paramref name="bodyPreviewSize"/> is larger than 0, the component will download the header and the specified count of bytes of the body.
            If <paramref name="bodyPreviewSize"/> is -1, the entire message is returned. Methods like <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/> or <see cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/>
            simply call <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> inside and then return <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> values.
            </para>
            <note>Due to complexity of IMAP4 responses, some servers may return badly formed FETCH responses under certain circumstances.
            If MailBee detects this, it raises <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event and sets <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> to <b>false</b>.
            Since this is done on per-envelope basis, some <see cref="T:MailBee.ImapMail.Envelope"/> objects in the returned collection may have
            <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> set to <b>false</b> while others - to <b>true</b>. Anyway, the component does not throw exception
            when it encounters invalid envelope. This allows the application to skip invalid response and successfully receive subsequent messages.</note>
            </remarks>
            <example>
            For each message in the Inbox, this sample downloads the message preview (the message header section + first 1000 bytes of the body), the body structure
            (to correctly determine if the message has attachments), and the date of receiving the message by the server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("mail.company.com");
            
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Select Inbox folder.</span>
            		imp.SelectFolder("Inbox");
            
            		<span style="color: green;">// Download body structure (header + 1000 bytes of the body), message preview,</span>
            		<span style="color: green;">// and the date assigned to the message by the server (usually, it's the date</span>
            		<span style="color: green;">// when the message was received by the server).</span>
            		EnvelopeCollection envs = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">false</span>,
            			EnvelopeParts.BodyStructure | EnvelopeParts.MessagePreview | EnvelopeParts.InternalDate,
            			1000);
            
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            		{
            			Console.WriteLine("Message #" + env.MessageNumber + " info:");
            			<span style="color: blue;">if</span> (env.IsValid)
            			{
            				<span style="color: green;">// Tell MailBee to create plain-text version of HTML message</span>
            				<span style="color: green;">// if plain-text version is not available in the message.</span>
            				<span style="color: green;">// It's important to set this before the message gets parsed</span>
            				<span style="color: green;">// (which occurs automatically when any element of the message</span>
            				<span style="color: green;">// is accessed though MailMessage object properties or methods).</span>
            				<span style="color: green;">// If you change HtmlToPlainMode after the message has already been parsed,</span>
            				<span style="color: green;">// call MailMessage.Parser.Apply to reparse the message with new settings.</span>
            				env.MessagePreview.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain;
            
            				Console.WriteLine("From: " + env.MessagePreview.From.ToString());
            				Console.WriteLine("To: " + env.MessagePreview.To.ToString());
            				Console.WriteLine("Subject: " + env.MessagePreview.Subject);
            				Console.WriteLine("Composed at: " + env.MessagePreview.Date);
            
            				<span style="color: green;">// We use DateReceived from INTERNALDATE item of FETCH response.</span>
            				<span style="color: green;">// We could have also used env.MessagePreview.DateReceived instead</span>
            				<span style="color: green;">// (it's obtained from "Received:" headers of the message).</span>
            				<span style="color: green;">// However, env.MessagePreview.DateReceived is DateTime.MinValue</span>
            				<span style="color: green;">// when the message does not contain "Received:" headers.</span>
            				<span style="color: green;">// INTERNALDATE, on other hand, is always available in IMAP4.</span>
            				<span style="color: green;">// MailMessage.DateReceived still makes sense because INTERNALDATE</span>
            				<span style="color: green;">// is not available in POP3, and examining "Received:" headers is</span>
            				<span style="color: green;">// the only way of getting this info when using POP3 protocol.</span>
            				Console.WriteLine("Received at: " + env.DateReceived);
            
            				<span style="color: blue;">if</span> (env.MessagePreview.Priority &gt;= MailPriority.High)
            				{
            					Console.WriteLine("The message is high priority");
            				}
            
            				<span style="color: green;">// Determine if the message has attachments.</span>
            				<span style="color: blue;">bool</span> hasAttachments = <span style="color: blue;">false</span>;
            				ImapBodyStructureCollection parts = env.BodyStructure.GetAllParts();
            				<span style="color: blue;">foreach</span> (ImapBodyStructure part <span style="color: blue;">in</span> parts)
            				{
            					<span style="color: green;">// Detect if this part is attachment.</span>
            					<span style="color: blue;">if</span> ((part.Disposition != <span style="color: blue;">null</span> &amp;&amp; part.Disposition.ToLower() == "attachment") ||
            						(part.Filename != <span style="color: blue;">null</span> &amp;&amp; part.Filename != <span style="color: blue;">string</span>.Empty) ||
            						(part.ContentType != <span style="color: blue;">null</span> &amp;&amp; part.ContentType.ToLower() == "message/rfc822"))
            					{
            						hasAttachments = <span style="color: blue;">true</span>;
            						<span style="color: blue;">break</span>;
            					}
            				}
            				<span style="color: blue;">if</span> (hasAttachments)
            				{
            					Console.WriteLine("The message has attachments.");
            				}
            
            				<span style="color: green;">// Display first 250 characters of the text body. Note that we requested</span>
            				<span style="color: green;">// 1000 bytes but now display only 250 characters. We request more than</span>
            				<span style="color: green;">// we display because of:</span>
            				<span style="color: green;">// - body section of MIME message may start with a block of additional</span>
            				<span style="color: green;">// information which is not a part of text body. Usually, the length</span>
            				<span style="color: green;">// of this block is 100-300 bytes.</span>
            				<span style="color: green;">// - non-ASCII characters may occupy more than one byte.</span>
            				<span style="color: green;">// In some cases, reading 1000 bytes may still be not enough to reach the</span>
            				<span style="color: green;">// text body (for instance, if the message contains attachment which preceeds</span>
            				<span style="color: green;">// the text body in the message source). In such rare cases, the body preview</span>
            				<span style="color: green;">// will not be available (or, the developer may request more than 1000 bytes</span>
            				<span style="color: green;">// of the body and thus increase network traffic). </span>
            				<span style="color: blue;">string</span> bodyPreview = env.MessagePreview.BodyPlainText;
            				<span style="color: blue;">if</span> (bodyPreview.Length &gt; 250)
            				{
            					bodyPreview = bodyPreview.Substring(0, 250);
            				}
            				Console.WriteLine();
            				Console.WriteLine(bodyPreview);
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("FETCH response contains some invalid data.");
            			}
            			Console.WriteLine("============================================================");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Connect("mail.company.com")
            
            		imp.Login("jdoe", "secret")
            
            		<span style="color: green;">' Select Inbox folder.</span>
            		imp.SelectFolder("Inbox")
            
            		<span style="color: green;">' Download body structure (header + 1000 bytes of the body), message preview,</span>
            		<span style="color: green;">' and the date assigned to the message by the server (usually, it's the date</span>
            		<span style="color: green;">' when the message was received by the server).</span>
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">False</span>, _
            			EnvelopeParts.BodyStructure <span style="color: blue;">Or</span> EnvelopeParts.MessagePreview <span style="color: blue;">Or</span> EnvelopeParts.InternalDate, 1000)
            
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            			Console.WriteLine("Message #" &amp; env.MessageNumber &amp; " info:")
            			<span style="color: blue;">If</span> env.IsValid <span style="color: blue;">Then</span>
            				<span style="color: green;">' Tell MailBee to create plain-text version of HTML message</span>
            				<span style="color: green;">' if plain-text version is not available in the message.</span>
            				<span style="color: green;">' It's important to set this before the message gets parsed</span>
            				<span style="color: green;">' (which occurs automatically when any element of the message</span>
            				<span style="color: green;">' is accessed though MailMessage object properties or methods).</span>
            				<span style="color: green;">' If you change HtmlToPlainMode after the message has already been parsed,</span>
            				<span style="color: green;">' call MailMessage.Parser.Apply to re-parse the message with new settings.</span>
            				env.MessagePreview.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain
            
            				Console.WriteLine("From: " &amp; env.MessagePreview.From.ToString())
            				Console.WriteLine("To: " &amp; env.MessagePreview.To.ToString())
            				Console.WriteLine("Subject: " &amp; env.MessagePreview.Subject)
            				Console.WriteLine("Composed at: " &amp; env.MessagePreview.Date)
            
            				<span style="color: green;">' We use DateReceived from INTERNALDATE item of FETCH response.</span>
            				<span style="color: green;">' We could have also used env.MessagePreview.DateReceived instead</span>
            				<span style="color: green;">' (it's obtained from "Received:" headers of the message).</span>
            				<span style="color: green;">' However, env.MessagePreview.DateReceived is DateTime.MinValue</span>
            				<span style="color: green;">' when the message does not contain "Received:" headers.</span>
            				<span style="color: green;">' INTERNALDATE, on other hand, is always available in IMAP4.</span>
            				<span style="color: green;">' MailMessage.DateReceived still makes sense because INTERNALDATE</span>
            				<span style="color: green;">' is not available in POP3, and examining "Received:" headers is</span>
            				<span style="color: green;">' the only way of getting this info when using POP3 protocol.</span>
            				Console.WriteLine("Received at: " &amp; env.DateReceived)
            
            				<span style="color: blue;">If</span> env.MessagePreview.Priority &gt;= MailPriority.High <span style="color: blue;">Then</span>
            					Console.WriteLine("The message is high priority")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: green;">' Determine if the message has attachments.</span>
            				<span style="color: blue;">Dim</span> hasAttachments <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            				<span style="color: blue;">Dim</span> parts <span style="color: blue;">As</span> ImapBodyStructureCollection = env.BodyStructure.GetAllParts()
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> ImapBodyStructure <span style="color: blue;">In</span> parts
            					<span style="color: green;">' Detect if this part is attachment.</span>
            					<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> part.Disposition <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> part.Disposition.ToLower() = "attachment") <span style="color: blue;">OrElse</span> _
            						(<span style="color: blue;">Not</span> part.Filename <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> part.Filename &lt;&gt; <span style="color: blue;">String</span>.Empty) <span style="color: blue;">OrElse</span> _
            						(<span style="color: blue;">Not</span> part.ContentType <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> part.ContentType.ToLower() = "message/rfc822") <span style="color: blue;">Then</span>
            
            						hasAttachments = <span style="color: blue;">True</span>
            						<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">Next</span>
            				<span style="color: blue;">If</span> hasAttachments <span style="color: blue;">Then</span>
            					Console.WriteLine("The message has attachments.")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: green;">' Display first 250 characters of the text body. Note that we requested</span>
            				<span style="color: green;">' 1000 bytes but now display only 250 characters. We request more than</span>
            				<span style="color: green;">' we display because of:</span>
            				<span style="color: green;">' - body section of MIME message may start with a block of additional</span>
            				<span style="color: green;">' information which is not a part of text body. Usually, the length</span>
            				<span style="color: green;">' of this block is 100-300 bytes.</span>
            				<span style="color: green;">' - non-ASCII characters may occupy more than one byte.</span>
            				<span style="color: green;">' In some cases, reading 1000 bytes may still be not enough to reach the</span>
            				<span style="color: green;">' text body (for instance, if the message contains attachment which preceeds</span>
            				<span style="color: green;">' the text body in the message source). In such rare cases, the body preview</span>
            				<span style="color: green;">' will not be available (or, the developer may request more than 1000 bytes</span>
            				<span style="color: green;">' of the body and thus increase network traffic). </span>
            				<span style="color: blue;">Dim</span> bodyPreview <span style="color: blue;">As</span> <span style="color: blue;">String</span> = env.MessagePreview.BodyPlainText
            				<span style="color: blue;">If</span> bodyPreview.Length &gt; 250 <span style="color: blue;">Then</span>
            					bodyPreview = bodyPreview.Substring(0, 250)
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				Console.WriteLine()
            				Console.WriteLine(bodyPreview)
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("FETCH response contains some invalid data.")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            			Console.WriteLine("============================================================")
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)">
            <summary>
            Fetches message envelopes from the server.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <returns><see cref="T:MailBee.ImapMail.EnvelopeCollection"/> object if message envelopes were downloaded successfully; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Ordinal message numbers and UIDs are one-based (minimum value is 1, not 0). However, the returned <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> is zero-based.
            The developer can use <see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/> or <see cref="P:MailBee.ImapMail.Envelope.Uid"/> properties to obtain ordinal message numbers and UIDs of the downloaded
            envelopes.</para>
            <para>
            To specify multiple message numbers or UIDs in <paramref name="messageIndexSet"/>, delimit them with comma (,) or use ranges (such as "5:10" which means "download messages in the range
            from message #5 to the message #10"). Wildcard character (*), can be used to specify range which spans till the last message in the folder. In particular, "1:*" means "download all messages in the folder".
            "1:*" is also declared as <see cref="F:MailBee.ImapMail.Imap.AllMessages"/> constant.
            </para>
            <para>Examples of valid message sequences: "1", "1:*", "1,2", "1:2", "5:10,12:45,99,101,105,141:*".</para>
            <note>A message sequence string may NOT contain whitespaces. The following is INCORRECT: "1, 2, 5". The correct one is: "1,2,5".</note>
            <para>When using a range of UIDs (<paramref name="indexIsUid"/> is <b>true</b>), it's important to understand the number of returned messages
            may be LESS than the length of the range (or even zero). This is because UIDs are not continuous. For instance, if the folder contains messages
            with UIDs 4, 5, 6, 10, and 22, the "1,2,8:20" sequence of UIDs corresponds to a single message with UID=10.</para>
            <para>
            <para>This method fetches the following items from the IMAP server: UID, FLAGS, INTERNALDATE, RFC822SIZE, ENVELOPE. To get additional information about messages
            (for instance, a body structure, non-standard header fields, attachments, a message header section, etc), the developer should use other overloads of this method.</para>
            </para>
            <note>Due to complexity of IMAP4 responses, some servers may return badly formed FETCH responses under certain circumstances.
            If MailBee detects this, it raises <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event and sets <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> to <b>false</b>.
            Since this is done on per-envelope basis, some <see cref="T:MailBee.ImapMail.Envelope"/> objects in the returned collection may have
            <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> set to <b>false</b> while others - to <b>true</b>. Anyway, the component does not throw exception
            when it encounters invalid envelope. This allows the application to skip invalid response and successfully receive subsequent messages.</note>
            </remarks>
            <example>
            For each message in the Inbox, this sample downloads and displays the envelope information: From, Reply-To, To, CC, Subject, the date
            when the message was originally composed, and the date when the message was received by the server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Connect("imap.server.com");
            
            		imp.Login("jdoe@server.com", "secret");
            
            		<span style="color: green;">// Select Inbox folder.</span>
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Download envelopes for last 10 messages in the inbox. If there are</span>
            		<span style="color: green;">// less than 10 messages, we'll get envelopes for all of them. In this</span>
            		<span style="color: green;">// sample, we define higher boundary of the range as imp.MessageCount</span>
            		<span style="color: green;">// but we could also use "*" character for that.</span>
            		<span style="color: blue;">int</span> start = imp.MessageCount - 9;
            		<span style="color: blue;">if</span> (start &lt; 1)
            		{
            			start = 1;
            		}
            		EnvelopeCollection envs = imp.DownloadEnvelopes(
            			start.ToString() + ":" + imp.MessageCount.ToString(), <span style="color: blue;">false</span>);
            
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            		{
            			Console.WriteLine("Message #" + env.MessageNumber + " info:");
            			<span style="color: blue;">if</span> (env.IsValid)
            			{
            				Console.WriteLine("From: " + env.From.ToString());
            				Console.WriteLine("Reply-To: " + env.ReplyTo.ToString());
            				Console.WriteLine("To: " + env.To.ToString());
            				Console.WriteLine("CC: " + env.Cc.ToString());
            				Console.WriteLine("Subject: " + env.Subject);
            
            				<span style="color: green;">// Check if the message does not have Date: header set. </span>
            				<span style="color: blue;">if</span> (env.Date == DateTime.MinValue)
            				{
            					Console.WriteLine("Composed at: " + env.Date);
            				}
            				<span style="color: blue;">else</span>
            				{
            					Console.WriteLine("Composed at: N/A");
            				}
            
            				Console.WriteLine("Received at: " + env.DateReceived);
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("FETCH response contains some invalid data.");
            			}
            			Console.WriteLine("==============================================");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Connect("imap.server.com")
            
            		imp.Login("jdoe@server.com", "secret")
            
            		<span style="color: green;">' Select Inbox folder.</span>
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Download envelopes for last 10 messages in the inbox. If there are</span>
            		<span style="color: green;">' less than 10 messages, we'll get envelopes for all of them. In this</span>
            		<span style="color: green;">' sample, we define higher boundary of the range as imp.MessageCount</span>
            		<span style="color: green;">' but we could also use "*" character for that.</span>
            		<span style="color: blue;">Dim</span> start <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = imp.MessageCount - 9
            		<span style="color: blue;">If</span> start &lt; 1 <span style="color: blue;">Then</span>
            			start = 1
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(start.ToString() &amp; _
            			":" &amp; imp.MessageCount.ToString(), <span style="color: blue;">False</span>)
            
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            			Console.WriteLine("Message #" &amp; env.MessageNumber &amp; " info:")
            			<span style="color: blue;">If</span> env.IsValid <span style="color: blue;">Then</span>
            				Console.WriteLine("From: " &amp; env.From.ToString())
            				Console.WriteLine("Reply-To: " &amp; env.ReplyTo.ToString())
            				Console.WriteLine("To: " &amp; env.To.ToString())
            				Console.WriteLine("CC: " &amp; env.Cc.ToString())
            				Console.WriteLine("Subject: " &amp; env.Subject)
            
            				<span style="color: green;">' Check if the message does not have Date: header set. </span>
            				<span style="color: blue;">If</span> env.Date = DateTime.MinValue <span style="color: blue;">Then</span>
            					Console.WriteLine("Composed at: " &amp; env.Date)
            				<span style="color: blue;">Else</span>
            					Console.WriteLine("Composed at: N/A")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				Console.WriteLine("Received at: " &amp; env.DateReceived)
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("FETCH response contains some invalid data.")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			Console.WriteLine("==============================================")
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginDownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for downloading the specified message elements
            (envelopes, flags, body structures, entire messages or message headers, etc) from the currently selected folder.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="parts">Specifies which message elements or attributes to download.</param>
            <param name="bodyPreviewSize">If <paramref name="parts"/> includes <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/> flag, specifies
            the length of the message body section (in bytes) to be downloaded in addition to the message header section; if 0, only the message header
            is downloaded; if -1, the entire message is downloaded.</param>
            <param name="extraHeaders">The array of names of message headers to be downloaded, or a null reference (<b>Nothing</b> in Visual Basic)
            if additional headers are not needed.</param>
            <param name="extraItems">The array of additional FETCH request items to download, or a null reference (<b>Nothing</b> in Visual Basic)
            if additional FETCH items are not needed.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous downloading of envelopes or other message elements..</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>.</remarks>
            <example>This WinForms sample demonstrates asynchronous downloading of all new messages in the Inbox folder. The messages are downloaded completely
            (with attachments, text parts, etc) and saved into "C:\Temp" folder. The message flags are downloaded as well.
            For each message, the sample prints saved file name and flags into Output window (it's visible when the application
            is being run in debug mode).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// The actual code.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Load(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	Imap imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// We do not subscribe to any events in this sample, so we do not</span>
            	<span style="color: green;">// need to care about them. However, if you decide to subscribe to</span>
            	<span style="color: green;">// an event and your application will block message loop thread</span>
            	<span style="color: green;">// using imp.Wait() method, you should uncomment the next line</span>
            	<span style="color: green;">// to tell MailBee not to use message loop thread for raising events</span>
            	<span style="color: green;">// and use imp.Wait() method instead of ar.AsyncWaitHandle.WaitOne(). </span>
            	<span style="color: green;">// imp.RaiseEventsViaMessageLoop = false;</span>
            
            	<span style="color: green;">// Connect to the server, login and select inbox.</span>
            	imp.Connect("imap4.server.com");
            	imp.Login("jdoe", "secret");
            	imp.SelectFolder("Inbox");
            
            	<span style="color: green;">// Obtain UIDs of new messages (messages which are recent and unseen).</span>
            	UidCollection uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "NEW", <span style="color: blue;">null</span>);
            
            	EnvelopeCollection envs = <span style="color: blue;">null</span>;
            
            	<span style="color: blue;">if</span> (uids.Count &gt; 0)
            	{
            		<span style="color: green;">// Asynchronously download entire messages and their flags.</span>
            		IAsyncResult ar = imp.BeginDownloadEnvelopes(uids.ToString(), <span style="color: blue;">true</span>,
            			EnvelopeParts.MessagePreview | EnvelopeParts.Flags, -1,
            			<span style="color: blue;">null</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Wait until the asynchronous download completes. Note: this call</span>
            		<span style="color: green;">// blocks UI. Thus, if you subscribe to any events, you'll got a</span>
            		<span style="color: green;">// deadlock (because events will be raised only after message loop thread</span>
            		<span style="color: green;">// gets un-blocked again, while WaitOne() method which blocked the message</span>
            		<span style="color: green;">// loop will wait until all events get raised). The solution is to set</span>
            		<span style="color: green;">// imp.RaiseEventsViaMessageLoop to false and use imp.Wait() method</span>
            		<span style="color: green;">// instead of ar.AsyncWaitHandle.WaitOne() method.</span>
            		ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Get downloaded envelopes (messages + flags).</span>
            		envs = imp.EndDownloadEnvelopes();
            	}
            
            	<span style="color: green;">// Demonstrate that we may disconnect before finished with processing</span>
            	<span style="color: green;">// of downloaded envelopes. Although in most samples we disconnect in</span>
            	<span style="color: green;">// the very end of the code, it's more efficient to disconnect once the</span>
            	<span style="color: green;">// connection is no longer needed. For instance, it may take considerable</span>
            	<span style="color: green;">// amount of time to save downloaded messages in the folder (see below).</span>
            	<span style="color: green;">// During this time, the connection with the server will just waste system</span>
            	<span style="color: green;">// resources since the connection is not actually required any longer.</span>
            	<span style="color: green;">// The same optimization can be applied to all other MailBee components.</span>
            	imp.Disconnect();
            
            	<span style="color: blue;">if</span> (envs != <span style="color: blue;">null</span>)
            	{
            		<span style="color: green;">// Save all downloaded messages into "C:\Temp" folder.</span>
            		<span style="color: green;">// Each filename is generated as message's UID + ".eml".</span>
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            		{
            			<span style="color: blue;">string</span> filename = env.Uid + ".eml";
            			env.MessagePreview.SaveMessage(@"C:\Temp\" + filename);
            
            			<span style="color: green;">// To see this report in VS.NET environment, run the sample</span>
            			<span style="color: green;">// in debug mode and monitor the contents of Output window.</span>
            			System.Diagnostics.Debug.WriteLine("Message #" + env.MessageNumber +
            				" having (" + env.Flags.ToString() + ") flags set was saved as " +
            				filename);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' The actual code.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Load(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' We do not subscribe to any events in this sample, so we do not</span>
            	<span style="color: green;">' need to care about them. However, if you decide to subscribe to</span>
            	<span style="color: green;">' an event and your application will block message loop thread</span>
            	<span style="color: green;">' using imp.Wait() method, you should uncomment the next line</span>
            	<span style="color: green;">' to tell MailBee not to use message loop thread for raising events</span>
            	<span style="color: green;">' and use imp.Wait() method instead of ar.AsyncWaitHandle.WaitOne(). </span>
            	<span style="color: green;">' imp.RaiseEventsViaMessageLoop = false</span>
            
            	<span style="color: green;">' Connect to the server, login and select inbox.</span>
            	imp.Connect("imap4.server.com")
            	imp.Login("jdoe", "secret")
            	imp.SelectFolder("Inbox")
            
            	<span style="color: green;">' Obtain UIDs of new messages (messages which are recent and unseen).</span>
            	<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> UidCollection = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "NEW", <span style="color: blue;">Nothing</span>), UidCollection)
            
            	<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = <span style="color: blue;">Nothing</span>
            
            	<span style="color: blue;">If</span> uids.Count &gt; 0 <span style="color: blue;">Then</span>
            		<span style="color: green;">' Asynchronously download entire messages and their flags.</span>
            		<span style="color: blue;">Dim</span> ar <span style="color: blue;">As</span> IAsyncResult = imp.BeginDownloadEnvelopes(uids.ToString(), <span style="color: blue;">True</span>, _
            			EnvelopeParts.MessagePreview <span style="color: blue;">Or</span> EnvelopeParts.Flags, -1, _
            			<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Wait until the asynchronous download completes. Note: this call</span>
            		<span style="color: green;">' blocks UI. Thus, if you subscribe to any events, you'll got a</span>
            		<span style="color: green;">' deadlock (because events will be raised only after message loop thread</span>
            		<span style="color: green;">' gets un-blocked again, while WaitOne() method which blocked the message</span>
            		<span style="color: green;">' loop will wait until all events get raised). The solution is to set</span>
            		<span style="color: green;">' imp.RaiseEventsViaMessageLoop to false and use imp.Wait() method</span>
            		<span style="color: green;">' instead of ar.AsyncWaitHandle.WaitOne() method.</span>
            		ar.AsyncWaitHandle.WaitOne()
            
            		<span style="color: green;">' Get downloaded envelopes (messages + flags).</span>
            		envs = imp.EndDownloadEnvelopes()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            	<span style="color: green;">' Demonstrate that we may disconnect before finished with processing</span>
            	<span style="color: green;">' of downloaded envelopes. Although in most samples we disconnect in</span>
            	<span style="color: green;">' the very end of the code, it's more efficient to disconnect once the</span>
            	<span style="color: green;">' connection is no longer needed. For instance, it may take considerable</span>
            	<span style="color: green;">' amount of time to save downloaded messages in the folder (see below).</span>
            	<span style="color: green;">' During this time, the connection with the server will just waste system</span>
            	<span style="color: green;">' resources since the connection is not actually required any longer.</span>
            	<span style="color: green;">' The same optimization can be applied to all other MailBee components.</span>
            	imp.Disconnect()
            
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> envs <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		<span style="color: green;">' Save all downloaded messages into "C:\Temp" folder.</span>
            		<span style="color: green;">' Each filename is generated as message's UID + ".eml".</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            			<span style="color: blue;">Dim</span> filename <span style="color: blue;">As</span> <span style="color: blue;">String</span> = env.Uid &amp; ".eml"
            			env.MessagePreview.SaveMessage("C:\Temp\" &amp; filename)
            
            			<span style="color: green;">' To see this report in VS.NET environment, run the sample</span>
            			<span style="color: green;">' in debug mode and monitor the contents of Output window.</span>
            			System.Diagnostics.Debug.WriteLine("Message #" &amp; env.MessageNumber &amp; _
            				" having (" &amp; env.Flags.ToString() &amp; ") flags set was saved as " &amp; filename)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndDownloadEnvelopes">
            <summary>
            Ends the pending asynchronous download envelopes request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginDownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[],System.AsyncCallback,System.Object)"/>
            </summary>
            <returns>On success, a <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> object representing
            the downloaded envelopes; otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)">
            <summary>
            Completely downloads the specified message from the server.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            </summary>
            <param name="messageIndex">The ordinal position or UID of the message in the currently selected folder.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndex"/> is treated as UID; otherwise, as ordinal message number.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessage"/> object containing the entire message, including
            the message header, all the body parts and attachments;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If more than one message is downloaded, it's recommended to use <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>
            method when possible, since it is capable of downloading multiple messages in a batch.
            </remarks>
            <example>This sample downloads the first message from an inbox on an IMAP4 server,
            saves it as index.htm file, and also saves the embedded pictures and other linked
            objects, making it possible to open index.htm file in a browser and have the message
            being correctly displayed (including all the graphics, styles, etc).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.somehost.com");
            		imp.Login("jdoe@somehost.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Save message as C:\Temp\index.htm</span>
            		MailMessage msg = imp.DownloadEntireMessage(1, <span style="color: blue;">false</span>);
            		msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml;
            		msg.SaveHtmlAndRelatedFiles(@"C:\Temp\index.htm");
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.somehost.com")
            		imp.Login("jdoe@somehost.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Save message as C:\Temp\index.htm</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = imp.DownloadEntireMessage(1, <span style="color: blue;">False</span>)
            		msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml
            		msg.SaveHtmlAndRelatedFiles("C:\Temp\index.htm")
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)">
            <summary>
            Completely downloads the specified messages from the server.
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> containing the downloaded messages;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <para>This method will download all the messages in a single network operation,
            which greatly increases performance and reduces network traffic.</para>
            <note>To track downloading messages, <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event should be used.
            There is no <b>MessageDownloaded</b> event since mail messages are actually downloaded within envelopes.
            Once an envelope is downloaded, the mail message data is extracted from it.
            Generally speaking, <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/> is a kind of overload of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.
            </note>
            </remarks>
            <example>This console sample completely downloads the last 10 messages from the inbox, and displays the number
            of attachments for each downloaded message. <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event is used
            to track the download progress.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// EnvelopeDownloaded event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnEnvelopeDownloaded(<span style="color: blue;">object</span> sender,
            		ImapEnvelopeDownloadedEventArgs e)
            	{
            		Console.WriteLine("Message #" + e.MessageNumber + " downloaded");
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Subscribe to the EnvelopeDownloaded event.</span>
            		imp.EnvelopeDownloaded +=
            			<span style="color: blue;">new</span> ImapEnvelopeDownloadedEventHandler(OnEnvelopeDownloaded);
            
            		<span style="color: green;">// Download the last 10 messages. Note: this sample does not check</span>
            		<span style="color: green;">// if there are less than 10 messages in the inbox. See sample code</span>
            		<span style="color: green;">// in DownloadEnvelopes(string, bool) overload for more information.</span>
            		MailMessageCollection msgs = imp.DownloadEntireMessages(
            			(imp.MessageCount - 9).ToString() + ":*", <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Display some information about downloaded messages.</span>
            		<span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            		{
            			Console.WriteLine("Message #" + msg.IndexOnServer +
            				" contains " + msg.Attachments.Count + " attachment(s)");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' EnvelopeDownloaded event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnEnvelopeDownloaded(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            		<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapEnvelopeDownloadedEventArgs)
            
            		Console.WriteLine("Message #" &amp; e.MessageNumber &amp; " downloaded")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Subscribe to the EnvelopeDownloaded event.</span>
            		<span style="color: blue;">AddHandler</span> imp.EnvelopeDownloaded, <span style="color: blue;">AddressOf</span> OnEnvelopeDownloaded
            
            		<span style="color: green;">' Download the last 10 messages. Note: this sample does not check</span>
            		<span style="color: green;">' if there are less than 10 messages in the inbox. See sample code</span>
            		<span style="color: green;">' in DownloadEnvelopes(string, bool) overload for more information.</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = _
            			imp.DownloadEntireMessages((imp.MessageCount - 9).ToString() &amp; ":*", <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Display some information about downloaded messages.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            			Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; " contains " &amp; _
            				 msg.Attachments.Count &amp; " attachment(s)")
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)">
            <summary>
            Downloads the header of each message in the specified set from the server.
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <returns>On success, a <see cref="T:MailBee.Mime.MailMessageCollection"/> containing the downloaded messages;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <para>This method will download all the message headers in a single network operation,
            which greatly increases performance and reduces network traffic. However, if the application needs message headers
            just to get common information about messages (From, To, Date, Subject, Size, etc), it's more
            efficient to use <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> method. Typically, IMAP4 ENVELOPE structure
            and related information is 200-400 bytes in size, while message header sections are usually larger 500 bytes.
            ENVELOPE structure, however, does not contain header fields which describe priority/importance of
            the message, attachments presence, etc. On other hand, the application may avoid downloading message header section and
            still obtain all the necessary information by requesting envelopes, body structures, and the required headers using
            <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.</para>
            <note>To track downloading headers, <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event should be used.
            There is no <b>MessageDownloaded</b> event since mail messages are actually downloaded within envelopes.
            Once an envelope is downloaded, the mail message data is extracted from it.
            Generally speaking, <see cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/> is a kind of overload of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.
            </note>
            </remarks>
            <example>This console sample downloads message header sections of the last 5 messages in the inbox, and displays them.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe@domain.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Download the last 5 message headers. Note: we do not check if</span>
            		<span style="color: green;">// there are less than 5 messages in the inbox. See sample code</span>
            		<span style="color: green;">// in DownloadEnvelopes(string, bool) overload for more details.</span>
            		MailMessageCollection msgs = imp.DownloadMessageHeaders(
            			(imp.MessageCount - 4).ToString() + ":*", <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Display header sections of the downloaded message headers.</span>
            		<span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            		{
            			Console.WriteLine("Header section of message #" + msg.IndexOnServer);
            			Console.WriteLine();
            			Console.WriteLine(msg.RawHeader);
            			Console.WriteLine("===============================================");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Download the last 5 message headers. Note: we do not check if</span>
            		<span style="color: green;">' there are less than 5 messages in the inbox. See sample code</span>
            		<span style="color: green;">' in DownloadEnvelopes(string, bool) overload for more details.</span>
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = _
            			imp.DownloadMessageHeaders((imp.MessageCount - 4).ToString() &amp; ":*", <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Display header sections of the downloaded message headers.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            			Console.WriteLine("Header section of message #" &amp; msg.IndexOnServer)
            			Console.WriteLine()
            			Console.WriteLine(msg.RawHeader)
            			Console.WriteLine("===============================================")
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.GetFolderSize">
            <summary>
            Downloads the size of each message in the currently selected folder and returns the total size
            occupied by all messages in this folder.
            </summary>
            <returns>On success, return the total size occupied by all messages in this folder; otherwise, -1.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            If the application needs to calculate the total size of all messages in all folders of the mail account,
            it should use QUOTA extension (<see cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/> method) and fall back to
            multiple <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/> calls only if QUOTA is not supported. However, iterating through
            all the folders and downloading messages' sizes may take considerable amount of time. Also, it's not possible
            to determine sizes of non-selectable folders and sizes of folders themselves (without their contained messages)
            using non-QUOTA approach. Thus, the storage size obtained from <see cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/> is usually larger (by 1% or so)
            than the size determined via a series of <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> and <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/> calls.
            <note><see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/> method considers only messages belonging to the folder itself. If the folder contains any sub-folders,
            the sizes of messages in these subfolders will not be included into the returned value.</note>
            </remarks>
            <example>This sample attempts to gets the size of the currently used account storage using QUOTA extension.
            If QUOTA is not supported by the server, the sample selects all selectable folders in the account one by another,
            and calls <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/> for each folder.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: blue;">long</span> accountStorageUsedSize = -1;
            
            		<span style="color: blue;">if</span> (imp.GetExtension("QUOTA") != <span style="color: blue;">null</span>)
            		{
            			<span style="color: green;">// This may still return -1 if the QUOTA is supported</span>
            			<span style="color: green;">// in general but storage quota in bytes is not.</span>
            			accountStorageUsedSize = imp.GetAccountQuota().CurrentStorageSize;
            		}
            
            		<span style="color: blue;">if</span> (accountStorageUsedSize &lt; 0)
            		{
            			<span style="color: green;">// Fall back to a series of SelectFolder/GetFolderSize calls.</span>
            			accountStorageUsedSize = 0;
            			FolderCollection folders = imp.DownloadFolders();
            			
            			<span style="color: blue;">foreach</span> (Folder fold <span style="color: blue;">in</span> folders)
            			{
            				<span style="color: green;">// For each selectable folder, select it and</span>
            				<span style="color: green;">// determine the total size of all messages.</span>
            				<span style="color: blue;">if</span> ((fold.Flags &amp; FolderFlags.Noselect) == 0)
            				{
            					imp.SelectFolder(fold.Name);
            					accountStorageUsedSize += imp.GetFolderSize();
            				}
            			}
            		}
            
            		Console.WriteLine("Currently used account storage size is " +
            			accountStorageUsedSize + " bytes");
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            
            		<span style="color: blue;">Dim</span> accountStorageUsedSize <span style="color: blue;">As</span> <span style="color: blue;">Long</span> = -1
            
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.GetExtension("QUOTA") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			<span style="color: green;">' This may still return -1 if the QUOTA is supported</span>
            			<span style="color: green;">' in general but storage quota in bytes is not.</span>
            			accountStorageUsedSize = imp.GetAccountQuota().CurrentStorageSize
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: blue;">If</span> accountStorageUsedSize &lt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Fall back to a series of SelectFolder/GetFolderSize calls.</span>
            			accountStorageUsedSize = 0
            			<span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.DownloadFolders()
            
            			<span style="color: blue;">For</span> <span style="color: blue;">Each</span> fold <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            				<span style="color: green;">' For each selectable folder, select it and</span>
            				<span style="color: green;">' determine the total size of all messages.</span>
            				<span style="color: blue;">If</span> (fold.Flags <span style="color: blue;">And</span> FolderFlags.Noselect) = 0 <span style="color: blue;">Then</span>
            					imp.SelectFolder(fold.Name)
            					accountStorageUsedSize += imp.GetFolderSize()
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">Next</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		Console.WriteLine("Currently used account storage size is " &amp; _
            			accountStorageUsedSize &amp; " bytes")
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)">
            <summary>
            Uploads a mail message to the specified folder, assigns the specified date and flags to this message,
            and retrieves UID assigned to the uploaded message by the server.
            <seealso cref="T:MailBee.ImapMail.UidPlusResult"/>
            </summary>
            <param name="msg">A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be uploaded.</param>
            <param name="folderName">The full name of the folder to upload the message to.</param>
            <param name="flags">The string containing the message flags (in IMAP4 format) to be assigned to the message, or a null reference (<b>Nothing</b> in Visual Basic) to
            set default flags at the discretion of the server.</param>
            <param name="dateTimeString">The string containing datetime (in IMAP4 format) to be assigned to the INTERNALDATE attribute of the message
            (the date of receiving the message by the server), or a null reference to let the server assign its current datetime value.</param>
            <param name="batchMode">If <b>true</b> and LITERAL+ extension is supported by the server, the message will be
            uploaded in a single network operation; otherwise, in two operations.</param>
            <param name="result">A reference to the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object to be filled with the outcome
            of the upload operation reported by UIDPLUS enabled server (the outcome includes the UID assigned to the uploaded message and the UIDVALIDITY of the folder the message was uploaded to),
            or a null reference if the application does not need this information.</param>
            <returns><b>true</b> if the message was uploaded successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method implements APPEND command of the IMAP4 protocol.</para>
            <para>To upload a file, the developer can first load it into <see cref="T:MailBee.Mime.MailMessage"/> object using <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            method, and then call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> passing a reference to this <see cref="T:MailBee.Mime.MailMessage"/> object. There is no extra overhead
            on parsing the message since <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> just reads a file into memory. The <see cref="T:MailBee.Mime.MailMessage"/> won't parse the contained message unless the application
            starts accessing its properties or methods (so-called "lazy" model).</para>
            <para>To upload a mail message just sent using <see cref="T:MailBee.SmtpMail.Smtp"/> component, the developer call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method passing
            a reference to the <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property.</para>
            <para>To get standard message flags as string in IMAP4 format (e.g. "\Seen \Flagged"), the developer can use <see cref="M:MailBee.ImapMail.MessageFlagSet.SystemFlagsToString(MailBee.ImapMail.SystemMessageFlags)"/> method.</para>
            <para>In addition to the flags specified by the application, the server also sets "\Recent" flag. Thus, the uploaded message will always have at least "\Recent" flag set.</para>
            <para>To get datetime string in IMAP4 format (e.g. "01-May-2004 05:26:59 -0600"), the developer can use <see cref="M:MailBee.ImapMail.ImapUtils.GetImapDateTimeString"/> method.</para>
            <para><paramref name="batchMode"/> value is ignored if the server does not support LITERAL+ extension. However, even if LITERAL+ is supported, the developer may still decide
            not to use batch mode if there is a risk that the server will reject the message due to its size. If this happens, the client will waste bandwidth transferring
            the entire message. If the client wouldn't have used the LITERAL+, this could have been avoided, because the server would have rejected the initial small request
            containing the length of the data to be uploaded, and thus second large request containing the actual message data would have never been sent. In general, however,
            if the application is not going to upload very large messages frequently, it's more effective to keep batch mode on. Other overloads of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method
            always upload messages in batch mode if LITERAL+ is supported.</para>
            <para>When <paramref name="result"/> is specified and the server supports UIDPLUS extension, <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method will
            set the supplied <see cref="T:MailBee.ImapMail.UidPlusResult"/> object properties as below:
            <list type="table">
            <listheader><term>Property</term><term>Value</term></listheader>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.IsSupported"/></description><description><b>true</b></description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.SrcUids"/></description><description><b>null</b></description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.SrcUidString"/></description><description><b>null</b></description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUids"/></description><description>The <see cref="T:MailBee.ImapMail.UidCollection"/> object containing a single value of the UID assigned to the uploaded message.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/></description><description>The string containing the UID assigned to the uploaded message.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUidValidity"/></description><description>The UIDVALIDITY of the folder the message was uploaded to.</description></item>
            </list>
            </para>
            <para>If UIDPLUS capability is not supported by the server, <see cref="P:MailBee.ImapMail.UidPlusResult.IsSupported"/> will be set to <b>false</b>.
            When working with the server which lacks UIDPLUS support, the application can obtain UID
            of the uploaded message from <see cref="P:MailBee.ImapMail.FolderStatus.UidNext"/> value of <see cref="T:MailBee.ImapMail.FolderStatus"/> object
            returned by <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method. However, the application must call
            <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method BEFORE making upload (see the sample).</para>
            <para>The developer can also try to avoid calling <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/>
            method if the UIDNEXT value is already available in <see cref="P:MailBee.ImapMail.Imap.UidNext"/> property (the destination folder must be selected in this case,
            and some other restrictions apply, see remarks in <see cref="P:MailBee.ImapMail.Imap.UidNext"/> topic for more information).</para>
            </remarks>
            <example>This sample loads the mail message from a file, and then uploads it to the Inbox folder on the server specifying "12-Apr-2006 19:30:00 +0100"
            as date of receiving the message by the server (INTERNALDATE), and setting "\Seen" and "\Flagged" flags (the server will also set "\Recent" flag). Finally,
            the UID value assigned to the message is displayed in the console. If UIDPLUS extension is supported,
            it's used. Otherwise, the application obtains the UID value downloading the status of Inbox folder prior to making upload.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.server.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Load the message from C:\Temp\message.eml file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Temp\message.eml");
            
            		<span style="color: green;">// Prepare the object that will receive upload results.</span>
            		UidPlusResult res = <span style="color: blue;">new</span> UidPlusResult();
            
            		<span style="color: blue;">long</span> uid = 0;
            
            		<span style="color: blue;">if</span> (imp.GetExtension("UIDPLUS") == <span style="color: blue;">null</span>)
            		{
            			FolderStatus status = imp.GetFolderStatus("Inbox");
            			uid = status.UidNext;
            		}
            
            		<span style="color: green;">// Upload the message and fill res with upload results.</span>
            		imp.UploadMessage(msg, "Inbox",
            			MessageFlagSet.SystemFlagsToString(
            			SystemMessageFlags.Seen | SystemMessageFlags.Flagged),
            			"12-Apr-2006 19:30:00 +0100", <span style="color: blue;">true</span>, res);
            
            		<span style="color: blue;">if</span> (res.IsSupported)
            		{
            			Console.WriteLine("UID of the uploaded message is " +
            				res.DestUidString + ", UIDPLUS supported.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("UID of the uploaded message is " +
            				uid.ToString() + ", UIDPLUS not supported.");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            
            		<span style="color: green;">' Load the message from C:\Temp\message.eml file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Temp\message.eml")
            
            		<span style="color: green;">' Prepare the object that will receive upload results.</span>
            		<span style="color: blue;">Dim</span> res <span style="color: blue;">As</span> <span style="color: blue;">New</span> UidPlusResult
            
            		<span style="color: blue;">Dim</span> uid <span style="color: blue;">As</span> <span style="color: blue;">Long</span> = 0
            
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.GetExtension("UIDPLUS") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			<span style="color: blue;">Dim</span> status <span style="color: blue;">As</span> FolderStatus = imp.GetFolderStatus("Inbox")
            			uid = status.UidNext
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Upload the message and fill res with upload results.</span>
            		imp.UploadMessage(msg, "Inbox", _
            			MessageFlagSet.SystemFlagsToString( _
            			SystemMessageFlags.Seen <span style="color: blue;">Or</span> SystemMessageFlags.Flagged), _
            			"12-Apr-2006 19:30:00 +0100", <span style="color: blue;">True</span>, res)
            
            		<span style="color: blue;">If</span> res.IsSupported <span style="color: blue;">Then</span>
            			Console.WriteLine("UID of the uploaded message is " &amp; _
            			 res.DestUidString &amp; ", UIDPLUS supported.")
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("UID of the uploaded message is " &amp; _
            			 uid.ToString() &amp; ", UIDPLUS not supported.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)">
            <summary>
            Uploads a mail message to the specified folder and assigns the specified date and flags to this message.
            </summary>
            <param name="msg">A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be uploaded.</param>
            <param name="folderName">The full name of the folder to upload the message to.</param>
            <param name="flags">The string containing the message flags (in IMAP4 format) to be assigned to the message, or a null reference (<b>Nothing</b> in Visual Basic) to
            set default flags at the discretion of the server.</param>
            <param name="dateTimeString">The string containing datetime (in IMAP4 format) to be assigned to the INTERNALDATE attribute of the message
            (the date of receiving the message by the server), or a null reference to let the server assign its current datetime value.</param>
            <returns><b>true</b> if the message was uploaded successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method implements APPEND command of the IMAP4 protocol.</para>
            <para>To upload a file, the developer can first load it into <see cref="T:MailBee.Mime.MailMessage"/> object using <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            method, and then call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> passing a reference to this <see cref="T:MailBee.Mime.MailMessage"/> object. There is no extra overhead
            on parsing the message since <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> just reads a file into memory. The <see cref="T:MailBee.Mime.MailMessage"/> won't parse the contained message unless the application
            starts accessing its properties or methods (so-called "lazy" model).</para>
            <para>To upload a mail message just sent using <see cref="T:MailBee.SmtpMail.Smtp"/> component, the developer call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method passing
            a reference to the <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property.</para>
            <para>To obtain the UID value assigned to the uploaded message, the developer should either examine <see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/> property
            of <see cref="T:MailBee.ImapMail.UidPlusResult"/> object passed in <i>res</i> parameter of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method (the server must support UIDPLUS capability),
            or obtain <see cref="P:MailBee.ImapMail.FolderStatus.UidNext"/> value calling <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method before making upload (this approach is compatible with all servers).</para>
            <para>To get standard message flags as string in IMAP4 format (e.g. "\Seen \Flagged"), the developer can use <see cref="M:MailBee.ImapMail.MessageFlagSet.SystemFlagsToString(MailBee.ImapMail.SystemMessageFlags)"/> method.</para>
            <para>In addition to the flags specified by the application, the server also sets "\Recent" flag. Thus, the uploaded message will always have at least "\Recent" flag set.</para>
            <para>To get datetime string in IMAP4 format (e.g. "01-May-2004 05:26:59 -0600"), the developer can use <see cref="M:MailBee.ImapMail.ImapUtils.GetImapDateTimeString"/> method.</para>
            </remarks>
            <example>
            <para>This sample creates a new mail message and saves it into "Draft" folder (creating the folder if necessary)
            using the current datetime/timezone of the mail server.
            "\Draft" and non-standard "$Personal" flag are set (and the server will implicitly add "\Recent" flag).
            </para>
            <para>
            However, it may be forbidden by the server to set non-standard flags for messages.
            For this purpose, we check if <see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/> includes <see cref="F:MailBee.ImapMail.SystemMessageFlags.CanCreate"/> flag.
            If not, we set "\Draft" flag only.
            <note>In this sample, we do not check if "$Personal" flag is already available. Real-world applications
            should first check if the specified non-standard flag is already available in <see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/> and try
            to add new flag only if it's not already available.</note>
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: green;">// Create a new message. Assume we need to save a draft of the message.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Try to select Draft folder and create it if needed.</span>
            		<span style="color: green;">// We do not need to select the folder for uploading but</span>
            		<span style="color: green;">// we need to check if it's permitted to use non-system flags</span>
            		<span style="color: green;">// (such as "$Personal") in this folder.</span>
            		<span style="color: blue;">try</span>
            		{
            			imp.ExamineFolder("Draft");
            		}
            		<span style="color: blue;">catch</span> (MailBeeImapNegativeResponseException e)
            		{
            			<span style="color: blue;">if</span> (e.CompletionResult == "NO")
            			{
            				imp.CreateFolder("Draft");
            				imp.ExamineFolder("Draft");
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: blue;">throw</span>;
            			}
            		}
            
            		<span style="color: blue;">string</span> flags = MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Draft);
            
            		<span style="color: green;">// Add "$Personal" flag if it's allowed for this folder.</span>
            		<span style="color: blue;">if</span> ((imp.PermanentFlags.SystemFlags &amp; SystemMessageFlags.CanCreate) &gt; 0)
            		{
            			flags += " $Personal";
            		}
            
            		<span style="color: green;">// May close the folder since it's not needed any longer. This will not</span>
            		<span style="color: green;">// expunge any deleted messages (which usually occurs on Close() call)</span>
            		<span style="color: green;">// since we used ExamineFolder to select the folder. Unlike SelectFolder,</span>
            		<span style="color: green;">// ExamineFolder selects folder in read-only mode.</span>
            		imp.Close();
            
            		<span style="color: green;">// Upload the message and assign the current datetime and timezone</span>
            		<span style="color: green;">// of the server as the date of receiving the message by the server</span>
            		<span style="color: green;">// (INTERNALDATE in IMAP4 terms).</span>
            		imp.UploadMessage(msg, "Draft", flags, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            
            		<span style="color: green;">' Create a new message. Assume we need to save a draft of the message.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Try to select Draft folder and create it if needed.</span>
            		<span style="color: green;">' We do not need to select the folder for uploading but</span>
            		<span style="color: green;">' we need to check if it's permitted to use non-system flags</span>
            		<span style="color: green;">' (such as "$Personal") in this folder.</span>
            		<span style="color: blue;">Try</span>
            			imp.ExamineFolder("Draft")
            		<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeImapNegativeResponseException
            			<span style="color: blue;">If</span> e.CompletionResult = "NO" <span style="color: blue;">Then</span>
            				imp.CreateFolder("Draft")
            				imp.ExamineFolder("Draft")
            			<span style="color: blue;">Else</span>
            				<span style="color: blue;">Throw</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: blue;">Dim</span> flags <span style="color: blue;">As</span> <span style="color: blue;">String</span> = MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Draft)
            
            		<span style="color: green;">' Add "$Personal" flag if it's allowed for this folder.</span>
            		<span style="color: blue;">If</span> (imp.PermanentFlags.SystemFlags <span style="color: blue;">And</span> SystemMessageFlags.CanCreate) &gt; 0 <span style="color: blue;">Then</span>
            			flags &amp;= " $Personal"
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' May close the folder since it's not needed any longer. This will not</span>
            		<span style="color: green;">' expunge any deleted messages (which usually occurs on Close() call)</span>
            		<span style="color: green;">' since we used ExamineFolder to select the folder. Unlike SelectFolder,</span>
            		<span style="color: green;">' ExamineFolder selects folder in read-only mode.</span>
            		imp.Close()
            
            		<span style="color: green;">' Upload the message and assign the current datetime and timezone</span>
            		<span style="color: green;">' of the server as the date of receiving the message by the server</span>
            		<span style="color: green;">' (INTERNALDATE in IMAP4 terms).</span>
            		imp.UploadMessage(msg, "Draft", flags, <span style="color: blue;">CType</span>(<span style="color: blue;">Nothing</span>, <span style="color: blue;">String</span>))
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.DateTime)">
            <summary>
            Uploads a mail message to the specified folder and assigns the specified date and flags to this message.
            </summary>
            <param name="msg">A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be uploaded.</param>
            <param name="folderName">The full name of the folder to upload the message to.</param>
            <param name="flags">The string containing the message flags (in IMAP4 format) to be assigned to the message, or a null reference (<b>Nothing</b> in Visual Basic) to
            set default flags at the discretion of the server.</param>
            <param name="dt">The datetime to be assigned to the INTERNALDATE attribute of the message
            (the date of receiving the message by the server).</param>
            <returns><b>true</b> if the message was uploaded successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method implements APPEND command of the IMAP4 protocol.</para>
            <para>To upload a file, the developer can first load it into <see cref="T:MailBee.Mime.MailMessage"/> object using <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            method, and then call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> passing a reference to this <see cref="T:MailBee.Mime.MailMessage"/> object. There is no extra overhead
            on parsing the message since <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> just reads a file into memory. The <see cref="T:MailBee.Mime.MailMessage"/> won't parse the contained message unless the application
            starts accessing its properties or methods (so-called "lazy" model).</para>
            <para>To upload a mail message just sent using <see cref="T:MailBee.SmtpMail.Smtp"/> component, the developer call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method passing
            a reference to the <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property.</para>
            <para>To obtain the UID value assigned to the uploaded message, the developer should either examine <see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/> property
            of <see cref="T:MailBee.ImapMail.UidPlusResult"/> object passed in <i>res</i> parameter of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method (the server must support UIDPLUS capability),
            or obtain <see cref="P:MailBee.ImapMail.FolderStatus.UidNext"/> value calling <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method before making upload (this approach is compatible with all servers).</para>
            <para>To get standard message flags as string in IMAP4 format (e.g. "\Seen \Flagged"), the developer can use <see cref="M:MailBee.ImapMail.MessageFlagSet.SystemFlagsToString(MailBee.ImapMail.SystemMessageFlags)"/> method.</para>
            <para>In addition to the flags specified by the application, the server also sets "\Recent" flag. Thus, the uploaded message will always have at least "\Recent" flag set.</para>
            </remarks>
            <example>
            This sample creates a new mail message and saves it into "Draft" folder (creating the folder if necessary)
            assigning the current datetime/timezone of the local computer and setting
            "\Draft" flag. Also, the server will implicitly add "\Recent" flag.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap4.company.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Create a new message. Assume we need to save a draft of the message.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Create Draft folder if needed.</span>
            		FolderCollection folders = imp.DownloadFolders(<span style="color: blue;">false</span>, <span style="color: blue;">null</span>, "Draft");
            		<span style="color: blue;">if</span> (folders.Count == 0)
            		{
            			imp.CreateFolder("Draft");
            		}
            
            		<span style="color: green;">// Upload the message and assign the current datetime and timezone</span>
            		<span style="color: green;">// of the client as the date of receiving the message by the server</span>
            		<span style="color: green;">// (INTERNALDATE in IMAP4 terms). </span>
            		<span style="color: green;">// "\Draft" string is set directly. Alternatively, we could have</span>
            		<span style="color: green;">// used MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Draft);</span>
            		imp.UploadMessage(msg, "Draft", @"\Draft", DateTime.Now);
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            
            		<span style="color: green;">' Create a new message. Assume we need to save a draft of the message.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Create Draft folder if needed.</span>
            		<span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.DownloadFolders(<span style="color: blue;">False</span>, <span style="color: blue;">Nothing</span>, "Draft")
            
            		<span style="color: blue;">If</span> (folders.Count = 0) <span style="color: blue;">Then</span>
            			imp.CreateFolder("Draft")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Upload the message and assign the current datetime and timezone</span>
            		<span style="color: green;">' of the client as the date of receiving the message by the server</span>
            		<span style="color: green;">' (INTERNALDATE in IMAP4 terms). </span>
            		<span style="color: green;">' "\Draft" string is set directly. Alternatively, we could have</span>
            		<span style="color: green;">' used MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Draft)</span>
            		imp.UploadMessage(msg, "Draft", "\Draft", DateTime.Now)
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,MailBee.ImapMail.SystemMessageFlags)">
            <summary>
            Uploads a mail message to the specified folder and assigns the specified flags to this message.
            <seealso cref="T:MailBee.SmtpMail.Smtp"/>
            </summary>
            <param name="msg">A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be uploaded.</param>
            <param name="folderName">The full name of the folder to upload the message to.</param>
            <param name="systemFlags">A set of flags to be assigned to the message.</param>
            <returns><b>true</b> if the message was uploaded successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method implements APPEND command of the IMAP4 protocol. The uploaded message will have the specified flags assigned + "\Recent" flag which
            is always added by the server for uploaded messages. The date of receiving the message by the server (INTERNALDATE in IMAP4 terms) will be
            set to the current datetime/timezone of the local computer (not the mail server).</para>
            <para>To upload a file, the developer can first load it into <see cref="T:MailBee.Mime.MailMessage"/> object using <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            method, and then call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> passing a reference to this <see cref="T:MailBee.Mime.MailMessage"/> object. There is no extra overhead
            on parsing the message since <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> just reads a file into memory. The <see cref="T:MailBee.Mime.MailMessage"/> won't parse the contained message unless the application
            starts accessing its properties or methods (so-called "lazy" model).</para>
            <para>To upload a mail message just sent using <see cref="T:MailBee.SmtpMail.Smtp"/> component, the developer call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method passing
            a reference to the <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property.</para>
            <para>To obtain the UID value assigned to the uploaded message, the developer should either examine <see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/> property
            of <see cref="T:MailBee.ImapMail.UidPlusResult"/> object passed in <i>res</i> parameter of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method (the server must support UIDPLUS capability),
            or obtain <see cref="P:MailBee.ImapMail.FolderStatus.UidNext"/> value calling <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method before making upload (this approach is compatible with all servers).</para>
            </remarks>
            <example>
            <para>This sample sends a mail message using <see cref="T:MailBee.SmtpMail.Smtp"/> component and
            then uploads it into "Sent" folder setting "\Seen" and "\Answered" flags. 
            </para>
            <para>
            The sample assumes "Sent" folder had already been created in the past.
            To learn how to make sure the folder exists, see
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.DateTime)"/> or
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)"/> samples.
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Send the message using Smtp object.</span>
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Send directly (via MX lookup). To send via SMTP server,</span>
            		<span style="color: green;">// comment the next line and uncomment 2nd or 3rd statement below.</span>
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Uncomment to send via SMTP server not using SMTP authentication.</span>
            		<span style="color: green;">// mailer.SmtpServers.Add("smtp.host.com");</span>
            
            		<span style="color: green;">// Uncomment to send via SMTP server using SMTP authentication.	</span>
            		<span style="color: green;">// mailer.SmtpServers.Add("smtp.host.com", "jdoe", "secret");</span>
            
            		mailer.From = <span style="color: blue;">new</span> EmailAddress("jdoe@host.com", "John Doe");
            		mailer.To.Add("sally@company.com", "Sally Smith");
            		mailer.Subject = "Annual report";
            		mailer.BodyPlainText = "The report contents";
            		mailer.Send();
            
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		imp.Log.Filename = @"C:\log.txt";
            		imp.Log.Enabled = <span style="color: blue;">true</span>;
            		imp.Log.Clear();
            
            		<span style="color: green;">// Connect to the IMAP4 server and log in the account.</span>
            		imp.Connect("imap.host.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Upload the message just sent into "Sent" folder and set</span>
            		<span style="color: green;">// \Seen and \Answered flags.</span>
            		imp.UploadMessage(mailer.Message, "Sent",
            			SystemMessageFlags.Seen | SystemMessageFlags.Answered);
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Send the message using Smtp object.</span>
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Send directly (via MX lookup). To send via SMTP server,</span>
            		<span style="color: green;">' comment the next line and uncomment 2nd or 3rd statement below.</span>
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Uncomment to send via SMTP server not using SMTP authentication.</span>
            		<span style="color: green;">' mailer.SmtpServers.Add("smtp.host.com")</span>
            
            		<span style="color: green;">' Uncomment to send via SMTP server using SMTP authentication.	</span>
            		<span style="color: green;">' mailer.SmtpServers.Add("smtp.host.com", "jdoe", "secret")</span>
            
            		mailer.From = <span style="color: blue;">New</span> EmailAddress("jdoe@host.com", "John Doe")
            		mailer.To.Add("sally@company.com", "Sally Smith")
            		mailer.Subject = "Annual report"
            		mailer.BodyPlainText = "The report contents"
            		mailer.Send()
            
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		imp.Log.Filename = "C:\log.txt"
            		imp.Log.Enabled = <span style="color: blue;">True</span>
            		imp.Log.Clear()
            
            		<span style="color: green;">' Connect to the IMAP4 server and log in the account.</span>
            		imp.Connect("imap.host.com")
            		imp.Login("jdoe", "secret")
            
            		<span style="color: green;">' Upload the message just sent into "Sent" folder and set</span>
            		<span style="color: green;">' \Seen and \Answered flags.</span>
            		imp.UploadMessage(mailer.Message, "Sent", _
            			SystemMessageFlags.Seen <span style="color: blue;">Or</span> SystemMessageFlags.Answered)
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String)">
            <summary>
            Uploads a mail message to the specified folder.
            </summary>
            <param name="msg">A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be uploaded.</param>
            <param name="folderName">The full name of the folder to upload the message to.</param>
            <returns><b>true</b> if the message was uploaded successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method implements APPEND command of the IMAP4 protocol. For uploaded messages, the mail server automatically assigns "\Recent" flag.
            The date of receiving the message by the server (INTERNALDATE in IMAP4 terms) will be
            set to the current datetime/timezone of the local computer (not the mail server).</para>
            <para>To upload a file, the developer can first load it into <see cref="T:MailBee.Mime.MailMessage"/> object using <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            method, and then call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> passing a reference to this <see cref="T:MailBee.Mime.MailMessage"/> object. There is no extra overhead
            on parsing the message since <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/> just reads a file into memory. The <see cref="T:MailBee.Mime.MailMessage"/> won't parse the contained message unless the application
            starts accessing its properties or methods (so-called "lazy" model).</para>
            <para>To upload a mail message just sent using <see cref="T:MailBee.SmtpMail.Smtp"/> component, the developer call <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method passing
            a reference to the <see cref="P:MailBee.SmtpMail.Smtp.Message"/> property (see <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,MailBee.ImapMail.SystemMessageFlags)"/> sample).</para>
            <para>To obtain the UID value assigned to the uploaded message, the developer should either examine <see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/> property
            of <see cref="T:MailBee.ImapMail.UidPlusResult"/> object passed in <i>res</i> parameter of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method (the server must support UIDPLUS capability),
            or obtain <see cref="P:MailBee.ImapMail.FolderStatus.UidNext"/> value calling <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method before making upload (this approach is compatible with all servers).</para>
            </remarks>
            <example>
            <para>This sample loads the message from a file and uploads it into "Archive" folder.
            </para>
            <para>
            The sample assumes "Archive" folder had already been created in the past.
            To learn how to make sure the folder exists, see
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.DateTime)"/> or
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)"/> samples.
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the IMAP4 server and log in the account.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            
            		<span style="color: green;">// Load the message from C:\Temp\message.eml file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Temp\message.eml");
            
            		<span style="color: green;">// Upload the message into "Archive" folder.</span>
            		imp.UploadMessage(msg, "Archive");
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the IMAP4 server and log in the account.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe@company.com", "secret")
            
            		<span style="color: green;">' Load the message from C:\Temp\message.eml file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Temp\message.eml")
            
            		<span style="color: green;">' Upload the message into "Archive" folder.</span>
            		imp.UploadMessage(msg, "Archive")
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginUploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for uploading the message into the specified folder on the server.
            <seealso cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <param name="msg">A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be uploaded.</param>
            <param name="folderName">The full name of the folder to upload the message to.</param>
            <param name="flags">The string containing the message flags (in IMAP4 format) to be assigned to the message, or a null reference (<b>Nothing</b> in Visual Basic) to
            set default flags at the discretion of the server.</param>
            <param name="dateTimeString">The string containing datetime (in IMAP4 format) to be assigned to the INTERNALDATE attribute of the message
            (the date of receiving the message by the server), or a null reference to let the server assign its current datetime value.</param>
            <param name="batchMode">If <b>true</b> and LITERAL+ extension is supported by the server, the message will be
            uploaded in a single network operation; otherwise, in two operations.</param>
            <param name="result">A reference to the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object to be filled with the outcome
            of the upload operation reported by UIDPLUS enabled server (the outcome includes the UID assigned to the uploaded message and the UIDVALIDITY of the folder the message was uploaded to),
            or a null reference if the application does not need this information.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/>.</remarks>
            <example>This sample demonstrates asynchronous uploading a message into "Draft" folder and use of a callback function
            in a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// A callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> UploadMessageCallback(IAsyncResult result)
            	{
            		Imap imp = (Imap)result.AsyncState;
            
            		<span style="color: blue;">try</span>
            		{
            			imp.EndUploadMessage();
            			Console.WriteLine("The message was successfully uploaded");
            		}
            		<span style="color: blue;">catch</span> (MailBeeException e)
            		{
            			<span style="color: green;">// In callback functions (generally speaking, in worker threads),</span>
            			<span style="color: green;">// it's better to handle exceptions. If exception is not handled,</span>
            			<span style="color: green;">// the worker thread silently dies and the application may never</span>
            			<span style="color: green;">// know that something went wrong.</span>
            			Console.WriteLine(e.Message);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server and log in the account.</span>
            		imp.Connect("imap.somedomain.com");
            		imp.Login("jdoe", "secret");
            
            		<span style="color: green;">// Create a new message. Assume we need to save a draft of the message.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Initiate an asynchronous upload attempt with the following settings:</span>
            		<span style="color: green;">// - Object to download: msg</span>
            		<span style="color: green;">// - Folder to download to: Draft</span>
            		<span style="color: green;">// - Flags: \Draft</span>
            		<span style="color: green;">// - Message date on server: datetime/timezone of the local computer</span>
            		<span style="color: green;">// - batch mode: enabled</span>
            		<span style="color: green;">// - obtain UID of uploaded message: no, thanks</span>
            		IAsyncResult ar = imp.BeginUploadMessage(msg, "Draft", @"\Draft",
            			<span style="color: blue;">null</span>, <span style="color: blue;">true</span>, <span style="color: blue;">null</span>, <span style="color: blue;">new</span> AsyncCallback(UploadMessageCallback), imp);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// uploading occurs on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the upload process is still in progress,</span>
            		<span style="color: green;">// then wait until it's finished.</span>
            		<span style="color: blue;">while</span> (imp.IsBusy) ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' A callback function.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> UploadMessageCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">CType</span>(result.AsyncState, Imap)
            
            		<span style="color: blue;">Try</span>
            			imp.EndUploadMessage()
            			Console.WriteLine("The message was successfully uploaded")
            		<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            			<span style="color: green;">' In callback functions (generally speaking, in worker threads),</span>
            			<span style="color: green;">' it's better to handle exceptions. If exception is not handled,</span>
            			<span style="color: green;">' the worker thread silently dies and the application may never</span>
            			<span style="color: green;">' know that something went wrong.</span>
            			Console.WriteLine(e.Message)
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server and log in the account.</span>
            		imp.Connect("imap.somedomain.com")
            		imp.Login("jdoe", "secret")
            
            		<span style="color: green;">' Create a new message. Assume we need to save a draft of the message.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Initiate an asynchronous upload attempt with the following settings:</span>
            		<span style="color: green;">' - Object to download: msg</span>
            		<span style="color: green;">' - Folder to download to: Draft</span>
            		<span style="color: green;">' - Flags: \Draft</span>
            		<span style="color: green;">' - Message date on server: datetime/timezone of the local computer</span>
            		<span style="color: green;">' - batch mode: enabled</span>
            		<span style="color: green;">' - obtain UID of uploaded message: no, thanks</span>
            		<span style="color: blue;">Dim</span> ar <span style="color: blue;">As</span> IAsyncResult = imp.BeginUploadMessage(msg, "Draft", "\Draft", _
            			<span style="color: blue;">Nothing</span>, <span style="color: blue;">True</span>, <span style="color: blue;">Nothing</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> UploadMessageCallback), imp)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">' uploading occurs on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' If the upload process is still in progress,</span>
            		<span style="color: green;">' then wait until it's finished.</span>
            		<span style="color: blue;">While</span> imp.IsBusy
            			ar.AsyncWaitHandle.WaitOne()
            		<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndUploadMessage">
            <summary>
            Ends the pending asynchronous upload message request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginUploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.DeleteMessages(System.String,System.Boolean)">
            <summary>
            Marks the specified messages in the currently selected folder as deleted.
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <returns><b>true</b> if the messages have been marked as deleted successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <note>
            This method just sets "\Deleted" flag for the specified messages. To purge deleted messages permanently,
            call <see cref="M:MailBee.ImapMail.Imap.Expunge(System.String,System.Boolean)"/> method or explicitly unselect the folder using <see cref="M:MailBee.ImapMail.Imap.Close(System.Boolean)"/> method.
            </note>
            <para>To learn now to undelete messages marked as deleted, see the sample in <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,MailBee.ImapMail.SystemMessageFlags,MailBee.ImapMail.MessageFlagAction)"/> topic.</para>
            </remarks>
            <example>
            This sample marks the first message and the messages #5, #6, and #7 in the inbox as deleted.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.server.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Mark messages as deleted.</span>
            		imp.DeleteMessages("1,5:7", <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Uncomment the next line to purge deleted messages.</span>
            		<span style="color: green;">// imp.Close();</span>
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.server.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Mark messages as deleted.</span>
            		imp.DeleteMessages("1,5:7", <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Uncomment the next line to purge deleted messages.</span>
            		<span style="color: green;">' imp.Close()</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)">
            <summary>
            Sets or resets the specified flags for the specified messages in the currently selected folder.
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="flags">The string containing IMAP4 flags to be set or reset.</param>
            <param name="action">The action to perform with the specified flags (set, reset, etc).</param>
            <param name="silentMode">If <b>true</b>, the server will NOT respond with the new values of flags of the affected messages;
            otherwise, the server will produce a series of untagged FETCH responses containing the updated flag lists of affected messages.</param>
            <returns><b>true</b> if the message flags have been updated successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <para>To clear flag list for certain message(s), call this method passing a null reference or empty string as <paramref name="flags"/> value and
            <see cref="F:MailBee.ImapMail.MessageFlagAction.Replace"/> as <paramref name="action"/> value.</para>
            <para>MailBee ignores the FETCH response returned by the server when <paramref name="silentMode"/> is <b>false</b>. If the application needs to
            process this data, the developer can use <see cref="M:MailBee.ImapMail.Imap.GetServerResponses(System.String)"/> method to analyze the server response.</para>
            <para>Another reason to set <paramref name="silentMode"/> to <b>false</b> is to determine if the server really applied the
            specified flags by examining the log file (see the sample code below).</para>
            <para>Other overloads of <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/> method set <paramref name="silentMode"/> to <b>true</b>.
            </para>
            </remarks>
            <example>
            <para>This sample replaces all flags of the last message in the inbox with the non-standard "$Spam" flag.
            Also demonstrates how to quickly check if the server really applied the specified flags using log file or console output.
            </para>
            <note>
            This sample may throw an exception or do nothing if the mail server forbids using non-standard message flags. Or,
            the server may set the flag in memory but discard the state change when the current session ends.
            See the sample in <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)"/> topic
            on how to programmatically determine whether the server allows using non-standard flags.
            </note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Set where to save log file. However, we do</span>
            		<span style="color: green;">// not enable logging here. We'll enable it</span>
            		<span style="color: green;">// later for a single moment of setting flags.</span>
            		imp.Log.Filename = @"C:\Temp\log.txt";
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.somedomain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: blue;">if</span> (imp.MessageCount &gt; 0)
            		{
            			<span style="color: green;">// Enable logging into a file to track</span>
            			<span style="color: green;">// the status of setting flags.</span>
            			imp.Log.Enabled = <span style="color: blue;">true</span>;
            
            			<span style="color: green;">// Replace all flags of the last message with "$Spam" flag.</span>
            			<span style="color: green;">// The developer can then take a look at C:\Temp\log.txt file</span>
            			<span style="color: green;">// to find out if untagged "* FETCH (FLAGS)" response to</span>
            			<span style="color: green;">// STORE command contains "$Spam" element. If it does, the</span>
            			<span style="color: green;">// server indeed applied this flag to the message.</span>
            			imp.SetMessageFlags(imp.MessageCount.ToString(), <span style="color: blue;">false</span>,
            				"$Spam", MessageFlagAction.Replace, <span style="color: blue;">false</span>);
            
            			<span style="color: green;">// Disable logging again. Thus, the log file will be pretty</span>
            			<span style="color: green;">// small, and the developer will be able to read it easily.</span>
            			imp.Log.Enabled = <span style="color: blue;">false</span>;
            
            			<span style="color: green;">// Demonstrate alternative way of analyzing FETCH responses.</span>
            			<span style="color: blue;">string</span>[] flagResponses = imp.GetServerResponses("FETCH");
            			<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> response <span style="color: blue;">in</span> flagResponses)
            			{
            				Console.WriteLine(response);
            			}
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("The inbox is empty");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Set where to save log file. However, we do</span>
            		<span style="color: green;">' not enable logging here. We'll enable it</span>
            		<span style="color: green;">' later for a single moment of setting flags.</span>
            		imp.Log.Filename = "C:\Temp\log.txt"
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.somedomain.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: blue;">If</span> imp.MessageCount &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Enable logging into a file to track</span>
            			<span style="color: green;">' the status of setting flags.</span>
            			imp.Log.Enabled = <span style="color: blue;">True</span>
            
            			<span style="color: green;">' Replace all flags of the last message with "$Spam" flag.</span>
            			<span style="color: green;">' The developer can then take a look at C:\Temp\log.txt file</span>
            			<span style="color: green;">' to find out if untagged "* FETCH (FLAGS)" response to</span>
            			<span style="color: green;">' STORE command contains "$Spam" element. If it does, the</span>
            			<span style="color: green;">' server indeed applied this flag to the message.</span>
            			imp.SetMessageFlags(imp.MessageCount.ToString(), <span style="color: blue;">False</span>, "$Spam", _
            				MessageFlagAction.Replace, <span style="color: blue;">False</span>)
            
            			<span style="color: green;">' Disable logging again. Thus, the log file will be pretty</span>
            			<span style="color: green;">' small, and the developer will be able to read it easily.</span>
            			imp.Log.Enabled = <span style="color: blue;">False</span>
            
            			<span style="color: green;">' Demonstrate alternative way of analyzing FETCH responses.</span>
            			<span style="color: blue;">Dim</span> flagResponses <span style="color: blue;">As</span> <span style="color: blue;">String</span>() = imp.GetServerResponses("FETCH")
            			<span style="color: blue;">For</span> <span style="color: blue;">Each</span> response <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> flagResponses
            				Console.WriteLine(response)
            			<span style="color: blue;">Next</span>
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("The inbox is empty")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,MailBee.ImapMail.SystemMessageFlags,MailBee.ImapMail.MessageFlagAction)">
            <summary>
            Sets or resets the specified flags for the specified messages in the currently selected folder.
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="systemFlags">A set of flags to be set or reset.</param>
            <param name="action">The action to perform with the specified flags (set, reset, etc).</param>
            <returns><b>true</b> if the message flags have been updated successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</remarks>
            <example>This sample undeletes all messages marked as deleted in the inbox folder.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap4.server.com");
            		imp.Login("jdoe@server.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Get UIDs of deleted messages. We could have also skipped this</span>
            		<span style="color: green;">// stage and just tell the server to remove \Deleted flag for</span>
            		<span style="color: green;">// all messages (even for those message which do not have this</span>
            		<span style="color: green;">// flag set - such messages won't be affected). We call Search()</span>
            		<span style="color: green;">// method and then consume its results in SetMessageFlags() just</span>
            		<span style="color: green;">// for purposes of illustration.</span>
            		UidCollection uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "DELETED", <span style="color: blue;">null</span>);
            
            		<span style="color: blue;">if</span> (uids.Count &gt; 0)
            		{
            			<span style="color: green;">// Remove \Deleted flag from the deleted messages.</span>
            			imp.SetMessageFlags(uids.ToString(), <span style="color: blue;">true</span>,
            				SystemMessageFlags.Deleted, MessageFlagAction.Remove);
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("imap4.server.com")
            		imp.Login("jdoe@server.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Get UIDs of deleted messages. We could have also skipped this</span>
            		<span style="color: green;">' stage and just tell the server to remove \Deleted flag for</span>
            		<span style="color: green;">' all messages (even for those message which do not have this</span>
            		<span style="color: green;">' flag set - such messages won't be affected). We call Search()</span>
            		<span style="color: green;">' method and then consume its results in SetMessageFlags() just</span>
            		<span style="color: green;">' for purposes of illustration.</span>
            		<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> UidCollection = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "DELETED", <span style="color: blue;">Nothing</span>), UidCollection)
            
            		<span style="color: blue;">If</span> uids.Count &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Remove \Deleted flag from the deleted messages.</span>
            			imp.SetMessageFlags(uids.ToString(), <span style="color: blue;">True</span>, SystemMessageFlags.Deleted, MessageFlagAction.Remove)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginSetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to set or reset the specified message flags for the specified messages in the currently selected folder.
            <seealso cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="flags">The string containing IMAP4 flags to be set or reset.</param>
            <param name="action">The action to perform with the specified flags (set, reset, etc).</param>
            <param name="silentMode">If <b>true</b>, the server will NOT respond with the new values of flags of the affected messages;
            otherwise, the server will produce a series of untagged FETCH responses containing the updated flag lists of affected messages.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous setting message flags.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/>.</remarks>
            <example>
            <para>
            This WinForms samples deletes the first message in the inbox folder of the mail account asynchronously (in a worker thread).
            The sample then expunges the deleted messages (the expunge is also performed in worker thread).</para>
            <para>
            The sample also demonstrates how to wait for asynchronous operation completion without
            blocking user interface of the application (the user can click buttons, move windows, etc) during
            the asynchronous processing. However, the sample does not allow the user to click a button which starts
            the asynchronous operation if this operation is already in progress.
            </para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: blue;">bool</span> finished;
            <span style="color: blue;">bool</span> started = <span style="color: blue;">false</span>;
            
            <span style="color: green;">// A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">// it cannot display any messages or otherwise access UI.</span>
            <span style="color: green;">// Any updates of UI must take place on message loop thread.</span>
            <span style="color: green;">// See the sample in BeginSearch() topic on how to update UI in</span>
            <span style="color: green;">// such scenario.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> SetMessageFlagsCallback(IAsyncResult result)
            {
            	Imap imp = (Imap)result.AsyncState;
            
            	<span style="color: green;">// It's important to handle exceptions in worker threads. Otherwise,</span>
            	<span style="color: green;">// the worker thread could silently die and the application would</span>
            	<span style="color: green;">// have never known this had happened.</span>
            	<span style="color: blue;">try</span>
            	{
            		imp.EndSetMessageFlags();
            		imp.Expunge();
            	}
            	<span style="color: blue;">catch</span> (MailBeeException e)
            	{
            		MessageBox.Show(e.Message);
            	}
            	<span style="color: blue;">finally</span>
            	{
            		finished = <span style="color: blue;">true</span>;
            	}
            }
            
            <span style="color: green;">// Add button1 on the form to make this sample working.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> button1_Click(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	<span style="color: blue;">if</span> (started)
            	{
            		MessageBox.Show("The operation is already in progress");
            	}
            	<span style="color: blue;">else</span>
            	{
            		started = <span style="color: blue;">true</span>;
            	}
            
            	finished = <span style="color: blue;">false</span>;
            
            	Imap imp = <span style="color: blue;">new</span> Imap();
            
            	<span style="color: green;">// Connect to the server, login and select inbox.</span>
            	imp.Connect("mail.company.com");
            	imp.Login("jdoe", "secret");
            	imp.SelectFolder("Inbox");
            
            	<span style="color: green;">// Asynchronously mark the first message as deleted. Instead of</span>
            	<span style="color: green;">// MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Deleted),</span>
            	<span style="color: green;">// we could simply use "\Deleted" (@"\Deleted" in C#).</span>
            	imp.BeginSetMessageFlags("1", <span style="color: blue;">false</span>,
            		MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Deleted),
            		MessageFlagAction.Add, <span style="color: blue;">true</span>,
            		<span style="color: blue;">new</span> AsyncCallback(SetMessageFlagsCallback), imp);
            
            	<span style="color: green;">// Wait until completion via periodic polling</span>
            	<span style="color: green;">// of the completion status.</span>
            	<span style="color: blue;">while</span> (!finished)
            	{
            		System.Threading.Thread.Sleep(1);
            
            		<span style="color: green;">// It's not necessary to call DoEvents here since we do not</span>
            		<span style="color: green;">// handle any MailBee events in this sample. However, if we did,</span>
            		<span style="color: green;">// we would have needed this call to let the events be processed.</span>
            		<span style="color: green;">// Alternatively, we could have set imp.RaiseEventsViaMessageLoop</span>
            		<span style="color: green;">// to false and use imp.Wait() instead of Thread.Sleep() and</span>
            		<span style="color: green;">// Application.DoEvents(). If using imp.Wait(), we would not need</span>
            		<span style="color: green;">// to prevent this routine from being called again while it's</span>
            		<span style="color: green;">// already being executed since imp.Wait() blocks UI and it would</span>
            		<span style="color: green;">// be impossible to click a button until imp.Wait() completes.</span>
            		Application.DoEvents();
            	}
            
            	<span style="color: green;">// Disconnect from the server.</span>
            	imp.Disconnect();
            
            	started = <span style="color: blue;">false</span>;
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: blue;">Dim</span> finished <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span>
            <span style="color: blue;">Dim</span> started <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            <span style="color: green;">' A callback function. Since it's called on Imap worker thread,</span>
            <span style="color: green;">' it cannot display any messages or otherwise access UI.</span>
            <span style="color: green;">' Any updates of UI must take place on message loop thread.</span>
            <span style="color: green;">' See the sample in BeginSearch() topic on how to update UI in</span>
            <span style="color: green;">' such scenario.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> SetMessageFlagsCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">CType</span>(result.AsyncState, Imap)
            
            	<span style="color: green;">' It's important to handle exceptions in worker threads. Otherwise,</span>
            	<span style="color: green;">' the worker thread could silently die and the application would</span>
            	<span style="color: green;">' have never known this had happened.</span>
            	<span style="color: blue;">Try</span>
            		imp.EndSetMessageFlags()
            		imp.Expunge()
            	<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            		MessageBox.Show(e.Message)
            	<span style="color: blue;">Finally</span>
            		finished = <span style="color: blue;">True</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Add button1 on the form to make this sample working.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> button1_Click(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">If</span> started <span style="color: blue;">Then</span>
            		MessageBox.Show("The operation is already in progress")
            	<span style="color: blue;">Else</span>
            		started = <span style="color: blue;">True</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            	finished = <span style="color: blue;">False</span>
            
            	<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            	<span style="color: green;">' Connect to the server, login and select inbox.</span>
            	imp.Connect("mail.company.com")
            	imp.Login("jdoe", "secret")
            	imp.SelectFolder("Inbox")
            
            	<span style="color: green;">' Asynchronously mark the first message as deleted. Instead of</span>
            	<span style="color: green;">' MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Deleted),</span>
            	<span style="color: green;">' we could simply use "\Deleted" ("\Deleted" in Visual Basic).</span>
            	imp.BeginSetMessageFlags("1", <span style="color: blue;">False</span>, _
            		MessageFlagSet.SystemFlagsToString(SystemMessageFlags.Deleted), _
            		MessageFlagAction.Add, <span style="color: blue;">True</span>, <span style="color: blue;">New</span> AsyncCallback(<span style="color: blue;">AddressOf</span> SetMessageFlagsCallback), imp)
            
            	<span style="color: green;">' Wait until completion via periodic polling</span>
            	<span style="color: green;">' of the completion status.</span>
            	<span style="color: blue;">While</span> <span style="color: blue;">Not</span> finished
            		System.Threading.Thread.Sleep(1)
            
            		<span style="color: green;">' It's not necessary to call DoEvents here since we do not</span>
            		<span style="color: green;">' handle any MailBee events in this sample. However, if we did,</span>
            		<span style="color: green;">' we would have needed this call to let the events be processed.</span>
            		<span style="color: green;">' Alternatively, we could have set imp.RaiseEventsViaMessageLoop</span>
            		<span style="color: green;">' to false and use imp.Wait() instead of Thread.Sleep() and</span>
            		<span style="color: green;">' Application.DoEvents(). If using imp.Wait(), we would not need</span>
            		<span style="color: green;">' to prevent this routine from being called again while it's</span>
            		<span style="color: green;">' already being executed since imp.Wait() blocks UI and it would</span>
            		<span style="color: green;">' be impossible to click a button until imp.Wait() completes.</span>
            		Application.DoEvents()
            	<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            	<span style="color: green;">' Disconnect from the server.</span>
            	imp.Disconnect()
            
            	started = <span style="color: blue;">False</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndSetMessageFlags">
            <summary>
            Ends a pending asynchronous setting message flags request.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)">
            <summary>
            Copies the specified messages from the currently selected folder to the specified folder,
            and retrieves UIDs assigned to the copied messages in the destination folder.
            <seealso cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="targetFolderName">The full name of the destination folder.</param>
            <param name="result">A reference to the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object to be filled with the outcome
            of the copy operation reported by UIDPLUS enabled server (the outcome includes the UIDs
            of the source messages being copied, the UIDs assigned to the copied messages in
            the destination folder, and the UIDVALIDITY of the destination folder),
            or a null reference (<b>Nothing</b> in Visual Basic) if the application does not need this information.</param>
            <returns><b>true</b> if the messages were copied successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <para>When <paramref name="result"/> is specified and the server supports UIDPLUS extension, <see cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/> method will
            set the supplied <see cref="T:MailBee.ImapMail.UidPlusResult"/> object properties as below:
            <list type="table">
            <listheader><term>Property</term><term>Value</term></listheader>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.IsSupported"/></description><description><b>true</b></description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.SrcUids"/></description><description>The <see cref="T:MailBee.ImapMail.UidCollection"/> object containing the UIDs of the messages being copied.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.SrcUidString"/></description><description>The string containing the message sequence of UIDs of the messages being copied.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUids"/></description><description>The <see cref="T:MailBee.ImapMail.UidCollection"/> object containing the UIDs assigned to the copied messages in <paramref name="targetFolderName"/> folder.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/></description><description>The string containing the message sequence of UIDs assigned to the copied messages in <paramref name="targetFolderName"/> folder.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUidValidity"/></description><description>The UIDVALIDITY of the <paramref name="targetFolderName"/> folder.</description></item>
            </list>
            If UIDPLUS capability is not supported by the server, <see cref="P:MailBee.ImapMail.UidPlusResult.IsSupported"/> will be set to <b>false</b>.
            </para>
            </remarks>
            <example>This sample copies last 3 messages from the inbox folder to the Sent folder (it's assumed the Sent folder already exists and the inbox
            contains at least 3 messages). The UIDs assigned to the copied messages in the destination folder are displayed if UIDPLUS capability is supported by the server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Prepare the object that will receive copying results.</span>
            		UidPlusResult res = <span style="color: blue;">new</span> UidPlusResult();
            
            		<span style="color: blue;">string</span> range = (imp.MessageCount - 2).ToString() + ":*";
            
            		<span style="color: green;">// Copy the messages into "Sent" and fill res with copying results.</span>
            		imp.CopyMessages(range, <span style="color: blue;">false</span>, "Sent", res);
            
            		<span style="color: blue;">if</span> (res.IsSupported)
            		{
            			Console.WriteLine("UIDs assigned to the copied messages are " +
            				res.DestUidString);
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("Sorry, UIDPLUS is not supported by the server");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe@company.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Prepare the object that will receive copying results.</span>
            		<span style="color: blue;">Dim</span> res <span style="color: blue;">As</span> <span style="color: blue;">New</span> UidPlusResult
            		<span style="color: blue;">Dim</span> range <span style="color: blue;">As</span> <span style="color: blue;">String</span> = (imp.MessageCount - 2).ToString() &amp; ":*"
            
            		<span style="color: green;">' Copy the messages into "Sent" and fill res with copying results.</span>
            		imp.CopyMessages(range, <span style="color: blue;">False</span>, "Sent", res)
            
            		<span style="color: blue;">If</span> res.IsSupported <span style="color: blue;">Then</span>
            			Console.WriteLine("UIDs assigned to the copied messages are " &amp; _
            				res.DestUidString)
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("Sorry, UIDPLUS is not supported by the server")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String)">
            <summary>
            Copies the specified messages from the currently selected folder to the specified folder.
            <seealso cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="targetFolderName">The full name of the destination folder.</param>
            <returns><b>true</b> if the messages were copied successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</remarks>
            <example>
            <para>This sample copies all messages from the inbox folder to the Sent folder.</para>
            <para>
            The sample assumes "Sent" folder had already been created in the past.
            To learn how to make sure the folder exists, see
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.DateTime)"/> or
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)"/> samples.
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.company.com");
            		imp.Login("jdoe@company.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Copy all messages in Inbox into Sent.</span>
            		imp.CopyMessages(Imap.AllMessages, <span style="color: blue;">false</span>, "Sent");
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.company.com")
            		imp.Login("jdoe@company.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Copy all messages in Inbox into Sent.</span>
            		imp.CopyMessages(Imap.AllMessages, <span style="color: blue;">False</span>, "Sent")
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)">
            <summary>
            Moves the specified messages from the currently selected folder to the specified folder,
            and retrieves UIDs assigned to the moved messages in the destination folder.
            <seealso cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="targetFolderName">The full name of the destination folder.</param>
            <param name="result">A reference to the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object to be filled with the outcome
            of the move operation reported by UIDPLUS enabled server (the outcome includes the UIDs
            of the source messages being moved, the UIDs assigned to the moved messages in
            the destination folder, and the UIDVALIDITY of the destination folder),
            or a null reference (<b>Nothing</b> in Visual Basic) if the application does not need this information.</param>
            <returns><b>true</b> if the messages were moved successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <para>When <paramref name="result"/> is specified and the server supports UIDPLUS extension, <see cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/> method will
            set the supplied <see cref="T:MailBee.ImapMail.UidPlusResult"/> object properties as below:
            <list type="table">
            <listheader><term>Property</term><term>Value</term></listheader>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.IsSupported"/></description><description><b>true</b></description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.SrcUids"/></description><description>The <see cref="T:MailBee.ImapMail.UidCollection"/> object containing the UIDs of the messages which had been moved from the source folder.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.SrcUidString"/></description><description>The string containing the message sequence of UIDs of the messages which had been moved from the source folder.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUids"/></description><description>The <see cref="T:MailBee.ImapMail.UidCollection"/> object containing the UIDs assigned to the moved messages in <paramref name="targetFolderName"/> folder.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUidString"/></description><description>The string containing the message sequence of UIDs assigned to the moved messages in <paramref name="targetFolderName"/> folder.</description></item>
            <item><description><see cref="P:MailBee.ImapMail.UidPlusResult.DestUidValidity"/></description><description>The UIDVALIDITY of the <paramref name="targetFolderName"/> folder.</description></item>
            </list>
            If UIDPLUS capability is not supported by the server, <see cref="P:MailBee.ImapMail.UidPlusResult.IsSupported"/> will be set to <b>false</b>.
            </para>
            <note>The IMAP4 protocol actually does not directly support moving messages between folders. MailBee emulates moving messages
            as a sequence of copying, marking copied messages as deleted in the source folder, and then expunging deleted messages.
            This operation performs quicker when the server supports UIDPLUS extension (because UIDPLUS allows the client to expunge specific
            "\Deleted" messages rather than all such messages in the folder).
            If UIDPLUS is not supported, it takes a bit longer to move messages since MailBee needs to preserve messages which have already had "\Deleted" flag set
            to the moment when <see cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/> method started. If MailBee just expunged the deleted messages from the folder,
            this would affect not only messages being copied but rather all messages which have already had "\Deleted" flag set.
            MailBee avoids this by temporary removing "\Deleted" flag from the messages which have already had this flag, and then restoring
            this flag back when the moving completes. However, when all messages in the folder are being moved, it's not required
            to care about remaining messages. Thus, when UIDPLUS is not supported, moving all messages is performed in a less count of steps than moving
            specific messages only.
            </note>
            </remarks>
            <example>This sample moves the first message from the inbox folder to the Sent folder (it's assumed the Sent folder already exists and the inbox
            contains at least 1 message). The UIDs assigned to the moved messages in the destination folder is displayed if UIDPLUS capability is supported by the server.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.somehost.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Prepare the object that will receive moving results.</span>
            		UidPlusResult res = <span style="color: blue;">new</span> UidPlusResult();
            
            		<span style="color: green;">// Move the first message from Inbox into Sent.</span>
            		imp.MoveMessages("1", <span style="color: blue;">false</span>, "Sent", res);
            
            		<span style="color: blue;">if</span> (res.IsSupported)
            		{
            			Console.WriteLine("UID assigned to the moved message is " +
            				res.DestUidString);
            		}
            		<span style="color: blue;">else</span>
            		{
            			Console.WriteLine("Sorry, UIDPLUS is not supported by the server");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.somehost.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Prepare the object that will receive moving results.</span>
            		<span style="color: blue;">Dim</span> res <span style="color: blue;">As</span> <span style="color: blue;">New</span> UidPlusResult
            
            		<span style="color: green;">' Move the first message from Inbox into Sent.</span>
            		imp.MoveMessages("1", <span style="color: blue;">False</span>, "Sent", res)
            
            		<span style="color: blue;">If</span> res.IsSupported <span style="color: blue;">Then</span>
            			Console.WriteLine("UID assigned to the moved message is " &amp; res.DestUidString)
            		<span style="color: blue;">Else</span>
            			Console.WriteLine("Sorry, UIDPLUS is not supported by the server")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String)">
            <summary>
            Moves the specified messages from the currently selected folder to the specified folder.
            <seealso cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="targetFolderName">The full name of the destination folder.</param>
            <returns><b>true</b> if the messages were moved successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To learn how to specify a valid message sequence (<paramref name="messageIndexSet"/> value), see <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/> topic.</para>
            <note>The IMAP4 protocol actually does not directly support moving messages between folders. MailBee emulates moving messages
            as a sequence of copying, marking copied messages as deleted in the source folder, and then expunging deleted messages.
            You can find more detailed description of this process in <see cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/> overload topic.</note>
            </remarks>
            <example>
            <para>This sample moves all seen (already read) messages from the Inbox folder into the Archive folder.</para>
            <para>
            The sample assumes "Archive" folder had already been created in the past.
            To learn how to make sure the folder exists, see
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.DateTime)"/> or
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)"/> samples.
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.server.com");
            		imp.Login("jdoe@server.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Find all messages which are already read.</span>
            		UidCollection uids = (UidCollection)imp.Search(<span style="color: blue;">true</span>, "SEEN", <span style="color: blue;">null</span>);
            
            		<span style="color: blue;">if</span> (uids.Count &gt; 0)
            		{
            			<span style="color: green;">// Move all SEEN messages into Archive.</span>
            			imp.MoveMessages(uids.ToString(), <span style="color: blue;">true</span>, "Archive");
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.somehost.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Find all messages which are already read.</span>
            		<span style="color: blue;">Dim</span> uids <span style="color: blue;">As</span> UidCollection = <span style="color: blue;">CType</span>(imp.Search(<span style="color: blue;">True</span>, "SEEN", <span style="color: blue;">Nothing</span>), UidCollection)
            
            		<span style="color: blue;">If</span> uids.Count &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Move all SEEN messages into Archive.</span>
            			imp.MoveMessages(uids.ToString(), <span style="color: blue;">True</span>, "Archive")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginCopyOrMoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for copying or moving the specified messages from the currently selected folder to the specified folder.
            <seealso cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <param name="messageIndexSet">A message sequence string containing ordinal message numbers or UIDs. Can be composed manually or using <see cref="M:MailBee.ImapMail.MessageIndexCollection.ToString"/>.</param>
            <param name="indexIsUid">If <b>true</b>, <paramref name="messageIndexSet"/> is treated as a sequence of UIDs; otherwise, as a sequence of ordinal message numbers.</param>
            <param name="targetFolderName">The full name of the destination folder.</param>
            <param name="result">A reference to the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object to be filled with the outcome
            of the copy/move operation reported by UIDPLUS enabled server (the outcome includes the UIDs
            of the source messages being copied/moved, the UIDs assigned to the copied/moved messages in
            the destination folder, and the UIDVALIDITY of the destination folder),
            or a null reference (<b>Nothing</b> in Visual Basic) if the application does not need this information.</param>
            <param name="move">If <b>true</b>, the messages will be moved; otherwise, copied.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous copying or moving messages process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/> (if <paramref name="move"/> is <b>false</b>) or
            <see cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/> (if <paramref name="move"/> is <b>true</b>).</remarks>
            <example>
            <para>This console sample demonstrates asynchronous moving the first and the last messages from the Inbox folder into the Trash folder.
            A callback function is used as well.</para>
            <para>
            The sample assumes "Trash" folder had already been created in the past.
            To learn how to make sure the folder exists, see
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.DateTime)"/> or
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String)"/> samples.
            </para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// A callback function.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> CopyOrMoveMessagesCallback(IAsyncResult result)
            	{
            		Imap imp = (Imap)result.AsyncState;
            		<span style="color: blue;">try</span>
            		{
            			imp.EndCopyOrMoveMessages();
            			Console.WriteLine("The messages moved successfully");
            		}
            		<span style="color: blue;">catch</span> (MailBeeException e)
            		{
            			<span style="color: green;">// In callback functions (generally speaking, in worker threads),</span>
            			<span style="color: green;">// it's better to handle exceptions. If exception is not handled,</span>
            			<span style="color: green;">// the worker thread silently dies and the application may never</span>
            			<span style="color: green;">// know that something went wrong.</span>
            			Console.WriteLine(e.Message);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap4.somehost.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Initiate an asynchronous messages moving attempt.</span>
            		<span style="color: green;">// We move the first and the last messages.</span>
            		IAsyncResult ar = imp.BeginCopyOrMoveMessages(
            			"1," + imp.MessageCount.ToString(), <span style="color: blue;">false</span>,
            			"Trash", <span style="color: blue;">null</span>, <span style="color: blue;">true</span>,
            			<span style="color: blue;">new</span> AsyncCallback(CopyOrMoveMessagesCallback), imp);
            
            		<span style="color: green;">// Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">// messages are moved on another thread.</span>
            		System.Threading.Thread.Sleep(3000);
            
            		<span style="color: green;">// If the messages moving attempt is still in progress,</span>
            		<span style="color: green;">// then wait until it's finished.</span>
            		<span style="color: blue;">while</span> (imp.IsBusy) ar.AsyncWaitHandle.WaitOne();
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' A callback function.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> CopyOrMoveMessagesCallback(<span style="color: blue;">ByVal</span> result <span style="color: blue;">As</span> IAsyncResult)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap
            		imp = <span style="color: blue;">CType</span>(result.AsyncState, Imap)
            
            		<span style="color: blue;">Try</span>
            			imp.EndCopyOrMoveMessages()
            			Console.WriteLine("The messages moved successfully")
            		<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            			<span style="color: green;">' In callback functions (generally speaking, in worker threads),</span>
            			<span style="color: green;">' it's better to handle exceptions. If exception is not handled,</span>
            			<span style="color: green;">' the worker thread silently dies and the application may never</span>
            			<span style="color: green;">' know that something went wrong.</span>
            			Console.WriteLine(e.Message)
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("imap4.somehost.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Initiate an asynchronous messages moving attempt.</span>
            		<span style="color: green;">' We move the first and the last messages.</span>
            		<span style="color: blue;">Dim</span> ar <span style="color: blue;">As</span> IAsyncResult = imp.BeginCopyOrMoveMessages("1," &amp; _
            			imp.MessageCount.ToString(), <span style="color: blue;">False</span>, "Trash", <span style="color: blue;">Nothing</span>, _
            			<span style="color: blue;">True</span>, <span style="color: blue;">AddressOf</span> CopyOrMoveMessagesCallback, imp)
            
            		<span style="color: green;">' Simulate some lengthy work here. At the same time,</span>
            		<span style="color: green;">' messages are moved on another thread.</span>
            		System.Threading.Thread.Sleep(3000)
            
            		<span style="color: green;">' If the messages moving attempt is still in progress,</span>
            		<span style="color: green;">' then wait until it's finished.</span>
            		<span style="color: blue;">While</span> imp.IsBusy
            			ar.AsyncWaitHandle.WaitOne()
            		<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndCopyOrMoveMessages">
            <summary>
            Ends a pending asynchronous request for copying or moving messages.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginCopyOrMoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult,System.Boolean,System.AsyncCallback,System.Object)"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
        </member>
        <member name="M:MailBee.ImapMail.Imap.Idle">
            <summary>
            Attempts to start idling mode which makes the client wait for any notifications
            from the server regarding the currently selected folder.
            <seealso cref="M:MailBee.ImapMail.Imap.StopIdle"/>
            <seealso cref="E:MailBee.ImapMail.Imap.Idling"/>
            <seealso cref="E:MailBee.ImapMail.Imap.MessageStatus"/>
            <seealso cref="E:MailBee.ImapMail.Imap.ServerStatus"/>
            </summary>
            <returns><b>true</b> if idling was finished successfully; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            Once idling mode has started, MailBee will wait for any responses from the server until <see cref="M:MailBee.ImapMail.Imap.StopIdle"/> method
            has been called. The developer can use idling to monitor the current state of the folder and keep track of new or amended messages
            in the folder. Usually, the application listens to <see cref="E:MailBee.ImapMail.Imap.MessageStatus"/> and  <see cref="E:MailBee.ImapMail.Imap.ServerStatus"/> events
            for this. Also, the application can listen to <see cref="E:MailBee.ImapMail.Imap.Idling"/> event (which is raised 100 times per second) for performing
            any background activities if needed.
            <note>The mail server must support idling ("idle" capability must be listed in <see cref="M:MailBee.ImapMail.Imap.GetExtensions"/> results). IDLE extension
            is described in RFC 2177 document.</note>
            </remarks>
            <example>
            This WinForms sample demonstrates using IDLE. The sample also takes care of checking if
            IDLE is supported by the server, stoppping idling if requested or if the application is closed by the user.
            In order to run this sample, please put <c>button1</c> button on the form and attach <c>Form1_Closing</c> method to <c>Closing</c> event of the form.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// Imap object declared global because it's accessed from several methods.</span>
            Imap imp = <span style="color: blue;">null</span>;
            
            <span style="color: blue;">bool</span> finished = <span style="color: blue;">false</span>;
            <span style="color: blue;">bool</span> started = <span style="color: blue;">false</span>;
            
            <span style="color: green;">// Idling event is used to keep UI responsive and stop idling is desired.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> imp_Idling(<span style="color: blue;">object</span> sender, ImapIdlingEventArgs e)
            {
            	Application.DoEvents();
            	<span style="color: blue;">if</span> (finished)
            	{
            		((Imap)sender).StopIdle();
            		button1.Text = "Go idle";
            	}
            }
            
            <span style="color: green;">// Monitor folder changes and save them in the log file.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> imp_MessageStatus(<span style="color: blue;">object</span> sender, ImapMessageStatusEventArgs e)
            {
            	((Imap)sender).Log.WriteLine("Got " + e.StatusID + " status update");
            }
            
            <span style="color: green;">// Start/stop idling.</span>
            <span style="color: green;">// Add button1 on the form to make this sample working.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> button1_Click(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	<span style="color: blue;">if</span> (started)
            	{
            		finished = <span style="color: blue;">true</span>;
            	}
            	<span style="color: blue;">else</span>
            	{
            		started = <span style="color: blue;">true</span>;
            
            		imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Enable logging into a file.</span>
            		imp.Log.Filename = @"C:\log.txt";
            		imp.Log.Enabled = <span style="color: blue;">true</span>;
            		imp.Log.Clear();
            
            		<span style="color: green;">// Connect to the server and check if IDLE is supported.</span>
            		imp.Connect("mail.domain.com");
            		<span style="color: blue;">if</span> (imp.GetExtension("IDLE") == <span style="color: blue;">null</span>)
            		{
            			MessageBox.Show("IDLE not supported");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Login and select inbox.</span>
            			imp.Login("jdoe", "secret");
            			imp.SelectFolder("Inbox");
            
            			<span style="color: green;">// Attach event handlers.</span>
            			imp.Idling += <span style="color: blue;">new</span> ImapIdlingEventHandler(imp_Idling);
            			imp.MessageStatus +=<span style="color: blue;">new</span> ImapMessageStatusEventHandler(imp_MessageStatus);
            
            			button1.Text = "Stop idle";
            
            			<span style="color: green;">// Go idle. This call will block until imp.StopIdle()</span>
            			<span style="color: green;">// is called from elsewhere.</span>
            			imp.Idle();
            		}
            
            		<span style="color: green;">// Disconnect from the server.</span>
            		imp.Disconnect();
            
            		started = <span style="color: blue;">false</span>;
            		finished = <span style="color: blue;">false</span>;
            	}
            }
            
            <span style="color: green;">// Finish idling if the user closes the application.</span>
            <span style="color: green;">// To make this method work, attach it to Closing event of the form.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Closing(<span style="color: blue;">object</span> sender,
            	System.ComponentModel.CancelEventArgs e)
            {
            	<span style="color: blue;">if</span> (imp != <span style="color: blue;">null</span> &amp;&amp; imp.IsBusy)
            	{
            		imp.StopIdle();
            	}
            }
            </code>
            <code lang="C#">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' Imap object declared global because it's accessed from several methods.</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">Nothing</span>
            
            <span style="color: blue;">Dim</span> finished <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            <span style="color: blue;">Dim</span> started <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            <span style="color: green;">' Idling event is used to keep UI responsive and stop idling is desired.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> imp_Idling(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapIdlingEventArgs)
            	Application.DoEvents()
            	<span style="color: blue;">If</span> finished <span style="color: blue;">Then</span>
            		<span style="color: blue;">CType</span>(sender, Imap).StopIdle()
            		button1.Text = "Go idle"
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Monitor folder changes and save them in the log file.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> imp_MessageStatus(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapMessageStatusEventArgs)
            	<span style="color: blue;">CType</span>(sender, Imap).Log.WriteLine("Got " &amp; e.StatusID &amp; " status update")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Start/stop idling.</span>
            <span style="color: green;">' Add button1 on the form to make this sample working.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> button1_Click(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">If</span> started <span style="color: blue;">Then</span>
            		finished = <span style="color: blue;">True</span>
            	<span style="color: blue;">Else</span>
            		started = <span style="color: blue;">True</span>
            
            		imp = <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Enable logging into a file.</span>
            		imp.Log.Filename = "C:\log.txt"
            		imp.Log.Enabled = <span style="color: blue;">True</span>
            		imp.Log.Clear()
            
            		<span style="color: green;">' Connect to the server and check if IDLE is supported.</span>
            		imp.Connect("mail.domain.com")
            		<span style="color: blue;">If</span> imp.GetExtension("IDLE") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			MessageBox.Show("IDLE not supported")
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Login and select inbox.</span>
            			imp.Login("jdoe", "secret")
            			imp.SelectFolder("Inbox")
            
            			<span style="color: green;">' Attach event handlers.</span>
            			<span style="color: blue;">AddHandler</span> imp.Idling, <span style="color: blue;">AddressOf</span> imp_Idling
            			<span style="color: blue;">AddHandler</span> imp.MessageStatus, <span style="color: blue;">AddressOf</span> imp_MessageStatus
            
            			button1.Text = "Stop idle"
            
            			<span style="color: green;">' Go idle. This call will block until imp.StopIdle()</span>
            			<span style="color: green;">' is called from elsewhere.</span>
            			imp.Idle()
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Disconnect from the server.</span>
            		imp.Disconnect()
            
            		started = <span style="color: blue;">False</span>
            		finished = <span style="color: blue;">False</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Finish idling if the user closes the application.</span>
            <span style="color: green;">' To make this method work, attach it to Closing event of the form.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Closing(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, _
            	<span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.ComponentModel.CancelEventArgs)
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">And</span> imp.IsBusy <span style="color: blue;">Then</span>
            		imp.StopIdle()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.BeginIdle(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for starting idling mode.
            <seealso cref="M:MailBee.ImapMail.Imap.Idle"/>
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. You can leave it a null reference
            (<b>Nothing</b> in Visual Basic) if you do not use callbacks.</param>
            <param name="state">An object that contains state information for this request.
            You can leave it a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous idle process.</returns>
            <exception cref="T:MailBee.MailBeeInvalidStateException">There is already an operation in progress.</exception>
            <remarks>This method is an asynchronous version of <see cref="M:MailBee.ImapMail.Imap.Idle"/>. However, unlike <see cref="M:MailBee.ImapMail.Imap.Idle"/>,
            using <see cref="M:MailBee.ImapMail.Imap.BeginIdle(System.AsyncCallback,System.Object)"/> method usually does not require
            subscribing to <see cref="E:MailBee.ImapMail.Imap.Idling"/> event because <see cref="M:MailBee.ImapMail.Imap.BeginIdle(System.AsyncCallback,System.Object)"/> does not block and the application
            can use other techniques to keep UI responsive during idling.</remarks>
            <example>
            This WinForms sample is an asynchronous version of the sample listed in <see cref="M:MailBee.ImapMail.Imap.Idle"/> method documentation.
            <see cref="E:MailBee.ImapMail.Imap.Idling"/> event is not used but UI still does not freeze during idling.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// Put the code below inside your class.</span>
            
            <span style="color: green;">// Imap object declared global because it's accessed from several methods.</span>
            Imap imp = <span style="color: blue;">null</span>;
            
            <span style="color: blue;">bool</span> started = <span style="color: blue;">false</span>;
            
            <span style="color: green;">// Monitor folder changes and save them in the log file.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> imp_MessageStatus(<span style="color: blue;">object</span> sender, ImapMessageStatusEventArgs e)
            {
            	((Imap)sender).Log.WriteLine("Got " + e.StatusID + " status update");
            }
            
            <span style="color: green;">// Start/stop idling.</span>
            <span style="color: green;">// Add button1 on the form to make this sample working.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> button1_Click(<span style="color: blue;">object</span> sender, System.EventArgs e)
            {
            	<span style="color: blue;">if</span> (started)
            	{
            		<span style="color: green;">// Stop idling.</span>
            		imp.StopIdle();
            		imp.EndIdle();
            
            		<span style="color: green;">// Disconnect from the server and revert to the original state.</span>
            		imp.Disconnect();
            		button1.Text = "Go idle";
            		started = <span style="color: blue;">false</span>;
            	}
            	<span style="color: blue;">else</span>
            	{
            		started = <span style="color: blue;">true</span>;
            
            		imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Enable logging into a file.</span>
            		imp.Log.Filename = @"C:\log.txt";
            		imp.Log.Enabled = <span style="color: blue;">true</span>;
            		imp.Log.Clear();
            
            		<span style="color: green;">// Connect to the server and check if IDLE is supported.</span>
            		imp.Connect("mail.domain.com");
            		<span style="color: blue;">if</span> (imp.GetExtension("IDLE") == <span style="color: blue;">null</span>)
            		{
            			MessageBox.Show("IDLE not supported");
            			imp.Disconnect();
            			started = <span style="color: blue;">false</span>;
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Login and select inbox.</span>
            			imp.Login("jdoe", "secret");
            			imp.SelectFolder("Inbox");
            
            			<span style="color: green;">// Attach event handler.</span>
            			imp.MessageStatus +=<span style="color: blue;">new</span> ImapMessageStatusEventHandler(imp_MessageStatus);
            
            			button1.Text = "Stop idle";
            
            			<span style="color: green;">// Go idle in the background.</span>
            			imp.BeginIdle(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);
            		}
            	}
            }
            
            <span style="color: green;">// Finish idling if the user closes the application.</span>
            <span style="color: green;">// To make this method work, attach it to Closing event of the form.</span>
            <span style="color: blue;">private</span> <span style="color: blue;">void</span> Form1_Closing(<span style="color: blue;">object</span> sender,
            	System.ComponentModel.CancelEventArgs e)
            {
            	<span style="color: blue;">if</span> (imp != <span style="color: blue;">null</span> &amp;&amp; imp.IsBusy)
            	{
            		imp.StopIdle();
            		imp.EndIdle();
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' Put the code below inside your class.</span>
            
            <span style="color: green;">' Imap object declared global because it's accessed from several methods.</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">Nothing</span>
            
            <span style="color: blue;">Dim</span> started <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            <span style="color: green;">' Monitor folder changes and save them in the log file.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> imp_MessageStatus(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapMessageStatusEventArgs)
            	<span style="color: blue;">CType</span>(sender, Imap).Log.WriteLine("Got " &amp; e.StatusID &amp; " status update")
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Start/stop idling.</span>
            <span style="color: green;">' Add button1 on the form to make this sample working.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> button1_Click(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.EventArgs)
            	<span style="color: blue;">If</span> started <span style="color: blue;">Then</span>
            		<span style="color: green;">' Stop idling.</span>
            		imp.StopIdle()
            		imp.EndIdle()
            
            		<span style="color: green;">' Disconnect from the server and revert to the original state.</span>
            		imp.Disconnect()
            		button1.Text = "Go idle"
            		started = <span style="color: blue;">False</span>
            	<span style="color: blue;">Else</span>
            		started = <span style="color: blue;">True</span>
            
            		imp = <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Enable logging into a file.</span>
            		imp.Log.Filename = "C:\log.txt"
            		imp.Log.Enabled = <span style="color: blue;">True</span>
            		imp.Log.Clear()
            
            		<span style="color: green;">' Connect to the server and check if IDLE is supported.</span>
            		imp.Connect("mail.domain.com")
            		<span style="color: blue;">If</span> imp.GetExtension("IDLE") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			MsgBox("IDLE not supported")
            			imp.Disconnect()
            			started = <span style="color: blue;">False</span>
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Login and select inbox.</span>
            			imp.Login("jdoe", "secret")
            			imp.SelectFolder("Inbox")
            
            			<span style="color: green;">' Attach event handler.</span>
            			<span style="color: blue;">AddHandler</span> imp.MessageStatus, <span style="color: blue;">AddressOf</span> imp_MessageStatus
            
            			button1.Text = "Stop idle"
            
            			<span style="color: green;">' Go idle in the background.</span>
            			imp.BeginIdle(<span style="color: blue;">Nothing</span>, <span style="color: blue;">Nothing</span>)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            <span style="color: green;">' Finish idling if the user closes the application.</span>
            <span style="color: green;">' To make this method work, attach it to Closing event of the form.</span>
            <span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> Form1_Closing(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> System.ComponentModel.CancelEventArgs)
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">And</span> imp.IsBusy <span style="color: blue;">Then</span>
            		imp.StopIdle()
            		imp.EndIdle()
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.EndIdle">
            <summary>
            Ends the pending asynchronous request for idling termination.
            <seealso cref="M:MailBee.ImapMail.Imap.BeginIdle(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.StopIdle"/>
            </summary>
            <returns><b>true</b> if the method succeeds; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>Because idling is multi-step process (requesting idle, idling, requesting for idling termination),
            <see cref="M:MailBee.ImapMail.Imap.EndIdle"/> call must be prepended with <see cref="M:MailBee.ImapMail.Imap.StopIdle"/> call which initiates request to
            terminate idling. Thus, <see cref="M:MailBee.ImapMail.Imap.EndIdle"/> itself finishes not idling itself (initiated with <see cref="M:MailBee.ImapMail.Imap.BeginIdle(System.AsyncCallback,System.Object)"/>)
            but idling termination (IMAP4's DONE command, initiated with <see cref="M:MailBee.ImapMail.Imap.StopIdle"/> method).</remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.StopIdle">
            <summary>
            Notifies MailBee to terminate idling when appropriate.
            <seealso cref="M:MailBee.ImapMail.Imap.Idle"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginIdle(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.EndIdle"/>
            </summary>
            <remarks>
            <para>Calling this method does not have immediate effect (although the method itself returns control instantly).
            It just notifies MailBee to start IDLE DONE procedure when finished processing the current responses.</para>
            <para>Calling this method when the component is not idling does nothing.</para></remarks>
        </member>
        <member name="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Downloads the specified message (entire message or message header only) from the specified folder on the server,
            in a single line of code.
            <seealso cref="M:MailBee.ImapMail.Imap.QuickDownloadMessages(System.String,System.String,System.String,System.String,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="folderName">The full name of the folder to download the message from.</param>
            <param name="messageNumber">The ordinal position of the message in the folder, starting at 1.</param>
            <param name="bodyPreviewSize">Number of bytes of the message source body to download
            in addition to the message source header, or -1 to download the entire message,
            or 0 to download the message header only.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessage"/> object containing the downloaded message.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the folder.</para>
            <para>An account on the mail server is guaranteed to contain at least "Inbox" folder.
            The "Inbox" name is case-sensitive ("Inbox", "inbox", and "INBOX" are equivalent). Other folder names, however,
            may be case-senstive depending on the server implementation.</para>
            <para>The common use of this method is to quickly receive the message when its index
            in the folder is already known. For instance, <see cref="M:MailBee.ImapMail.Imap.QuickDownloadMessages(System.String,System.String,System.String,System.String,System.Int32)"/> method was
            used to download headers for all messages in the folder and build the message list where
            the user can click a particular message to view it completely. Once the user selected
            the message to be viewed, the application passes its index in the message list as
            a value of <paramref name="messageNumber"/> parameter of <see cref="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)"/> method
            to download the selected message (if the message list index is zero-based, the developer
            should also add 1 to the <paramref name="messageNumber"/> value).</para>
            <note>Static methods still require the valid license key to be assigned to <see cref="P:MailBee.ImapMail.Imap.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>
            <para>This sample partially downloads the first message in the inbox (the header and
            the first 1000 bytes of the message source body are downloaded), and displays preview of
            the plain-text body of the message. This may be useful if the entire message is very large,
            and the user wants to take a look at the beginning of the body text in order
            to decide whether to download the entire message.</para>
            <para>If the message has HTML part but does not have plain-text part, the plain-text version will be generated automatically.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = Imap.QuickDownloadMessage("mail.server.com", "login", "password", "Inbox", 1, 1000);
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain;
            Console.WriteLine(msg.BodyPlainText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Imap.QuickDownloadMessage("mail.server.com", "login", "password", "Inbox", 1, 1000)
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain
            Console.WriteLine(msg.BodyPlainText)
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Completely downloads the specified message from the specified folder on the server,
            in a single line of code.
            <seealso cref="M:MailBee.ImapMail.Imap.QuickDownloadMessages(System.String,System.String,System.String,System.String,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="folderName">The full name of the folder to download the message from.</param>
            <param name="messageNumber">The ordinal position of the message in the folder, starting at 1.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessage"/> object containing the downloaded message (including the header
            and all the body parts and attachments).</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the folder.</para>
            <para>An account on the mail server is guaranteed to contain at least "Inbox" folder.
            The "Inbox" name is case-sensitive ("Inbox", "inbox", and "INBOX" are equivalent). Other folder names, however,
            may be case-senstive depending on the server implementation.</para>
            <para>The common use of this method is to quickly receive the message when its index
            in the folder is already known. For instance, <see cref="M:MailBee.ImapMail.Imap.QuickDownloadMessages(System.String,System.String,System.String,System.String,System.Int32)"/> method was
            used to download headers for all messages in the folder and build the message list where
            the user can click a particular message to view it completely. Once the user selected
            the message to be viewed, the application passes its index in the message list as
            a value of <paramref name="messageNumber"/> parameter of <see cref="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)"/> method
            to download the selected message (if the message list index is zero-based, the developer
            should also add 1 to the <paramref name="messageNumber"/> value).</para>
            <note>Static methods still require the valid license key be assigned to <see cref="P:MailBee.ImapMail.Imap.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>This sample downloads the first message in the inbox and saves it as .EML file to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = Imap.QuickDownloadMessage("imap.domain.com",
            	"login@domain.com", "password", "Inbox", 1);
            msg.SaveMessage(@"C:\Temp\message.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Imap.QuickDownloadMessage("imap.domain.com", _
            	"login@domain.com", "password", "Inbox", 1)
            msg.SaveMessage("C:\Temp\message.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.QuickDownloadMessages(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Downloads all the messages (entire messages or message headers only) in the specified folder on the server,
            in a single line of code.
            <seealso cref="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="folderName">The full name of the folder to download the messages from.</param>
            <param name="bodyPreviewSize">Number of bytes of a message source body to download
            in addition to a message source header, or -1 to download entire messages,
            or 0 to download message headers only.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded messages.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the folder.</para>
            <para>An account on the mail server is guaranteed to contain at least "Inbox" folder.
            The "Inbox" name is case-sensitive ("Inbox", "inbox", and "INBOX" are equivalent). Other folder names, however,
            may be case-senstive depending on the server implementation.</para>
            <para>Since MailBee is capable of downloading multiple messages in a batch, using this method
            is much more efficient than calling <see cref="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)"/> method multiple times.</para>
            <note>Static methods still require the valid license key be assigned to <see cref="P:MailBee.ImapMail.Imap.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>This sample downloads headers of all the messages in the inbox, and
            displays indices (ordinal positions in the inbox) of all messages which likely
            have any attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessageCollection msgs = Imap.QuickDownloadMessages("mail.company.com", "login", "password", "Inbox", 0);
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	<span style="color: blue;">if</span> (msg.HasAttachments)
            	{
            		Console.WriteLine("Message #" + msg.IndexOnServer +
            			" seems to have any attachments");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = Imap.QuickDownloadMessages("mail.company.com", _
            	"login", "password", "Inbox", 0)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	<span style="color: blue;">If</span> msg.HasAttachments <span style="color: blue;">Then</span>
            		Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; _
            			" seems to have any attachments")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>	
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Imap.QuickDownloadMessages(System.String,System.String,System.String,System.String)">
            <summary>
            Completely downloads all the messages in the specified folder on the server,
            in a single line of code.
            <seealso cref="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)"/>
            </summary>
            <param name="serverName">The name or IP address of the IMAP4 server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The password of the user account on the server.</param>
            <param name="folderName">The full name of the folder to download the messages from.</param>
            <returns>A <see cref="T:MailBee.Mime.MailMessageCollection"/> object containing the downloaded messages.</returns>
            <exception cref="T:MailBee.MailBeeException">An error occurred.</exception>
            <remarks>
            <para>This method does not delete any messages in the folder.</para>
            <para>An account on the mail server is guaranteed to contain at least "Inbox" folder.
            The "Inbox" name is case-sensitive ("Inbox", "inbox", and "INBOX" are equivalent). Other folder names, however,
            may be case-senstive depending on the server implementation.</para>
            <para>Since MailBee is capable of downloading multiple messages in a batch, using this method
            is much more efficient than calling <see cref="M:MailBee.ImapMail.Imap.QuickDownloadMessage(System.String,System.String,System.String,System.String,System.Int32,System.Int32)"/> method multiple times.</para>
            <note>Static methods still require the valid license key be assigned to <see cref="P:MailBee.ImapMail.Imap.LicenseKey"/>
            property (by either setting in in the code or in the config file such as app.config). All samples
            in MailBee documentation assume the license key is already set in the config file.</note>
            </remarks>
            <example>This sample downloads all the messages in the inbox, and
            displays the index (an ordinal position in the inbox) and the attachments
            count of each message which has any attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessageCollection msgs = Imap.QuickDownloadMessages("imap.host.com",
            	"login", "password", "Inbox");
            <span style="color: blue;">foreach</span> (MailMessage msg <span style="color: blue;">in</span> msgs)
            {
            	<span style="color: blue;">if</span> (msg.HasAttachments)
            	{
            		Console.WriteLine("Message #" + msg.IndexOnServer +
            			" has " + msg.Attachments.Count + " attachment(s)");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = Imap.QuickDownloadMessages("imap.host.com", _
            	"login", "password", "Inbox")
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> msg <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgs
            	<span style="color: blue;">If</span> msg.HasAttachments <span style="color: blue;">Then</span>
            		Console.WriteLine("Message #" &amp; msg.IndexOnServer &amp; " has " &amp; _
            			msg.Attachments.Count &amp; " attachment(s)")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.ImapMail.Imap.LicenseKey">
            <summary>
            Sets the license key to be used to unlock MailBee.NET IMAP4 component.
            </summary>
            <value>A string value containing the license key which unlocks MailBee.NET IMAP4 component.
            This property is write-only.</value>
            <exception cref="T:MailBee.MailBeeLicenseException">The specified license key is invalid.</exception>
            <remarks>
            <para>You can unlock MailBee.NET IMAP4 component by either setting this property to the valid
            permanent or trial license key, or by adding MailBee.ImapMail.Imap.LicenseKey key
            in app.config, web.config, or machine.config file.</para>
            <para>This property is static (<b>Shared</b> in Visual Basic). If not set in the
            config file, this property must be set before creating any instances of
            <see cref="T:MailBee.ImapMail.Imap"/> class.</para>
            </remarks>
            <example>Setting this property and connecting to an IMAP4 server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap.LicenseKey = "Permanent or trial license key here";
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            Imap.LicenseKey = "Permanent or trial license key here"
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Disconnect()
            </code>
            </example>
            <example>Setting the license key in the config file and connecting to an IMAP4 server.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Connect("mail.domain.com");
            imp.Disconnect();
            
            <span style="color: green;">// XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.ImapMail.Imap.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">// In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Connect("mail.domain.com")
            imp.Disconnect()
            
            <span style="color: green;">' XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.ImapMail.Imap.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">' In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.ImapMail.Imap.TrialDaysLeft">
            <summary>
            Gets the number of days left to the date of the trial license key expiration.
            </summary>
            <value>An integer value indicating the number of days left to the date of
            the trial license key expiration, or -1 if the permanent license key is used.</value>
        </member>
        <member name="P:MailBee.ImapMail.Imap.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the calls of the event handlers.
            </summary>
            <value>A reference to the object on whose thread the events should be raised.
            The default value is a null reference (<b>Nothing</b> in Visual Basic) which tells
            MailBee to determine the appropriate marshaling object automatically.</value>
            <remarks>Usually, you do not need to set this property because MailBee can
            automatically marshal events to proper threads.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Version">
            <summary>
            Gets the version of the MailBee assembly.
            </summary>
            <value>A string which contains the version of the MailBee assembly in
            MajorVersion.MinorVersion.Revision.Build format (like "3.0.0.35").</value>
        </member>
        <member name="E:MailBee.ImapMail.Imap.Disposed">
            <summary>
            Occurs after the component was disposed.
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Site">
            <summary>
            Gets or sets the object to be used as a site for the component.
            </summary>
            <value>A reference to the object to be used as a site for the component.
            The default value is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>The developer does not need to set this property. It's used by RAD
            tools such as form designers.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsBusy">
            <summary>
            Indicates whether the component is performing a lengthy operation.
            </summary>
            <value>A bool value indicating whether the component is busy because it's doing
            some work.</value>
            <remarks>When the component is busy, it's not possible to start another lengthy operation.
            For instance, if the component connects to the server or transfers data over the network,
            no other network operation can be started at this time. Any attempt to do
            so will result in <see cref="T:MailBee.MailBeeInvalidStateException"/>.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsAborted">
            <summary>
            Indicates whether <see cref="M:MailBee.ImapMail.Imap.Abort"/> method has been called for the component.
            </summary>
            <value><b>true</b> if <see cref="M:MailBee.ImapMail.Imap.Abort"/> method has already been called;
            otherwise, <b>false</b>. The default value is <b>false</b>.</value>
            <remarks>
            <para>In aborted state, the component does not raise any events, and most methods, if called,
            will immediately return an error or throw an exception.</para>
            <para><see cref="M:MailBee.ImapMail.Imap.ResetState"/> method can be used to restore the component
            back to operational state.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.LastResult">
            <summary>
            Gets a numeric code of the last error.
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Log">
            <summary>
            Gets the object used for logging MailBee activities into a file or memory buffer.
            </summary>
            <value>A reference to the object used for logging MailBee activities into a file or memory buffer.</value>
            <remarks>This property is never a null reference (<b>Nothing</b> in Visual Basic)
            even if logging is not used.</remarks>
            <example>This sample sets file logging on and sets the filename of the log file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.Log.Enabled = <span style="color: blue;">true</span>;
            imp.Log.Filename = @"C:\log.txt";
            imp.Connect("mail.domain.com");
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.Log.Enabled = <span style="color: blue;">True</span>
            imp.Log.Filename = "C:\log.txt"
            imp.Connect("mail.domain.com")
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="P:MailBee.ImapMail.Imap.RaiseEvents">
            <summary>
            Gets or sets whether the component will raise any events. 
            </summary>
            <value>A bool value indicating whether the component will raise any events.
            The default value is <b>true</b>.</value>
            <remarks>If this property is <b>false</b>, <i>OnEventName</i> methods will also not be called.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop">
            <summary>
            Gets or sets whether the events will be raised on the message loop of the application
            or not.
            </summary>
            <value>A bool value indicating whether the events will be raised on the message loop
            of the application or not. The default value is <b>true</b>.</value>
            <remarks>
            <para>This property is only meaningful in WinForms applications where events and
            asynchronous methods are used, and the developer needs to block the message loop for some reason
            (usually, to wait for completion of an asynchronous method).</para>
            <para>In this case, you should set this property to <b>false</b> and use <see cref="M:MailBee.ImapMail.Imap.Wait"/> method
            to wait until asynchronous MailBee method is finished. See <see cref="M:MailBee.ImapMail.Imap.Wait"/> method for more information.</para>
            <para>The above also applies to synchronous methods if they are called on worker (non-UI) threads.
            If, however, the application does not use asynchronous methods of MailBee (and never calls its
            synchronous methods on non-UI threads), it should NOT attempt to set <see cref="P:MailBee.ImapMail.Imap.RaiseEventsViaMessageLoop"/>
            to <b>false</b> or use <see cref="M:MailBee.ImapMail.Imap.Wait"/> method.</para>
            <note>If you develop non-WinForms application (such as web or console application),
            you do not need to set this property or use <see cref="M:MailBee.ImapMail.Imap.Wait"/> method regardless
            if the application uses worker threads or not.</note>
            Another alternative (in WinForms application) to using <see cref="M:MailBee.ImapMail.Imap.Wait"/> method
            is to never block the application message loop. See <see cref="M:MailBee.ImapMail.Imap.BeginExecuteCustomCommand(System.String,System.String,System.AsyncCallback,System.Object)"/>
            method for the code example.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.RequestEncoding">
            <summary>
            Gets or sets the encoding used to convert a string into a bytes stream
            which is then sent to the mail server.
            </summary>
            <value>A reference to the encoding object used to convert a string into a bytes stream
            which is then sent to the mail server. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.ImapMail.Imap.ResponseEncoding">
            <summary>
            Gets or sets the encoding used to convert a byte data received from the mail server into a string.
            </summary>
            <value>A reference to the encoding object used to convert a byte data received from the mail server
            into a string. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.ImapMail.Imap.ThrowExceptions">
            <summary>
            Gets or sets whether the component will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the component will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the component methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.ImapMail.Imap.LastResult"/>,
            <see cref="M:MailBee.ImapMail.Imap.GetErrorDescription"/>, <see cref="M:MailBee.ImapMail.Imap.GetServerResponse"/>,
            <see cref="M:MailBee.ImapMail.Imap.GetSocketError"/> members to get more information about the error.
            <note>Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee usage will still be thrown. Typical examples of such
            errors are: passing invalid arguments to methods, calling methods or settings
            properties in illegal state (for instance, an attempt to start an asynchronous
            method while another asynchronous method is not yet finished), etc. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be
            suppressed.</note>
            <para>
            <see cref="P:MailBee.ImapMail.Imap.ThrowExceptions"/> property does not control whether to throw exceptions which occur due to
            logging errors (such as "log file cannot be written to", etc). To control whether logging
            exceptions should be thrown, the developer can use <see cref="P:MailBee.Logger.DisableOnException">Log.DisableOnException</see>
            property.
            </para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.SslMode">
            <summary>
            Gets or sets how the component should establish TLS/SSL connection with the mail server.
            <seealso cref="P:MailBee.ImapMail.Imap.SslProtocol"/>
            <seealso cref="M:MailBee.ImapMail.Imap.StartTls"/>
            </summary>
            <value>One of <see cref="T:MailBee.Security.SslStartupMode"/> values specifying if and how
            the component should establish TLS/SSL connection with the mail server. The default value is
            <see cref="F:MailBee.Security.SslStartupMode.Manual"/> which means the connection won't be established
            in TLS/SSL mode unless the developer manually calls <see cref="M:MailBee.ImapMail.Imap.StartTls"/> method.</value>
            <remarks>
            <note>Not all mail servers support TLS/SSL functionality. Also, some servers support only TLS or only SSL
            (see <see cref="P:MailBee.ImapMail.Imap.SslProtocol"/> topic for details).</note>
            </remarks>
            <example>This sample connects to the mail server on dedicated IMAP4 SSL port 993, logs in the mail account
            and displays the list of all folders in this account.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Imap imp = <span style="color: blue;">new</span> Imap();
            imp.SslMode = SslStartupMode.OnConnect;
            imp.Connect("mail.domain.com", 993);
            imp.Login("jdoe", "secret");
            FolderCollection folders = imp.DownloadFolders();
            <span style="color: blue;">foreach</span> (Folder imapFolder <span style="color: blue;">in</span> folders)
            {
            	Console.WriteLine(imapFolder.Name);
            }
            imp.Disconnect();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            imp.SslMode = SslStartupMode.OnConnect
            imp.Connect("mail.domain.com", 993)
            imp.Login("jdoe", "secret")
            <span style="color: blue;">Dim</span> folders <span style="color: blue;">As</span> FolderCollection = imp.DownloadFolders()
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> imapFolder <span style="color: blue;">As</span> Folder <span style="color: blue;">In</span> folders
            	Console.WriteLine(imapFolder.Name)
            <span style="color: blue;">Next</span>
            imp.Disconnect()
            </code>
            </example>
        </member>
        <member name="P:MailBee.ImapMail.Imap.SslProtocol">
            <summary>
            Gets or sets the security protocol to be used for performing TLS/SSL negotiation and data encryption.
            </summary>
            <value>One of <see cref="T:MailBee.Security.SecurityProtocol"/> values specifying the security protocol to be used for performing TLS/SSL negotiation and data encryption.
            The default value is <see cref="F:MailBee.Security.SecurityProtocol.Auto"/>.</value>
            <remarks>The default value allows MailBee to select the best (the most secure) protocol supported by
            the mail server. However, if the mail server does not support automatic protocol negotiation,
            it will likely close the connection (<see cref="T:MailBee.MailBeeSocketResetException"/> will be thrown). In this case,
            the application should set this property to non-<see cref="F:MailBee.Security.SecurityProtocol.Auto"/> value (such as
            <see cref="F:MailBee.Security.SecurityProtocol.Tls1"/>).</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.SslCertificates">
            <summary>
            Provides access to the client and server SSL certificate settings.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="T:MailBee.Security.CertificateStore"/>
            </summary>
            <value>A reference to the client and server SSL certificate settings.</value>
            <remarks>
            <para>The following code should be used to access the server certificate (assuming <c>imp</c> is
            an <see cref="T:MailBee.ImapMail.Imap"/> component instance): <c>imp.SslCertificates.Server</c>. To set the client
            certificate, the developer should assign <c>imp.SslCertificates.Client</c> property.</para>
            <note>Prior to starting using certificates, the developer must set <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property of
            <see cref="T:MailBee.Security.Powerup"/> class (this can be accomplished in the code, in the config file such as app.config,
            or in the registry).</note>
            </remarks>
            <example>
            This console sample establishes secure connection with the mail server using the private certificate
            of the client and then displays various information about the server certificate. The client certificate
            is taken from a file (MailBee can also read certificates from the registry, see <see cref="T:MailBee.Security.CertificateStore"/> class description for
            details).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            		imp.SslMode = SslStartupMode.OnConnect;
            		imp.SslCertificates.Client = <span style="color: blue;">new</span> Certificate(@"C:\my.pfx", CertFileType.Pfx, "secret");
            		imp.Connect("mail.domain.com", 993);
            		Console.WriteLine("The server certificate info");
            		Console.WriteLine("===========================");
            		Console.WriteLine("Issued by:	" + imp.SslCertificates.Server.IssuedBy);
            		Console.WriteLine("Issued to:	" + imp.SslCertificates.Server.IssuedTo);
            		Console.WriteLine("Valid from:	" + imp.SslCertificates.Server.ValidFromDate);
            		Console.WriteLine("Valid to:	" + imp.SslCertificates.Server.ValidToDate);
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">New</span> Imap
            		imp.SslMode = SslStartupMode.OnConnect
            		imp.SslCertificates.Client = <span style="color: blue;">New</span> Certificate("C:\my.pfx", CertFileType.Pfx, "secret")
            		imp.Connect("mail.domain.com", 993)
            		Console.WriteLine("The server certificate info")
            		Console.WriteLine("===========================")
            		Console.WriteLine("Issued by:	" &amp; imp.SslCertificates.Server.IssuedBy)
            		Console.WriteLine("Issued to:	" &amp; imp.SslCertificates.Server.IssuedTo)
            		Console.WriteLine("Valid from:	" &amp; imp.SslCertificates.Server.ValidFromDate)
            		Console.WriteLine("Valid to:	" &amp; imp.SslCertificates.Server.ValidToDate)
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Proxy">
            <summary>
            Provides access to the settings which allow MailBee to connect to a mail server via a proxy server.
            <seealso cref="T:MailBee.Proxy.ProxyServer"/>
            </summary>
            <value>A reference to the proxy server settings.</value>
            <remarks>
            By default, proxy server is not used. The developer can change this to make MailBee use SOCKS4, SOCKS5, or HTTP proxy server.
            This is useful when a firewall prohibits direct connections with a mail server but permits connections via a proxy.
            </remarks>
            <example>
            This console sample establishes connection with the mail server via an HTTP proxy server which requires clients to authenticate themselves.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Proxy;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            		imp.Proxy.Name = "proxy.server.com";
            		imp.Proxy.Protocol = ProxyProtocol.Http;
            		imp.Proxy.Port = 808;
            		imp.Proxy.AccountName = "jdoe";
            		imp.Proxy.Password = "secret";
            		imp.Connect("mail.company.com");
            		Console.WriteLine("Connected via a proxy server");
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Proxy
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">New</span> Imap
            		imp.Proxy.Name = "proxy.server.com"
            		imp.Proxy.Protocol = ProxyProtocol.Http
            		imp.Proxy.Port = 808
            		imp.Proxy.AccountName = "jdoe"
            		imp.Proxy.Password = "secret"
            		imp.Connect("mail.company.com")
            		Console.WriteLine("Connected via a proxy server")
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsConnected">
            <summary>
            Indicates whether the component is connected to the server.
            </summary>
            <value><b>true</b> if the component is connected to the server; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsSslConnection">
            <summary>
            Indicates whether the current connection (if any) if secured with TLS/SSL layer.
            </summary>
            <value><b>true</b> if the current connection is TLS/SSL; <b>false</b> if the connection is not secure.</value>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsLoggedIn">
            <summary>
            Indicates whether the component has already successfully authenticated on the server
            and logged in the user account.
            </summary>
            <value><b>true</b> if already logged in the user account on the server; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Timeout">
            <summary>
            Gets or sets the amount of time (in milliseconds) the component will wait for a response from the server.
            </summary>
            <value>The amount of time (in milliseconds) the component will wait for data to be received from the server
            before returning an error, or zero to wait indefinitely. The default value is <see cref="P:MailBee.Global.DefaultTimeout"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><see cref="P:MailBee.ImapMail.Imap.Timeout"/> is negative.</exception>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsIdle">
            <summary>
            Gets if the component is in IDLE state.
            <seealso cref="M:MailBee.ImapMail.Imap.Idle"/>
            </summary>
            <value><b>true</b> if the component is passively waiting/receiving/processing responses from the server
            and not sending any commands to the server.</value>
        </member>
        <member name="P:MailBee.ImapMail.Imap.IsFolderSelected">
            <summary>
            Indicates if a folder is currently selected in the mail account.
            </summary>
            <value><b>true</b> if a folder has already been selected; otherwise, <b>false</b>.</value>
            <remarks>
            Many methods of the <see cref="T:MailBee.ImapMail.Imap"/> component require a folder be selected in order to perform successfully.
            To select a folder, the developer can use <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> or <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/>
            methods. An IMAP4 mail account is guaranteed to contain at least "Inbox" folder.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.MessageCount">
            <summary>
            Gets the number of messages in the currently selected folder.
            </summary>
            <value>The integer value containing the number of messages in the currently selected folder, or 0 if no folder is selected.</value>
            <remarks>Ordinal message number of the first message in a folder is 1 (not 0).
            Ordinal message number of the last message in a folder is <see cref="P:MailBee.ImapMail.Imap.MessageCount"/>.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.RecentCount">
            <summary>
            Gets the number of recent messages in the currently selected folder.
            </summary>
            <value>The integer value containing the number of messages having "\Recent" flag
            in the currently selected folder, or 0 if no folder is selected.</value>
            <remarks>
            <para>"\Recent" flag indicates a message is "recently" arrived in the folder.
            This session is the first session to have been notified about this message;
            if the session is read-write (the folder was selected using <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> method),
            subsequent sessions will not see "\Recent" set for this message. This flag can not be altered by the client.</para>
            <para>If it is not possible to determine whether or not this session is the first session to be notified about a message,
            then that message SHOULD be considered recent.</para>
            <para>If multiple connections have the same folder selected simultaneously,
            it is undefined which of these connections will see newly-arrived messages with "\Recent" set
            and which will see it without "\Recent" set.</para>
            <para>To prevent messages from loosing "\Recent" flag (i.e. to monitor a folder keeping its state unchanged), the developer
            should select a folder using <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> method instead of <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Unseen">
            <summary>
            Gets the ordinal message number of the first message which does not have "\Seen" flag set.
            </summary>
            <value>The integer value containing one-based message number of the first unseen message in the currently selected folder,
            or 0 if there are no unseen messages in the folder or no folder is selected.</value>
            <remarks>
            <para>Messages are flagged with "\Seen" tag when they are downloaded completely. For instance, if only a header section of an unseen
            message is downloaded, the message will remain unseen. When the message is downloaded entirely, it will be flagged "\Seen".</para>
            <note>If the folder was selected in read-only mode (e.g. using <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> method), the message flags will NOT be affected
            under any circumstances.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.UidValidity">
            <summary>
            Gets the UIDVALIDITY value of the currently selected folder.
            </summary>
            <value>A 32-bit positive value containing the UIDVALIDITY of the currently selected folder,
            or 0 if no folder is selected.</value>
            <remarks>
            <para>
            If UIDs from an earlier session fail to persist in this session,
            the UIDVALIDITY value MUST be greater than the one used in the earlier session.
            </para>
            <para>Thus, the client should remember <see cref="P:MailBee.ImapMail.Imap.UidValidity"/> value of each folder and compare
            the saved value and new value on next session. If new value is larger, it means the mail server is
            not capable of keeping UIDs unchanged between sessions. In this case, the client cannot make any assumptions
            that UIDs obtained during the previous session correspond to UIDs of the same messages on this session.</para>
            <para>Nowdays, IMAP4 servers which fail to persist UIDs between session are very uncommon, and the UIDVALIDITY value is usually the same accross sessions.
            Nevertheless, the client should still check
            the UIDVALIDITY value due to the following reason: if, between two sessions, the folder was deleted and the folder with the same
            name was recreated, and this new folder was filled with some mails, their UIDs may coincide with UIDs
            of the messages in the original folder (which is now deleted). To avoid confusion,
            the application should check if UIDVALIDITY had changed.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.UidNext">
            <summary>
            Gets the UID to be assigned to the next message in the currently selected folder.
            <seealso cref="T:MailBee.ImapMail.FolderStatus"/>
            </summary>
            <value>A 32-bit positive value containing the UIDNEXT of the currently selected folder,
            or 0 if it's not available or no folder is selected.</value>
            <remarks>
            This value, if available, allows the application to predict the UID value
            that will be assigned to a new message in the folder.
            <para>For instance, if the application is
            going to upload a message into the folder and wants to know the UID assigned to this message,
            it can obtain this information passing <see cref="T:MailBee.ImapMail.UidPlusResult"/> object as <i>result</i>
            parameter of <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method.</para>
            <para>However, if the server does not support UIDPLUS extension, this won't work.
            If the server lacks UIDPLUS support, the application can query <see cref="P:MailBee.ImapMail.Imap.UidNext"/>
            before making upload. If it's non-zero, this will be a value of UID to be assigned to the uploaded message.</para>
            <note><see cref="P:MailBee.ImapMail.Imap.UidNext"/> value is updated ONLY when a folder gets selected. Thus, if any messages arrived
            into the folder after it was selected, <see cref="P:MailBee.ImapMail.Imap.UidNext"/> won't reflect the next UID value any longer.
            To request the current UIDNEXT value explicitly, the application should obtain the current <see cref="T:MailBee.ImapMail.FolderStatus"/>
            of the folder using <see cref="M:MailBee.ImapMail.Imap.GetFolderStatus(System.String)"/> method. This approach also has another advantage:
            some servers do not report UIDNEXT value on folder selection but they always report it when folder status is requested.
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Flags">
            <summary>
            Gets the flags that are applicable for the currently selected folder.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object representing
            the flags that are applicable for the currently selected folder.</value>
            <remarks>
            <para>
            If the folder is selected, the flag list contains the system-defined flags at
            a minimum (except "\Recent" flag which cannot be edited by the client). Typically,
            the following flags are returned: "\Answered", "\Flagged", "\Deleted", "\Seen", "\Draft".
            Also, this list may contain other flags specific to certain servers (like "$Spam", "$Personal", etc).
            </para>
            <para>If no folder is selected, the flag list will be empty.</para>
            <para>To access the flag list as a string, the developer can use <see cref="M:MailBee.ImapMail.MessageFlagSet.ToString"/>
            method. To access the system-defined flags of the flag list, the <see cref="P:MailBee.ImapMail.MessageFlagSet.SystemFlags"/>
            property can be used.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.PermanentFlags">
            <summary>
            Gets the flags the client can change permanently.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object representing
            the currently selected folder flags that can changed by the client permanently.</value>
            <remarks>
            Any flags that are in the <see cref="P:MailBee.ImapMail.Imap.Flags"/> but not in the <see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/>,
            can not be set permanently (i.e. across sessions). If the client attempts to store a flag that is not in
            the <see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/> list, the server will either ignore the change or store the
            state change for the remainder of the current session only. The <see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/> list can also
            include the special flag "\*" (<see cref="F:MailBee.ImapMail.SystemMessageFlags.CanCreate"/>), which indicates that
            it is possible to create new flags by attempting to apply those flags to the messages in the folder.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames">
            <summary>
            Gets or sets whether MailBee should automatically encode folder names with UTF-7 Modified encoding.
            <seealso cref="P:MailBee.ImapMail.Folder.RawName"/>
            <seealso cref="P:MailBee.ImapMail.FolderStatus.RawFolderName"/>
            <seealso cref="M:MailBee.ImapMail.ImapUtils.FromUtf7String(System.String)"/>
            <seealso cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/>
            </summary>
            <value>If <b>true</b>, any method of <see cref="T:MailBee.ImapMail.Imap"/> component which can send requests
            containing folder names will automatically apply UTF-7 Modified transformation to these
            names; otherwise, MailBee will leave folder names intact. The default value is <b>true</b>.</value>
            <remarks>The developer might need to disable automatic UTF-7 Modified transformations when working
            with folders whose names do not comply with IMAP4 naming convention which requires non-ASCII characters
            be encoded with UTF-7M. In this case, the developer can use <see cref="P:MailBee.ImapMail.Folder.RawName"/> and <see cref="P:MailBee.ImapMail.FolderStatus.RawFolderName"/>
            instead of <see cref="P:MailBee.ImapMail.Folder.Name"/> and <see cref="P:MailBee.ImapMail.FolderStatus.FolderName"/> when passing folder name to the <see cref="T:MailBee.ImapMail.Imap"/> class method,
            or <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/> and <see cref="M:MailBee.ImapMail.ImapUtils.FromUtf7String(System.String)"/> methods to manually perform UTF-7M transformations when desired.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Imap.EnableLastDownloaded">
            <summary>
            Gets or sets whether MailBee should save currently downloaded envelopes in <see cref="P:MailBee.ImapMail.Imap.LastDownloadedEnvelopes"/> property.
            <seealso cref="P:MailBee.ImapMail.Imap.LastDownloadedEnvelopes"/>
            </summary>
            <value>If <b>true</b>, any method of <see cref="T:MailBee.ImapMail.Imap"/> component which receives FETCH responses from the server
            (like <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>, <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>, <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/>, etc) will populate
            <see cref="P:MailBee.ImapMail.Imap.LastDownloadedEnvelopes"/> collection with <see cref="T:MailBee.ImapMail.Envelope"/> objects received and parsed during the method execution;
            if <b>false</b>, <see cref="P:MailBee.ImapMail.Imap.LastDownloadedEnvelopes"/> property will always return a null reference (<b>Nothing</b> in Visual Basic).
            The default value is <b>false</b>.</value>
        </member>
        <member name="P:MailBee.ImapMail.Imap.LastDownloadedEnvelopes">
            <summary>
            Gets the collection of the envelopes downloaded to the current moment.
            <seealso cref="P:MailBee.ImapMail.Imap.EnableLastDownloaded"/>
            </summary>
            <value>A reference to the collection of the envelopes downloaded to the current moment
            by the corresponding method of <see cref="T:MailBee.ImapMail.Imap"/> component, or a null reference (<b>Nothing</b> in Visual Basic)
            if <see cref="P:MailBee.ImapMail.Imap.EnableLastDownloaded"/> is <b>false</b> or no method receiving envelopes has already been called
            (or if such method failed prior to starting receiving envelopes).</value>
            <remarks>
            <note>This is an advanced property which serves special purposes. It's activated via setting
            <see cref="P:MailBee.ImapMail.Imap.EnableLastDownloaded"/> prior to calling a method which requests envelopes from the server.</note>
            <para>This property can be used to get downloaded envelopes in the case if the
            corresponding method failed. <see cref="T:MailBee.ImapMail.Imap"/> methods throw an exception or return
            a null reference on failure. Sometimes, however, the developer still wishes to get envelopes which
            had already been received to the moment of failure (for instance, if 100 envelopes had been received
            and error occured for envelope #101). In this case, the developer can use this property to get envelopes
            which had already been received and parsed to the moment of the failure.</para>
            <para>When this collection is not needed any longer, the developer should set <see cref="P:MailBee.ImapMail.Imap.EnableLastDownloaded"/>
            to <b>false</b> to free the resources. Also, <see cref="P:MailBee.ImapMail.Imap.LastDownloadedEnvelopes"/> will be reset to a null reference
            with a new call of any method requesting envelopes from the server.</para>
            </remarks>
            <example>
            <para>This sample demonstrates reliable approach to downloading messages from an IMAP4 account.
            The code tolerates disconnections and other errors which may occur during downloading messages.
            If any problem occurs, the code reconnects to the server if needed and attempts to download the
            remaining messages (already downloaded messages are not downloaded again, however).
            Also, the code execution won't end up in an endless loop in the case of permanent errors
            (if no messages had been downloaded at all, the code won't try again).</para>
            <para>To simulate connection drops during the IMAP4 session, the code suddenly closes the connection
            during getting message data from the server.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">int</span>  traffic;
            	<span style="color: blue;">static</span> <span style="color: blue;">bool</span> downloadingEnvelopes;
            
            	<span style="color: green;">// We use Imap.DataReceived event to simulate connection drop during</span>
            	<span style="color: green;">// getting message data from the server. We do this through closing</span>
            	<span style="color: green;">// the connection after 50000 bytes of message data has been received from the</span>
            	<span style="color: green;">// server. This may occur multiple times (for instance, if there is 1MB of mail</span>
            	<span style="color: green;">// in the inbox, the connection will be dropped about 20 times).</span>
            	<span style="color: green;">// If, however, there is a message larger than 50KB in the inbox, the download process</span>
            	<span style="color: green;">// will stop because it would otherwise end up in an endless loop (because this code</span>
            	<span style="color: green;">// always disconnects on getting 50-th KB of the data and it would never have received</span>
            	<span style="color: green;">// such message completely).</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> imp_DataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: blue;">if</span> (downloadingEnvelopes)
            		{
            			traffic += e.Data.Length;
            
            			<span style="color: green;">// Increase 50000 to a larger value if you wish to test this code with</span>
            			<span style="color: green;">// a mailbox containing large messages (larger than 50KB).</span>
            			<span style="color: blue;">if</span> (traffic &gt; 50000)
            			{
            				((Imap)sender).Log.WriteLine("SIMULATE CONNECTION DROP");
            				((Imap)sender).GetSocket().Close();
            			}
            		}
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Enable logging IMAP4 session into a file. Useful for troubleshooting.</span>
            		<span style="color: green;">// Also, this log can be used to track the history of disconnections and</span>
            		<span style="color: green;">// reconnections during downloading messages.</span>
            		imp.Log.Filename = @"C:\log.txt";
            		imp.Log.Enabled = <span style="color: blue;">true</span>;
            		imp.Log.Clear();
            
            		<span style="color: green;">// Attach to a DataReceived event which will be used for simulating</span>
            		<span style="color: green;">// connection failures.</span>
            		imp.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(imp_DataReceived);
            
            		<span style="color: green;">// Will set it to true once either everything has been downloaded</span>
            		<span style="color: green;">// or a permanent error has occurred.</span>
            		<span style="color: blue;">bool</span> finished = <span style="color: blue;">false</span>;
            
            		<span style="color: green;">// Remember UID of the last message which had already been downloaded.</span>
            		<span style="color: green;">// After reconnecting, we'll download envelopes with UIDs larger than</span>
            		<span style="color: green;">// lastUid. For the first time, set it to 0 (which is less than UID of</span>
            		<span style="color: green;">// any message because minimum value of UID is 1).</span>
            		<span style="color: blue;">long</span> lastUid = 0;
            
            		<span style="color: green;">// We'll collect downloaded messages in this collection.</span>
            		EnvelopeCollection envs = <span style="color: blue;">new</span> EnvelopeCollection();
            
            		<span style="color: green;">// Because we catch exceptions in this code but still want to know</span>
            		<span style="color: green;">// which error has occurred in the case of permanent failure, we remember</span>
            		<span style="color: green;">// the reason of it.</span>
            		MailBeeException permanentException = <span style="color: blue;">null</span>;
            
            		<span style="color: green;">// Enable cache of envelopes downloaded during execution of the last method.</span>
            		imp.EnableLastDownloaded = <span style="color: blue;">true</span>;
            
            		<span style="color: blue;">do</span>
            		{
            			<span style="color: green;">// Prevent connection drop simulation when not downloading messages.</span>
            			downloadingEnvelopes = <span style="color: blue;">false</span>;
            
            			<span style="color: green;">// Connect or reconnect to the server if required (and login/select inbox).</span>
            			<span style="color: blue;">if</span> (!imp.IsConnected)
            			{
            				imp.Connect("mail.domain.com");
            			}
            			<span style="color: blue;">if</span> (!imp.IsLoggedIn)
            			{
            				imp.Login("jdoe", "secret");
            			}
            			<span style="color: blue;">if</span> (!imp.IsFolderSelected)
            			{
            				imp.SelectFolder("INBOX");
            			}
            
            			traffic = 0;
            
            			<span style="color: blue;">try</span>
            			{
            				<span style="color: green;">// Enable connection drop simulation.</span>
            				downloadingEnvelopes = <span style="color: blue;">true</span>;
            
            				<span style="color: green;">// Download the remaining messages.</span>
            				imp.DownloadEnvelopes((lastUid + 1).ToString() + ":*", <span style="color: blue;">true</span>, EnvelopeParts.MessagePreview, -1);
            
            				<span style="color: green;">// Disable connection drop simulation.</span>
            				downloadingEnvelopes = <span style="color: blue;">false</span>;
            
            				<span style="color: green;">// All's done.</span>
            				envs.Add(imp.LastDownloadedEnvelopes);
            				finished = <span style="color: blue;">true</span>;
            			}
            			<span style="color: blue;">catch</span> (MailBeeException e)
            			{
            				downloadingEnvelopes = <span style="color: blue;">false</span>;
            
            				<span style="color: blue;">if</span> (imp.LastDownloadedEnvelopes == <span style="color: blue;">null</span> ||
            					imp.LastDownloadedEnvelopes.Count == 0)
            				{
            					<span style="color: green;">// Haven't got any messages. Assume this is permanent error</span>
            					<span style="color: green;">// (otherwise, we could get endless loop).</span>
            					finished = <span style="color: blue;">true</span>;
            					permanentException = e;
            				}
            				<span style="color: blue;">else</span>
            				{
            					<span style="color: green;">// Error has occurred but some envelopes have still been</span>
            					<span style="color: green;">// downloaded. We'll proceed with getting the rest of messages.</span>
            					envs.Add(imp.LastDownloadedEnvelopes);
            
            					<span style="color: green;">// Get last UID from the value of UID of the last downloaded message.</span>
            					lastUid = imp.LastDownloadedEnvelopes[imp.LastDownloadedEnvelopes.Count - 1].Uid;
            				}
            			}
            		} <span style="color: blue;">while</span> (!finished);
            
            		<span style="color: green;">// Clear and disable the cache of the last downloaded envelopes.</span>
            		imp.EnableLastDownloaded = <span style="color: blue;">false</span>;
            
            		<span style="color: blue;">if</span> (imp.IsConnected)
            		{
            			<span style="color: green;">// Attempt to disconnect (we need to catch MailBeeSocketObjectDisposedException</span>
            			<span style="color: green;">// here because we simulated connection drop bypassing MailBee (using Socket.Close()</span>
            			<span style="color: green;">// method) and Imap.IsConnected could remain true). In real world apps, this</span>
            			<span style="color: green;">// is not required and Imap.IsConnected always reflects the actual state of</span>
            			<span style="color: green;">// the connection.</span>
            			<span style="color: blue;">try</span>
            			{
            				imp.Disconnect();
            			}
            			<span style="color: blue;">catch</span> (MailBeeSocketObjectDisposedException) {}
            		}
            
            		<span style="color: green;">// Display UIDs of the downloaded messages.</span>
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            		{
            			Console.Write(env.Uid + " ");
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> traffic <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            	<span style="color: blue;">Shared</span> downloadingEnvelopes <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span>
            
            	<span style="color: green;">' We use Imap.DataReceived event to simulate connection drop during</span>
            	<span style="color: green;">' getting message data from the server. We do this through closing</span>
            	<span style="color: green;">' the connection after 50000 bytes of message data has been received from the</span>
            	<span style="color: green;">' server. This may occur multiple times (for instance, if there is 1MB of mail</span>
            	<span style="color: green;">' in the inbox, the connection will be dropped about 20 times).</span>
            	<span style="color: green;">' If, however, there is a message larger than 50KB in the inbox, the download process</span>
            	<span style="color: green;">' will stop because it would otherwise end up in an endless loop (because this code</span>
            	<span style="color: green;">' always disconnects on getting 50-th KB of the data and it would never have received</span>
            	<span style="color: green;">' such message completely).</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> imp_DataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: blue;">If</span> downloadingEnvelopes <span style="color: blue;">Then</span>
            			traffic += e.Data.Length
            
            			<span style="color: green;">' Increase 50000 to a larger value if you wish to test this code with</span>
            			<span style="color: green;">' a mailbox containing large messages (larger than 50KB).</span>
            			<span style="color: blue;">If</span> traffic &gt; 50000 <span style="color: blue;">Then</span>
            				<span style="color: blue;">CType</span>(sender, Imap).Log.WriteLine("SIMULATE CONNECTION DROP")
            				<span style="color: blue;">CType</span>(sender, Imap).GetSocket().Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> Imap = <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Enable logging IMAP4 session into a file. Useful for troubleshooting.</span>
            		<span style="color: green;">' Also, this log can be used to track the history of disconnections and</span>
            		<span style="color: green;">' reconnections during downloading messages.</span>
            		imp.Log.Filename = "C:\log.txt"
            		imp.Log.Enabled = <span style="color: blue;">True</span>
            		imp.Log.Clear()
            
            		<span style="color: green;">' Attach to a DataReceived event which will be used for simulating</span>
            		<span style="color: green;">' connection failures.</span>
            		<span style="color: blue;">AddHandler</span> imp.DataReceived, <span style="color: blue;">AddressOf</span> imp_DataReceived
            
            		<span style="color: green;">' Will set it to true once either everything has been downloaded</span>
            		<span style="color: green;">' or a permanent error has occurred.</span>
            		<span style="color: blue;">Dim</span> finished <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">False</span>
            
            		<span style="color: green;">' Remember UID of the last message which had already been downloaded.</span>
            		<span style="color: green;">' After reconnecting, we'll download envelopes with UIDs larger than</span>
            		<span style="color: green;">' lastUid. For the first time, set it to 0 (which is less than UID of</span>
            		<span style="color: green;">' any message because minimum value of UID is 1).</span>
            		<span style="color: blue;">Dim</span> lastUid <span style="color: blue;">As</span> <span style="color: blue;">Long</span> = 0
            
            		<span style="color: green;">' We'll collect downloaded messages in this collection.</span>
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = <span style="color: blue;">New</span> EnvelopeCollection
            
            		<span style="color: green;">' Because we catch exceptions in this code but still want to know</span>
            		<span style="color: green;">' which error has occurred in the case of permanent failure, we remember</span>
            		<span style="color: green;">' the reason of it.</span>
            		<span style="color: blue;">Dim</span> permanentException <span style="color: blue;">As</span> MailBeeException = <span style="color: blue;">Nothing</span>
            
            		<span style="color: green;">' Enable cache of envelopes downloaded during execution of the last method.</span>
            		imp.EnableLastDownloaded = <span style="color: blue;">True</span>
            
            		<span style="color: blue;">Do</span>
            			<span style="color: green;">' Prevent connection drop simulation when not downloading messages.</span>
            			downloadingEnvelopes = <span style="color: blue;">False</span>
            
            			<span style="color: green;">' Connect or reconnect to the server if required (and login/select inbox).</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.IsConnected <span style="color: blue;">Then</span>
            				imp.Connect("mail.domain.com")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.IsLoggedIn <span style="color: blue;">Then</span>
            				imp.Login("jdoe", "secret")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.IsFolderSelected <span style="color: blue;">Then</span>
            				imp.SelectFolder("INBOX")
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            			traffic = 0
            
            			<span style="color: blue;">Try</span>
            				<span style="color: green;">' Enable connection drop simulation.</span>
            				downloadingEnvelopes = <span style="color: blue;">True</span>
            
            				<span style="color: green;">' Download the remaining messages.</span>
            				imp.DownloadEnvelopes((lastUid + 1).ToString() &amp; ":*", <span style="color: blue;">True</span>, EnvelopeParts.MessagePreview, -1)
            
            				<span style="color: green;">' Disable connection drop simulation.</span>
            				downloadingEnvelopes = <span style="color: blue;">False</span>
            
            				<span style="color: green;">' All's done.</span>
            				envs.Add(imp.LastDownloadedEnvelopes)
            				finished = <span style="color: blue;">True</span>
            			<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeException
            				downloadingEnvelopes = <span style="color: blue;">False</span>
            
            				<span style="color: blue;">If</span> imp.LastDownloadedEnvelopes <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Or</span> imp.LastDownloadedEnvelopes.Count = 0 <span style="color: blue;">Then</span>
            					<span style="color: green;">' Haven't got any messages. Assume this is permanent error</span>
            					<span style="color: green;">' (otherwise, we could get endless loop).</span>
            					finished = <span style="color: blue;">True</span>
            					permanentException = e
            				<span style="color: blue;">Else</span>
            					<span style="color: green;">' Error has occurred but some envelopes have still been</span>
            					<span style="color: green;">' downloaded. We'll proceed with getting the rest of messages.</span>
            					envs.Add(imp.LastDownloadedEnvelopes)
            
            					<span style="color: green;">' Get last UID from the value of UID of the last downloaded message.</span>
            					lastUid = imp.LastDownloadedEnvelopes(imp.LastDownloadedEnvelopes.Count - 1).Uid
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            		<span style="color: blue;">Loop</span> <span style="color: blue;">While</span> <span style="color: blue;">Not</span> finished
            
            		<span style="color: green;">' Clear and disable the cache of the last downloaded envelopes.</span>
            		imp.EnableLastDownloaded = <span style="color: blue;">False</span>
            
            		<span style="color: blue;">If</span> imp.IsConnected <span style="color: blue;">Then</span>
            			<span style="color: green;">' Attempt to disconnect (we need to catch MailBeeSocketObjectDisposedException</span>
            			<span style="color: green;">' here because we simulated connection drop bypassing MailBee (using Socket.Close()</span>
            			<span style="color: green;">' method) and Imap.IsConnected could remain true). In real world apps, this</span>
            			<span style="color: green;">' is not required and Imap.IsConnected always reflects the actual state of</span>
            			<span style="color: green;">' the connection.</span>
            			<span style="color: blue;">Try</span>
            				imp.Disconnect()
            			<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeSocketObjectDisposedException
            			<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Display UIDs of the downloaded messages.</span>
            		<span style="color: blue;">Dim</span> env <span style="color: blue;">As</span> Envelope
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">In</span> envs
            			Console.Write(env.Uid &amp; " ")
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.ErrorOccurred">
            <summary>
            Occurs when the <see cref="T:MailBee.MailBeeException"/> is thrown.
            </summary>
            <remarks>
            <para>When MailBee encounters any error, it throws the <see cref="T:MailBee.MailBeeException"/>.
            However, MailBee can trap this exception if the error was not critical. For instance,
            if the IMAP4 server responds with a FETCH response containing envelope data which could not be completely parsed,
            the <see cref="T:MailBee.MailBeeException"/> will be thrown and then trapped by MailBee itself,
            but no exception will be thrown to the application code. Such errors are called <i>warnings</i>.</para>
            <para><see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event allows the developer to track both warnings and critical
            errors because it's raised for a particular exception even if MailBee will trap this
            exception and do not pass it to the application code.</para>
            </remarks>
            <example>This sample logs all the warnings and critical errors issued during the IMAP4 session into the console.
            If the connection succeeds and all envelopes are received without any errors, no output will be produced.
            The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: green;">// Check whether the error is critical or not.</span>
            		<span style="color: blue;">if</span> (e.IsFinalError)
            		{
            			<span style="color: green;">// Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">// After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">// throw the same exception to the application code.</span>
            			Console.WriteLine("CRITICAL ERROR: " + e.Reason.Message);
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">// After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">// try another methods to accomplish the current task.</span>
            			Console.WriteLine("WARNING: " + e.Reason.Message);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the ErrorOccurred event.</span>
            		imp.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe@company.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Download envelopes. If any envelopes could not be completely parsed,</span>
            		<span style="color: green;">// this will caused ErrorOccurred event be raised.</span>
            		EnvelopeCollection envs = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Close the connection</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: green;">' Check whether the error is critical or not.</span>
            		<span style="color: blue;">If</span> (e.IsFinalError) <span style="color: blue;">Then</span>
            			<span style="color: green;">' Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">' After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">' throw the same exception to the application code.</span>
            			Console.WriteLine("CRITICAL ERROR: " &amp; e.Reason.Message)
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Display corresponding MailBeeException.Message.</span>
            			<span style="color: green;">' After OnErrorOccurred handler finishes, MailBee will </span>
            			<span style="color: green;">' try another methods to accomplish the current task.</span>
            			Console.WriteLine("WARNING: " &amp; e.Reason.Message)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the ErrorOccurred event.</span>
            		<span style="color: blue;">AddHandler</span> imp.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe@company.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Download envelopes. If any envelopes could not be completely parsed,</span>
            		<span style="color: green;">' this will caused ErrorOccurred event be raised.</span>
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Close the connection</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.LogNewEntry">
            <summary>
            Occurs when an entry is written into the log file (or into the memory buffer
            if <see cref="P:MailBee.ImapMail.Imap.Log">Imap.Log</see>.<see cref="P:MailBee.Logger.MemoryLog"/> is <b>true</b>).
            </summary>
            <remarks>
            <para>This event is raised only if logging is turned on (<see cref="P:MailBee.Logger.Enabled"/> is <b>true</b>).</para>
            <para>MailBee raises this event BEFORE adding the entry into the the log. Since many
            properties of <see cref="P:MailBee.LogNewEntryEventArgs.NewEntry"/> object are editable, the
            developer can change the data MailBee will put into the log or even cancel logging the current
            entry at all. This may be useful the developer wishes to log only those entires
            which meet certain criteria.</para>
            <note>Entries added by the developer (through <see cref="M:MailBee.Logger.WriteLine(System.String)"/>
            method call) do not cause this event to be raised. Thus, it's safe to add user-defined log entries
            even in the <see cref="E:MailBee.ImapMail.Imap.LogNewEntry"/> event handler itself. This does not cause endless recursion which
            would otherwise occur if <see cref="M:MailBee.Logger.WriteLine(System.String)"/> method called in
            <see cref="E:MailBee.ImapMail.Imap.LogNewEntry"/> event handler raised this event again.</note>
            </remarks>
            <example>This sample enables logging the IMAP4 session into a file, and logs only
            those entries which indicate any data traffic between the client (MailBee) and the server.
            Other entries are discarded, and user-defined log entry is added instead.
            The sample is written for a console application.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// LogNewEntry event handler</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLogNewEntry(<span style="color: blue;">object</span> sender, LogNewEntryEventArgs e)
            	{
            		<span style="color: blue;">if</span> ( !(e.NewEntry.MessageType == LogMessageType.Recv ||
            			e.NewEntry.MessageType == LogMessageType.Send) )
            		{
            			<span style="color: green;">// Do not add this entry if it does not indicate any data transfer,</span>
            			<span style="color: green;">// and put our own message instead.</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">false</span>;
            			((Imap)sender).Log.WriteLine("UNWANTED MESSAGE REMOVED");
            
            			<span style="color: green;">// Note: we could produce similar results just by writing new values</span>
            			<span style="color: green;">// into MessageText and MessageComment properties of the original entry.</span>
            			<span style="color: green;">// The code above uses Log.WriteLine method just to show how to add new</span>
            			<span style="color: green;">// entries in the event handler itself. You may comment 2 code lines above</span>
            			<span style="color: green;">// and uncomment 2 code lines below to use the alternate approach.</span>
            			<span style="color: green;">//</span>
            			<span style="color: green;">// e.NewEntry.MessageText = "UNWANTED MESSAGE REMOVED";</span>
            			<span style="color: green;">// e.NewEntry.MessageComment = string.Empty;</span>
            		}
            	}
            
            	<span style="color: green;">// The actual code</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Enable logging the POP3 session into a file</span>
            		imp.Log.Enabled = <span style="color: blue;">true</span>;
            		imp.Log.Filename = @"C:\Temp\log.txt";
            		imp.Log.Clear();
            
            		<span style="color: green;">// Subscribe to the LogNewEntry event</span>
            		imp.LogNewEntry += <span style="color: blue;">new</span> LogNewEntryEventHandler(OnLogNewEntry);
            
            		<span style="color: green;">// Do something which would produce some network traffic</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' LogNewEntry event handler</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnLogNewEntry(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LogNewEntryEventArgs)
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> e.NewEntry.MessageType = LogMessageType.Recv <span style="color: blue;">OrElse</span> _
            			e.NewEntry.MessageType = LogMessageType.Send <span style="color: blue;">Then</span>
            
            			<span style="color: green;">' Do not add this entry if it does not indicate any data transfer,</span>
            			<span style="color: green;">' and put our own message instead.</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">False</span>
            			<span style="color: blue;">CType</span>(sender, Imap).Log.WriteLine("UNWANTED MESSAGE REMOVED")
            
            			<span style="color: green;">' Note: we could produce similar results just by writing new values</span>
            			<span style="color: green;">' into MessageText and MessageComment properties of the original entry.</span>
            			<span style="color: green;">' The code above uses Log.WriteLine method just to show how to add new</span>
            			<span style="color: green;">' entries in the event handler itself. You may comment 2 code lines above</span>
            			<span style="color: green;">' and uncomment 2 code lines below to use the alternate approach.</span>
            			<span style="color: green;">'</span>
            			<span style="color: green;">' e.NewEntry.MessageText = "UNWANTED MESSAGE REMOVED"</span>
            			<span style="color: green;">' e.NewEntry.MessageComment = String.Empty</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Enable logging the POP3 session into a file</span>
            		imp.Log.Enabled = <span style="color: blue;">True</span>
            		imp.Log.Filename = "C:\Temp\log.txt"
            		imp.Log.Clear()
            
            		<span style="color: green;">' Subscribe to the LogNewEntry event</span>
            		<span style="color: blue;">AddHandler</span> imp.LogNewEntry, <span style="color: blue;">AddressOf</span> OnLogNewEntry
            
            		<span style="color: green;">' Do something which would produce some network traffic</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.DataReceived">
            <summary>
            Occurs when data is received from the IMAP4 server.
            <seealso cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/>
            <seealso cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/>
            </summary>
            <remarks>
            <para>Unlike <see cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/> event, occurrence of this event
            indicates receiving IMAP4-related data only. For instance, if the transmission channel
            is SSL-encrypted, <see cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/> event indicates receiving
            of encrypted data, while <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> will be raised later
            (after decrypting the data). If the transmission channel is not encrypted or otherwise
            scrambled, <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> and <see cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/> are equivalent.</para>
            <para>Unlike <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> event, <see cref="E:MailBee.ImapMail.Imap.DataReceived"/>
            will be raised when any IMAP4-related data is received, while <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/>
            event is raised only when FETCH response (containing IMAP4 envelopes, body structures, message data, etc)
            is downloaded.</para>
            <note>This event is also raised when zero-length data is received from the server.
            When the server sends zero-length data portion, it means the server closed the connection.
            This normally happens after <see cref="M:MailBee.ImapMail.Imap.Disconnect"/> method was called.</note>
            </remarks>
            <example>This sample prints all the data received from the server during IMAP4 session
            into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine("[" + System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the DataReceived event.</span>
            		imp.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe@domain.com", "secret");
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' DataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine("[" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the DataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> imp.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe@domain.com", "secret")
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.DataSent">
            <summary>
            Occurs when data is sent to the IMAP4 server.
            <seealso cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/>
            </summary>
            <remarks>Unlike <see cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/> event, occurrence of this event
            indicates sending IMAP4-related data only. For instance, if the transmission channel
            is SSL-encrypted, <see cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/> event indicates sending
            of any portion of encrypted data, while <see cref="E:MailBee.ImapMail.Imap.DataSent"/> will be raised later
            to indicate the entire request (which was previously sent as one or several encrypted
            data chunks) has been sent. If the transmission channel is not encrypted or otherwise
            scrambled, <see cref="E:MailBee.ImapMail.Imap.DataSent"/> and <see cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/> are equivalent.</remarks>
            <example>This sample prints all the data sent to the server during IMAP4 session
            into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine("[" + System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the DataSent event.</span>
            		imp.DataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataSent);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		imp.Connect("imap.host.com");
            		imp.Login("jdoe", "secret");
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' DataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine("[" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the DataSent event.</span>
            		<span style="color: blue;">AddHandler</span> imp.DataSent, <span style="color: blue;">AddressOf</span> OnDataSent
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		imp.Connect("imap.host.com")
            		imp.Login("jdoe", "secret")
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.LowLevelDataReceived">
            <summary>
            Occurs when data is received from the connected socket.
            <seealso cref="E:MailBee.ImapMail.Imap.DataReceived"/>
            </summary>
            <remarks>
            <para>If the transmission channel is encrypted, this event will be raised
            when any encrypted chunk of data is received. Thus, this event can be used to
            record the data which is actually received from the network.</para>
            <para>The typical use of this property is to calculate the network traffic
            produced during the IMAP4 session. SSL encryption increases the length of the
            transmitted data blocks, thus it's more accurate to calculate traffic by counting
            the length of data actually transmitted over the network.</para>
            <para>If the transmission channel is not encrypted or otherwise scrambled, this property
            is equivalent to <see cref="E:MailBee.ImapMail.Imap.DataReceived"/>.</para>
            </remarks>
            <example>This sample calculates all incoming traffic from the server during the IMAP4 session,
            and prints the result into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Total bytes received counter.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytes = 0;
            
            	<span style="color: green;">// LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Increment the counter.</span>
            		_totalBytes += e.Data.Length;
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the LowLevelDataReceived event.</span>
            		imp.LowLevelDataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("Inbox");
            		MailMessageCollection msgs = imp.DownloadMessageHeaders(Imap.AllMessages, <span style="color: blue;">false</span>);
            		imp.Disconnect();
            
            		<span style="color: green;">// Print the total number of bytes previously received from the server.</span>
            		Console.WriteLine(_totalBytes + " bytes received in all");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' Total bytes received counter.</span>
            	<span style="color: blue;">Dim</span> _totalBytes <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            
            	<span style="color: green;">' LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnLowLevelDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Increment the counter.</span>
            		_totalBytes += e.Data.Length
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the LowLevelDataReceived event.</span>
            		<span style="color: blue;">AddHandler</span> imp.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("Inbox")
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = imp.DownloadMessageHeaders(Imap.AllMessages, <span style="color: blue;">False</span>)
            		imp.Disconnect()
            
            		<span style="color: green;">' Print the total number of bytes previously received from the server.</span>
            		Console.WriteLine(_totalBytes &amp; " bytes received in all")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.LowLevelDataSent">
            <summary>
            Occurs when data is sent to the connected socket.
            <seealso cref="E:MailBee.ImapMail.Imap.DataSent"/>
            </summary>
            <remarks>
            <para>If the transmission channel is encrypted, this event will be raised
            each time an encrypted chunk of data is successfully sent. Thus, this event
            can be used to record the data which is actually sent to the network.</para>
            <para>The typical use of this property is to calculate the network traffic
            produced during the IMAP4 session. SSL encryption increases the length of the
            transmitted data blocks, thus it's more accurate to calculate traffic by counting
            the length of data actually transmitted over the network.</para>
            <para>If the transmission channel is not encrypted or otherwise scrambled, this property
            is equivalent to <see cref="E:MailBee.ImapMail.Imap.DataSent"/>.</para>
            </remarks>
            <example>This sample calculates all outgoing traffic to the server during the IMAP4 session,
            and prints the result into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Total bytes sent counter.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">int</span> _totalBytes = 0;
            
            	<span style="color: green;">// LowLevelDataSent event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataSent(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Increment the counter.</span>
            		_totalBytes += e.Data.Length;
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the LowLevelDataSent event.</span>
            		imp.LowLevelDataSent += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataSent);
            
            		<span style="color: green;">// Do something which would produce some network traffic.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("Inbox");
            		MailMessageCollection msgs =
            			imp.DownloadMessageHeaders(Imap.AllMessages, <span style="color: blue;">false</span>);
            		imp.Disconnect();
            
            		<span style="color: green;">// Print the total number of bytes previously sent to the server.</span>
            		Console.WriteLine(_totalBytes + " bytes sent in all");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' Total bytes sent counter.</span>
            	<span style="color: blue;">Dim</span> _totalBytes <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            
            	<span style="color: green;">' LowLevelDataSent event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnLowLevelDataSent(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Increment the counter.</span>
            		_totalBytes += e.Data.Length
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the LowLevelDataSent event.</span>
            		<span style="color: blue;">AddHandler</span> imp.LowLevelDataSent, <span style="color: blue;">AddressOf</span> OnLowLevelDataSent
            
            		<span style="color: green;">' Do something which would produce some network traffic.</span>
            		imp.Connect("mail.domain.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("Inbox")
            		<span style="color: blue;">Dim</span> msgs <span style="color: blue;">As</span> MailMessageCollection = imp.DownloadMessageHeaders(Imap.AllMessages, <span style="color: blue;">False</span>)
            		imp.Disconnect()
            
            		<span style="color: green;">' Print the total number of bytes previously sent to the server.</span>
            		Console.WriteLine(_totalBytes &amp; " bytes sent in all")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.HostResolved">
            <summary>
            Occurs when the IMAP4 server name is successfully resolved into IP address(es).
            <seealso cref="E:MailBee.ImapMail.Imap.SocketConnected"/>
            <seealso cref="E:MailBee.ImapMail.Imap.Connected"/>
            </summary>
            <remarks>If the IMAP4 server name (<paramref name="serverName"/> parameter of <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/> method)
            was already specified as an IP address, this event is still raised.
            <note>No checking if performed on whether the resolved IP address points to the live host.</note>
            </remarks>
            <example>This sample connects to the IMAP4 server host and prints all the IP addresses
            of this host into console. Most hosts, however, have only one IP address assigned.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// HostResolved event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnHostResolved(<span style="color: blue;">object</span> sender, HostResolvedEventArgs e)
            	{
            		<span style="color: blue;">foreach</span> (System.Net.IPAddress ip <span style="color: blue;">in</span> e.RemoteHost.AddressList)
            		{
            			Console.WriteLine(ip.ToString());
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the HostResolved event.</span>
            		imp.HostResolved += <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            
            		imp.Connect("imap.company.com");
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' HostResolved event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnHostResolved(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> HostResolvedEventArgs)
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> ip <span style="color: blue;">As</span> System.Net.IPAddress <span style="color: blue;">In</span> e.RemoteHost.AddressList
            			Console.WriteLine(ip.ToString())
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the HostResolved event.</span>
            		<span style="color: blue;">AddHandler</span> imp.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            
            		imp.Connect("imap.company.com")
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.SocketConnected">
            <summary>
            Occurs when the IMAP4 server accepts the connection attempt and opens the transmission
            channel between the remote host (IMAP4 server) and the client (MailBee).
            <seealso cref="E:MailBee.ImapMail.Imap.Connected"/>
            </summary>
            <remarks>This event is raised immediately after <see cref="T:System.Net.Sockets.Socket"/>
            successfully connected to the IMAP4 server host. After the socket itself has been connected
            and this event raised, the client needs to receive some data from the server in order to
            complete the procedure of establishing connection with the IMAP4 server. If the connection
            must be SSL-encrypted, a few additional round-trips to the server required in order
            to completely establish the connection. Then, once the connection is fully initialized and
            ready for sending IMAP4 commands to the server, <see cref="E:MailBee.ImapMail.Imap.Connected"/> event is raised.
            </remarks>
            <example>This sample demonstrates the order in which events are raised during
            <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/> method call. The events used in this sample occur in the following order:
            <list type="number">
            <item><description><see cref="E:MailBee.ImapMail.Imap.HostResolved"/></description></item>
            <item><description><see cref="E:MailBee.ImapMail.Imap.SocketConnected"/></description></item>
            <item><description><see cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/></description></item>
            <item><description><see cref="E:MailBee.ImapMail.Imap.DataReceived"/></description></item>
            <item><description><see cref="E:MailBee.ImapMail.Imap.Connected"/></description></item>
            </list>
            <para>
            Once <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/> method finishes, all event handlers are removed in the code, thus
            <see cref="M:MailBee.ImapMail.Imap.Disconnect"/> method does not generate any events (but it would do if we didn't
            remove <see cref="E:MailBee.ImapMail.Imap.LowLevelDataReceived"/> and <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> handlers).
            </para>
            <para><see cref="E:MailBee.ImapMail.Imap.DataSent"/> and <see cref="E:MailBee.ImapMail.Imap.LowLevelDataSent"/> events are not used in
            this sample because <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/> method does not send any data to the server.
            However, it would be different if SSL-encrypted connection was used.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// HostResolved event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnHostResolved(<span style="color: blue;">object</span> sender, HostResolvedEventArgs e)
            	{
            		Console.WriteLine("The host name of the server was resolved into IP address.");
            	}
            
            	<span style="color: green;">// SocketConnected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnSocketConnected(<span style="color: blue;">object</span> sender, SocketConnectedEventArgs e)
            	{
            		Console.WriteLine("The server accepted the connection.");
            	}
            
            	<span style="color: green;">// LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLowLevelDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		<span style="color: green;">// Since SSL connection is not used, OnDataReceived and OnLowLevelDataReceived </span>
            		<span style="color: green;">// routines will produce the same output. This sample handles both events just </span>
            		<span style="color: green;">// to demonstrate that LowLevelDataReceived event is raised before the </span>
            		<span style="color: green;">// corresponding DataReceived event.</span>
            		<span style="color: green;">// But in SSL case, DataReceived and LowLevelDataReceived event data would be </span>
            		<span style="color: green;">// completely different, and some LowLevelDataReceived events (such as ones </span>
            		<span style="color: green;">// occurred during the SSL handshake) would not be followed by DataReceived </span>
            		<span style="color: green;">// events at all, because the data sent or received during the SSL handshake </span>
            		<span style="color: green;">// does not relate to POP3 protocol and cannot be decoded into textual form.</span>
            		Console.WriteLine("Low level data received: [" +
            			System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine("Data received: [" +
            			System.Text.Encoding.Default.GetString(e.Data) + "]");
            	}
            
            	<span style="color: green;">// Connected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Successfully connected to the server.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the events.</span>
            		imp.HostResolved += <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            		imp.SocketConnected += <span style="color: blue;">new</span> SocketConnectedEventHandler(OnSocketConnected);
            		imp.LowLevelDataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            		imp.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            		imp.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		<span style="color: green;">// Connect to the server and make the events get raised.</span>
            		imp.Connect("mail.company.com");
            
            		<span style="color: green;">// Unsubscribe from the events.</span>
            		imp.HostResolved -= <span style="color: blue;">new</span> HostResolvedEventHandler(OnHostResolved);
            		imp.SocketConnected -= <span style="color: blue;">new</span> SocketConnectedEventHandler(OnSocketConnected);
            		imp.LowLevelDataReceived -= <span style="color: blue;">new</span> DataTransferEventHandler(OnLowLevelDataReceived);
            		imp.DataReceived -= <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            		imp.Connected -= <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' HostResolved event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnHostResolved(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> HostResolvedEventArgs)
            		Console.WriteLine("The host name of the server was resolved into IP address.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' SocketConnected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnSocketConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> SocketConnectedEventArgs)
            		Console.WriteLine("The server accepted the connection.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' LowLevelDataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnLowLevelDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		<span style="color: green;">' Since SSL connection is not used, OnDataReceived and OnLowLevelDataReceived </span>
            		<span style="color: green;">' routines will produce the same output. This sample handles both events just </span>
            		<span style="color: green;">' to demonstrate that LowLevelDataReceived event is raised before the </span>
            		<span style="color: green;">' corresponding DataReceived event.</span>
            		<span style="color: green;">' But in SSL case, DataReceived and LowLevelDataReceived event data would be </span>
            		<span style="color: green;">' completely different, and some LowLevelDataReceived events (such as ones </span>
            		<span style="color: green;">' occurred during the SSL handshake) would not be followed by DataReceived </span>
            		<span style="color: green;">' events at all, because the data sent or received during the SSL handshake </span>
            		<span style="color: green;">' does not relate to POP3 protocol and cannot be decoded into textual form.</span>
            		Console.WriteLine("Low level data received: [" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' DataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine("Data received: [" &amp; System.Text.Encoding.Default.GetString(e.Data) &amp; "]")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Successfully connected to the server.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the events.</span>
            		<span style="color: blue;">AddHandler</span> imp.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            		<span style="color: blue;">AddHandler</span> imp.SocketConnected, <span style="color: blue;">AddressOf</span> OnSocketConnected
            		<span style="color: blue;">AddHandler</span> imp.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            		<span style="color: blue;">AddHandler</span> imp.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            		<span style="color: blue;">AddHandler</span> imp.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		<span style="color: green;">' Connect to the server and make the events get raised.</span>
            		imp.Connect("mail.company.com")
            
            		<span style="color: green;">' Unsubscribe from the events.</span>
            		<span style="color: blue;">RemoveHandler</span> imp.HostResolved, <span style="color: blue;">AddressOf</span> OnHostResolved
            		<span style="color: blue;">RemoveHandler</span> imp.SocketConnected, <span style="color: blue;">AddressOf</span> OnSocketConnected
            		<span style="color: blue;">RemoveHandler</span> imp.LowLevelDataReceived, <span style="color: blue;">AddressOf</span> OnLowLevelDataReceived
            		<span style="color: blue;">RemoveHandler</span> imp.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            		<span style="color: blue;">RemoveHandler</span> imp.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.Connected">
            <summary>
            <seealso cref="E:MailBee.ImapMail.Imap.SocketConnected"/>
            Occurs when the connection with the server is successfully established.
            </summary>
            <remarks>This event indicates successful completion of the connection procedure, while
            <see cref="E:MailBee.ImapMail.Imap.SocketConnected"/> event (occurs before <see cref="E:MailBee.ImapMail.Imap.Connected"/>) indicates
            the connection request from MailBee was accepted by the server, and the IMAP4
            connection procedure will now begin.</remarks>
            <example>This sample uses <see cref="E:MailBee.ImapMail.Imap.Connected"/> event to report
            the successful connection status into console.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Connected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnConnected(<span style="color: blue;">object</span> sender, ConnectedEventArgs e)
            	{
            		Console.WriteLine("Successfully connected to the server.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to Connected event.</span>
            		imp.Connected += <span style="color: blue;">new</span> ConnectedEventHandler(OnConnected);
            
            		imp.Connect("imap.domain.com");
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' Connected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnConnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ConnectedEventArgs)
            		Console.WriteLine("Successfully connected to the server.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to Connected event.</span>
            		<span style="color: blue;">AddHandler</span> imp.Connected, <span style="color: blue;">AddressOf</span> OnConnected
            
            		imp.Connect("imap.domain.com")
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.Disconnected">
            <summary>
            Occurs when the connection with the server gets closed.
            <seealso cref="M:MailBee.ImapMail.Imap.Disconnect"/>
            </summary>
            <remarks>This event is raised in all the cases when the connection gets closed, including
            normal shutdown and failures.
            <note>If <see cref="M:MailBee.ImapMail.Imap.Abort"/> method is called, the connection is immediately
            closed, but no events (including <see cref="E:MailBee.ImapMail.Imap.Disconnected"/>) are raised any longer.</note>
            </remarks>
            <example>This sample demonstrates that <see cref="E:MailBee.ImapMail.Imap.Disconnected"/> event raises even
            on failures (when <see cref="T:MailBee.MailBeeException"/> is thrown). The sample set very small timeout value
            (500 milliseconds), then attempts to connect to the IMAP4 server, log in the account, select Inbox folder, and
            download the first message. If the server or network connection is slow, the network operation will time out.
            Otherwise, it will succeed. But in both cases, <see cref="E:MailBee.ImapMail.Imap.Disconnected"/> will still be raised.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// Disconnected event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDisconnected(<span style="color: blue;">object</span> sender, DisconnectedEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.IsNormalShutdown)
            		{
            			<span style="color: green;">// LOGOUT command was sent to IMAP4 server.</span>
            			Console.WriteLine("Normally disconnected from the server.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Rough disconnect (due to failure). This will occur if the server</span>
            			<span style="color: green;">// or network connection is quite slow and typical delay exceeds</span>
            			<span style="color: green;">// 500 milliseconds timeout value which we set for this sample.</span>
            			Console.WriteLine("The connection was terminated.");
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Set relatively small timeout value. Under slow connection,</span>
            		<span style="color: green;">// it may cause the connection to be closed due to timeout.</span>
            		imp.Timeout = 500;
            
            		<span style="color: green;">// Subscribe to Disconnected event.</span>
            		imp.Disconnected += <span style="color: blue;">new</span> DisconnectedEventHandler(OnDisconnected);
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.host.com");
            		imp.Login("jdoe@host.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Download the first message in the inbox completely. If the connection is</span>
            		<span style="color: green;">// slow, this may cause MailBee to terminate the connection and raise </span>
            		<span style="color: green;">// Disconnected event, and then throw MailBeeException (exceptions are </span>
            		<span style="color: green;">// enabled by default).</span>
            		MailMessage msg = imp.DownloadEntireMessage(1, <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Close the connection normally.</span>
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' Disconnected event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnDisconnected(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DisconnectedEventArgs)
            		<span style="color: blue;">If</span> (e.IsNormalShutdown) <span style="color: blue;">Then</span>
            			<span style="color: green;">' LOGOUT command was sent to IMAP4 server.</span>
            			Console.WriteLine("Normally disconnected from the server.")
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Rough disconnect (due to failure). This will occur if the server</span>
            			<span style="color: green;">' or network connection is quite slow and typical delay exceeds</span>
            			<span style="color: green;">' 500 milliseconds timeout value which we set for this sample.</span>
            			Console.WriteLine("The connection was terminated.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Set relatively small timeout value. Under slow connection,</span>
            		<span style="color: green;">' it may cause the connection to be closed due to timeout.</span>
            		imp.Timeout = 500
            
            		<span style="color: green;">' Subscribe to Disconnected event.</span>
            		<span style="color: blue;">AddHandler</span> imp.Disconnected, <span style="color: blue;">AddressOf</span> OnDisconnected
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.host.com")
            		imp.Login("jdoe@host.com", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Download the first message in the inbox completely. If the connection is</span>
            		<span style="color: green;">' slow, this may cause MailBee to terminate the connection and raise </span>
            		<span style="color: green;">' Disconnected event, and then throw MailBeeException (exceptions are </span>
            		<span style="color: green;">' enabled by default).</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = imp.DownloadEntireMessage(1, <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Close the connection normally.</span>
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.TlsStarted">
            <summary>
            Occurs when the connection with the server becomes secure.
            <seealso cref="P:MailBee.ImapMail.Imap.SslMode"/>
            <seealso cref="M:MailBee.ImapMail.Imap.StartTls"/>
            </summary>
            <remarks>This event is raised when TLS/SSL negotiation completes and TLS session successfully
            starts. Usually, this happens as a result of successful completion of <see cref="M:MailBee.ImapMail.Imap.StartTls"/>
            method or if automatic TLS/SSL negotiation was requested via setting <see cref="P:MailBee.ImapMail.Imap.SslMode"/> property
            to non-<see cref="F:MailBee.Security.SslStartupMode.Manual"/> value.
            </remarks>
            <example>This console sample demonstrates that <see cref="E:MailBee.ImapMail.Imap.TlsStarted"/> event is raised during executing <see cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method
            when <see cref="P:MailBee.ImapMail.Imap.SslMode"/> property is set to <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/> value.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// TlsStarted event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnTlsStarted(<span style="color: blue;">object</span> sender, TlsStartedEventArgs e)
            	{
            		<span style="color: green;">// This will happen during Login method execution.</span>
            		Console.WriteLine("TLS/SSL session started.");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to TlsStarted event.</span>
            		imp.TlsStarted += <span style="color: blue;">new</span> TlsStartedEventHandler(OnTlsStarted);
            
            		<span style="color: green;">// Notify MailBee it should start TLS/SSL session when appropriate.</span>
            		<span style="color: green;">// The connection is made to the regular port so that STARTTLS command</span>
            		<span style="color: green;">// will be used to start TLS/SSL session.</span>
            		imp.SslMode = SslStartupMode.UseStartTls;
            
            		imp.Connect("imap.company.com");
            
            		Console.WriteLine("Connected to the server. Will login now...");
            
            		<span style="color: green;">// TLS/SSL negotiation will take place here. Thus, user credentials</span>
            		<span style="color: green;">// will be sent to the mail server already under secure TLS/SSL layer.</span>
            		imp.Login("jdoe", "secret");
            
            		Console.WriteLine("Logged in successfully.");
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' TlsStarted event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnTlsStarted(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> TlsStartedEventArgs)
            		<span style="color: green;">' This will happen during Login method execution.</span>
            		Console.WriteLine("TLS/SSL session started.")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to TlsStarted event.</span>
            		<span style="color: blue;">AddHandler</span> imp.TlsStarted, <span style="color: blue;">AddressOf</span> OnTlsStarted
            
            		<span style="color: green;">' Notify MailBee it should start TLS/SSL session when appropriate.</span>
            		<span style="color: green;">' The connection is made to the regular port so that STARTTLS command</span>
            		<span style="color: green;">' will be used to start TLS/SSL session.</span>
            		imp.SslMode = SslStartupMode.UseStartTls
            
            		imp.Connect("imap.company.com")
            
            		Console.WriteLine("Connected to the server. Will login now...")
            
            		<span style="color: green;">' TLS/SSL negotiation will take place here. Thus, user credentials</span>
            		<span style="color: green;">' will be sent to the mail server already under secure TLS/SSL layer.</span>
            		imp.Login("jdoe", "secret")
            
            		Console.WriteLine("Logged in successfully.")
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.LoggedIn">
            <summary>
            Occurs when the component successfully authenticates the user on the server and logs
            in the user account.
            <seealso cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            </summary>
            <remarks>Usually, this event is raised on successful completion of <see cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/> method call.
            However, it's also raised when the server authenticates the client automatically
            (by external means, such as if the client connects from the trusted IP address) and sends PREAUTH response.</remarks>
            <example>This sample connects to the IMAP4 server and logs in the user account. The sample
            also checks if the <see cref="P:MailBee.ImapMail.Imap.IsLoggedIn"/> status was set to <b>true</b> after calling <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/>.
            This is required to make sure the client has not already been authenticated via PREAUTH.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">string</span> accountName = "Preauthenticated user";
            
            	<span style="color: green;">// LoggedIn event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLoggedIn(<span style="color: blue;">object</span> sender, LoggedInEventArgs e)
            	{
            		Console.WriteLine("Logged in as " + accountName);
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to the LoggedIn event.</span>
            		imp.LoggedIn += <span style="color: blue;">new</span> LoggedInEventHandler(OnLoggedIn);
            
            		<span style="color: green;">// Connect to the server. It's possible the server will automatically</span>
            		<span style="color: green;">// authenticate us in some cases. In other samples, we do not check</span>
            		<span style="color: green;">// if the auto-login occurred but real-world applications should check this.</span>
            		imp.Connect("imap4.somedomain.com");
            
            		<span style="color: blue;">if</span> (!imp.IsLoggedIn)
            		{
            			<span style="color: green;">// Authenticate the user via Login()</span>
            			accountName = "jdoe";
            			imp.Login(accountName, "secret");
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Dim</span> accountName <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "Preauthenticated user"
            
            	<span style="color: green;">' LoggedIn event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnLoggedIn(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LoggedInEventArgs)
            		Console.WriteLine("Logged in as " &amp; accountName)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to the LoggedIn event.</span>
            		<span style="color: blue;">AddHandler</span> imp.LoggedIn, <span style="color: blue;">AddressOf</span> OnLoggedIn
            
            		<span style="color: green;">' Connect to the server. It's possible the server will automatically</span>
            		<span style="color: green;">' authenticate us in some cases. In other samples, we do not check</span>
            		<span style="color: green;">' if the auto-login occurred but real-world applications should check this.</span>
            		imp.Connect("imap4.somedomain.com")
            
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> imp.IsLoggedIn <span style="color: blue;">Then</span>
            			<span style="color: green;">' Authenticate the user via Login()</span>
            			accountName = "jdoe"
            			imp.Login(accountName, "secret")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.EnvelopeDownloaded">
            <summary>
            Occurs when a FETCH response is received from the IMAP4 server and the method which receives
            mail messages or envelopes (such as <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>) is in progress.
            <seealso cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            </summary>
            <remarks>
            <para>
            In the IMAP4 protocol, all message related information is returned as a series of FETCH responses (one response per each message).
            Each FETCH response may consist of various elements, and the most common of them is ENVELOPE. When processing the server response,
            MailBee parses every FETCH response into an <see cref="T:MailBee.ImapMail.Envelope"/> object.
            </para>
            <para>
            MailBee methods which download messages or envelopes raise <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event is raised each time a FETCH response was parsed and corresponding <see cref="T:MailBee.ImapMail.Envelope"/>
            object created. Currently, the list of methods which raise <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> and <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> events is as follows:
            <list type="bullet">
            <item><description><see cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/></description></item>
            <item><description><see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/></description></item>
            <item><description><see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessages(System.String,System.Boolean)"/></description></item>
            <item><description><see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/></description></item>
            <item><description><see cref="M:MailBee.ImapMail.Imap.BeginDownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[],System.AsyncCallback,System.Object)"/></description></item>
            </list>
            </para>
            <para>
            Other methods never raise these events (even if deal with FETCH responses). For instance, <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/> method
            gets FETCH responses containing the size of each message for all messages in the folder. Although this method does receive FETCH
            responses, it does not raise <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> and <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> events.
            </para>
            <para>
            The developer can use <see cref="P:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs.DownloadedEnvelope"/> property to access the downloaded envelope.
            <see cref="P:MailBee.ImapMail.Envelope.MessagePreview"/> contains a reference to the <see cref="T:MailBee.Mime.MailMessage"/>
            object within the envelope.
            </para>
            <para><see cref="P:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs.DownloadedEnvelope"/> property is writable. For instance, the developer can set it to a null reference
            (<b>Nothing</b> in Visual Basic) to prevent this envelope from being added to the resulting collection. This can be used to filter
            incoming messages or to process messages directly in the event handler and avoid unnecessary memory overhead
            when the message is no longer needed.</para>
            <note>
            Sometimes, the mail server may send unilateral FETCH responses in addition to the requested ones. For instance,
            if the IMAP4 session lasts for a long period of time, and another client accesses the same folder simultaneously (for instance,
            downloads a message so it gets "\Seen" flag set), the server will also send unilateral FETCH response containing the updated flags
            of the amended message. Starting from MailBee.NET Objects v3.0, MailBee detects such unilateral responses and <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/>
            event is NOT raised for them (<see cref="E:MailBee.ImapMail.Imap.MessageStatus"/> event is raised instead). Also, MailBee takes unilateral responses into account
            for calculating the folder statistics (total number of messages, number of unseen messages, etc).
            </note>
            </remarks>
            <example>This console sample displays the total size (via <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/>) and the
            individual sizes (via <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>) of all messages in the folder.
            The logging into a file is enabled. The sample demonstrates <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> is raised
            by <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method only (despite the fact that both <see cref="M:MailBee.ImapMail.Imap.GetFolderSize"/>
            and <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> calls make the server to produce the same FETCH responses, the log file shows this).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// EnvelopeDownloaded event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnEnvelopeDownloaded(<span style="color: blue;">object</span> sender,
            		ImapEnvelopeDownloadedEventArgs e)
            	{
            		Console.WriteLine("Envelope (size and UID) of message #" +
            			e.MessageNumber + " downloaded");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Enable logging to demonstrate GetFolderSize() and</span>
            		<span style="color: green;">// DownloadEnvelopes(Imap.AllMessages, EnvelopeParts.Rfc822Size, 0)</span>
            		<span style="color: green;">// produce the same requests and responses.</span>
            		imp.Log.Filename = @"C:\Temp\log.txt";
            		imp.Log.Enabled = <span style="color: blue;">true</span>;
            		imp.Log.Clear();
            
            		<span style="color: green;">// Subscribe to the EnvelopeDownloaded event.</span>
            		imp.EnvelopeDownloaded +=
            			<span style="color: blue;">new</span> ImapEnvelopeDownloadedEventHandler(OnEnvelopeDownloaded);
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Get the total size of all messages in the folder, and display it.</span>
            		Console.WriteLine("The total size of all messages in Inbox is: " +
            			imp.GetFolderSize() + " bytes");
            
            		<span style="color: green;">// Get the size of each message in the folder...</span>
            		EnvelopeCollection envs = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">false</span>,
            			EnvelopeParts.Rfc822Size, 0);
            
            		<span style="color: green;">// ... and display it.</span>
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            		{
            			Console.WriteLine("Size of message #" + env.MessageNumber + " is " +
            				env.Size + " bytes");
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' EnvelopeDownloaded event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnEnvelopeDownloaded(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapEnvelopeDownloadedEventArgs)
            		Console.WriteLine("Envelope (size and UID) of message #" &amp; e.MessageNumber &amp; " downloaded")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Enable logging to demonstrate GetFolderSize() and</span>
            		<span style="color: green;">' DownloadEnvelopes(Imap.AllMessages, EnvelopeParts.Rfc822Size, 0)</span>
            		<span style="color: green;">' produce the same requests and responses.</span>
            		imp.Log.Filename = "C:\Temp\log.txt"
            		imp.Log.Enabled = <span style="color: blue;">True</span>
            		imp.Log.Clear()
            
            		<span style="color: green;">' Subscribe to the EnvelopeDownloaded event.</span>
            		<span style="color: blue;">AddHandler</span> imp.EnvelopeDownloaded, <span style="color: blue;">AddressOf</span> OnEnvelopeDownloaded
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Get the total size of all messages in the folder, and display it.</span>
            		Console.WriteLine("The total size of all messages in Inbox is: " &amp; _
            			 imp.GetFolderSize() &amp; " bytes")
            
            		<span style="color: green;">' Get the size of each message in the folder...</span>
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(Imap.AllMessages, _
            			<span style="color: blue;">False</span>, EnvelopeParts.Rfc822Size, 0)
            
            		<span style="color: green;">' ... and display it.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            			Console.WriteLine("Size of message #" &amp; env.MessageNumber &amp; _
            				 " is " &amp; env.Size &amp; " bytes")
            		<span style="color: blue;">Next</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived">
            <summary>
            Occurs on progress of downloading FETCH responses (containing message source data, envelopes, and other message-related information) from the server.
            <seealso cref="E:MailBee.ImapMail.Imap.DataReceived"/>
            <seealso cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/>
            </summary>
            <remarks>
            <para>This event is a special case of <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> event. While
            <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> event occurs when any data is received,
            <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> event indicates FETCH response containing envelope or message data is
            being received (see <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event for more information regarding FETCH responses).
            In other words, <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> event is a filtered version
            of more general <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> event.</para>
            <para>When both <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> and <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/>
            events are used, <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> is raised first.</para>
            </remarks>
            <example>This sample completely downloads the last message in the inbox.
            Both <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> and
            <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> events are handled, and the corresponding
            messages are printed into console when each of these events is raised. This sample
            demonstrates that <see cref="E:MailBee.ImapMail.Imap.DataReceived"/> is raised more often than
            <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/>.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// DataReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnDataReceived(<span style="color: blue;">object</span> sender, DataTransferEventArgs e)
            	{
            		Console.WriteLine(e.Data.Length + " bytes received");
            	}
            
            	<span style="color: green;">// EnvelopeDataChunkReceived event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnEnvelopeDataChunkReceived(<span style="color: blue;">object</span> sender,
            		ImapEnvelopeDataChunkReceivedEventArgs e)
            	{
            		Console.WriteLine(e.BytesJustReceived +
            			" bytes of the FETCH response series received");
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to events.</span>
            		imp.DataReceived += <span style="color: blue;">new</span> DataTransferEventHandler(OnDataReceived);
            		imp.EnvelopeDataChunkReceived +=
            			<span style="color: blue;">new</span> ImapEnvelopeDataChunkReceivedEventHandler(OnEnvelopeDataChunkReceived);
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.company.com");
            		imp.Login("jdoe@company.com", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Completely download the last message in the inbox.</span>
            		MailMessage msg = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">false</span>);
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' DataReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnDataReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> DataTransferEventArgs)
            		Console.WriteLine(e.Data.Length &amp; " bytes received")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' EnvelopeDataChunkReceived event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnEnvelopeDataChunkReceived(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapEnvelopeDataChunkReceivedEventArgs)
            		Console.WriteLine(e.BytesJustReceived &amp; " bytes of the FETCH response series received")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to events.</span>
            		<span style="color: blue;">AddHandler</span> imp.DataReceived, <span style="color: blue;">AddressOf</span> OnDataReceived
            		<span style="color: blue;">AddHandler</span> imp.EnvelopeDataChunkReceived, <span style="color: blue;">AddressOf</span> OnEnvelopeDataChunkReceived
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Completely download the last message in the inbox.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailBee.Mime.MailMessage = imp.DownloadEntireMessage(imp.MessageCount, <span style="color: blue;">False</span>)
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.ServerStatus">
            <summary>
            Occurs when the IMAP4 server reports mailbox or server status information to the client.
            <seealso cref="E:MailBee.ImapMail.Imap.MessageStatus"/>
            </summary>
            <remarks>
            <para>
            The server sends the status response to the client when a command is completed
            or there is a state change of the server or the currently folder, etc.
            </para>
            <para>MailBee raises this event when it receives any of the following responses from the server:
            OK, NO, BAD, PREAUTH, BYE, or FLAGS.</para>
            <para>
            The real-world application should subscribe to this event and at least check <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.IsAlert"/>
            property value. If it's <b>true</b>, it means the server sent [ALERT] response along with the human-readable message, and
            the application must present the supplied <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable"/>
            text to the user. For instance, the server may tell clients it's about to shutdown in a short while.
            </para>
            </remarks>
            <example>This sample connects to the server, logs in the account, selects inbox, and receives envelopes
            of all messages. If the server sends [ALERT] response during this time, it's displayed to the user.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ServerStatus event handler.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnServerStatus(<span style="color: blue;">object</span> sender,
            		ImapServerStatusEventArgs e)
            	{
            		<span style="color: blue;">if</span> (e.IsAlert)
            		{
            			Console.WriteLine("The server warns: " + e.HumanReadable);
            		}
            	}
            
            	<span style="color: green;">// The actual code.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Subscribe to ServerStatus event.</span>
            		imp.ServerStatus +=
            			<span style="color: blue;">new</span> ImapServerStatusEventHandler(OnServerStatus);
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Download envelopes of all message in the inbox.</span>
            		EnvelopeCollection envs = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">false</span>);
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' ServerStatus event handler.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnServerStatus(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ImapServerStatusEventArgs)
            		<span style="color: blue;">If</span> e.IsAlert <span style="color: blue;">Then</span>
            			Console.WriteLine("The server warns: " &amp; e.HumanReadable)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code.</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Subscribe to ServerStatus event.</span>
            		<span style="color: blue;">AddHandler</span> imp.ServerStatus, <span style="color: blue;">AddressOf</span> OnServerStatus
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("mail.company.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Download envelopes of all message in the inbox.</span>
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">False</span>)
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.MessageStatus">
            <summary>
            Occurs when the IMAP4 server informs the client of any changes to mail messages in the currently selected folder.
            <seealso cref="E:MailBee.ImapMail.Imap.ServerStatus"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Idle"/>
            </summary>
            <remarks>
            MailBee raises this event when any of the following is received from the server:
            <list type="bullet">
            <item><description>Unilateral FETCH response containing flag updates to a message (for instance, certain message was read or marked answered by another mail agent)</description></item>
            <item><description>EXISTS response informing the client of the new number of all messages in the folder</description></item>
            <item><description>RECENT response informing the client of the new number of recent messages in the folder</description></item>
            <item><description>EXPUNGE response containing message number of the mail message which had been permanently deleted from the mailbox</description></item>
            </list>
            This event is often used in conjunction with <see cref="E:MailBee.ImapMail.Imap.ServerStatus"/> event during idling (see <see cref="M:MailBee.ImapMail.Imap.Idle"/>) for keeping the application informed of any changes in the monitored folder.
            </remarks>
            <example>The example is available in <see cref="M:MailBee.ImapMail.Imap.Idle"/> topic.</example>
        </member>
        <member name="E:MailBee.ImapMail.Imap.Idling">
            <summary>
            Ticks every 10 milliseconds while in idle state.
            <seealso cref="M:MailBee.ImapMail.Imap.Idle"/>
            </summary>
            <remarks>
            This event is useful for performing background activities (such as UI updates)
            when the execution of the program is blocked within <see cref="M:MailBee.ImapMail.Imap.Idle"/> method call.
            </remarks>
            <example>The example is available in <see cref="M:MailBee.ImapMail.Imap.Idle"/> topic.</example>
        </member>
        <member name="T:MailBee.Html.ElementCollection">
            <summary>
            Provides properties and methods for managing and examining the collection of <see cref="T:MailBee.Html.Element"/> objects.
            </summary>
        </member>
        <member name="M:MailBee.Html.ElementCollection.Add(MailBee.Html.Element)">
            <summary>
            Adds the specified <see cref="T:MailBee.Html.Element"/> object to the collection.
            </summary>
            <param name="elem">The <see cref="T:MailBee.Html.Element"/> object to be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="elem"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.ElementCollection.Add(MailBee.Html.Element,System.Int32)">
            <summary>
            Adds the specified <see cref="T:MailBee.Html.Element"/> object to the collection at the specified index.
            </summary>
            <param name="elem">The <see cref="T:MailBee.Html.Element"/> object to be added to the collection.</param>
            <param name="index">The zero-based index where to insert the specified <see cref="T:MailBee.Html.Element"/> object in the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="elem"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not valid.</exception>
        </member>
        <member name="M:MailBee.Html.ElementCollection.AddRange(MailBee.Html.ElementCollection)">
            <overloads> Adds multiple elements to the collection.</overloads>
            <summary>
            Adds all elements of another collection to the current collection.
            </summary>
            <param name="elems">The elements from <see cref="T:MailBee.Html.ElementCollection"/> object to be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="elems"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.ElementCollection.AddRange(MailBee.Html.ElementCollection,System.Int32,System.Int32,System.Int32)">
            <overloads> Adds multiple elements to the collection.</overloads>
            <summary>
            Adds elements from another <see cref="T:MailBee.Html.ElementCollection"/> object within the specified range.
            </summary>
            <param name="elems">The source <see cref="T:MailBee.Html.ElementCollection"/> to add elements from.</param>
            <param name="srcIndex">The zero-based index in <paramref name="elems"/> collection from which to
            copy the elements.</param>
            <param name="count">Number of elements to be added from <paramref name="elems"/> collection.</param>
            <param name="destIndex">The zero-based index in the current collection where to insert the first element
            from the copied range.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="elems"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not valid.</exception>
        </member>
        <member name="M:MailBee.Html.ElementCollection.Remove(MailBee.Html.Element)">
            <summary>
            Removes the specified <see cref="T:MailBee.Html.Element"/> object from the collection.
            <seealso cref="M:MailBee.Html.ElementCollection.RemoveAt(System.Int32)"/>
            <seealso cref="M:MailBee.Html.ElementCollection.RemoveByName(System.String)"/>
            </summary>
            <param name="elem">The <see cref="T:MailBee.Html.Element"/> object to be removed from the collection.</param>
            <returns><b>true</b> if the specified <see cref="T:MailBee.Html.Element"/> was found and removed; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="elem"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Html.ElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes <see cref="T:MailBee.Html.Element"/> object having the the specified zero-based index from the collection.
            <seealso cref="M:MailBee.Html.ElementCollection.Remove(MailBee.Html.Element)"/>
            <seealso cref="M:MailBee.Html.ElementCollection.RemoveByName(System.String)"/>
            </summary>
            <param name="index">The zero-based index of <see cref="T:MailBee.Html.Element"/> to be removed from the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="M:MailBee.Html.ElementCollection.RemoveByName(System.String)">
            <summary>
            Removes all elements having the specified tag name from the collection.
            <seealso cref="P:MailBee.Html.Element.TagName"/>
            </summary>
            <param name="tagName">The HTML tag name (case-insensitive) or
            a null reference (<b>Nothing</b> in Visual Basic) if plain-text elements should be removed.</param>
        </member>
        <member name="M:MailBee.Html.ElementCollection.RemoveAll">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:MailBee.Html.ElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Html.Element"/> object at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index number of the element in the collection.</param>
            <value>
            An <see cref="T:MailBee.Html.Element"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="T:MailBee.BounceMail.DsnAction">
            <summary>
            Defines actions which have been performed by the Reporting-MTA
            as a result of its attempt to deliver the message to the recipient.
            </summary>
            <remarks>
            Reporting MTA is the one which is reporting the results
            of delivery attempts described in this DSN. See <see cref="P:MailBee.BounceMail.DsnAttachment.ReportingMtaType"/> topic for details.
            </remarks>
        </member>
        <member name="F:MailBee.BounceMail.DsnAction.Failed">
            <summary>
            The message could not be delivered to the recipient.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DsnAction.Delayed">
            <summary>
            The Reporting MTA has so far been unable to deliver or relay the message,
            but it will continue attempting to do that.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DsnAction.Delivered">
            <summary>
            The message was successfully delivered to the recipient.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DsnAction.Relayed">
            <summary>
            The message has been relayed or gatewayed.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DsnAction.Expanded">
            <summary>
            The recipient list has been expanded.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DsnAction.Unknown">
            <summary>
            An unknown DSN action has occured.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.DsnRecipient">
            <summary>
            Contains the delivery status and other details for a single recipient
            listed in the DSN attachment.
            <seealso cref="T:MailBee.BounceMail.RecipientStatus"/>
            <seealso cref="T:MailBee.BounceMail.DsnAttachment"/>
            </summary>
            <remarks>
            <para>In most cases, it's easier to use <see cref="T:MailBee.BounceMail.RecipientStatus"/> object instead of <see cref="T:MailBee.BounceMail.DsnRecipient"/> because
            <see cref="T:MailBee.BounceMail.RecipientStatus"/> is more general. Use <see cref="T:MailBee.BounceMail.DsnRecipient"/> object only if you need to
            examine particular fields of the DSN attachment. For general tasks (find the e-mail address for which your e-mail was
            not delivered), use <see cref="T:MailBee.BounceMail.RecipientStatus"/> object.</para>
            <para>To get <see cref="T:MailBee.BounceMail.DsnRecipient"/>, use <see cref="P:MailBee.BounceMail.RecipientStatus.DsnInfo"/> property.
            Or, if you have <see cref="T:MailBee.BounceMail.DsnAttachment"/> object, use <see cref="P:MailBee.BounceMail.DsnAttachment.Recipients"/> property
            to get the collection of <see cref="T:MailBee.BounceMail.DsnRecipient"/>
            objects representing all recipients listed in the DSN attachment.</para>
            </remarks>
            <example>
            The example is available in <see cref="P:MailBee.BounceMail.DsnRecipient.Items"/> topic.
            </example>
        </member>
        <member name="M:MailBee.BounceMail.DsnRecipient.ToString">
            <summary>
            Returns all DSN fields as a string.
            </summary>
            <value>
            A string containing the DSN recipient info as it appears in the DSN source.
            </value>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.IsLinked">
            <summary>
            Indicates if the DSN is linked to the given recipient e-mail address.
            </summary>
            <value>
            <b>true</b> if DSN is linked to the given recipient e-mail address; otherwise, <b>false</b>.
            </value>
            <remarks>
            This flag can be used to check mapping of the DSN to <see cref="T:MailBee.BounceMail.RecipientStatus"/> object.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.Items">
            <summary>
            Gets a <see cref="T:System.Collections.Specialized.StringDictionary"/> collection of the DSN fields.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.StringDictionary"/> object with all the fields in the DSN for the given recipient e-mail address.
            </value>
            <example>
            This code sample scans a folder of .EML files and shows their DSN data in different ways.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.BounceMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the templates database from file(s).</span>
            		DeliveryStatusParser parser = <span style="color: blue;">new</span> DeliveryStatusParser(@"C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">true</span>);
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\Temp\IncomingMail", "*.eml");
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Process every message in the folder.</span>
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			Result result = parser.Process(msg);
            
            			Console.WriteLine("\r\nProcessing of message with filename: " + file);
            
            			<span style="color: blue;">if</span> (result == <span style="color: blue;">null</span> || result.DsnStructure == <span style="color: blue;">null</span>)
            			{
            				Console.WriteLine("------------------------------------------------------");
            				Console.WriteLine("This message doesn't have DSN MIME part.");
            				Console.WriteLine("------------------------------------------------------");
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("------------------ DSN part as text ------------------");
            				Console.WriteLine(result.DsnStructure.ToString());
            				Console.WriteLine("------------- DSN header as StringDictionary ---------");
            				<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> key <span style="color: blue;">in</span> result.DsnStructure.Items.Keys)
            				{
            					Console.WriteLine("DSN item: {0} = {1}", key, result.DsnStructure.Items[key]);
            				}
            				Console.WriteLine("------------------------------------------------------");
            
            				<span style="color: blue;">foreach</span> (RecipientStatus res <span style="color: blue;">in</span> result.Recipients)
            				{
            					<span style="color: blue;">if</span> (res.DsnInfo != <span style="color: blue;">null</span>)
            					{
            						Console.WriteLine("DSN subpart for: {0} e-mail", res.EmailAddress);
            						Console.WriteLine("---------------- DSN subpart as text -----------------");
            						Console.WriteLine(res.DsnInfo.ToString());
            						Console.WriteLine("------------- DSN header as StringDictionary ---------");
            						<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> key <span style="color: blue;">in</span> res.DsnInfo.Items.Keys)
            						{
            							Console.WriteLine("DSN subpart item: {0} = {1}", key, res.DsnInfo.Items[key]);
            						}
            						Console.WriteLine("------------------------------------------------------");
            					}
            				}
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> Microsoft.VisualBasic
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.BounceMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Load the templates database from file(s).</span>
            		<span style="color: blue;">Dim</span> parser <span style="color: blue;">As</span> DeliveryStatusParser = <span style="color: blue;">New</span> DeliveryStatusParser("C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">True</span>)
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\Temp\IncomingMail", "*.eml")
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Process every message in the folder.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			<span style="color: blue;">Dim</span> result <span style="color: blue;">As</span> Result = parser.Process(msg)
            
            			Console.WriteLine(ControlChars.CrLf &amp; "Processing of message with filename: " &amp; file)
            
            			<span style="color: blue;">If</span> result <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Or</span> result.DsnStructure <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				Console.WriteLine("------------------------------------------------------")
            				Console.WriteLine("This message doesn't have DSN MIME part.")
            				Console.WriteLine("------------------------------------------------------")
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("------------------ DSN part as text ------------------")
            				Console.WriteLine(result.DsnStructure.ToString())
            				Console.WriteLine("------------- DSN header as StringDictionary ---------")
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> key <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> result.DsnStructure.Items.Keys
            					Console.WriteLine("Dsn item: {0} = {1}", key, result.DsnStructure.Items(key))
            				<span style="color: blue;">Next</span>
            				Console.WriteLine("------------------------------------------------------")
            
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> res <span style="color: blue;">As</span> RecipientStatus <span style="color: blue;">In</span> result.Recipients
            					<span style="color: blue;">If</span> <span style="color: blue;">Not</span> res.DsnInfo <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            						Console.WriteLine("DSN subpart for: {0} e-mail", res.EmailAddress)
            						Console.WriteLine("---------------- DSN subpart as text -----------------")
            						Console.WriteLine(res.DsnInfo.ToString())
            						Console.WriteLine("------------- DSN header as StringDictionary ---------")
            						<span style="color: blue;">For</span> <span style="color: blue;">Each</span> key <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> res.DsnInfo.Items.Keys
            							Console.WriteLine("Dsn subpart item: {0} = {1}", key, res.DsnInfo.Items(key))
            						<span style="color: blue;">Next</span>
            						Console.WriteLine("------------------------------------------------------")
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">Next</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.OriginalRecipientType">
            <summary>
            Gets the type of the original recipient e-mail address as string.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.OriginalRecipientAddress"/>
            </summary>
            <value>
            A string value with the type of the original recipient e-mail address,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field indicates the original recipient address type as specified
            by the sender of the original message (for which this DSN was issued).
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.OriginalRecipientAddress">
            <summary>
            Gets the e-mail address of the original recipient.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.OriginalRecipientType"/>
            </summary>
            <value>
            A string value with the e-mail address of the original recipient,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field indicates the original recipient address as specified by the sender
            of the original message (for which this DSN was issued).
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.FinalRecipientType">
            <summary>
            Gets the type of the final recipient e-mail address as string.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.FinalRecipientAddress"/>
            </summary>
            <value>
            A string value with the type of the final recipient e-mail address,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This address type may differ from the address type originally provided by the
            sender, because it may have been transformed during forwarding or gatewaying.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.FinalRecipientAddress">
            <summary>
            Gets the e-mail address of the final recipient.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.FinalRecipientType"/>
            </summary>
            <value>
            A string value with the e-mail address of the final recipient,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field may differ from the e-mail address originally provided by the
            sender, because it may have been transformed during forwarding or gatewaying.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.Action">
            <summary>
            Gets the DSN action type for the e-mail address.
            </summary>
            <value>
            The action performed by the Reporting-MTA as a result of its attempt to deliver the message to this
            recipient address.
            </value>
            <remarks>
            This field MUST be present for each recipient named in the DSN.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.Status">
            <summary>
            Gets the string description of the status and the dot-numeric status code.
            </summary>
            <value>
            A string value with the description of the status and the dot-numeric status code.
            </value>
            <remarks>
            <para>
            The per-recipient <see cref="P:MailBee.BounceMail.DsnRecipient.Status"/> field contains a transport-independent 
            status code which indicates the delivery status of the message to
            that recipient.  This field MUST be present for each delivery attempt
            which is described by a DSN.
            </para>
            <para>
            Status codes thus consist of three numerical fields separated by dot (".").
            The first sub-field indicates whether the delivery attempt was successful
            (2 = success, 4 = persistent temporary failure, 5 = permanent failure).
            The second sub-field indicates the probable source of any delivery anomalies,
            and the third sub-field denotes a precise error condition, if known.
            </para>
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.RemoteMtaType">
            <summary>
            Gets the remote MTA type.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.RemoteMtaName"/>
            </summary>
            <value>
            A string value with the remote MTA type,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            The value associated with this field is a printable
            ASCII representation of the type of the "remote" MTA that reported
            delivery status to the "reporting" MTA.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.RemoteMtaName">
            <summary>
            Gets the remote MTA name.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.RemoteMtaType"/>
            </summary>
            <value>
            A string value with printable ASCII representation of the Remote-MTA name,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            The value associated with this field is a printable
            ASCII representation of the name of the "remote" MTA that reported
            delivery status to the "reporting" MTA.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.DiagnosticCodeType">
            <summary>
            Gets the diagnostic code type.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.DiagnosticCode"/>
            </summary>
            <value>
            A string value with the diagnostic code type,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            When <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> is <see cref="F:MailBee.BounceMail.DsnAction.Failed"/> or
            <see cref="F:MailBee.BounceMail.DsnAction.Delayed"/> for the given recipient, this field contains
            the actual diagnostic code type issued by the mail transport.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.DiagnosticCode">
            <summary>
            Gets the diagnostic code.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.DiagnosticCodeType"/>
            </summary>
            <value>
            A string value with the diagnostic code,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            When <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> is <see cref="F:MailBee.BounceMail.DsnAction.Failed"/> or
            <see cref="F:MailBee.BounceMail.DsnAction.Delayed"/> for the given recipient, this field contains
            the actual diagnostic code issued by the mail transport. Since such codes
            vary from one mail transport to another, the diagnostic-type subfield is
            needed to specify which type of diagnostic code is represented.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.LastAttemptDateAsString">
            <summary>
            Gets the string representation of the last attempt date of sending.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.LastAttemptDate"/>
            </summary>
            <value>
            A string value with the datetime of the last attempt of sending (taken from "Last-Attempt-Date" DSN field),
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field gives the date and time of the last attempt to relay, gateway,
            or deliver the message (whether successful or unsuccessful) by the Reporting MTA.
            This field can be an empty string.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.LastAttemptDate">
            <summary>
            Gets the last attempt date of sending.
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.LastAttemptDateAsString"/>
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value with the datetime of the last attempt of sending (taken from "Last-Attempt-Date" DSN field),
            or <see cref="F:System.DateTime.MinValue"/> if no such field contained in the DSN.
            </value>
            <remarks>
            This field gives the date and time of the last attempt to relay, gateway,
            or deliver the message (whether successful or unsuccessful) by the Reporting MTA.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.WillRetryUntilAsString">
            <summary>
            Gets the string representation of "will retry until date".
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.WillRetryUntil"/>
            </summary>
            <value>
            A string value taken from "Will-Retry-Until" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            For DSNs of type "delayed", the <see cref="P:MailBee.BounceMail.DsnRecipient.WillRetryUntilAsString"/> field gives the date
            after which the Reporting MTA expects to abandon all attempts to deliver the message to
            that recipient. The <see cref="P:MailBee.BounceMail.DsnRecipient.WillRetryUntilAsString"/> field is optional for "delay"
            DSNs, and MUST NOT appear in other DSNs.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnRecipient.WillRetryUntil">
            <summary>
            Gets the date of "will retry until date".
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.WillRetryUntilAsString"/>
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> taken from "Will-Retry-Until" DSN field,
            or <see cref="F:System.DateTime.MinValue"/> if no such field contained in the DSN.
            </value>
            <remarks>
            For DSNs of type "delayed", the <see cref="P:MailBee.BounceMail.DsnRecipient.WillRetryUntil"/> field gives the date
            after which the Reporting MTA expects to abandon all attempts to deliver the message to
            that recipient. The <see cref="P:MailBee.BounceMail.DsnRecipient.WillRetryUntil"/> field is optional for "delay" DSNs,
            and MUST NOT appear in other DSNs.
            </remarks>
        </member>
        <member name="T:MailBee.ConnectedEventHandler">
            <summary>
            Represents the method that will handle <b>Connected</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.Connected">Smtp.Connected</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.Connected">Pop3.Connected</see> or
            <see cref="E:MailBee.ImapMail.Imap.Connected">Imap.Connected</see>).
            </summary>
        </member>
        <member name="T:MailBee.ConnectedEventArgs">
            <summary>
            Contains the event data for <b>Connected</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.Connected">Smtp.Connected</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.Connected">Pop3.Connected</see> or
            <see cref="E:MailBee.ImapMail.Imap.Connected">Imap.Connected</see>).
            </summary>
        </member>
        <member name="P:MailBee.ConnectedEventArgs.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the remote host to which
            the connection was established.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection with the remote host.</value>
        </member>
        <member name="P:MailBee.ConnectedEventArgs.RemoteHostName">
            <summary>
            Gets the name of the remote host to which the connection was established.
            </summary>
            <value>A string indicating the name of the remote host.</value>
        </member>
        <member name="P:MailBee.ConnectedEventArgs.Protocol">
            <summary>
            Gets application-level protocol of the established connection.
            </summary>
            <value>The protocol of the established connection, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection will be used for.</remarks>
        </member>
        <member name="T:MailBee.DisconnectedEventHandler">
            <summary>
            Represents the method that will handle <b>Disconnected</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.Disconnected">Smtp.Disconnected</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.Disconnected">Pop3.Disconnected</see> or
            <see cref="E:MailBee.ImapMail.Imap.Disconnected">Imap.Disconnected</see>).
            </summary>
        </member>
        <member name="T:MailBee.DisconnectedEventArgs">
            <summary>
            Contains the event data for <b>Disconnected</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.Disconnected">Smtp.Disconnected</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.Disconnected">Pop3.Disconnected</see> or
            <see cref="E:MailBee.ImapMail.Imap.Disconnected">Imap.Disconnected</see>).
            </summary>
        </member>
        <member name="P:MailBee.DisconnectedEventArgs.IsNormalShutdown">
            <summary>
            Indicates whether this event occurred as a result of calling <b>Disconnect</b> method
            so that the proper logout command was issued to the server, or the connection was terminated.
            </summary>
            <value><b>true</b> if logout command (such as <i>QUIT</i> for POP3 and SMTP protocols or <i>LOGOUT</i> for IMAP4)
            has been successfully issued prior to actual disconnecting from the server;
            otherwise, <b>false</b>.</value>
            <remarks>You can use this property value to learn whether the connection was
            closed properly or not. This is especially important in the case of
            <see cref="E:MailBee.Pop3Mail.Pop3.Disconnected">Pop3.Disconnected</see> event, since
            the POP3 server will not actually delete messages flagged for deletion during the POP3 session
            if the connection was terminated rather than properly closed.
            </remarks>
        </member>
        <member name="P:MailBee.DisconnectedEventArgs.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the remote host to which
            the connection was closed.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection which was just closed.</value>
        </member>
        <member name="P:MailBee.DisconnectedEventArgs.RemoteHostName">
            <summary>
            Gets the name of the remote host to which the connection was closed.
            </summary>
            <value>A string indicating the name of the remote host.</value>
        </member>
        <member name="P:MailBee.DisconnectedEventArgs.Protocol">
            <summary>
            Gets application-level protocol of the closed connection.
            </summary>
            <value>The protocol which has been used with the connection until it was closed, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection was used for.</remarks>
        </member>
        <member name="T:MailBee.TlsStartedEventHandler">
            <summary>
            Represents the method that will handle <b>TlsStarted</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.TlsStarted">Smtp.TlsStarted</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.TlsStarted">Pop3.TlsStarted</see> or
            <see cref="E:MailBee.ImapMail.Imap.TlsStarted">Imap.TlsStarted</see>).
            </summary>
        </member>
        <member name="T:MailBee.TlsStartedEventArgs">
            <summary>
            Contains the event data for <b>TlsStarted</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.TlsStarted">Smtp.TlsStarted</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.TlsStarted">Pop3.TlsStarted</see> or
            <see cref="E:MailBee.ImapMail.Imap.TlsStarted">Imap.TlsStarted</see>).
            </summary>
        </member>
        <member name="P:MailBee.TlsStartedEventArgs.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the server host.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection with the server.</value>
        </member>
        <member name="P:MailBee.TlsStartedEventArgs.RemoteHostName">
            <summary>
            Gets the host name of the server.
            </summary>
            <value>A string indicating the host name of the server.</value>
        </member>
        <member name="P:MailBee.TlsStartedEventArgs.Protocol">
            <summary>
            Gets application-level protocol of the current connection.
            </summary>
            <value>The protocol of the current connection, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection is used for.</remarks>
        </member>
        <member name="T:MailBee.LoggedInEventHandler">
            <summary>
            Represents the method that will handle <b>LoggedIn</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.LoggedIn">Smtp.LoggedIn</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.LoggedIn">Pop3.LoggedIn</see> or
            <see cref="E:MailBee.ImapMail.Imap.LoggedIn">Imap.LoggedIn</see>).
            </summary>
        </member>
        <member name="T:MailBee.LoggedInEventArgs">
            <summary>
            Contains the event data for <b>LoggedIn</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.LoggedIn">Smtp.LoggedIn</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.LoggedIn">Pop3.LoggedIn</see> or
            <see cref="E:MailBee.ImapMail.Imap.LoggedIn">Imap.LoggedIn</see>).
            </summary>
        </member>
        <member name="P:MailBee.LoggedInEventArgs.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the server host.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection with the server.</value>
        </member>
        <member name="P:MailBee.LoggedInEventArgs.RemoteHostName">
            <summary>
            Gets the host name of the server.
            </summary>
            <value>A string indicating the host name of the server.</value>
        </member>
        <member name="P:MailBee.LoggedInEventArgs.Protocol">
            <summary>
            Gets application-level protocol of the current connection.
            </summary>
            <value>The protocol of the current connection, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection is used for.</remarks>
        </member>
        <member name="T:MailBee.Html.ElementReadOnlyCollection">
            <summary>
            Provides properties and methods for examining the collection of <see cref="T:MailBee.Html.Element"/> objects.
            </summary>
        </member>
        <member name="P:MailBee.Html.ElementReadOnlyCollection.Item(System.Int32)">
            <summary>
            Gets <see cref="T:MailBee.Html.Element"/> object at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index number of the element in the collection.</param>
            <value>
            An <see cref="T:MailBee.Html.Element"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.
            </exception>
        </member>
        <member name="T:MailBee.BounceMail.DeliveryStatusParser">
            <summary>
            Provides a method for examining e-mail messages for delivery or non-delivery notifications.
            </summary>
            <remarks>
            <para>This is the main class in the namespace. It provides facilities for extracting DSN information from e-mails.</para>
            <para>The delivery status notification (DSN) is a reply from the recipient's mail software to the original message sender.
            This reply contains the mail delivery status of the original message: delivered successfully or bounced (failed,
            temporary undelivered, virus found or message treated as SPAM, etc).</para>
            <para>Typical usage of this class if for mass mailing: you can easily detect e-mail addresses
            which could not receive e-mails and remove such addresses from your database to prevent
            further sending to these addresses. You can also track delivery (or non-deivery) of important e-mails.</para>
            <para>To test whether the e-mail message is a delivery notification and examine its details, use
            <see cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/> method.</para>
            <para>If you send e-mails with <see cref="T:MailBee.SmtpMail.Smtp"/> component and then process bounces with
            <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/>, you can tune how destination mail servers should return bounces back to you
            by setting properties of <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> object prior to sending an e-mail.
            For instance, you can set <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID"/> for outgoing messages
            and then look for this ID in bounced messages using <see cref="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID"/> property.</para>
            <note>There is no single standard of DSN messages. Instead, there are many hundreds of them,
            and new ones appear all the time. MailBee stores DSN formats as XML database where each entry
            is a template of a DSN message. By default, DSN templates database is installed in <c>BounceDatabase</c> folder
            of MailBee.NET Objects installation (for instance, <c>C:\Program Files\MailBee.NET Objects\BounceDatabase</c>). If you encounter a format which
            is not supported by the current database, contact us so that we would be able to update the database.</note>
            </remarks>
            <example>
            <para>This sample tests all e-mails in the folder whether they are bounced messages
            and extracts all failed e-mail addresses contained in each bounced message.</para>
            <para>It's assumed the e-mail samples are .EML files located in C:\Temp\IncomingMail folder.
            The DSN formats database resides in C:\Temp\BounceDatabase\all.xml file.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.BounceMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the templates database from file(s).</span>
            		DeliveryStatusParser parser = <span style="color: blue;">new</span> DeliveryStatusParser(@"C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">true</span>);
            
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\Temp\IncomingMail", "*.eml");
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Check if e-mails are DSNs.</span>
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			Result result = parser.Process(msg);
            
            			Console.WriteLine("\r\nProcessed e-mail: " + file);
            
            			<span style="color: blue;">if</span> (result == <span style="color: blue;">null</span>)
            			{
            				Console.WriteLine("------------------------------------------------------");
            				Console.WriteLine("This message doesn't have DSN message part.");
            				Console.WriteLine("------------------------------------------------------");
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: green;">// Get header params from the original e-mail message (for which the DSN message was sent).</span>
            				<span style="color: blue;">if</span> (result.OriginalMessage != <span style="color: blue;">null</span>)
            				{
            					Console.WriteLine("-------------- Original message headers ------------");
            					Console.WriteLine("\tTo:	 \t" + result.OriginalMessage.To.AsString);
            					Console.WriteLine("\tFrom:   \t" + result.OriginalMessage.From.AsString);
            					Console.WriteLine("\tSubject:\t" + result.OriginalMessage.Subject);
            					Console.WriteLine("----------------------------------------------------");
            				}
            
            				<span style="color: green;">// Get the details for each e-mail address listed in the DSN.</span>
            				<span style="color: blue;">foreach</span> (RecipientStatus res <span style="color: blue;">in</span> result.Recipients)
            				{
            					Console.WriteLine("E-mail address: \t" + res.EmailAddress);
            					Console.WriteLine("Status:         \tis " + (res.IsBounced ? "bounced" : "delivered successfully"));
            
            					Console.WriteLine("Common reason:  \t" + res.Common.ToString());
            					Console.WriteLine("Detailed reason:\t" + res.Detailed.ToString());
            					Console.WriteLine("Description:    \t" + res.Description);
            				}
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> Microsoft.VisualBasic
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.BounceMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Load the templates database from file(s).</span>
            		<span style="color: blue;">Dim</span> parser <span style="color: blue;">As</span> DeliveryStatusParser = <span style="color: blue;">New</span> DeliveryStatusParser("C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">True</span>)
            
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\Temp\IncomingMail", "*.eml")
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Check if e-mails are DSNs.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			<span style="color: blue;">Dim</span> result <span style="color: blue;">As</span> Result = parser.Process(msg)
            
            			Console.WriteLine(ControlChars.CrLf &amp; "Processed e-mail: " &amp; file)
            
            			<span style="color: blue;">If</span> result <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				Console.WriteLine("------------------------------------------------------")
            				Console.WriteLine("This message doesn't have DSN message part.")
            				Console.WriteLine("------------------------------------------------------")
            			<span style="color: blue;">Else</span>
            				<span style="color: green;">' Get header params from the original e-mail message (for which the DSN message was sent).</span>
            				<span style="color: blue;">If</span> <span style="color: blue;">Not</span> result.OriginalMessage <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            					Console.WriteLine("-------------- Original message headers ------------")
            					Console.WriteLine(ControlChars.Tab &amp; "To:     " &amp; ControlChars.Tab &amp; result.OriginalMessage.To.AsString)
            					Console.WriteLine(ControlChars.Tab &amp; "From:   " &amp; ControlChars.Tab &amp; result.OriginalMessage.From.AsString)
            					Console.WriteLine(ControlChars.Tab &amp; "Subject:" &amp; ControlChars.Tab &amp; result.OriginalMessage.Subject)
            					Console.WriteLine("----------------------------------------------------")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: green;">' Get the details for each e-mail address listed in the DSN.</span>
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> res <span style="color: blue;">As</span> RecipientStatus <span style="color: blue;">In</span> result.Recipients
            					Console.WriteLine("E-mail address: " &amp; ControlChars.Tab &amp; res.EmailAddress)
            					Console.Write("Status:		 " &amp; ControlChars.Tab &amp; "is ")
            					<span style="color: blue;">If</span> res.IsBounced <span style="color: blue;">Then</span> Console.WriteLine("bounced") <span style="color: blue;">Else</span> Console.WriteLine("delivered successfully")
            
            					Console.WriteLine("Common reason:  " &amp; ControlChars.Tab &amp; res.Common.ToString())
            					Console.WriteLine("Detailed reason:" &amp; ControlChars.Tab &amp; res.Detailed.ToString())
            					Console.WriteLine("Description:	" &amp; ControlChars.Tab &amp; res.Description)
            				<span style="color: blue;">Next</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.BounceMail.DeliveryStatusParser.#ctor(System.String,System.Boolean)">
            <summary>
            Loads DSN XML templates database from file(s) and creates <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> object.
            <seealso cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/>
            </summary>
            <param name="databaseLocations">The semicolon-separated list of full or relative paths to
            the database files.</param>
            <param name="allowFailedDatabases">If <b>false</b>, this method will throw <see cref="T:MailBee.MailBeeIOException"/>
            when at least one database could not be loaded; otherwise, the exception will be thrown only if
            all databases failed to load. Has no effect if only one database file was specified in <paramref name="databaseLocations"/>.
            </param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="databaseLocations"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">Could not load the database file(s).</exception>
            <remarks>
            <para>MailBee is shipped with a set of database files located in <c>BounceDatabase</c> folder of MailBee.NET Objects installation.
            "all.xml" file is the root file of this database and therefore should be specified as <paramref name="databaseLocations"/> value. Thus,
            the typical <paramref name="databaseLocations"/> path is somewhat like <c>C:\Program Files\MailBee.NET Objects\BounceDatabase\all.xml</c>.</para>
            <para>It's also possible to create user-defined databases and use multiple databases.
            <paramref name="databaseLocations"/> format is the same as
            Microsoft Windows environment PATH variable. (i.e. "Path1;Path2;...;PathN").
            You can change the order of processing templates from different databases by changing the order in which databases
            are listed in <paramref name="databaseLocations"/> value.</para>
            <note>If you're using the default bounce templates database in your application which will be redistributed, you should include all the contents of BounceDatabase folder
            with your application. Redistributing all.xml file is not enough as it contains references to other files and sub-folders in BounceDatabase folder.</note>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> topic.
            </example>
        </member>
        <member name="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)">
            <summary>
            Examines the specified <see cref="T:MailBee.Mime.MailMessage"/> for delivery status notification (DSN) and returns its details.
            </summary>
            <param name="message">The <see cref="T:MailBee.Mime.MailMessage"/> object to be examined.</param>
            <returns>DSN details extracted from the specified e-mail message, or a null reference (<b>Nothing</b> in Visual Basic)
            if the message does not contain any DSN.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic)</exception>
            <remarks>
            It's possible that the message is DSN of rare format which is not yet known to MailBee.
            In this case, contact us so that we would be able to add this format into DSN template database.
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> topic.
            </example>
        </member>
        <member name="T:MailBee.MD4">
            <summary>
              Implements the MD4 message digest algorithm in C#
            </summary>
            <remarks>
            <para>
            <b>References:</b>
            <ol>
              <li> Ronald L. Rivest,
                   "<a href="http://www.roxen.com/rfc/rfc1320.html">
                   The MD4 Message-Digest Algorithm</a>",
                   IETF RFC-1320 (informational).
              </li>
            </ol>         
            </para>
            </remarks>
        </member>
        <member name="F:MailBee.MD4.BLOCK_LENGTH">
            <summary>
            The size in bytes of the input block to the transformation algorithm
            </summary>
        </member>
        <member name="F:MailBee.MD4.context">
            <summary>
            4 32-bit words (interim result)
            </summary>
        </member>
        <member name="F:MailBee.MD4.count">
            <summary>
            Number of bytes procesed so far mod. 2 power of 64.
            </summary>
        </member>
        <member name="F:MailBee.MD4.buffer">
            <summary>
            512-bit input buffer = 16 x 32-bit words holds until it reaches 512 bits
            </summary>
        </member>
        <member name="F:MailBee.MD4.X">
            <summary>
            512-bit work buffer = 16 x 32-bit words
            </summary>
        </member>
        <member name="M:MailBee.MD4.#ctor(MailBee.MD4)">
            <summary>
            This constructor is here to implement the clonability of this class
            </summary>
            <param name="md"> </param>
        </member>
        <member name="M:MailBee.MD4.engineReset">
            <summary>
            Resets this object disregarding any temporary data present at the
            time of the invocation of this call.
            </summary>
        </member>
        <member name="M:MailBee.MD4.engineUpdate(System.Byte)">
            <summary>
            Continues an MD4 message digest using the input byte
            </summary>
            <param name="b">byte to input</param>
        </member>
        <member name="M:MailBee.MD4.engineUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            MD4 block update operation
            </summary>
            <remarks>
            Continues an MD4 message digest operation by filling the buffer, 
            transform(ing) data in 512-bit message block(s), updating the variables
            context and count, and leaving (buffering) the remaining bytes in buffer
            for the next update or finish.
            </remarks>
            <param name="input">input block</param>
            <param name="offset">start of meaningful bytes in input</param>
            <param name="len">count of bytes in input blcok to consider</param>
        </member>
        <member name="M:MailBee.MD4.engineDigest">
            <summary>
            Completes the hash computation by performing final operations such
            as padding.  At the return of this engineDigest, the MD engine is
            reset.
            </summary>
            <returns>the array of bytes for the resulting hash value.</returns>
        </member>
        <member name="M:MailBee.MD4.GetByteHashFromString(System.String)">
            <summary>
            Returns a byte hash from a string
            </summary>
            <param name="s">string to hash</param>
            <returns>byte-array that contains the hash</returns>
        </member>
        <member name="M:MailBee.MD4.GetByteHashFromBytes(System.Byte[])">
            <summary>
            Returns a binary hash from an input byte array
            </summary>
            <param name="b">byte-array to hash</param>
            <returns>binary hash of input</returns>
        </member>
        <member name="M:MailBee.MD4.GetHexHashFromBytes(System.Byte[])">
            <summary>
            Returns a string that contains the hexadecimal hash
            </summary>
            <param name="b">byte-array to input</param>
            <returns>String that contains the hex of the hash</returns>
        </member>
        <member name="M:MailBee.MD4.GetByteHashFromByte(System.Byte)">
            <summary>
            Returns a byte hash from the input byte
            </summary>
            <param name="b">byte to hash</param>
            <returns>binary hash of the input byte</returns>
        </member>
        <member name="M:MailBee.MD4.GetHexHashFromByte(System.Byte)">
            <summary>
            Returns a string that contains the hexadecimal hash
            </summary>
            <param name="b">byte to hash</param>
            <returns>String that contains the hex of the hash</returns>
        </member>
        <member name="M:MailBee.MD4.GetHexHashFromString(System.String)">
            <summary>
            Returns a string that contains the hexadecimal hash
            </summary>
            <param name="s">string to hash</param>
            <returns>String that contains the hex of the hash</returns>
        </member>
        <member name="M:MailBee.MD4.transform(System.Byte[]@,System.Int32)">
            <summary>
            MD4 basic transformation
            </summary>
            <remarks>
            Transforms context based on 512 bits from input block starting
            from the offset'th byte.
            </remarks>
            <param name="block">input sub-array</param>
            <param name="offset">starting position of sub-array</param>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpServer">
            <summary>
            Represents an SMTP relay server to which the mail messages will be sent.
            </summary>
            <remarks>
            <para>This class is used to specify an SMTP relay server the mail messages should
            be submitted to. Another type of SMTP server is SMTP MX server which is a server
            which accepts mail for a particular domain. When the mail message is submitted to
            SMTP relay server, the relay server performs the following operations:
            <list type="bullet">
            <item><description>The message is received from the client</description></item>
            <item><description>For each recipient e-mail address, the domain part is extracted,
            and duplicates are removed (example: for <i>user1@domain1.com, user2@domain1.com, user1@domain2.com, user3@domain1.com</i>),
            the list of unique domains is <i>domain1.com, domain2.com</i>)</description></item>
            <item><description>For each of the unique domains, DNS MX lookup query is sent to the DNS server</description></item>
            <item><description>For each domain, the DNS server returns the list of SMTP MX servers
            which accept mail for this domain</description></item>
            <item><description>The relay server then relays the mail message to SMTP MX server of each domain</description></item>
            </list>
            In other words, SMTP relay server dispatches the mail message received from the client,
            to the SMTP MX servers of the target recipients.</para>
            <para>To specify SMTP relay server in your application, call <c>mailer.SmtpServers.Add</c> method (assuming
            <c>mailer</c> is an instance of <see cref="T:MailBee.SmtpMail.Smtp"/> class).</para>
            <note>When MailBee is used in direct send mode (by performing DNS MX lookup
            against DNS servers in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection), MailBee itself acts
            as SMTP relay server, and dispatches the mail message to the MX servers of recipients domains.</note>
            </remarks>
            <example>Another example of specifying SMTP relay server in the application is available at
            <see cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/> topic.</example>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with the given host name or IP address string,
            and assigns the top priority to this instance.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <param name="name">The host name or IP address of the SMTP relay server.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>You can find more information on the server priority in
            <see cref="T:MailBee.SortableByPriorityCollection"/> class documentation.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with the given host name
            or IP address string, enables ESMTP authentication and assigns the top priority to this instance.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <param name="name">The host name or IP address of the SMTP relay server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>This constructor automatically sets <see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> property
            value to <see cref="F:MailBee.AuthenticationMethods.Auto"/>.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServer.#ctor(System.String,System.String,System.String,MailBee.AuthenticationMethods)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with the given host name
            or IP address string, enables ESMTP authentication using the specified methods, and assigns the top priority to this instance.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <param name="name">The host name or IP address of the SMTP relay server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when authenticating the user on the server.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with
            the given host name (or IP address string) and port number,
            and assigns the specified priority to this instance.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <param name="name">The host name or IP address of the SMTP relay server.</param>
            <param name="port">The port on which to communicate with the SMTP relay server. The standard SMTP port is 25.</param>
            <param name="priority">A preference of the SMTP relay server. Lower values are preferred.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic) or <paramref name="port"/> is an invalid port number.</exception>
            <remarks>You can find more information on the server priority in
            <see cref="T:MailBee.SortableByPriorityCollection"/> class documentation.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServer.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,MailBee.AuthenticationMethods,System.String,System.String,System.Boolean,System.String,MailBee.SmtpMail.ExtendedSmtpOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with the given
            parameter values.
            </summary>
            <param name="name">The host name or IP address of the SMTP relay server.</param>
            <param name="port">The port on which to communicate with the SMTP relay server. The standard SMTP port is 25.</param>
            <param name="priority">A preference of the SMTP relay server. Lower values are preferred.</param>
            <param name="timeout">The amount of time (in milliseconds) the component will wait for data to be received from the server
            before returning an error, or zero to wait indefinitely.</param>
            <param name="pipelining">Specifies whether to use commands pipelining (ESMTP PIPELINING) if it's supported by the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when authenticating the user on the server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <param name="allowRefusedRecipients">Specifies whether refused recipients should be allowed when submitting a mail message to the server.</param>
            <param name="helloDomain">The string to be supplied as an argument of HELO/EHLO commands, or a null reference (<b>Nothing</b> in Visual Basic)
            to let MailBee autodetect the correct value (see <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> for details).</param>
            <param name="smtpOptions">A set of flags which can be used to disable certain extended SMTP capabilities.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic) or <paramref name="port"/> is an invalid port number or <paramref name="timeout"/> is negative.</exception>
        </member>
        <member name="M:MailBee.SmtpMail.SmtpServer.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,MailBee.AuthenticationMethods,System.String,System.String,System.Boolean,System.String,MailBee.SmtpMail.ExtendedSmtpOptions,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.SmtpMail.SmtpServer"/> class with the given
            parameter values.
            </summary>
            <param name="name">The host name or IP address of the SMTP relay server.</param>
            <param name="port">The port on which to communicate with the SMTP relay server. The standard SMTP port is 25.</param>
            <param name="priority">A preference of the SMTP relay server. Lower values are preferred.</param>
            <param name="timeout">The amount of time (in milliseconds) the component will wait for data to be received from the server
            before returning an error, or zero to wait indefinitely.</param>
            <param name="pipelining">Specifies whether to use commands pipelining (ESMTP PIPELINING) if it's supported by the server.</param>
            <param name="authMethods">A set of authentication methods which can be used when authenticating the user on the server.</param>
            <param name="accountName">The user account name on the server.</param>
            <param name="password">The user account password on the server.</param>
            <param name="allowRefusedRecipients">Specifies whether refused recipients should be allowed when submitting a mail message to the server.</param>
            <param name="helloDomain">The string to be supplied as an argument of HELO/EHLO commands, or a null reference (<b>Nothing</b> in Visual Basic)
            to let MailBee autodetect the correct value (see <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> for details).</param>
            <param name="smtpOptions">A set of flags which can be used to disable certain extended SMTP capabilities.</param>
            <param name="maxConnectionCount">The maximum number of simultaneous connections to this SMTP server in multi-thread sending mode, or -1 if unlimited.</param>
            <param name="maxSendPerSessionCount">The maximum number of e-mail messages which can be sent within a single connection with the server, or -1 if unlimited.</param>
            <param name="pauseInterval">The amount of time in milliseconds MailBee must wait prior to connecting to the server after last disconnection from this server, or zero if instant reconnecting allowed.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic), or any of <paramref name="port"/>, <paramref name="timeout"/>, <paramref name="maxSendPerSessionCount"/>, <paramref name="maxConnectionCount"/>, or <paramref name="pauseInterval"/> parameters is an invalid value.</exception>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Name">
            <summary>
            Gets or sets the host name or IP address string of the SMTP relay server.
            </summary>
            <value>The host name or IP address string of the SMTP relay server. The default value is
            <see cref="P:MailBee.Global.DefaultServerName"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Port">
            <summary>
            Gets or sets the port number on which to communicate with the SMTP relay server.
            </summary>
            <value>The port number on which to communicate with the SMTP relay server. The default value is
            25.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/>
            is an invalid port number.</exception>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Timeout">
            <summary>
            Gets or sets the amount of time (in milliseconds) the <see cref="T:MailBee.SmtpMail.Smtp"/> component will wait for a response from this server.
            </summary>
            <value>The amount of time (in milliseconds) the <see cref="T:MailBee.SmtpMail.Smtp"/> component will wait for data to be received from this server
            before returning an error, or zero to wait indefinitely. The default value is <see cref="P:MailBee.Global.DefaultTimeout"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Pipelining">
            <summary>
            Gets or sets whether to use commands pipelining if it's supported by the server.
            </summary>
            <value>A boolean vlaue specifying whether to use commands pipelining (ESMTP PIPELINING)
            if it's supported by the server. The default value is <see cref="P:MailBee.Global.Pipelining"/>.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.AuthMethods">
            <summary>
            Gets or sets a set of authentication methods which can be used when authenticating the user on the server.
            </summary>
            <value>An <see cref="T:MailBee.AuthenticationMethods"/> value containing bitwise combination
            of flags specifying which SASL authentication methods can be used when authenticating the user on the server. The default value is
            <see cref="F:MailBee.AuthenticationMethods.None"/> (ESMTP authentication is not used, so that
            <see cref="P:MailBee.SmtpMail.SmtpServer.AccountName"/> and <see cref="P:MailBee.SmtpMail.SmtpServer.Password"/> values are ignored).</value>
            <remarks>
            <para>This property specifies a set of the methods MailBee can choose from during
            performing ESMTP authentication (starting from the most secure method to less secure). MailBee, however, will not try methods which are not
            supported by the server even if they are listed in <see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> value.
            In particular, only SASL methods can be tried, since ESMTP authentication does not support
            any non-SASL methods.</para>
            <para>Sometimes, the mail server may support certain SASL method even if it's not listed
            in the server capabilities. To force MailBee try even those methods which seem
            to be unsupported by the server, set <see cref="F:MailBee.AuthenticationOptions.TryUnsupportedMethods"/>
            flag in <see cref="P:MailBee.SmtpMail.SmtpServer.AuthOptions"/> property value.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.AuthOptions">
            <summary>
            Gets or sets the options which alter ESMTP authentication process.
            </summary>
            <value>An <see cref="T:MailBee.AuthenticationOptions"/> value containing bitwise combination
            of flags affecting MailBee's default behavior during ESMTP authentication on the server. The default value is
            <see cref="F:MailBee.AuthenticationMethods.None"/> (unless <see cref="P:MailBee.Global.SafeMode"/> is <b>true</b>).</value>
            <remarks>
            If <see cref="P:MailBee.Global.SafeMode"/> was <b>true</b> to the moment of creating this <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            object, <see cref="P:MailBee.SmtpMail.SmtpServer.AuthOptions"/> will be set to 4 (<see cref="F:MailBee.AuthenticationOptions.PreferSimpleMethods"/>).
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.AuthUserDefined">
            <summary>
            Gets or sets a reference to the instance of a class implementing custom SASL authentication
            mechanism.
            </summary>
            <value>A reference to the instance of a class implementing custom SASL authentication
            mechanism, or a null reference (<b>Nothing</b> in Visual Basic) if no user-defined SASL method
            was supplied. The default value is a null reference.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.AccountName">
            <summary>
            Gets or sets the user account name on the SMTP relay server.
            </summary>
            <value>The user account name on the SMTP relay server. The default value is an empty string.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Password">
            <summary>
            Gets or sets the user account password on the SMTP relay server.
            </summary>
            <value>The user account password on the SMTP relay server. The default value is an empty string.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.SslMode">
            <summary>
            Gets or sets how the component should establish TLS/SSL connection with the mail server.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.SslMode"/>
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.SslProtocol"/>
            <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/>
            </summary>
            <value>One of <see cref="T:MailBee.Security.SslStartupMode"/> values specifying if and how
            the component should establish TLS/SSL connection with the mail server. The default value is
            <see cref="F:MailBee.Security.SslStartupMode.Manual"/> which means the connection won't be established
            in TLS/SSL mode unless the developer manually calls <see cref="M:MailBee.SmtpMail.Smtp.StartTls"/> method.</value>
            <remarks>
            <note>Not all mail servers support TLS/SSL functionality. Also, some servers support only TLS or only SSL
            (see <see cref="P:MailBee.SmtpMail.SmtpServer.SslProtocol"/> topic for details).</note>
            </remarks>
            <example>This sample submits a mail message to the SMTP server through the secure TLS/SSL connection.
            The connection is made to the regular SMTP port 25, and STARTTLS command is sent to switch the connection into
            TLS/SSL mode.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Smtp mailer = <span style="color: blue;">new</span> Smtp();
            SmtpServer server = new SmtpServer("mail.domain.com", "jdoe", "secret");
            server.SslMode = SslStartupMode.UseStartTls;
            mailer.SmtpServers.Add(server);
            mailer.From.Email = "jdoe@domain.com";
            mailer.To.Add("kathy@company.com");
            mailer.Subject = "Report";
            mailer.BodyPlainText = "The report contents";
            mailer.Send();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            <span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> SmtpServer = <span style="color: blue;">New</span> SmtpServer("mail.domain.com", "jdoe", "secret")
            server.SslMode = SslStartupMode.UseStartTls
            mailer.SmtpServers.Add(server)
            mailer.From.Email = "jdoe@domain.com"
            mailer.To.Add("kathy@company.com")
            mailer.Subject = "Report"
            mailer.BodyPlainText = "The report contents"
            mailer.Send()
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.SslProtocol">
            <summary>
            Gets or sets the security protocol to be used for performing TLS/SSL negotiation and data encryption.
            </summary>
            <value>One of <see cref="T:MailBee.Security.SecurityProtocol"/> values specifying the security protocol to be used for performing TLS/SSL negotiation and data encryption.
            The default value is <see cref="F:MailBee.Security.SecurityProtocol.Auto"/>.</value>
            <remarks>The default value allows MailBee to select the best (the mosy secure) protocol supported by
            the mail server. However, if the mail server does not support automatic protocol negotiation,
            it will likely close the connection (<see cref="T:MailBee.MailBeeSocketResetException"/> will be thrown). In this case,
            the application should set this property to non-<see cref="F:MailBee.Security.SecurityProtocol.Auto"/> value (such as
            <see cref="F:MailBee.Security.SecurityProtocol.Tls1"/>).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.SslCertificates">
            <summary>
            Provides access to the client and server SSL certificate settings.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="T:MailBee.Security.CertificateStore"/>
            </summary>
            <value>A reference to the client and server SSL certificate settings.</value>
            <remarks>
            <para>The following code should be used to access the server certificate (assuming <c>server</c> is
            an <see cref="T:MailBee.SmtpMail.SmtpServer"/> class instance currently used by <see cref="T:MailBee.SmtpMail.Smtp"/> component as an SMTP server
            definition): <c>server.SslCertificates.Server</c>. To set the client
            certificate, the developer should assign <c>server.SslCertificates.Client</c> property.</para>
            <note>Prior to starting using certificates, the developer must set <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property of
            <see cref="T:MailBee.Security.Powerup"/> class (this can be accomplished in the code, in the config file such as app.config,
            or in the registry).</note>
            </remarks>
            <example>
            This console sample establishes secure connection with the mail server using the private certificate
            of the client and then displays various information about the server certificate. The client certificate
            is taken from a file (MailBee can also read certificates from the registry, see <see cref="T:MailBee.Security.CertificateStore"/> class description for
            details).
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("mail.domain.com");
            		server.SslMode = SslStartupMode.UseStartTls;
            		server.SslCertificates.Client = <span style="color: blue;">new</span> Certificate(@"C:\my.pfx", CertFileType.Pfx, "secret");
            		mailer.SmtpServers.Add(server);
            		mailer.Connect();
            		mailer.Hello();
            		Console.WriteLine("The server certificate info");
            		Console.WriteLine("===========================");
            		Console.WriteLine("Issued by:	" + server.SslCertificates.Server.IssuedBy);
            		Console.WriteLine("Issued to:	" + server.SslCertificates.Server.IssuedTo);
            		Console.WriteLine("Valid from:	" + server.SslCertificates.Server.ValidFromDate);
            		Console.WriteLine("Valid to:	" + server.SslCertificates.Server.ValidToDate);
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> SmtpServer = <span style="color: blue;">New</span> SmtpServer("mail.domain.com")
            		server.SslMode = SslStartupMode.UseStartTls
            		server.SslCertificates.Client = <span style="color: blue;">New</span> Certificate("C:\my.pfx", CertFileType.Pfx, "secret")
            		mailer.SmtpServers.Add(server)
            		mailer.Connect()
            		mailer.Hello()
            		Console.WriteLine("The server certificate info")
            		Console.WriteLine("===========================")
            		Console.WriteLine("Issued by:	" &amp; server.SslCertificates.Server.IssuedBy)
            		Console.WriteLine("Issued to:	" &amp; server.SslCertificates.Server.IssuedTo)
            		Console.WriteLine("Valid from:	" &amp; server.SslCertificates.Server.ValidFromDate)
            		Console.WriteLine("Valid to:	" &amp; server.SslCertificates.Server.ValidToDate)
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Proxy">
            <summary>
            Provides access to the settings which allow MailBee to connect to a mail server via a proxy server.
            </summary>
            <value>A reference to the proxy server settings.</value>
            <remarks>
            By default, proxy server is not used. The developer can change this to make MailBee use SOCKS4, SOCKS5, or HTTP proxy server.
            This is useful when a firewall prohibits direct connections with a mail server but permits connections via a proxy.
            </remarks>
            <example>
            This console sample establishes connection with the mail server via an HTTP proxy server which requires clients to authenticate themselves.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.Proxy;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		SmtpServer server = <span style="color: blue;">new</span> SmtpServer("mail.domain.com");
            		server.Proxy.Name = "proxy.server.com";
            		server.Proxy.Protocol = ProxyProtocol.Http;
            		server.Proxy.Port = 808;
            		server.Proxy.AccountName = "jdoe";
            		server.Proxy.Password = "secret";
            		mailer.SmtpServers.Add(server);
            		mailer.Connect();
            		Console.WriteLine("Connected via a proxy server");
            		mailer.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.Proxy
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            		<span style="color: blue;">Dim</span> server <span style="color: blue;">As</span> SmtpServer = <span style="color: blue;">New</span> SmtpServer("mail.domain.com")
            		server.Proxy.Name = "proxy.server.com"
            		server.Proxy.Protocol = ProxyProtocol.Http
            		server.Proxy.Port = 808
            		server.Proxy.AccountName = "jdoe"
            		server.Proxy.Password = "secret"
            		mailer.SmtpServers.Add(server)
            		mailer.Connect()
            		Console.WriteLine("Connected via a proxy server")
            		mailer.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.Priority">
            <summary>
            Gets or sets the usage preference of this SMTP relay server as compared to
            preferences of other servers in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collections.
            </summary>
            <value>An integer value in the range 0 to 999 (lower values are preferred,
            i.e. 0 is the highest priority while 999 is the lowest priority), specifying
            the order in which <see cref="T:MailBee.SmtpMail.Smtp"/> component will connect to the servers if
            more than one server is specified in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> and <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection.</value>
            <remarks>Priority can be used to split the available servers into groups (for instance,
            define primary servers and backup servers) and combine different methods of sending
            mail (for instance, if top priority SMTP relay server in <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/>
            collection has higher priority than top priority DNS server in <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection, MailBee will attempt to send to relay servers first, and use direct send
            if sending to relay servers failed).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.AllowRefusedRecipients">
            <summary>
            Gets or sets whether refused recipients should be allowed when submitting a mail message to the server.
            </summary>
            <value>A boolean value specifying whether refused recipients should be allowed
            when submitting a mail message to the server. The default value is <b>true</b>.</value>
            <remarks>If this property is <b>true</b>, MailBee will send the message if at least one
            recipient has been accepted by the server. The developer can subscribe to
            <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> warning event to keep track of occurrences of this event
            in order to receive notification when certain recipient gets refused. Or, the developer
            can just call <see cref="M:MailBee.SmtpMail.Smtp.GetRefusedRecipients"/> method after sending the message
            to get the list of refused recipients.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.HelloDomain">
            <summary>
            Gets or sets the string to be supplied as an argument of HELO/EHLO commands, or a null reference (<b>Nothing</b> in Visual Basic)
            to let MailBee autodetect the correct value (see <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> for details).
            </summary>
            <value>The string to be supplied as an argument of HELO/EHLO commands, or a null reference (<b>Nothing</b> in Visual Basic)
            to let MailBee autodetect the correct value (see <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> for details). The default value is a null reference.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.IgnoreLoginFailure">
            <summary>
            Gets or sets whether the <see cref="T:MailBee.SmtpMail.Smtp"/> component should ignore ESMTP or POP-before-SMTP authentication error (if any)
            and still attempt to send the message.
            </summary>
            <value>The boolean value specifying whether the <see cref="T:MailBee.SmtpMail.Smtp"/> component should ignore ESMTP or POP-before-SMTP authentication error (if any)
            and still attempt to send the message. The default value is <b>false</b>.</value>
            <remarks>Since ESMTP and POP-before-SMTP authentication is not always necessary in order
            to send the message, the component can be told to try to send the message even if
            the authentication fails. Usually, SMTP relay servers allow unauthenticated users
            to send mail to local recipients only (i.e. to <i>user@localdomain.com</i> but not to
            <i>user@remotedomain.com</i>, provided that the SMTP relay server is somewhat like
            <i>mail.localdomain.com</i>).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.SmtpOptions">
            <summary>
            Gets or sets the options which can be used to disable certain extended SMTP capabilities.
            </summary>
            <value>An <see cref="T:MailBee.SmtpMail.ExtendedSmtpOptions"/> value containing bitwise combination
            of flags which disable certain extended SMTP capabilities. The default value is
            <see cref="F:MailBee.SmtpMail.ExtendedSmtpOptions.Default"/> (unless <see cref="P:MailBee.Global.SafeMode"/> is <b>true</b>).</value>
            <remarks>
            <para>If this property value is set to <see cref="F:MailBee.SmtpMail.ExtendedSmtpOptions.ClassicSmtpMode"/>,
            no ESMTP extensions will be used (including PIPELINING and AUTH).</para>
            <para>If <see cref="P:MailBee.Global.SafeMode"/> was <b>true</b> to the moment of creating this <see cref="T:MailBee.SmtpMail.SmtpServer"/>
            object, <see cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/> will be set to 7.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.AuthPopBeforeSmtp">
            <summary>
            Gets or sets whether the <see cref="T:MailBee.SmtpMail.Smtp"/> component should perform POP-before-SMTP
            authentication prior to connecting to the SMTP server.
            </summary>
            <value>A boolean value specifying whether the <see cref="T:MailBee.SmtpMail.Smtp"/> component should perform POP-before-SMTP
            authentication prior to connecting to the SMTP server. The default value is <b>false</b>.</value>
            <remarks>
            <para>POP-before-SMTP authentication is used by some older mail systems which do not support
            ESMTP authentication to authenticate users. In this scenario, <see cref="T:MailBee.SmtpMail.Smtp"/> component
            connects to the POP3 server first, authenticates the user, disconnects from the POP3 server, and immediately
            reconnects to the SMTP server.</para>
            <para>Automatic POP-before-SMTP authentication (which is performed when this property is <b>true</b>)
            requires the POP3 server run on the same host as the SMTP server (e.g. both servers are <i>mail.domain.com</i>).
            If it's not so (e.g. <i>pop.domain.com</i> for POP3 and <i>smtp.domain.com</i> for SMTP),
            <see cref="M:MailBee.SmtpMail.Smtp.AuthPopBeforeSmtp(System.String,System.Int32,System.String,System.String)"/> method can be called prior to connecting to the SMTP server instead
            of setting <see cref="P:MailBee.SmtpMail.SmtpServer.AuthPopBeforeSmtp"/> to <b>true</b>.</para>
            <note>After POP-before-SMTP authentication was performed and the connection with the server was established,
            there is no need to call <see cref="M:MailBee.SmtpMail.Smtp.Login"/> method. <see cref="M:MailBee.SmtpMail.Smtp.Login"/> method performs ESMTP
            authentication only.</note>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.MaxConnectionCount">
            <summary>
            Gets or sets the maximum number of simultaneous connections to this SMTP server in multi-thread sending mode.
            <seealso cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/>
            </summary>
            <value>Non-zero integer specifying the maximum allowed number of simultaneous connections to this server in multi-thread sending mode.
            The default value is -1 (number of connections is unlimited).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is zero.</exception>
            <remarks>
            In multi-thread mode (<see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> &gt; 1) the <see cref="T:MailBee.SmtpMail.Smtp"/> component can establish
            multiple connections to the same SMTP server. However, if <see cref="P:MailBee.SmtpMail.Smtp.MaxThreadCount"/> is fairly high and the server
            resticts the number of simultaneous connections from the same IP address to a certain value, it will start rejecting connection attempts
            if the current connection count exceeds the allowed limit. In this case, <see cref="P:MailBee.SmtpMail.SmtpServer.MaxConnectionCount"/> property value must be
            set to any positive value which does not exceed the corresponding setting on the SMTP server.
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.MaxSendPerSessionCount">
            <summary>
            Gets or sets the maximum number of e-mail messages which can be sent within a single connection with the server.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.PauseInterval"/>
            </summary>
            <value>Non-zero integer specifying the maximum number of e-mail messages which can be successfully submitted to the SMTP relay server within a single session.
            The default value is -1 (number of submissions per session is unlimited).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is zero.</exception>
            <remarks>
            To prevent abuse or spam, many mail servers limit the maximum number of e-mail messages accepted from a client
            during a single SMTP session. The developer can use <see cref="P:MailBee.SmtpMail.SmtpServer.MaxSendPerSessionCount"/> property to restrict the number of
            e-mail submissions from MailBee to the SMTP relay server within a single session. When this number is exceeded, MailBee will disconnect from
            the server and either use another server (if <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection contains other servers
            with the same or higher priority) or wait for <see cref="P:MailBee.SmtpMail.SmtpServer.PauseInterval"/> milliseconds and then attempt to connect to the server again to
            send another portion of the messages.
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.PauseInterval">
            <summary>
            Gets or sets the amount of time MailBee must wait prior to connecting to the server after last disconnection from this server.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.MaxSendPerSessionCount"/>
            </summary>
            <value>Non-negative integer specifying the mimimum amount of time (in milliseconds) between disconnection from the server and subsequent connection attempt to the same server.
            The default value is 0 (no waiting required).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is negative.</exception>
            <remarks>
            To prevent abuse or spam, many mail servers limit the maximum number of connection attempts per minute (or per hour, day, etc) from a single client IP address.
            The number of e-mail submissions to the server within a single session may also be restricted (see <see cref="P:MailBee.SmtpMail.SmtpServer.MaxSendPerSessionCount"/> property).
            The developer can use <see cref="P:MailBee.SmtpMail.SmtpServer.PauseInterval"/> property to force MailBee to make connections with the server less frequently.
            For instance, if the server accepts not more than 20 connections per minute from a single IP address, the developer should set <see cref="P:MailBee.SmtpMail.SmtpServer.PauseInterval"/> value to at least 3000
            (3000 * 20 = 60000 milliseconds = 1 minute).
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpServer.LocalEndPoint">
            <summary>
            Gets or sets the local end point which will be used when connecting to the SMTP server.
            </summary>
            <value>A reference to the local end point to be used when connecting to the SMTP server, or a null reference
            (<b>Nothing</b> in Visual Basic) if the local end point should be assigned automatically. The default value is a null reference.</value>
            <remarks>
            <para>If the computer running MailBee has multiple IP addresses assigned (for instance, it has several network adapters installed),
            you can set this property to the IP address and port which should be used for outbound connections. See <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/>
            and <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"/> topics for more information.</para>
            <para>If you're sending in "direct send" mode (not using SMTP relay server), the property to be set in this case is
            <see cref="P:MailBee.SmtpMail.DirectSendServerConfig.LocalEndPoint">Smtp.DirectSendDefaults.LocalEndPoint</see>.</para>
            </remarks>
        </member>
        <member name="T:MailBee.Mime.MimePartCollection">
            <summary>
            Provides properties and methods for examining the collection of <see cref="T:MailBee.Mime.MimePart"/> objects.
            <seealso cref="T:MailBee.Mime.MimePart"/>
            </summary>
            <example>This sample loads the message from .EML file and displays Content-Type of all MIME parts.
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every part...</span>
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: green;">// ...show its Content-Type.</span>
            	Console.WriteLine("The type is " + part.ContentType);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every part...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: green;">' ...show its Content-Type.</span>
            	Console.WriteLine("The type is " &amp; part.ContentType)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePartCollection.Item(System.Int32)">
            <summary>
            Gets the MIME part at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index of the MIME part in the collection.</param>
            <value>
            A <see cref="T:MailBee.Mime.MimePart"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <example>This sample loads the message from .EML file and displays Content-Type of
            all MIME parts.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            MimePartCollection subParts = msg.MimePartTree.GetAllParts();
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; subParts.Count; i++)
            {
            	MimePart part = subParts[i];
            	Console.WriteLine(part.ContentType);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            <span style="color: blue;">Dim</span> subParts <span style="color: blue;">As</span> MimePartCollection = msg.MimePartTree.GetAllParts()
            <span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> subParts.Count - 1
            	<span style="color: blue;">Dim</span> part <span style="color: blue;">As</span> MimePart = subParts(i)
            	Console.WriteLine(part.ContentType)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePartCollection.Item(System.String)">
            <summary>
            Gets the MIME part by the specified Content-Type.
            </summary>
            <param name="name">The Content-Type of the MIME part to be searched in the collection.</param>
            <value>
            A <see cref="T:MailBee.Mime.MimePart"/> object which has <see cref="P:MailBee.Mime.MimePart.ContentType"/> value equal to the specified <paramref name="name"/>;
            or a null reference (<b>Nothing</b> in Visual Basic) if the collection does not contain such <see cref="T:MailBee.Mime.MimePart"/> objects.
            </value>
            <remarks>
            <para>The search is case-sensitive. For instance, if <paramref name="name"/> is <i>text/plain</i> while
            <see cref="P:MailBee.Mime.MimePart.ContentType"/> of the MIME part is <i>TEXT/PLAIN</i>, that <see cref="T:MailBee.Mime.MimePart"/>
            object will still be returned.</para>
            <para>If multiple <see cref="T:MailBee.Mime.MimePart"/> objects in the collection meet the specified search condition, only the first found object
            will be returned.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the size of XML body of the message if any.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            MimePart xmlPart = msg.MimePartTree.GetAllParts()["text/xml"];
            <span style="color: blue;">if</span> (xmlPart != <span style="color: blue;">null</span>)
            {
            	Console.WriteLine(xmlPart.Size.ToString());
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("No such MimePart.");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">Dim</span> xmlPart <span style="color: blue;">As</span> MimePart = msg.MimePartTree.GetAllParts()("text/xml")
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> xmlPart <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	Console.WriteLine(xmlPart.Size.ToString())
            <span style="color: blue;">Else</span>
            	Console.WriteLine("No such MimePart.")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.ImapMail.ImapUtils">
            <summary>
            Provides static methods useful for processing IMAP4 strings, dates, folder names, etc.
            </summary>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetImapDateString">
            <summary>
            Returns the string containing the current date of the local computer in the IMAP4 format.
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <remarks>This method can be used to build "search by today's date" expressions
            when using <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> or <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> methods.
            The IMAP4 protocol allows the client to search messages only by dates, not by exact datetime values.</remarks>
            <example>
            This sample prints the current date of the local computer as IMAP4-formatted string. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Console.WriteLine(MailBee.ImapMail.ImapUtils.GetImapDateString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		Console.WriteLine(MailBee.ImapMail.ImapUtils.GetImapDateString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetImapDateString(System.DateTime)">
            <summary>
            Returns the string containing the specified date value in the IMAP4 format.
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="dt">The date and time value to return the date for.</param>
            <returns>The IMAP4 date string in "dd-MMM-yyyy" format.</returns>
            <remarks>This method can be used to build "search by date" expressions
            when using <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> or <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> methods.
            The IMAP4 protocol allows the client to search messages only by dates, not by exact datetime values.</remarks>
            <example>
            This sample prints the current date of the local computer as IMAP4-formatted string. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Console.WriteLine(
            			MailBee.ImapMail.ImapUtils.GetImapDateString(DateTime.Now));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		Console.WriteLine( _
            			MailBee.ImapMail.ImapUtils.GetImapDateString(DateTime.Now))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetImapDateTimeString">
            <summary>
            Returns the string containing the current date and time of the local computer in the IMAP4 format.
            </summary>
            <returns>The current date and time of the local computer as string in "dd-MMM-yyyy HH:mm:ss +/-HHmm" format.</returns>
            <example>
            This sample prints the current datetime of the local computer as IMAP4-formatted string. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Console.WriteLine(MailBee.ImapMail.ImapUtils.GetImapDateTimeString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		Console.WriteLine(MailBee.ImapMail.ImapUtils.GetImapDateTimeString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetImapDateTimeString(System.DateTime)">
            <summary>
            Returns the string containing the specified local date and time value in the IMAP4 format.
            </summary>
            <param name="dt">The date and time in the timezone of the local computer.</param>
            <returns>The IMAP4 datetime string in "dd-MMM-yyyy HH:mm:ss +/-HHmm" format.</returns>
            <example>
            This sample prints the current datetime of the local computer as IMAP4-formatted string. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Console.WriteLine(
            			MailBee.ImapMail.ImapUtils.GetImapDateTimeString(DateTime.Now));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		Console.WriteLine( _
            			MailBee.ImapMail.ImapUtils.GetImapDateTimeString(DateTime.Now))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetImapDateTimeString(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns the string containing the specified date and time value in the IMAP4 format.
            </summary>
            <param name="dt">The date and time in UTC or local timezone.</param>
            <param name="includeTime">If <b>true</b>, the date, time, and timezone will be included into the resulting string;
            otherwise, only the date will be included.</param>
            <param name="isUtc">Indicates if <paramref name="dt"/> is UTC time or local time.
            Ignored if <paramref name="includeTime"/> is <b>false</b>.</param>
            <returns>The IMAP4 datetime string in "dd-MMM-yyyy HH:mm:ss +/-HHmm", "dd-MMM-yyyy HH:mm:ss", or "dd-MMM-yyyy" format.</returns>
            <remarks>
            <para>When <paramef name="isUtc"/> is <b>true</b>, the timezone part of the returned string will be "+0000";
            otherwise, the local timezone in "+/-HHmm" format (such as "-0500" for EST). However, if <paramref name="includeTime"/>
            is <b>false</b>, the time and timezone information will not be appended to the resulting string.
            "</para>
            <para>When uploading messages with <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method, the datetime value can contain all 3 fields (date, time, and timezone).
            When searching messages with <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> method, datetime values can contain only date field.</para>
            </remarks>
            <example>
            This sample prints UTC and local time versions of certain <see cref="T:System.DateTime"/> value as IMAP4-formatted strings. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Assume it's 31-Dec-2005 20:00:00 (24 hrs clock) now,</span>
            		<span style="color: green;">// and the local timezone is EST (UTC minus 5 hrs 0 mins).</span>
            		DateTime dtLocal = DateTime.Now;
            		DateTime dtUtc = dtLocal.ToUniversalTime();
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtLocal, <span style="color: blue;">true</span>, <span style="color: blue;">false</span>));
            		<span style="color: green;">// The output: 31-Dec-2005 20:00:00 -0500</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtUtc, <span style="color: blue;">true</span>, <span style="color: blue;">true</span>));
            		<span style="color: green;">// The output: 01-Jan-2006 01:00:00 +0000</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtLocal, <span style="color: blue;">false</span>, <span style="color: blue;">false</span>));
            		<span style="color: green;">// The output: 31-Dec-2005</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtUtc, <span style="color: blue;">false</span>, <span style="color: blue;">true</span>));
            		<span style="color: green;">// The output: 01-Jan-2006</span>
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Assume it's 31-Dec-2005 20:00:00 (24 hrs clock) now,</span>
            		<span style="color: green;">' and the local timezone is EST (UTC minus 5 hrs 0 mins).</span>
            		<span style="color: blue;">Dim</span> dtLocal, dtUtc <span style="color: blue;">As</span> DateTime
            
            		dtLocal = DateTime.Now()
            		dtUtc = dtLocal.ToUniversalTime()
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtLocal, <span style="color: blue;">True</span>, <span style="color: blue;">False</span>))
            		<span style="color: green;">' The output: 31-Dec-2005 20:00:00 -0500</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtUtc, <span style="color: blue;">True</span>, <span style="color: blue;">True</span>))
            		<span style="color: green;">' The output: 01-Jan-2006 01:00:00 +0000</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtLocal, <span style="color: blue;">False</span>, <span style="color: blue;">False</span>))
            		<span style="color: green;">' The output: 31-Dec-2005</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dtUtc, <span style="color: blue;">False</span>, <span style="color: blue;">True</span>))
            		<span style="color: green;">' The output: 01-Jan-2006</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetImapDateTimeString(System.DateTime,System.Boolean,System.String)">
            <summary>
            Returns the string containing the specified date and time value in the IMAP4 format.
            </summary>
            <param name="dt">The date and time.</param>
            <param name="includeTime">If <b>true</b>, the date, time, and timezone will be included into the resulting string; otherwise, only the date will be included.</param>
            <param name="timeZoneOffset">The timezone string in "+/-HHmm" format, or a null reference (<b>Nothing</b> in Visual Basic)
            if no timezone should be specified. Ignored if <paramref name="includeTime"/> is <b>false</b>.</param>
            <returns>The IMAP4 datetime string in "dd-MMM-yyyy HH:mm:ss +/-HHmm", "dd-MMM-yyyy HH:mm:ss", or "dd-MMM-yyyy" format.</returns>
            <remarks>
            <para>When uploading messages with <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method, the datetime value can contain all 3 fields (date, time, and timezone).
            When searching messages with <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> method, datetime values can contain only date field.</para>
            </remarks>
            <example>
            This sample prints certain <see cref="T:System.DateTime"/> value as IMAP4-formatted string. 
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Assume it's 8 Apr 2006 14:45:50 (24 hrs clock) now,</span>
            		<span style="color: green;">// and the local timezone is EDT (UTC minus 4 hrs 0 mins).</span>
            		DateTime dt = DateTime.Now;
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dt, <span style="color: blue;">true</span>, "-0400"));
            		<span style="color: green;">// The output: 08-Apr-2006 14:45:50 -0400</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dt, <span style="color: blue;">false</span>, "-0400"));
            		<span style="color: green;">// The output: 08-Apr-2006</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dt, <span style="color: blue;">true</span>, <span style="color: blue;">null</span>));
            		<span style="color: green;">// The output: 08-Apr-2006 14:45:50</span>
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Assume it's 8 Apr 2006 14:45:50 (24 hrs clock) now,</span>
            		<span style="color: green;">' and the local timezone is EDT (UTC minus 4 hrs 0 mins).</span>
            
            		<span style="color: blue;">Dim</span> dt <span style="color: blue;">As</span> DateTime = DateTime.Now
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dt, <span style="color: blue;">True</span>, "-0400"))
            		<span style="color: green;">' The output: 08-Apr-2006 14:45:50 -0400</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dt, <span style="color: blue;">False</span>, "-0400"))
            		<span style="color: green;">' The output: 08-Apr-2006</span>
            
            		Console.WriteLine(ImapUtils.GetImapDateTimeString(dt, <span style="color: blue;">True</span>, <span style="color: blue;">CType</span>(<span style="color: blue;">Nothing</span>, <span style="color: blue;">String</span>)))
            		<span style="color: green;">' The output: 08-Apr-2006 14:45:50</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.GetDateTimeFromImapDate(System.String)">
            <summary>
            Converts the datetime string in IMAP4 format into <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="dateTimeString">The datetime string in IMAP4 format (can contain: date; date and time; date, time, and timezone).</param>
            <returns>The <see cref="T:System.DateTime"/> value representing the parsed IMA4 datetime string, or <see cref="F:System.DateTime.MinValue"/> if the
            specified datetime string could not be parsed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="dateTimeString"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>The returned date is in UTC (GMT) time. To convert it into local time, the developer can use <see cref="M:System.DateTime.ToLocalTime"/> method.</remarks>
            <example>
            This sample parses a few IMAP4 datetime strings into <see cref="T:System.DateTime"/> structures
            and prints the results as UTC time and local time.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		DateTime dt;
            		<span style="color: blue;">string</span> dtString;
            
            		dtString = "08-Sep-2004 13:47:32 -0400";
            
            		Console.WriteLine(dtString);
            		dt = ImapUtils.GetDateTimeFromImapDate(dtString);
            		Console.WriteLine("UTC time: " + dt);
            		Console.WriteLine("Local time: " + dt.ToLocalTime());
            		Console.WriteLine();
            
            		dtString = "20-May-2005 00:47:32";
            
            		Console.WriteLine(dtString);
            		dt = ImapUtils.GetDateTimeFromImapDate(dtString);
            		Console.WriteLine("UTC time: " + dt);
            		Console.WriteLine("Local time: " + dt.ToLocalTime());
            		Console.WriteLine();
            
            		dtString = "31-Jan-2005";
            
            		Console.WriteLine(dtString);
            		dt = ImapUtils.GetDateTimeFromImapDate(dtString);
            		Console.WriteLine("UTC time: " + dt);
            		Console.WriteLine("Local time: " + dt.ToLocalTime());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> dt <span style="color: blue;">As</span> DateTime
            		<span style="color: blue;">Dim</span> dtString <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            
            		dtString = "08-Sep-2004 13:47:32 -0400"
            
            		Console.WriteLine(dtString)
            		dt = ImapUtils.GetDateTimeFromImapDate(dtString)
            		Console.WriteLine("UTC time: " &amp; dt)
            		Console.WriteLine("Local time: " &amp; dt.ToLocalTime())
            		Console.WriteLine()
            
            		dtString = "20-May-2005 00:47:32"
            
            		Console.WriteLine(dtString)
            		dt = ImapUtils.GetDateTimeFromImapDate(dtString)
            		Console.WriteLine("UTC time: " &amp; dt)
            		Console.WriteLine("Local time: " &amp; dt.ToLocalTime())
            		Console.WriteLine()
            
            		dtString = "31-Jan-2005"
            
            		Console.WriteLine(dtString)
            		dt = ImapUtils.GetDateTimeFromImapDate(dtString)
            		Console.WriteLine("UTC time: " &amp; dt)
            		Console.WriteLine("Local time: " &amp; dt.ToLocalTime())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.ToQuotedString(System.String)">
            <summary>
            Converts the specified string into the IMAP4 quoted string.
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/>
            </summary>
            <param name="s">The string to be converted into the IMAP4 quoted string.</param>
            <returns>The IMAP4 quoted string.</returns>
            <remarks>
            <para>This method escapes all quote and backslash characters and
            encloses the result in quotes. If <paramref name="s"/> is a null reference (<b>Nothing</b>)
            in Visual Basic), empty quoted string ("") is returned.</para>
            <para>The method can be used to build "search by text" expressions
            when using <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> or <see cref="M:MailBee.ImapMail.Imap.BeginSearch(System.Boolean,System.String,System.String,System.AsyncCallback,System.Object)"/> methods.</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.ToUtf7QuotedString(System.String)">
            <summary>
            Converts the specified string into the IMAP4 UTF-7 Modified quoted string.
            <seealso cref="M:MailBee.ImapMail.Imap.ExecuteCustomCommand(System.String,System.String)"/>
            </summary>
            <param name="s">The string (usually, a folder name) to be converted into the IMAP4 UTF-7 Modified quoted string.</param>
            <returns>The IMAP4 UTF-7 Modified quoted string.</returns>
            <remarks>
            <para>This method converts the source string contents into UTF-7 Modified string and
            escapes all quote and backslash characters and
            encloses the result in quotes. If <paramref name="s"/> is a null reference (<b>Nothing</b>)
            in Visual Basic), empty quoted string ("") is returned.</para>
            <para>The method can be used to refer international folder names when building an IMAP4 request to
            create/delete/rename or otherwise manage folder manually (i.e.
            using <see cref="M:MailBee.ImapMail.Imap.ExecuteCustomCommand(System.String,System.String)"/> method).</para>
            <note><see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/>, <see cref="M:MailBee.ImapMail.Imap.CreateFolder(System.String)"/>, etc
            apply character escaping and UTF-7 Modified transformations automatically
            (unless <see cref="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames"/> is <b>false</b>). The developer
            should not attempt to use <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7QuotedString(System.String)"/> method in this case.
            Even if <see cref="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames"/> is <b>false</b>, quote and backslash characters in folder names are still automatically escaped,
            and the developer should use <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/> rather than <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7QuotedString(System.String)"/>
            to apply UTF-7 Modified.</note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)">
            <summary>
            Converts the specified string into the IMAP4 UTF-7 Modified string.
            <seealso cref="M:MailBee.ImapMail.ImapUtils.ToUtf7QuotedString(System.String)"/>
            </summary>
            <param name="s">The string (usually, a folder name) to be converted into the IMAP4 UTF-7 Modified string.</param>
            <returns>The IMAP4 UTF-7 Modified string, or a null reference (<b>Nothing</b> in Visual Basic)
            if <paramref name="s"/> is a null reference.</returns>
            <remarks>
            <para>
            <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7QuotedString(System.String)"/> method should be used in the case if the developer constructs
            the entire request manually (for instance, for further sending it to the server using
            <see cref="M:MailBee.ImapMail.Imap.ExecuteCustomCommand(System.String,System.String)"/> method) and wants the target string being enclosed in quotes
            (including proper escaping of any quotes inside the string) as well as being UTF-7M transformed.</para>
            <para><see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/> method should be used for strings which will be quote/slash-escaped later (for instance, if the result
            of <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/> is passed to a method such as <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> which automatically
            escapes folder names).</para>
            <note>By default (<see cref="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames"/> is <b>true</b>), all <see cref="T:MailBee.ImapMail.Imap"/> methods which deal with folder names
            apply UTF-7M automatically (and there is no need to use <see cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/> method).
            Even if <see cref="P:MailBee.ImapMail.Imap.Utf7EncodeFolderNames"/> is <b>false</b> and there is a need to process (e.g. select) a folder which
            name was received from the server, it's usually easier to directly use raw names of folders (e.g. <see cref="P:MailBee.ImapMail.Folder.RawName"/>)
            than to manually convert decoded names (such as <see cref="P:MailBee.ImapMail.Folder.Name"/>) back to UTF-7M.</note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.ImapUtils.FromUtf7String(System.String)">
            <summary>
            Converts the specified string from the IMAP4 UTF-7 Modified encoding into human-readable form.
            <seealso cref="M:MailBee.ImapMail.ImapUtils.ToUtf7String(System.String)"/>
            </summary>
            <param name="s">The string (usually, a folder name) to be converted from the IMAP4 UTF-7 Modified string.</param>
            <returns>The decoded human-readable string, or a null reference (<b>Nothing</b> in Visual Basic) if <paramref name="s"/> is a null reference.</returns>
            <remarks>
            This method can be used to decode UTF-7 Mofified folder names into real values.
            <note>All <see cref="T:MailBee.ImapMail.Imap"/> methods which deal with folder names
            apply UTF-7M automatically and produce <see cref="T:MailBee.ImapMail.Folder"/> objects which already have their <see cref="P:MailBee.ImapMail.Folder.Name"/> and <see cref="P:MailBee.ImapMail.Folder.ShortName"/> values
            properly decoded (although <see cref="P:MailBee.ImapMail.Folder.RawName"/> is also available). There is no need to use <see cref="M:MailBee.ImapMail.ImapUtils.FromUtf7String(System.String)"/> method in this case.
            The same is true for folder names in other objects (such as <see cref="T:MailBee.ImapMail.FolderStatus"/>).</note>
            </remarks>
        </member>
        <member name="T:MailBee.SmtpMail.SendMailJobCollection">
            <summary>
            Represents a collection of assigned tasks of sending e-mails.
            <seealso cref="T:MailBee.SmtpMail.SendMailJob"/>
            </summary>
            <remarks>
            <para>In MailBee, instances of this class contain lists of mail messages
            or mail merge tasks which will be (or already have been) processed.</para>
            <para>
            <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>,
            and <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> properties of <see cref="T:MailBee.SmtpMail.Smtp"/> class have <see cref="T:MailBee.SmtpMail.SendMailJobCollection"/> type.</para>
            <para><see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> contains jobs to be processed, <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> - currently being
            processed, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> and <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> - finished jobs.</para>
            <para>During processing, jobs migrate between the collections (i.e. the job which had originally been placed
            into <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> moves into <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> when processing starts,
            and ends up in <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> or <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>).</para>
            <para>However, mail merge jobs may spawn additional jobs. I.e. if a mail merge job of processing 10 data table rows
            goes into processing, it resides in <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> for a while (and the number of rows yet to be processed
            sequentially decrements to 9, 8, etc). At the same time, rows which are being processed are converted into <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            objects representing tasks to process a single data row as mail merge. Thus, usually mail merge of 10 data rows (a single job) finally ends
            up in 10 <see cref="T:MailBee.SmtpMail.SendMailJob"/> objects in <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> or <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections.
            To change this behavior, create mail merge jobs using <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> overload.</para>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>This method simply calls <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> to copy the elements
            and thus may also throw exceptions specific to that method.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
            <remarks>This method simply calls <see cref="M:System.Collections.ArrayList.GetEnumerator"/> to get the enumerator.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.Add(MailBee.SmtpMail.SendMailJob)">
            <summary>
            Adds a send-mail job into the collection.
            </summary>
            <param name="job">A job of sending a single e-mail or processing one or more data table rows as mail merge.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="job"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeInvalidStateException">The collection is read-only.</exception>
            <remarks><see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection is read-only. Only MailBee itself can modify this collection.
            Other collections (<see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>)
            are editable.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.Remove(MailBee.SmtpMail.SendMailJob)">
            <summary>
            Removes the specified <see cref="T:MailBee.SmtpMail.SendMailJob"/> from the collection.
            </summary>
            <param name="job">The job (which assumes sending a single e-mail or processing one or
            more data table rows as mail merge) to be removed from the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidStateException">The collection is read-only.</exception>
            <remarks><see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection is read-only. Only MailBee itself can modify this collection.
            Other collections (<see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>)
            are editable.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the job with the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of <see cref="T:MailBee.SmtpMail.SendMailJob"/>
            to be removed from the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidStateException">The collection is read-only.</exception>
            <remarks>
            <para><see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection is read-only. Only MailBee itself can modify this collection.
            Other collections (<see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>)
            are editable.</para>
            <para>Except for read-only check, this method simply calls <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/>
            and thus may also throw exceptions specific to that method.</para>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
            <exception cref="T:MailBee.MailBeeInvalidStateException">The collection is read-only.</exception>
            <remarks>
            <see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> collection is read-only. Only MailBee itself can modify this collection.
            Other collections (<see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>, <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>)
            are editable.</remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsArray(System.Data.DataTable,System.String)">
            <summary>
            Returns the integer array containing list of data table row indices
            associated with the jobs belonging to the collection.
            <seealso cref="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)"/>
            </summary>
            <param name="mergeTable">A reference to the data table for which data row indices should be returned,
            or a null reference (<b>Nothing</b> in Visual Basic) if data rows should be returned regardless
            with which mail merge tables they are associated.</param>
            <param name="tag">The string equal to <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> of jobs for which data row indices should be returned,
            or a null reference (<b>Nothing</b> in Visual Basic) if data rows should be returned regardless
            of their <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> value. String comparison is case-sensitive, i.e. <i>Merge1</i> and <i>MERGE1</i> won't match!</param>
            <returns>The integer array containing list of data table row indices
            associated with the jobs belonging to the collection and associated with the given data table, or an empty integer array
            if the collection is empty.</returns>
            <remarks>
            This method is identical to <see cref="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)"/> except for the type of the returned value.
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)">
            <summary>
            Returns the string containing comma-separated list of data table row indices
            associated with the jobs belonging to the collection.
            <seealso cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>
            </summary>
            <param name="mergeTable">A reference to the data table for which data row indices should be returned,
            or a null reference (<b>Nothing</b> in Visual Basic) if data rows should be returned regardless
            with which mail merge tables they are associated.</param>
            <param name="tag">The string equal to <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> of jobs for which data row indices should be returned,
            or a null reference (<b>Nothing</b> in Visual Basic) if data rows should be returned regardless
            of their <see cref="P:MailBee.SmtpMail.SendMailJob.Tag"/> value. String comparison is case-sensitive, i.e. <i>Merge1</i> and <i>MERGE1</i> won't match!</param>
            <returns>The string containing comma-separated list of data table row indices
            associated with the jobs belonging to the collection and associated with the given data table, or an empty string
            if the collection is empty.</returns>
            <remarks>
            <para>This method can be typically used to get the results of mail merge (which rows have been
            processed successfully, which have been failed, etc). Later, <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)">Smtp.AddJobs</see>
            method can be used to populate <see cref="P:MailBee.SmtpMail.Smtp.JobsPending">Smtp.JobsPending</see> collection with the stored values.</para>
            <para>If, for some reason, the developer needs to work with indices of particular jobs, this can be done using
            <see cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString">SendMailJob.GetIndicesAsString</see> method. The current method internally uses
            <see cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString">SendMailJob.GetIndicesAsString</see>
            to get indices for jobs that match the given criteria. See <see cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString">SendMailJob.GetIndicesAsString</see>
            method documentation for more information on how MailBee returns indices of a single job's data rows.</para>
            <note>
            <para>To place failed jobs back into <see cref="P:MailBee.SmtpMail.Smtp.JobsPending">Smtp.JobsPending</see> collection, it's easier to use
            <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs">Smtp.RetryFailedJobs</see> method. However, <see cref="M:MailBee.SmtpMail.Smtp.RetryFailedJobs">Smtp.RetryFailedJobs</see> method
            cannot be used in the case if the application shuts down after performing mail merge cycle and thus all the information
            in the <c>Smtp.JobsXXX</c> collections gets lost.</para>
            <para>In this case, the developer may want to get the list of failed data rows and then save it into persistent storage such as a file or a database.
            Later, the application starts again, loads this file and gets the list of data rows to process,
            and processes them. This scenario can be implemented with <see cref="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)"/> and
            <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)">Smtp.AddJobs</see> methods.</para>
            </note>
            </remarks>
            <example>You can find the example at <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> topic.</example>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJobCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJobCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <value><b>true</b> if access to the collection is synchronized (thread-safe); otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJobCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
            <remarks>
            <para>Synchronized access to the collection is required in multi-thread mode when multiple threads
            can access it at the same time.</para>
            <para><see cref="P:MailBee.SmtpMail.SendMailJobCollection.SyncRoot"/> property can be used just in the same way as other <b>SyncRoot</b> properties in the .NET framework,
            for instance, <see cref="P:System.Array.SyncRoot">Array.SyncRoot</see>.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJobCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the entry to get.</param>
            <value>The element at the specified index.</value>
            <remarks>This method simply calls <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> to get the element
            and thus may also throw exceptions specific to that method.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJobCollection.IsReadOnly">
            <summary>
            Gets whether the collection may not be modified.
            </summary>
            <value><b>true</b> if the collection may not be modified and any attempt to call a method
            which modifies the collection will raise <see cref="T:MailBee.MailBeeInvalidStateException"/> exception;
            otherwise, <b>false</b>.</value>
            <remarks><see cref="P:MailBee.SmtpMail.Smtp.JobsRunning"/> is a collection which may not be modified by the application.
            MailBee maintains this collection itself, the application is only allowed to monitor it (for instance, to
            keep track of the jobs currently being processed).</remarks>
        </member>
        <member name="T:MailBee.Security.DomainKeysVerifyResult">
            <summary>
            Defines the return values of <see cref="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)"/> method.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.OK">
            <summary>
            The DomainKeys signature of the message is valid and up to date.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.MessageNotSigned">
            <summary>
            The message is not signed with DomainKeys signature.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.SignatureInvalidTag">
            <summary>
            The DomainKeys signature tag in the message headers is invalid.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.SignatureExpired">
            <summary>
            The DomainKeys signature is expired.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.DomainInvalid">
            <summary>
            The DomainKeys signature refers to non-existent sender domain.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.DnsQueryFailed">
            <summary>
            DNS query could not be performed. Perhaps, all <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> (supplied in <i>dnsRequestor</i> parameter of <see cref="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)"/> method) are dead.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.DnsEntryInvalidTag">
            <summary>
            The DomainKeys DNS record of the sender domain is incorrect.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.SignatureInvalid">
            <summary>
            The DomainKeys signature of the message is invalid.
            </summary>
        </member>
        <member name="F:MailBee.Security.DomainKeysVerifyResult.PublicKeyBadFormat">
            <summary>
            The public key contained in DomainKeys DNS record of the sender domain has wrong format.
            </summary>
        </member>
        <member name="T:MailBee.Security.DomainKeys">
            <summary>
            Provides methods for signing e-mails with DomainKeys signatures and verifying
            signatures of incoming e-mails.
            </summary>
            <remarks>
            This class serves two purposes:
            <list type="bullet">
            <item><description>Signing e-mails to be sent out with DomainKeys signature. The domain you're sending
            from (i.e. <i>company.com</i> if the From: address is <i>j.doe@company.com</i>) should have valid
            DomainKeys DNS TXT record containing the public key of your domain (this record should be placed
            not directly for sending domain but rather for its sub-domain called <i>selector</i>). The e-mails are signed with the private key
            for this domain. You can use <see cref="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.String,System.Boolean,System.String)"/> method and its overloads to sign messages with your private key.
            This method also accepts <i>selector</i> parameter so that you can use any name for selector sub-domain. For instance,
            Gmail currently uses "gamma" as <i>selector</i> value so that the entire DomainKeys domain name is "gamma._domainkey.gmail.com"
            where "._domainkey." suffix is predefined by DomainKeys standard.
            It's important to understand there can be no actual host under that name, it's just a DNS record.</description></item>
            <item><description>Verifying DomainKeys signatures of e-mails you receive. This involves using
            <see cref="T:MailBee.SmtpMail.Smtp"/> component for retrieving DomainKeys DNS record of the domain
            which sent the e-mail message in question, extracting the public key from that DNS record, and
            testing whether the signature matches that public key. No special DNS records are required on the receiving
            domain. Thus, you can always verify DomainKeys signatures regardless whether your domain has
            DomainKeys DNS record or not.</description></item>
            <note>If your domain does not have the necessary DNS TXT record holding DomainKeys data, you need to create one or
            contact your server administrator on this matter. You can create a public/private key pair
            with a tool such as OpenSSL. See RFC 4870 for more information.</note>
            </list>
            </remarks>
            <example>General examples are available in <see cref="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.String,System.Boolean,System.String)"/> and <see cref="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)"/> topics.
            Another <see cref="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.Byte[],System.String)"/> example shows advanced usage
            of signing.</example>
        </member>
        <member name="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.String,System.Boolean,System.String)">
            <summary>
            Signs a mail message with DomainKeys signature.
            </summary>
            <param name="msg">The mail message to be signed.</param>
            <param name="headersToSign">The array of the names of the headers to be included
            in the signature, or a null reference (<b>Nothing</b> in Visual Basic) if all the message
            headers should be included in the signature.</param>
            <param name="privateKeyStr">The contents or the filename of the DomainKeys private key.</param>
            <param name="isFilename">If <b>true</b>, <paramref name="privateKeyStr"/> denotes the private key filename; otherwise, the contents.</param>
            <param name="selector">The prefix of the sub-domain serving DomainKeys for the sender domain.</param>
            <returns>The signed mail message.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="msg"/> or <paramref name="privateKeyStr"/> or <paramref name="selector"/> is a null reference (<b>Nothing</b> in Visual Basic)
            or the message to be signed does not include the header specifying the sender (<i>Sender</i> or <i>From</i> header) or <paramref name="headersToSign"/> array (if not null) does not list the name of that header
            or the sender's e-mail address domain is empty.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Security.DomainKeys.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To sign a message with DomainKeys signature, you must have a private key (for instance, you can create it with OpenSSL utility).</para>
            <para>The message to be signed must have <i>Sender</i> or <i>From</i> header and the e-mail address in that header must contain non-empty domain part.
            You can include all the headers into the signature (passing a null reference as
            <paramref name="headersToSign"/> value) so that any change in the headers the message originally had will make the signature invalid.
            Alternatively, you may include only certain headers into the signature (at least <i>Sender</i> or <i>From</i>) so that other headers can be changed. This is useful
            if the signature should not become invalid if you change some headers after the message has been signed. Typical case is when the mail server
            alters the headers of the signed message (changes <i>Date</i>, <i>Message-ID</i> or other headers).</para>
            </remarks>
            <example>
            This console sample composes a new mail message, signs it with DomainKeys signature
            (DomainKeys private key is taken from a file) and sends it out.
            <note>See <see cref="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.String,System.Boolean,System.String)"/> example if you need to sign a message which may already contain
            <i>Date</i> or <i>Message-ID</i> headers which can be modified after the message gets sent (that sample contains alternative approach to the one
            listed in Remarks section).</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Compose a message.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.From.Email = "from@domain1.com";
            		msg.To.Add("to@domain2.com");
            		msg.Subject = "Hello";
            		msg.BodyPlainText = "Hello, World!";
            
            		<span style="color: green;">// We will send the message with this object.</span>
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Sign the message and assign the signed message for sending.</span>
            		DomainKeys dk = <span style="color: blue;">new</span> DomainKeys();
            		mailer.Message = dk.Sign(msg, <span style="color: blue;">null</span>, @"C:\rsa512.private", <span style="color: blue;">true</span>, "dk");
            
            		<span style="color: green;">// Send the message via SMTP server (authentication is used in this sample).</span>
            		mailer.SmtpServers.Add("mail.domain1.com", "from@domain1.com", "secret");
            		mailer.Send();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Compose a message.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.From.Email = "from@domain1.com"
            		msg.To.Add("to@domain2.com")
            		msg.Subject = "Hello"
            		msg.BodyPlainText = "Hello, World!"
            
            		<span style="color: green;">' We will send the message with this object.</span>
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Sign the message and assign the signed message for sending.</span>
            		<span style="color: blue;">Dim</span> dk <span style="color: blue;">As</span> <span style="color: blue;">New</span> DomainKeys
            		mailer.Message = dk.Sign(msg, <span style="color: blue;">Nothing</span>, "C:\rsa512.private", <span style="color: blue;">True</span>, "dk")
            
            		<span style="color: green;">' Send the message via SMTP server (authentication is used in this sample).</span>
            		mailer.SmtpServers.Add("mail.domain1.com", "from@domain1.com", "secret")
            		mailer.Send()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.Byte[],System.String)">
            <summary>
            Signs a mail message with DomainKeys signature.
            </summary>
            <param name="msg">The mail message to be signed.</param>
            <param name="headersToSign">The array of the names of the headers to be included
            in the signature, or a null reference (<b>Nothing</b> in Visual Basic) if all the message
            headers should be included in the signature.</param>
            <param name="privateKey">The binary contents of the DomainKeys private key.</param>
            <param name="selector">The prefix of the sub-domain serving DomainKeys for the sender domain.</param>
            <returns>The signed mail message.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="msg"/> or <paramref name="privateKey"/> or <paramref name="selector"/> is a null reference (<b>Nothing</b> in Visual Basic)
            or the message to be signed does not include the header specifying the sender (<i>Sender</i> or <i>From</i> header) or <paramref name="headersToSign"/> array (if not null) does not list the name of that header
            or the sender's e-mail address domain is empty.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Security.DomainKeys.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>To sign a message with DomainKeys signature, you must have a private key (for instance, you can create it with OpenSSL utility).</para>
            <para>The message to be signed must have <i>Sender</i> or <i>From</i> header and the e-mail address in that header must contain non-empty domain part.
            You can include all the headers into the signature (passing a null reference as
            <paramref name="headersToSign"/> value) so that any change in the headers the message originally had will make the signature invalid.
            Alternatively, you may include only certain headers into the signature (at least <i>Sender</i> or <i>From</i>) so that other headers can be changed. This is useful
            if the signature should not become invalid if you change some headers after the message has been signed. Typical case is when the mail server
            alters the headers of the signed message (changes <i>Date</i>, <i>Message-ID</i> or other headers).</para>
            <para>
            In the sample code to this topic, we take care of Date and Message-ID because we sign an existing,
            not a new, message. Thus, Date and Message-ID may already present in the message being signed.
            Then, when MailBee sends the message, it by default sets Date and Message-ID to new values
            and this action makes the signature invalid. To prevent this, 4 approaches are possible:
            <list type="number">
            <item><description>Set Date and Message-ID manually before signing and suppress automatic
            setting of these values by MailBee during sending. This approach is used in the sample code to this topic.</description></item>
            <item><description>Clear Date and Message-ID prior to signing. This way, Date and Message-ID
            headers won't be included into the signature at all and thus automatic setting
            of these headers by MailBee during sending won't invalidate the signature.</description></item>
            <item><description>Sign only certain headers of the message (using <paramref name="headersToSign"/> parameter).
            In this case, if Message-ID and Date headers are not included into the signature
            and you are free to modify them as you wish (for instance, let MailBee set
            these headers when the message gets sent).</description></item>
            <item><description>Simply suppress automatic setting of Message-ID and Date headers by MailBee
            during sending. In this case, the message being sent will retain the original
            Message-ID and Date values. This approach is not recommended because any e-mail ever sent
            should have unique Message-ID and having two messages with same Message-ID may
            cause some mail systems to think that such messages are duplicates.</description></item>
            </list>
            </para>
            </remarks>
            <example>
            This console sample loads a message from file, signs it with DomainKeys signature
            (DomainKeys private key is taken from a file), and sends it out. <i>Date</i> and <i>Message-ID</i>
            headers are assigned BEFORE signing because they may already exist in the loaded message and thus would be
            included in the signature. Later, when the message gets sent, they would be set automatically and thus the signature would become invalid.
            We overcome this by manual settings of these headers before signing and disabling their automatic setting at the moment of sending.
            <note>Alternatively, we could simply clear <i>Date</i> and <i>Message-ID</i> prior to signing to prevent inclusion of these headers into the signature.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file.</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\msg.eml");
            
            		<span style="color: green;">// Set new values of Date and Message-ID. These values will be included</span>
            		<span style="color: green;">// into the signature.</span>
            		msg.Date = DateTime.Now;
            		msg.SetUniqueMessageID(<span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Here we load the private key from file only to demonstrate</span>
            		<span style="color: green;">// how to use Sign method with binary array. We could simply use</span>
            		<span style="color: green;">// another overload and pass a filename.</span>
            		<span style="color: blue;">byte</span>[] privateKey = <span style="color: blue;">null</span>;
            		<span style="color: blue;">using</span> (Stream stream = <span style="color: blue;">new</span> FileStream(@"C:\private.der", FileMode.Open, FileAccess.Read))
            		{
            			privateKey = <span style="color: blue;">new</span> <span style="color: blue;">byte</span>[stream.Length];
            			stream.Read(privateKey, 0, privateKey.Length);
            		}
            
            		<span style="color: green;">// We will send the message with this object.</span>
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            
            		<span style="color: green;">// Sign the message and assign the signed message for sending.</span>
            		<span style="color: green;">// We assume "dk" is sub-domain for which DomainKeys DNS record of the</span>
            		<span style="color: green;">// sending domain is defined. I.e. if the sending domain is company.com</span>
            		<span style="color: green;">// (email is sent from "someone@company.com"), then DNS records of</span>
            		<span style="color: green;">// "dk._domainkey.company.com" domain must contain DomainKeys info.</span>
            		<span style="color: green;">// "._domainkey." suffix is required by DomainKeys standard.</span>
            		DomainKeys dk = <span style="color: blue;">new</span> DomainKeys();
            		mailer.Message = dk.Sign(msg, <span style="color: blue;">null</span>, privateKey, "dk");
            
            
            		<span style="color: green;">// Suppress automatic setting of Date and Message-ID during sending.</span>
            		mailer.Message.Builder.SetDateOnSend = <span style="color: blue;">false</span>;
            		mailer.Message.Builder.SetMessageIDOnSend = <span style="color: blue;">false</span>;
            
            		<span style="color: green;">// Send the message via SMTP server (authentication is not used in this sample).</span>
            		mailer.SmtpServers.Add("mail.company.com");
            		mailer.Send();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\msg.eml")
            
            		<span style="color: green;">' Set new values of Date and Message-ID. These values will be included</span>
            		<span style="color: green;">' into the signature.</span>
            		msg.Date = DateTime.Now
            		msg.SetUniqueMessageID(<span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Here we load the private key from file only to demonstrate</span>
            		<span style="color: green;">' how to use Sign method with binary array. We could simply use</span>
            		<span style="color: green;">' another overload and pass a filename.</span>
            		<span style="color: blue;">Dim</span> privateKey <span style="color: blue;">As</span> <span style="color: blue;">Byte</span>()
            		<span style="color: blue;">Dim</span> stream <span style="color: blue;">As</span> stream
            		<span style="color: blue;">Try</span>
            			stream = <span style="color: blue;">New</span> FileStream("C:\private.der", FileMode.Open, FileAccess.Read)
            			stream.Read(privateKey, 0, privateKey.Length)
            		<span style="color: blue;">Finally</span>
            			<span style="color: blue;">If</span> <span style="color: blue;">Not</span> stream <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				stream.Close()
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            		<span style="color: green;">' We will send the message with this object.</span>
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp
            
            		<span style="color: green;">' Sign the message and assign the signed message for sending.</span>
            		<span style="color: green;">' We assume "dk" is sub-domain for which DomainKeys DNS record of the</span>
            		<span style="color: green;">' sending domain is defined. I.e. if the sending domain is company.com</span>
            		<span style="color: green;">' (email is sent from "someone@company.com"), then DNS records of</span>
            		<span style="color: green;">' "dk._domainkey.company.com" domain must contain DomainKeys info.</span>
            		<span style="color: green;">' "._domainkey." suffix is required by DomainKeys standard.</span>
            		<span style="color: blue;">Dim</span> dk <span style="color: blue;">As</span> <span style="color: blue;">New</span> DomainKeys
            		mailer.Message = dk.Sign(msg, <span style="color: blue;">Nothing</span>, privateKey, "dk")
            
            		<span style="color: green;">' Suppress automatic setting of Date and Message-ID during sending.</span>
            		mailer.Message.Builder.SetDateOnSend = <span style="color: blue;">False</span>
            		mailer.Message.Builder.SetMessageIDOnSend = <span style="color: blue;">False</span>
            
            		<span style="color: green;">' Send the message via SMTP server (authentication is not used in this sample).</span>
            		mailer.SmtpServers.Add("mail.company.com")
            		mailer.Send()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)">
            <summary>
            Verifies the DomainKeys signature of the mail message.
            </summary>
            <param name="msg">The mail message to be verified.</param>
            <param name="dnsRequestor">The instance of <see cref="T:MailBee.SmtpMail.Smtp"/> class to be used for making DNS queries.</param>
            <returns>The result of the verification.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="msg"/> or <paramref name="dnsRequestor"/> is a null reference (<b>Nothing</b> in Visual Basic) or <paramref name="dnsRequestor"/>.<see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection is empty.</exception>
            <exception cref="T:MailBee.MailBeeException">An error occurred and <see cref="P:MailBee.Security.DomainKeys.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>In order to verify DomainKeys signature of e-mails, this method has to make DNS queries
            to the DomainKeys server of the sender. MailBee uses <see cref="T:MailBee.SmtpMail.Smtp"/> class for this.
            Thus, you must have the appropriate license for <see cref="T:MailBee.SmtpMail.Smtp"/> component
            (see <see cref="P:MailBee.SmtpMail.Smtp.LicenseKey"/> property for details).
            <note>This method may take significant time to execute because it needs to make a network operation - DNS query.
            Also, if there is a problem with the DNS server, it may fail (return <see cref="F:MailBee.Security.DomainKeysVerifyResult.DnsQueryFailed"/>)
            even if the DomainKeys signature itself is correct.</note>
            <para>This method is thread-safe: you can call <see cref="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)"/> method for the same instance of <see cref="T:MailBee.Security.DomainKeys"/> class
            to speed up validating signatures of multiple e-mails. However, you should pass separate instance of
            <see cref="T:MailBee.SmtpMail.Smtp"/> class as <paramref name="dnsRequestor"/> value for each <see cref="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)"/> method call.</para>
            </remarks>
            <example>
            This sample loads an e-mail message from file, prepares <see cref="T:MailBee.SmtpMail.Smtp"/> object for making
            DNS queries and verifies that message.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the message from file (we could also</span>
            		<span style="color: green;">// get if from the mail server or elsewhere).</span>
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            		msg.LoadMessage(@"C:\Docs\msg.eml");
            
            		<span style="color: green;">// Prepare Smtp instance for making DNS queries.</span>
            		<span style="color: green;">// We assume Smtp license key is already set in config file.</span>
            		Smtp mailer = <span style="color: blue;">new</span> Smtp();
            		mailer.DnsServers.Autodetect();
            
            		<span style="color: green;">// Verify DomainKeys signature.</span>
            		DomainKeys dk = <span style="color: blue;">new</span> DomainKeys();
            		DomainKeysVerifyResult dkResult = dk.Verify(msg, mailer);
            		Console.WriteLine(dkResult.ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Load the message from file (we could also</span>
            		<span style="color: green;">' get if from the mail server or elsewhere).</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            		msg.LoadMessage("C:\Docs\msg.eml")
            
            		<span style="color: green;">' Prepare Smtp instance for making DNS queries.</span>
            		<span style="color: green;">' We assume Smtp license key is already set in config file.</span>
            		<span style="color: blue;">Dim</span> mailer <span style="color: blue;">As</span> Smtp = <span style="color: blue;">New</span> Smtp
            		mailer.DnsServers.Autodetect()
            
            		<span style="color: green;">' Verify DomainKeys signature.</span>
            		<span style="color: blue;">Dim</span> dk <span style="color: blue;">As</span> DomainKeys = <span style="color: blue;">New</span> DomainKeys
            		<span style="color: blue;">Dim</span> dkResult <span style="color: blue;">As</span> DomainKeysVerifyResult = dk.Verify(msg, mailer)
            		Console.WriteLine(dkResult.ToString())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Security.DomainKeys.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors.
            <seealso cref="P:MailBee.Security.DomainKeys.LastResult"/>
            </summary>
            <value>
            <b>true</b> if the <see cref="T:MailBee.Security.DomainKeys"/> object will throw exceptions on errors; otherwise, <b>false</b>.
            The default value is <b>true</b>.
            </value>
            <remarks>
            If this property is set to <b>true</b> and an error occurs, an exception derived from <see cref="T:MailBee.MailBeeException"/> is thrown.
            Otherwise, the exception will not occur but the method which caused will report error (returning <b>false</b>, null reference, etc).
            Anyway, the code of the last occurred error will be contained in the <see cref="P:MailBee.Security.DomainKeys.LastResult"/> property. The list of
            all error codes is available in <see cref="T:MailBee.ErrorCodes"/> class overview.
            </remarks>
            <example>
            You can find examples of signing and verifying messages in <see cref="M:MailBee.Security.DomainKeys.Sign(MailBee.Mime.MailMessage,System.String[],System.String,System.Boolean,System.String)"/> and <see cref="M:MailBee.Security.DomainKeys.Verify(MailBee.Mime.MailMessage,MailBee.SmtpMail.Smtp)"/> topics.</example>
        </member>
        <member name="P:MailBee.Security.DomainKeys.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="T:MailBee.ErrorCodes"/>
            <seealso cref="P:MailBee.Security.DomainKeys.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="T:MailBee.Mime.EmailAddress">
            <summary>
            Provides properties and methods used to parse, examine and construct a single e-mail address.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.EmailAddressCollection"/>
            </summary>
            <remarks>
            <para>
            In the most cases, the developer does not need to directly create an <see cref="T:MailBee.Mime.EmailAddress"/> object
            to specify e-mail addresses because the most methods and properties which deal with e-mail addresses also accept string inputs as
            e-mail address values.
            </para>
            <para>
            <see cref="T:MailBee.Mime.EmailAddress"/> class offers <see cref="P:MailBee.Mime.EmailAddress.AsString"/> property for this. For instance,
            to specify <see cref="P:MailBee.Mime.MailMessage.From">MailMessage.From</see> as a string, set <c>msg.From.AsString</c> value (assuming <c>msg</c> is MailMessage instance).
            </para>
            <para>
            Multiple e-mail addresses (such as the list of To, CC or BCC recipients) can be stored in
            <see cref="T:MailBee.Mime.EmailAddressCollection"/> of <see cref="T:MailBee.Mime.EmailAddress"/> objects.
            </para>
            </remarks>
            <example>
            This sample loads a message from .EML file and displays e-mail address details for each recipient.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every recipient...</span>
            <span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> msg.To)
            {
            	<span style="color: green;">// Show full information about the recipient's e-mail address.</span>
            	Console.WriteLine("Recipient name: " + adr.DisplayName);
            	Console.WriteLine("Recipient address: " + adr.Email);
            	Console.WriteLine("Recipient info: " + adr.Remarks);
            	Console.WriteLine("Account name: " + adr.GetAccountName());
            	Console.WriteLine("Domain name: " + adr.GetDomain());
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every recipient...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> msg.To
            	<span style="color: green;">' Show full information about the recipient's e-mail address.</span>
            	Console.WriteLine("Recipient name: " &amp; adr.DisplayName)
            	Console.WriteLine("Recipient address: " &amp; adr.Email)
            	Console.WriteLine("Recipient info: " &amp; adr.Remarks)
            	Console.WriteLine("Account name: " &amp; adr.GetAccountName())
            	Console.WriteLine("Domain name: " &amp; adr.GetDomain())
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object with the specified e-mail address.
            <seealso cref="M:MailBee.Mime.EmailAddress.Parse(System.String)"/>
            </summary>
            <param name="email">The actual e-mail address (such as <i>johndoe@domain.com</i>).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="email"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>To build an <see cref="T:MailBee.Mime.EmailAddress"/> object from the full e-mail address (such as
            "John Doe, Jr." &lt;jdoe@domain.com&gt;), the developer can use <see cref="M:MailBee.Mime.EmailAddress.Parse(System.String)"/> method.
            </remarks>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress("john_doe@domain.com");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress("john_doe@domain.com")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object from the specified e-mail address and display name.
            <seealso cref="T:MailBee.Mime.EmailAddressCollection"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="email">The actual e-mail address (such as <i>johndoe@domain.com</i>).</param>
            <param name="displayName">The name which is displayed with the actual e-mail address (such as <i>John Doe</i>).
            If a null reference (<b>Nothing</b> in Visual Basic), no display name will be assigned to the e-mail address.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="email"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress("john_doe@domain.com", "John Doe");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress("john_doe@domain.com", "John Doe")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object from the specified e-mail address parts.
            <seealso cref="T:MailBee.Mime.EmailAddressCollection"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="email">The actual e-mail address (such as <i>johndoe@domain.com</i>).</param>
            <param name="displayName">The name which is displayed with the actual e-mail address (such as <i>John Doe</i>).
            If a null reference (<b>Nothing</b> in Visual Basic), no display name will be assigned to the e-mail address.</param>
            <param name="remarks">The remarks which are displayed with the actual e-mail address (such as <i>ABC Company</i>).
            If a null reference (<b>Nothing</b> in Visual Basic), no remarks will be assigned to the e-mail address.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="email"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress("john_doe@domain.com", "John Doe", "ABC Company");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress("john_doe@domain.com", "John Doe", "ABC Company")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.GetAccountNameFromEmail(System.String)">
            <summary>
            Gets the account name of the specified e-mail address as a string.
            <seealso cref="M:MailBee.Mime.EmailAddress.GetAccountName"/>
            <seealso cref="M:MailBee.Mime.EmailAddress.GetDomainFromEmail(System.String)"/>
            </summary>
            <param name="email">The e-mail address as a string.</param>
            <value>
            A string containing the account name of the specified e-mail address.
            </value>
            <remarks>
            <para>
            For instance, the <i>account</i> value will be returned for the <i>account@domain.com</i> e-mail address.
            To get the domain part, the developer should use the <see cref="M:MailBee.Mime.EmailAddress.GetDomainFromEmail(System.String)"/> method.
            </para>
            <para>To get account name part or domain part of the existing <see cref="T:MailBee.Mime.EmailAddress"/> object, the developer
            can use <see cref="M:MailBee.Mime.EmailAddress.GetAccountName"/> or <see cref="M:MailBee.Mime.EmailAddress.GetDomain"/> methods.</para>
            </remarks>
            <example>This sample extracts the account and domain names from the specified e-mail address.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            Console.WriteLine(EmailAddress.GetAccountNameFromEmail("user1@domain.com"));
            Console.WriteLine(EmailAddress.GetDomainFromEmail("user1@domain.com"));
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            Console.WriteLine(EmailAddress.GetAccountNameFromEmail("user1@domain.com"))
            Console.WriteLine(EmailAddress.GetDomainFromEmail("user1@domain.com"))
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.GetDomainFromEmail(System.String)">
            <summary>
            Gets the domain name of the specified e-mail address as a string.
            <seealso cref="M:MailBee.Mime.EmailAddress.GetDomain"/>
            <seealso cref="M:MailBee.Mime.EmailAddress.GetAccountNameFromEmail(System.String)"/>
            </summary>
            <param name="email">The e-mail address as a string.</param>
            <value>
            A string containing the domain name of the specified e-mail address.
            </value>
            <remarks>
            <para>
            For instance, the <i>domain</i> value will be returned for the <i>account@domain.com</i> e-mail address.
            To get the account name from specified e-mail address the developer should use the <see cref="M:MailBee.Mime.EmailAddress.GetAccountNameFromEmail(System.String)"/> method of the <see cref="T:MailBee.Mime.EmailAddress"/> object.
            </para>
            <para>To get an account name part or domain part of the existing <see cref="T:MailBee.Mime.EmailAddress"/> object, the developer
            can use <see cref="M:MailBee.Mime.EmailAddress.GetAccountName"/> or <see cref="M:MailBee.Mime.EmailAddress.GetDomain"/> methods.</para>
            </remarks>
            <example>This sample extracts the account and domain names from the specified e-mail address.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            Console.WriteLine(EmailAddress.GetAccountNameFromEmail("user1@domain.com"));
            Console.WriteLine(EmailAddress.GetDomainFromEmail("user1@domain.com"));
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            Console.WriteLine(EmailAddress.GetAccountNameFromEmail("user1@domain.com"))
            Console.WriteLine(EmailAddress.GetDomainFromEmail("user1@domain.com"))
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.GetAccountName">
            <summary>
            Gets the account name of the e-mail address.
            <seealso cref="M:MailBee.Mime.EmailAddress.GetDomain"/>
            <seealso cref="M:MailBee.Mime.EmailAddress.GetAccountNameFromEmail(System.String)"/>
            </summary>
            <returns>
            A string containing the account name of the e-mail address.
            </returns>
            <remarks>
            <para>
            For instance, the <i>account</i> value will be returned for the <i>account@domain.com</i> e-mail.
            To get the domain name, the developer should use the <see cref="M:MailBee.Mime.EmailAddress.GetDomain"/> method.
            </para>
            <para>
            To extract account name from the supplied e-mail address without creating an instance of <see cref="T:MailBee.Mime.EmailAddress"/> class, use <see cref="M:MailBee.Mime.EmailAddress.GetAccountNameFromEmail(System.String)"/> method.
            </para>
            </remarks>
            <example>This sample creates a new e-mail address and displays the account name of this address.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Add display name.</span>
            adr.DisplayName = "John Doe";
            
            <span style="color: green;">// Add e-mail address.</span>
            adr.Email = "jdoe@domain.com";
            
            <span style="color: green;">// Add remarks.</span>
            adr.Remarks = "ABC Company";
            
            <span style="color: green;">// Show account name string.</span>
            Console.WriteLine(adr.GetAccountName());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Add display name.</span>
            adr.DisplayName = "John Doe"
            
            <span style="color: green;">' Add e-mail address.</span>
            adr.Email = "jdoe@domain.com"
            
            <span style="color: green;">' Add remarks.</span>
            adr.Remarks = "ABC Company"
            
            <span style="color: green;">' Show account name string.</span>
            Console.WriteLine(adr.GetAccountName())
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.GetDomain">
            <summary>
            Gets the domain name of the e-mail address.
            <seealso cref="M:MailBee.Mime.EmailAddress.GetAccountName"/>
            </summary>
            <returns>
            A string containing the domain name of the e-mail address.
            </returns>
            <remarks>
            For instance, the <i>domain</i> value will be returned for the <i>account@domain.com</i> e-mail.
            To get the account name, the developer should use the <see cref="M:MailBee.Mime.EmailAddress.GetAccountName"/> method.
            </remarks>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object and displays the domain name of this address.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Add display name.</span>
            adr.DisplayName = "John Doe";
            
            <span style="color: green;">// Add e-mail address.</span>
            adr.Email = "jdoe@domain.com";
            
            <span style="color: green;">// Add remarks.</span>
            adr.Remarks = "ABC Company";
            
            <span style="color: green;">// Show domain name string.</span>
            Console.WriteLine(adr.GetDomain());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Add display name.</span>
            adr.DisplayName = "John Doe"
            
            <span style="color: green;">' Add e-mail address.</span>
            adr.Email = "jdoe@domain.com"
            
            <span style="color: green;">' Add remarks.</span>
            adr.Remarks = "ABC Company"
            
            <span style="color: green;">' Show domain name string.</span>
            Console.WriteLine(adr.GetDomain())
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.ToString">
            <summary>
            Returns the e-mail address as a string.
            <seealso cref="P:MailBee.Mime.EmailAddress.AsString"/>
            <seealso cref="P:MailBee.Mime.EmailAddress.Email"/>
            <seealso cref="P:MailBee.Mime.EmailAddress.DisplayName"/>
            </summary>
            <returns>A string containing the full e-mail address (including display name and remarks if any).</returns>
            <remarks>
            The return value of this method is equivalent to the <see cref="P:MailBee.Mime.EmailAddress.AsString"/> property value. However,
            with <see cref="P:MailBee.Mime.EmailAddress.AsString"/> property, the developer can both get and set the e-mail address.
            </remarks>
            <example>This sample creates the new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object and converts it into a string.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Set the display name.</span>
            adr.DisplayName = "John Doe";
            
            <span style="color: green;">// Set the e-mail address.</span>
            adr.Email = "jdoe@domain.com";
            
            <span style="color: green;">// Set the remarks.</span>
            adr.Remarks = "ABC Company";
            
            <span style="color: green;">// Show full e-mail address.</span>
            Console.WriteLine(adr.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Set the display name.</span>
            adr.DisplayName = "John Doe"
            
            <span style="color: green;">' Set the e-mail address.</span>
            adr.Email = "jdoe@domain.com"
            
            <span style="color: green;">' Set the remarks.</span>
            adr.Remarks = "ABC Company"
            
            <span style="color: green;">' Show full e-mail address.</span>
            Console.WriteLine(adr.ToString())
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddress.Parse(System.String)">
            <summary>
            Parses an e-mail address string and returns <see cref="T:MailBee.Mime.EmailAddress"/> object which represents the given e-mail addresses.
            </summary>
            <param name="addressString">The full e-mail address string (with optional remarks and friendly name) to parse.</param>
            <returns><see cref="T:MailBee.Mime.EmailAddress"/> object representing <paramref name="addressString"/> address.</returns>
            <example>This sample creates a new instance of <see cref="T:MailBee.Mime.EmailAddress"/> object from string.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = EmailAddress.Parse("User &lt;user@domain.com&gt;");
            Console.WriteLine(adr.DisplayName);
            Console.WriteLine(adr.Email);
            </code>
            <code lang="VB">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> EmailAddress = EmailAddress.Parse("User &lt;user@domain.com&gt;")
            Console.WriteLine(adr.DisplayName)
            Console.WriteLine(adr.Email)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.EmailAddress.AsString">
            <summary>
            Gets or sets the full e-mail address (with optional remarks and display name) as a string.
            <seealso cref="P:MailBee.Mime.EmailAddress.Email"/>
            <seealso cref="P:MailBee.Mime.EmailAddress.DisplayName"/>
            </summary>
            <value>
            A string containing all the full e-mail address
            (including display name and remarks if availalble).
            </value>
            <remarks>
            Typical values you can assign to this property:
            <list type="bullet">
            <item><description>jdoe@domain.com</description></item>
            <item><description>&lt;jdoe@domain.com&gt;</description></item>
            <item><description>John Doe &lt;jdoe@domain.com&gt;</description></item>
            <item><description>"John Doe, Jr." &lt;jdoe@domain.com&gt;</description></item>
            <item><description>"John Doe, Jr." &lt;jdoe@domain.com&gt; (ABC Company)</description></item>
            </list>
            Once this property is set, the <see cref="P:MailBee.Mime.EmailAddress.DisplayName"/>,
            <see cref="P:MailBee.Mime.EmailAddress.Email"/> and <see cref="P:MailBee.Mime.EmailAddress.Remarks"/> property values will be updated as well.
            </remarks>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object and displays the actual e-mail address part (without display name, etc).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Set e-mail.</span>
            adr.AsString = "\"John Doe\" &lt;jdoe@domain.com&gt;";
            
            <span style="color: green;">// Show the actual e-mail address without any additional information.</span>
            Console.WriteLine(adr.Email);
            
            <span style="color: green;">// As a result, "jdoe@domain.com" string will be printed in the console window.</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr = <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Set e-mail.</span>
            adr.AsString = """John Doe"" &lt;jdoe@domain.com&gt;"
            
            <span style="color: green;">' Show the actual e-mail address without any additional information.</span>
            Console.WriteLine(adr.Email)
            
            <span style="color: green;">' As a result, "jdoe@domain.com" string will be printed in the console window.</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.EmailAddress.DisplayName">
            <summary>
            Gets or sets the name which is displayed with the e-mail address.
            <seealso cref="P:MailBee.Mime.EmailAddress.AsString"/>
            <seealso cref="P:MailBee.Mime.EmailAddress.Email"/>
            </summary>
            <value>
            A string containing the display name of the current e-mail address. The default value is an empty string.
            </value>
            <remarks>
            For instance, if the full e-mail address string is <i>Support Team &lt;support@domain.com&gt; (My Company)</i>,
            the <i>Support Team</i> is a display name.
            </remarks>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object and displays the full address (including display name).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Add display name.</span>
            adr.DisplayName = "John Doe";
            
            <span style="color: green;">// Add e-mail address.</span>
            adr.Email = "doe@domain.com";
            
            <span style="color: green;">// Add remarks.</span>
            adr.Remarks = "ABC Company";
            
            <span style="color: green;">// Show entire e-mail address string.</span>
            Console.WriteLine(adr.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Add display name.</span>
            adr.DisplayName = "John Doe"
            
            <span style="color: green;">' Add e-mail address.</span>
            adr.Email = "doe@domain.com"
            
            <span style="color: green;">' Add remarks.</span>
            adr.Remarks = "ABC Company"
            
            <span style="color: green;">' Show entire e-mail address string.</span>
            Console.WriteLine(adr.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.EmailAddress.Email">
            <summary>
            Gets or sets the actual e-mail address as a string.
            <seealso cref="P:MailBee.Mime.EmailAddress.AsString"/>
            <seealso cref="P:MailBee.Mime.EmailAddress.DisplayName"/>
            </summary>
            <value>
            A string containing the actual e-mail address (without <see cref="P:MailBee.Mime.EmailAddress.DisplayName"/> and <see cref="P:MailBee.Mime.EmailAddress.Remarks"/>).
            </value>
            <remarks>
            For instance, if the full e-mail address string is <i>Support Team &lt;support@domain.com&gt; (My Company)</i>,
            the actual e-mail address is <i>support@domain.com</i>.
            </remarks>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object and displays the full address (including e-mail address).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Add display name.</span>
            adr.DisplayName = "John Doe";
            
            <span style="color: green;">// Add e-mail address.</span>
            adr.Email = "doe@domain.com";
            
            <span style="color: green;">// Add remarks.</span>
            adr.Remarks = "ABC Company";
            
            <span style="color: green;">// Show entire e-mail address string.</span>
            Console.WriteLine(adr.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Add display name.</span>
            adr.DisplayName = "John Doe"
            
            <span style="color: green;">' Add e-mail address.</span>
            adr.Email = "doe@domain.com"
            
            <span style="color: green;">' Add remarks.</span>
            adr.Remarks = "ABC Company"
            
            <span style="color: green;">' Show entire e-mail address string.</span>
            Console.WriteLine(adr.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.EmailAddress.Remarks">
            <summary>
            Contains the additional information (remarks) about the e-mail address.
            <seealso cref="P:MailBee.Mime.EmailAddress.AsString"/>
            <seealso cref="P:MailBee.Mime.EmailAddress.Email"/>
            </summary>
            <value>
            A string containing the remarks about e-mail address.
            </value>
            <remarks>
            For instance, if the full e-mail address string is <i>Support Team &lt;support@domain.com&gt; (My Company)</i>,
            the remarks are <i>My Company</i>.
            </remarks>
            <example>This sample creates a new instance of the <see cref="T:MailBee.Mime.EmailAddress"/> object and displays the full address (including display name and remarks).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress();
            
            <span style="color: green;">// Add display name.</span>
            adr.DisplayName = "John Doe";
            
            <span style="color: green;">// Add e-mail address.</span>
            adr.Email = "doe@domain.com";
            
            <span style="color: green;">// Add remarks.</span>
            adr.Remarks = "ABC Company";
            
            <span style="color: green;">// Show entire e-mail address string.</span>
            Console.WriteLine(adr.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new EmailAddress object.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> <span style="color: blue;">New</span> EmailAddress
            
            <span style="color: green;">' Add display name.</span>
            adr.DisplayName = "John Doe"
            
            <span style="color: green;">' Add e-mail address.</span>
            adr.Email = "doe@domain.com"
            
            <span style="color: green;">' Add remarks.</span>
            adr.Remarks = "ABC Company"
            
            <span style="color: green;">' Show entire e-mail address string.</span>
            Console.WriteLine(adr.ToString())
            </code>
            </example>
        </member>
        <member name="T:MailBee.Mime.Constants">
            <summary>
            Summary description for Constants.
            </summary>
        </member>
        <member name="T:MailBee.ErrorCodes">
            <summary>
            Provides error code values returned by <see cref="P:MailBee.MailBeeException.ErrorCode"/> property of
            MailBee exceptions and <b>LastResult</b> property of MailBee classes implementing this property.
            </summary>
            <remarks>
            <para>The MailBee classes implementing <b>LastResult</b> property are:
            <list type="bullet">
            <item><description><see cref="T:MailBee.SmtpMail.Smtp"/> class (<see cref="P:MailBee.SmtpMail.Smtp.LastResult"/> property)</description></item>
            <item><description><see cref="T:MailBee.Pop3Mail.Pop3"/> class (<see cref="P:MailBee.Pop3Mail.Pop3.LastResult"/> property)</description></item>
            <item><description><see cref="T:MailBee.ImapMail.Imap"/> class (<see cref="P:MailBee.ImapMail.Imap.LastResult"/> property)</description></item>
            <item><description><see cref="T:MailBee.Mime.MailMessage"/> class (<see cref="P:MailBee.Mime.MailMessage.LastResult"/> property)</description></item>
            <item><description><see cref="T:MailBee.Mime.Attachment"/> class (<see cref="P:MailBee.Mime.Attachment.LastResult"/> property)</description></item>
            <item><description><see cref="T:MailBee.Mime.AttachmentCollection"/> class (<see cref="P:MailBee.Mime.AttachmentCollection.LastResult"/> property)</description></item>
            </list></para>
            <para>The following table lists all the error codes in ascending order:
            <list type="table">
            <listheader><term>Name</term><term>Value</term></listheader>
            <item><description><see cref="F:MailBee.ErrorCodes.OK"/></description><description>0</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.LicenseError"/></description><description>1</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.Unknown"/></description><description>2</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.Busy"/></description><description>3</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoOperationToEnd"/></description><description>4</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.AbortedByUser"/></description><description>5</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InternalError"/></description><description>6</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ExternalError"/></description><description>7</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.IllegalInMultiThreadMode"/></description><description>8</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.IllegalContext"/></description><description>9</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.IllegalRaiseEventsMode"/></description><description>10</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.IllegalInCurrentState"/></description><description>11</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ObjectReadOnly"/></description><description>12</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.JobInBatchFailed"/></description><description>13</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ArgumentInvalid"/></description><description>20</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ArgumentNull"/></description><description>21</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ArgumentEmpty"/></description><description>22</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ArgumentOutOfRange"/></description><description>23</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.IOException"/></description><description>30</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.FileNotFoundException"/></description><description>31</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.UnauthorizedAccessException"/></description><description>32</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.XmlException"/></description><description>33</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.WebException"/></description><description>34</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CryptographicException"/></description><description>35</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.StreamCannotRead"/></description><description>40</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.StreamCannotWrite"/></description><description>41</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.EncodingError"/></description><description>42</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidDateFormat"/></description><description>43</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidDataFormat"/></description><description>44</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.SocketException"/></description><description>50</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoIP4AddressesFound"/></description><description>51</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.SocketTimeout"/></description><description>52</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.AbortedByLocalHost"/></description><description>53</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ConnectionRefused"/></description><description>54</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.AbortedByServer"/></description><description>55</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.HostNotFound"/></description><description>56</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.HostDown"/></description><description>57</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.HostUnreachable"/></description><description>58</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ConnectionReset"/></description><description>59</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.SocketDisposed"/></description><description>60</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ProxyConnectionDeclined"/></description><description>70</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ProxyAuthMethodsNotAccepted"/></description><description>71</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ProxyUserPassAuthFailed"/></description><description>72</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ProxyGssApiAuthFailed"/></description><description>73</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NotConnected"/></description><description>100</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.AlreadyConnected"/></description><description>101</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.AlreadySsl"/></description><description>102</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NotLoggedIn"/></description><description>110</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.AlreadyLoggedIn"/></description><description>111</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoCredentials"/></description><description>112</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.BadCredentials"/></description><description>113</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.UnsupportedLoginMethod"/></description><description>114</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoSupportedLoginMethods"/></description><description>115</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.SaslAnswerRejected"/></description><description>116</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.LoginWin32Error"/></description><description>117</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NegativeResponse"/></description><description>120</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidResponse"/></description><description>121</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.EmptyResponseLine"/></description><description>122</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidBinaryResponse"/></description><description>123</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InconsistentResponse"/></description><description>124</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidResponseItem"/></description><description>125</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidBase64DataInResponse"/></description><description>126</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.StartTlsNotAvailable"/></description><description>130</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.SslWin32Error"/></description><description>140</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.BadDnsResponseHeader"/></description><description>200</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsInvalidQName"/></description><description>201</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsQueryMismatch"/></description><description>210</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsRecursionRequired"/></description><description>211</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoDnsServersSpecified"/></description><description>212</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoDnsAttemptsLeft"/></description><description>213</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsFormatErrorReply"/></description><description>220</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsFailureReply"/></description><description>221</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsNameErrorReply"/></description><description>222</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsNotSupportedReply"/></description><description>223</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsQueryRefusedReply"/></description><description>224</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DnsUnknownReply"/></description><description>225</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoSmtpServersSpecified"/></description><description>300</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NotHelloed"/></description><description>310</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.EhloNotSupported"/></description><description>311</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoSender"/></description><description>312</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.BadSender"/></description><description>313</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoRecipients"/></description><description>314</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.BadRecipient"/></description><description>315</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoAllowedRecipients"/></description><description>316</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DataNotAllowed"/></description><description>317</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.BadMessageData"/></description><description>318</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.BdatRejected"/></description><description>319</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.MessageDataTooLarge"/></description><description>320</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.Conversion8bitTo7Bit"/></description><description>330</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoSmtpOrDnsServersSpecified"/></description><description>400</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoDomainsToSendFor"/></description><description>401</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoDomainsForMXLookup"/></description><description>402</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.EmptyHostNameForDnsQuery"/></description><description>403</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidDomainInCache"/></description><description>410</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.DeadDomainSmtpMXesInCache"/></description><description>411</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.Pop3AuthCommandUnknown"/></description><description>500</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.Pop3CapaCommandUnknown"/></description><description>501</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapFolderNotSelected"/></description><description>600</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapResponseNotFound"/></description><description>610</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapMessageIndexNotFound"/></description><description>611</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NoMessageInImapResponse"/></description><description>612</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.InvalidImapEnvelope"/></description><description>613</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapUidPlusNotSupported"/></description><description>620</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapQuotaNotSupported"/></description><description>621</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapIdleNotSupported"/></description><description>622</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImapSortNotSupported"/></description><description>623</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefSignatureInvalid"/></description><description>1000</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefUnexpectedEndOfStream"/></description><description>1001</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefLevelTypeInvalid"/></description><description>1002</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefAttributeChecksumInvalid"/></description><description>1003</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefAttributeLevelInvalid"/></description><description>1004</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefMapiTypeUnknown"/></description><description>1005</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefGuidInvalid"/></description><description>1006</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefCompressedRtfHeaderInvalid"/></description><description>1007</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefCompressedRtfDataSizeMismatch"/></description><description>1008</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefCompressedRtfCrc32Failed"/></description><description>1009</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.TnefUnknownRtfCompressionType"/></description><description>10010</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CryptoProviderWin32Error"/></description><description>1100</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CertificateStoreWin32Error"/></description><description>1101</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CertificateWin32Error"/></description><description>1102</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.SmimeWin32Error"/></description><description>1103</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CertificateValidationError"/></description><description>1110</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CertificateDataInvalid"/></description><description>1111</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.NotImpersonated"/></description><description>1120</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.ImpersonationWin32Error"/></description><description>1121</description></item>
            <item><description><see cref="F:MailBee.ErrorCodes.CryptoPrivateKeyInvalid"/></description><description>1130</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.LicenseError">
            <summary>
            The license key is invalid or not specified.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.Unknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.Busy">
            <summary>
            The component is busy with lengthy or asynchronous operation.
            </summary>
            <remarks>For instance, this error may occur if asynchronous operation
            started with BeginXXX method was not completed with EndXXX method call.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NoOperationToEnd">
            <summary>
            Asynchonous method completion with EndXXX method is not possible,
            since no corresponding BeginXXX method has been called before.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.AbortedByUser">
            <summary>
            The current operation was aborted by user.
            </summary>
            <remarks>This error indicates <b>Abort</b> method was called.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.InternalError">
            <summary>
            MailBee internal error. Please contact Afterlogic support team if you encounter this error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ExternalError">
            <summary>
            The application code threw an exception while handling MailBee event.
            </summary>
            <remarks>This error code indicates the application is subscribed to a certain MailBee
            event, MailBee raises this event, and the application code responsible for
            handling this event throws an exception. The developer should fix the event handling
            code in order to get rid of this error.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.IllegalInMultiThreadMode">
            <summary>
            The requested operation cannot be performed in multi-thread mode.
            </summary>
            <remarks>For instance, <see cref="M:MailBee.SmtpMail.Smtp.GetServerResponse"/> call is ambiguous in multi-thread
            mode, since it's not possible to determine for which SMTP connection the last response must be
            returned if there are multiple SMTP connections being opened. If you encounter this error,
            use <see cref="T:MailBee.SmtpMail.Smtp"/> component events to keep track of SMTP sessions.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.IllegalContext">
            <summary>
            The requested operation cannot be performed in the current context.
            </summary>
            <remarks>For instance, it's not possible to get the SMTP server response using
            <see cref="M:MailBee.SmtpMail.Smtp.GetServerResponse"/> method when the component is performing MX lookup query
            against the DNS server.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.IllegalRaiseEventsMode">
            <summary>
            <b>Wait</b> method cannot be used if <b>RaiseEventsViaMessageLoop</b> is <b>true</b>.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.IllegalInCurrentState">
            <summary>
            The method cannot run in the current state of the object.
            </summary>
            <remarks>For instance, it's not possible to append a partial message
            (i.e. call <see cref="M:MailBee.Mime.MailMessage.AppendPartialMessage(MailBee.Mime.MailMessage)"/>) to the message
            which is not partial.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.ObjectReadOnly">
            <summary>
            The object (e.g. collection) is read-only for user code.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.JobInBatchFailed">
            <summary>
            One of the jobs in a batch failed and the component is configured to stop processing when this happens.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ArgumentInvalid">
            <summary>
            The specified argument value is invalid.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ArgumentNull">
            <summary>
            A null reference (<b>Nothing</b> in Visual Basic) is not allowed as the argument value.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ArgumentEmpty">
            <summary>
            A null reference (<b>Nothing</b> in Visual Basic) or an empty string/array/collection is not allowed as the argument value.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ArgumentOutOfRange">
            <summary>
            The argument value is out of range.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.IOException">
            <summary>
            <see cref="T:System.IO.IOException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.FileNotFoundException">
            <summary>
            <see cref="T:System.IO.FileNotFoundException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.UnauthorizedAccessException">
            <summary>
            <see cref="T:System.UnauthorizedAccessException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.XmlException">
            <summary>
            <see cref="T:System.Xml.XmlException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.WebException">
            <summary>
            <see cref="T:System.Net.WebException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.CryptographicException">
            <summary>
            <see cref="T:System.Security.Cryptography.CryptographicException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.StreamCannotRead">
            <summary>
            The supplied <see cref="T:System.IO.Stream"/> object cannot be read.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.StreamCannotWrite">
            <summary>
            The supplied <see cref="T:System.IO.Stream"/> object cannot be written to.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.EncodingError">
            <summary>
            An exception occurred while performing string conversion.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidDateFormat">
            <summary>
            The supplied datetime string has invalid format.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidDataFormat">
            <summary>
            The supplied data string has invalid format.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.SocketException">
            <summary>
            <see cref="T:System.Net.Sockets.SocketException"/> occurred.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoIP4AddressesFound">
            <summary>
            No IPv4 compatible address has been found for the specified host.
            </summary>
            <remarks>Usually, this error indicates the host is IPv6-only.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.SocketTimeout">
            <summary>
            The network operation has timed out.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.AbortedByLocalHost">
            <summary>
            The software on the local computer has aborted the connection.
            </summary>
            <remarks>This error indicates some software (such as firewall, anti-virus, etc),
            operating on the same machine where MailBee is running, aborted the connection.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.ConnectionRefused">
            <summary>
            The remote host refused the connection attempt initiated by the client.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.AbortedByServer">
            <summary>
            The remote host has aborted the connection.
            </summary>
            <remarks>This error indicates zero-length data packet has been received from the server
            at unexpected time.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.HostNotFound">
            <summary>
            The specified host was not found.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.HostDown">
            <summary>
            The specified host is down.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.HostUnreachable">
            <summary>
            There is no known network route to the specified host.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ConnectionReset">
            <summary>
            An existing connection was forcibly closed by the remote host.
            </summary>
            <remarks>This error indicates socket error WSAECONNRESET (10054) has occurred.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.SocketDisposed">
            <summary>
            The <see cref="T:System.Net.Sockets.Socket"/> object was unexpectedly closed.
            </summary>
            <remarks>This error may occur after the application closes the connection directly, not using <c>Disconnect</c>
            method of a mailer component. For example, calling <c>mailer.GetSocket().Close()</c>
            (<c>mailer</c> is an instance of <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, or <see cref="T:MailBee.ImapMail.Imap"/> class).</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.ProxyConnectionDeclined">
            <summary>
            The proxy server declined to act as a proxy gateway for the given client.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ProxyAuthMethodsNotAccepted">
            <summary>
            None of the methods listed by the client to the proxy server are acceptable.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ProxyUserPassAuthFailed">
            <summary>
            Proxy Username/Password authentication failed.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ProxyGssApiAuthFailed">
            <summary>
            Proxy GSSAPI authentication Failed.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NotConnected">
            <summary>
            Not yet connected to the server. Call <b>Connect</b> first.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.AlreadyConnected">
            <summary>
            Already connected to the server.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.AlreadySsl">
            <summary>
            Already in SSL/TLS mode.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NotLoggedIn">
            <summary>
            Not yet logged in the user account on the server. Call <b>Login</b> first.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.AlreadyLoggedIn">
            <summary>
            Already logged in the user account on the server.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoCredentials">
            <summary>
            No account name and/or password was supplied for the login.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.BadCredentials">
            <summary>
            Invalid account name and/or password was supplied for the login.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.UnsupportedLoginMethod">
            <summary>
            The requested authentication method is not supported by the server.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoSupportedLoginMethods">
            <summary>
            None of the requested authentication methods is supported by the server.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.SaslAnswerRejected">
            <summary>
            The server refused the authentication data sent by the client. Authentication failed.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.LoginWin32Error">
            <summary>
            Win32 function related to Windows Integrated authentication returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NegativeResponse">
            <summary>
            The server responded with the negative reply.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidResponse">
            <summary>
            The response received from the server cannot be parsed.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.EmptyResponseLine">
            <summary>
            The response from the server contains just a response terminator but no data.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidBinaryResponse">
            <summary>
            The response received from the DNS server cannot be parsed.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InconsistentResponse">
            <summary>
            The response data received from the server do not match the data previously received from the server.
            </summary>
            <remarks>For instance, if the server reports the mailbox contains x messages,
            but the following response contains the details on y messages (so the server contradicts to itself),
            this error occurs.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidResponseItem">
            <summary>
            A particular element of the response data cannot be parsed.
            </summary>
            <remarks>For instance, if the server response should contain a number but this number cannot be parsed,
            this error occurs.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidBase64DataInResponse">
            <summary>
            The server response is expected to contain Base64 encoded data but this data cannot be decoded from base64.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.StartTlsNotAvailable">
            <summary>
            The server does not advertize STARTTLS extension.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.SslWin32Error">
            <summary>
            SSL-related Win32 function returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.BadDnsResponseHeader">
            <summary>
            The response from the DNS server contains invalid header.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsInvalidQName">
            <summary>
            The specified host name does not conform with Domain Name System rules.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsQueryMismatch">
            <summary>
            The ID of the DNS server response if different from the ID of the request sent by the client.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsRecursionRequired">
            <summary>
            The DNS server must support recursion in order to complete the request.
            </summary>
            <remarks>If this error occurs, the developer should try another DNS server.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NoDnsServersSpecified">
            <summary>
            At least one DNS server must be specified in order to start the requested operation.
            </summary>
            <remarks>For instance, <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection must contain
            at least one DNS server in order to make direct send operation possible.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NoDnsAttemptsLeft">
            <summary>
            The DNS server is down, and no more retry attempts left.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoDnsServersAvailable">
            <summary>
            At least one DNS server IP must be registered in the system in order to start the requested operation.
            </summary>
            <remarks>For instance, <see cref="M:MailBee.SmtpMail.Smtp.QuickSend(MailBee.Mime.MailMessage)"/> method needs to perform MX queries to DNS servers.
            If no DNS server is registered in the system, this method can't do its job. In this case, the developer can manually
            specify DNS or SMTP server and use <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method to send out mails.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsFormatErrorReply">
            <summary>
            The DNS server replied with "Format Error" status code.
            </summary>
            <remarks>The name server was unable to interpret the query.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsFailureReply">
            <summary>
            The DNS server replied with "Server failure" status code.
            </summary>
            <remarks>The name server was unable to process this query due to a problem with the name server.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsNameErrorReply">
            <summary>
            The DNS server replied with "Name Error" status code.
            </summary>
            <remarks>Meaningful only for responses from an authoritative name server,
            this code signifies that the domain name referenced in the query does not exist.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsNotSupportedReply">
            <summary>
            The DNS server replied with "Not Implemented" status code.
            </summary>
            <remarks>The name server does not support the requested kind of query.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsQueryRefusedReply">
            <summary>
            The DNS server replied with "Refused" status code.
            </summary>
            <remarks>The name server refuses to perform the specified operation for
            policy reasons.  For example, a name server may not wish to provide the
            information to the particular requester, or a name server may not wish to perform
            a particular operation (e.g., zone transfer) for particular data.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DnsUnknownReply">
            <summary>
            The DNS server replied with unknown status code.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoSmtpServersSpecified">
            <summary>
            At least one SMTP relay server must be specified in order to start the requested operation.
            </summary>
            <remarks>For instance, <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection must contain
            at least one SMTP relay server in order to connect or send mail to an SMTP relay server.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NotHelloed">
            <summary>
            Not yet sent initial greeting to the SMTP server. Call <see cref="M:MailBee.SmtpMail.Smtp.Hello"/> first.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.EhloNotSupported">
            <summary>
            The SMTP server does not support any ESMTP extensions.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoSender">
            <summary>
            No sender is specified for the mail message.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.BadSender">
            <summary>
            The SMTP server refused the e-mail address of the mail message sender.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoRecipients">
            <summary>
            No recipients are specified for the mail message.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.BadRecipient">
            <summary>
            The SMTP server refused the e-mail address of the mail message recipient.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoAllowedRecipients">
            <summary>
            The SMTP server refused the e-mail addresses of all the recipients of the mail message.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.DataNotAllowed">
            <summary>
            The SMTP server responded with a negative reply to the DATA command.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.BadMessageData">
            <summary>
            The SMTP server rejected the message data sent by the client.
            </summary>
            <remarks>The most common reasons of this error:
            <list type="bullet">
            <item><description>The message is too large</description></item>
            <item><description>The server thinks the message contains SPAM or virus</description></item>
            <item><description>The message contains invalid headers</description></item>
            <item><description>The message sender and/or recipients specified in the message header
            differ from the actual sender/recipients, and the server does not allow this (the developer may consider adding
            Resent-From: header to the message specifying the actual sender e-mail address as the header value)</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.BdatRejected">
            <summary>
            The server responded with a negative reply to BDAT command (although the server claims to support
            CHUNKING extension).
            </summary>
            <value>The developer may consider to disable CHUNKING by setting
            <see cref="F:MailBee.SmtpMail.ExtendedSmtpOptions.NoChunking"/> flag in
            <see cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/> value.</value>
        </member>
        <member name="F:MailBee.ErrorCodes.MessageDataTooLarge">
            <summary>
            The message is too large.
            </summary>
            <remarks>This error occurs when the server supports SIZE extension, and the fact
            of exceeding the maximum allowed message size can be determined before actual submission of the message
            to the server.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.Conversion8bitTo7Bit">
            <summary>
            7bit-to-8bit conversion of the message data is required.
            </summary>
            <remarks>Occurs if the following conditions are met:
            <list type="bullet">
            <item><description>The message contains 8bit data</description></item>
            <item><description>The server does not support transmitting 8bit data</description></item>
            <item><description>MailBee is told not to ignore 7bit-to-8bit issue
            (<see cref="P:MailBee.SmtpMail.Smtp.Conversion8BitTo7bit"/> value is not
            <see cref="F:MailBee.SmtpMail.Smtp8bitDataConversion.DoNothing"/>)</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NoSmtpOrDnsServersSpecified">
            <summary>
            At least one DNS or SMTP relay server must be specified in order to send mail.
            </summary>
            <remarks>Either <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> or <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            collection must contain at least one SMTP relay or DNS server in order to send mail.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NoDomainsToSendFor">
            <summary>
            The list of MX servers of recipient domains is empty.
            </summary>
            <remarks>Please contact AfterLogic support team if you encounter this error.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.NoDomainsForMXLookup">
            <summary>
            The list of recipient domains is empty.
            </summary>
            <remarks>Please contact AfterLogic support team if you encounter this error.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.EmptyHostNameForDnsQuery">
            <summary>
            Cannot perform DNS query for an empty host name.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidDomainInCache">
            <summary>
            It's known (from the DNS cache) that the requested domain name does not exist.
            </summary>
            <remarks>It does not make sense to make DNS MX query regarding the domain name
            since the previous attempt to do so produced negative response from the DNS server and this fact was recorded in the DNS cache.
            The developer can use <see cref="M:MailBee.DnsMX.DnsCache.Clear"/> and <see cref="P:MailBee.DnsMX.DnsCache.Timeout"/>
            members of <see cref="T:MailBee.DnsMX.DnsCache"/> class to affect this behavior.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.DeadDomainSmtpMXesInCache">
            <summary>
            It's known (from the DNS cache) that all DNS MX records for the domain point to dead hosts.
            </summary>
            <remarks>It does not make sense to connect to any of the SMTP MX server of this domain
            since the previous attempt to do so failed and this fact was recorded in the DNS cache.
            The developer can use <see cref="M:MailBee.DnsMX.DnsCache.Clear"/> and <see cref="P:MailBee.DnsMX.DnsCache.Timeout"/>
            members of <see cref="T:MailBee.DnsMX.DnsCache"/> class to affect this behavior.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.Pop3AuthCommandUnknown">
            <summary>
            The POP3 server does not support optional AUTH command. SASL authentication will be disabled.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.Pop3CapaCommandUnknown">
            <summary>
            The POP3 server does not support optional CAPA command. Certain POP3 extensions will be disabled.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapFolderNotSelected">
            <summary>
            This command requires a folder be selected on the IMAP4 server. Call <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/> or <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> first.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapResponseNotFound">
            <summary>
            No required data found in the server response.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapMessageIndexNotFound">
            <summary>
            The message with the specified index does not exist on the server.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NoMessageInImapResponse">
            <summary>
            No required mail message data found in the server response.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.InvalidImapEnvelope">
            <summary>
            The envelope data is corrupted or incorrect. Some properties of <see cref="T:MailBee.ImapMail.Envelope"/> object
            may contain invalid values.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapUidPlusNotSupported">
            <summary>
            The IMAP4 server does not support UIDPLUS capability required for the current operation to complete.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapQuotaNotSupported">
            <summary>
            The IMAP4 server does not support QUOTA capability required to obtain account and folder quotas.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapIdleNotSupported">
            <summary>
            The IMAP4 server does not support IDLE capability required to go into IDLE mode.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImapSortNotSupported">
            <summary>
            The IMAP4 server does not support SORT capability required to perform sorted search.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefSignatureInvalid">
            <summary>
            The supplied data does not have a valid TNEF signature.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefUnexpectedEndOfStream">
            <summary>
            Unexpected end of TNEF stream.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefLevelTypeInvalid">
            <summary>
            Invalid TNEF level type.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefAttributeChecksumInvalid">
            <summary>
            Invalid checksum on TNEF attribute.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefAttributeLevelInvalid">
            <summary>
            Invalid TNEF attribute level.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefMapiTypeUnknown">
            <summary>
            Unknown MAPI type of TNEF data.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefGuidInvalid">
            <summary>
            Invalid TNEF Guid.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefCompressedRtfHeaderInvalid">
            <summary>
            Invalid compressed-RTF header.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefCompressedRtfDataSizeMismatch">
            <summary>
            Compressed-RTF data size mismatch.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefCompressedRtfCrc32Failed">
            <summary>
            Compressed-RTF CRC32 failed.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.TnefUnknownRtfCompressionType">
            <summary>
            Unknown compression type
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.CryptoProviderWin32Error">
            <summary>
            Win32 function related to a crypto provider API returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.CertificateStoreWin32Error">
            <summary>
            Win32 function related to certificate store API returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.CertificateWin32Error">
            <summary>
            Certificate-related Win32 function returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.SmimeWin32Error">
            <summary>
            S/MIME-related Win32 function returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.CertificateValidationError">
            <summary>
            Certificate validation failed.
            </summary>
            <remarks>The developer can use <see cref="M:MailBee.Security.Certificate.Validate"/> method
            to find out which properties of the certificate failed.</remarks>
        </member>
        <member name="F:MailBee.ErrorCodes.CertificateDataInvalid">
            <summary>
            Could not restore the certificate from the supplied data.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.NotImpersonated">
            <summary>
            Not impersonated yet. Call <see cref="M:MailBee.Security.Impersonation.LogonAs(System.String,System.String,System.String)"/> first.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.ImpersonationWin32Error">
            <summary>
            Impersonation-related WinAPI function returned an error.
            </summary>
        </member>
        <member name="F:MailBee.ErrorCodes.CryptoPrivateKeyInvalid">
            <summary>
            Could not decode the private key.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeInvalidTextResponseException">
            <summary>
            The exception that is thrown when the text response received from the server cannot be parsed,
            and the response data is available.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeInvalidResponseException">
            <summary>
            An abstract parent for all exceptions which indicate that a response received from the server
            cannot be parsed.
            </summary>
            <remarks>Typical example of the situation when the server response cannot be parsed is an attempt
            to connect to a POP3 server via the SMTP protocol (or vice versa).</remarks>
        </member>
        <member name="P:MailBee.MailBeeInvalidTextResponseException.ResponseEncoding">
            <summary>
            Gets the encoding which was used to convert response bytes received from the server
            into a string.
            </summary>
            <value>The <see cref="T:System.Text.Encoding"/> which was used to convert response bytes received from the server
            into a string.</value>
            <remarks>This encoding is taken from <b>ResponseEncoding</b> property value (such as
            <see cref="P:MailBee.Pop3Mail.Pop3.ResponseEncoding">Pop3.ResponseEncoding</see>,
            <see cref="P:MailBee.ImapMail.Imap.ResponseEncoding">Imap.ResponseEncoding</see> or
            <see cref="P:MailBee.SmtpMail.Smtp.ResponseEncoding">Smtp.ResponseEncoding</see>).</remarks>
        </member>
        <member name="P:MailBee.MailBeeInvalidTextResponseException.ResponseString">
            <summary>
            Gets the string which contains the invalid response data.
            </summary>
            <value>The string which contains the invalid response data.</value>
        </member>
        <member name="T:MailBee.MailBeeInvalidTextResponseItemException">
            <summary>
            The exception that is thrown when a particular element of the text response received
            from the server cannot be parsed, and the response data is available.
            </summary>
            <remarks>For instance, this exception may occur if the response is expected to contain a number,
            but the actual value cannot be converted into a number.</remarks>
        </member>
        <member name="T:MailBee.MailBeeProtocolExtensionNotSupportedException">
            <summary>
            The exception that is thrown when the mail server does not support certain extension (capability)
            which is required for the current operation to complete successfully.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeLoginNotPossibleException">
            <summary>
            An abstract parent for all exceptions which indicate that the authentication process cannot
            proceed under current conditions.
            </summary>
            <remarks>This kind of exception can be thought of as "nothing to try". For instance, the
            account name is not specified, the authentication methods requested by the application
            are missing in the server capabilities list, etc.</remarks>
        </member>
        <member name="T:MailBee.MailBeeLoginNoSupportedMethodsException">
            <summary>
            The exception that is thrown when the authentication process cannot proceed, because
            no authentication methods allowed by the application for authentication are supported by
            the server.
            </summary>
            <remarks>If this exception occurs, the developer may consider to use <see cref="F:MailBee.AuthenticationMethods.Auto"/>
            as a value of:
            <list type="bullet">
            <item><description><i>authMethods</i> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.Connect(System.String,System.Int32,System.Boolean)"/> method (for POP3)</description></item>
            <item><description><i>authMethods</i> parameter of <see cref="M:MailBee.ImapMail.Imap.Connect(System.String,System.Int32)"/> method (for IMAP4)</description></item>
            <item><description><see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/> property (for SMTP)</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:MailBee.MailBeeLoginNoSupportedMethodsException.RequestedMethods">
            <summary>
            Gets a set of authentication methods which were requested by the application
            as allowed for the login process.
            </summary>
            <value>An <see cref="T:MailBee.AuthenticationMethods"/> value containing bitwise combination
            of values of individual authentication methods allowed for the login process by the application.</value>
        </member>
        <member name="P:MailBee.MailBeeLoginNoSupportedMethodsException.SupportedMethods">
            <summary>
            Gets a set of authentication methods which are supported by the server.
            </summary>
            <value>An <see cref="T:MailBee.AuthenticationMethods"/> value containing bitwise combination
            of values of individual authentication methods supported by the server.</value>
        </member>
        <member name="T:MailBee.MailBeeLoginNoCredentialsException">
            <summary>
            The exception that is thrown when the authentication process cannot proceed, because
            no account name and/or password was provided by the application.
            </summary>
        </member>
        <member name="P:MailBee.MailBeeLoginNoCredentialsException.AccountName">
            <summary>
            Gets the account name which was provided by the application.
            </summary>
            <value>The account name which was passed by the application, or <see cref="F:System.String.Empty"/> if
            no account name was specified.</value>
        </member>
        <member name="P:MailBee.MailBeeLoginNoCredentialsException.Password">
            <summary>
            Gets the account password which was provided by the application.
            </summary>
            <value>The account password which was passed by the application, or <see cref="F:System.String.Empty"/> if
            no account password was specified.</value>
        </member>
        <member name="T:MailBee.MailBeeLoginWin32Exception">
            <summary>
            The exception that is thrown when underlying Win32 Schannel implementation of
            Windows Integrated authentication returns an error.
            </summary>
            <remarks>The developer can obtain Win32 error code from <see cref="P:MailBee.MailBeeLoginWin32Exception.NativeErrorCode"/> property.</remarks>
        </member>
        <member name="T:MailBee.IMailBeeWin32Exception">
            <summary>
            When implemented by an exception class, indicates that this exception is thrown when underlying Win32 function returns an error.
            </summary>
            <remarks>
            <para>Exceptions which implement <see cref="T:MailBee.IMailBeeWin32Exception"/> can only be thrown by those methods of
            MailBee.NET assembly which make calls to unmanaged code. Although the assembly itself
            does not contain any unmanaged code, it still needs to call some Win32 functions related to
            security: TLS/SSL functionality, certificates, and Windows Integrated version of NTLM authentication.</para>
            The developer can obtain Win32 error code from <see cref="P:MailBee.IMailBeeWin32Exception.NativeErrorCode"/> property.
            </remarks>
        </member>
        <member name="P:MailBee.IMailBeeWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by a function of Windows API.
            </summary>
            <value>An integer value representing the error code returned by a function of Windows API.</value>
        </member>
        <member name="P:MailBee.MailBeeLoginWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by the operating system function related to Windows Integrated authentication implementation.
            </summary>
            <value>An integer value representing the error code returned by one of the functions
            of Microsoft NTLM security package.</value>
        </member>
        <member name="T:MailBee.Security.CertificateStore">
            <summary>
            Provides the methods and properties for accessing certificate stores.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="T:MailBee.Security.CertificateCollection"/>
            </summary>
            <remarks>
            <para>Certificate store is a persistent or memory storage of certificates.
            There is a number of types of certificate stores supported by Windows (and therefore by MailBee), listed
            in <see cref="T:MailBee.Security.CertStoreType"/> enumeration.</para>
            <para>Stores of <see cref="F:MailBee.Security.CertStoreType.System"/> type play key role in many security procedures.
            You can view the contents of the system stores in "Internet Options/Content/Certificates" dialog of Internet Explorer.
            <see cref="T:MailBee.Security.CertificateStore"/> class defines several constants which refer to the standard system stores
            (such as <see cref="F:MailBee.Security.CertificateStore.Personal"/>). Also, you can create your own system stores with <see cref="M:MailBee.Security.CertificateStore.RegisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)"/> method.
            </para>
            <note>ASP.NET application developers should be aware that the system certificate stores
            of ASP.NET user may contain less number of certificates in comparison to those of regular users. See
            S/MIME Demo for ASP.NET sample project shipped with the product for more information on how
            to deal with this.</note>
            </remarks>
            <example>This sample opens the standard system store and displays the details for each certificate.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateCollection coll = store.GetAllCertificates();
            
            <span style="color: blue;">foreach</span> (Certificate cert <span style="color: blue;">in</span> coll)
            {
            	Console.WriteLine("Issued to: " + cert.IssuedTo);
            	Console.WriteLine("Issued by: " + cert.IssuedBy);
            	Console.WriteLine("Email: " + cert.EmailAddress);
            	Console.WriteLine("Valid to: " + cert.ValidToDate);
            	Console.WriteLine("Has private key: " + cert.HasPrivateKey);
            	Console.WriteLine("------------------------------");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> coll <span style="color: blue;">As</span> CertificateCollection = store.GetAllCertificates()
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> cert <span style="color: blue;">As</span> Certificate <span style="color: blue;">In</span> coll
            	Console.WriteLine("Issued to: " &amp; cert.IssuedTo)
            	Console.WriteLine("Issued by: " &amp; cert.IssuedBy)
            	Console.WriteLine("Email: " &amp; cert.EmailAddress)
            	Console.WriteLine("Valid to: " &amp; cert.ValidToDate)
            	Console.WriteLine("Has private key: " &amp; cert.HasPrivateKey)
            	Console.WriteLine("------------------------------")
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="F:MailBee.Security.CertificateStore.Personal">
            <summary>
            Gets the name of the system certificate store containing personal certificates.
            </summary>
            <value>Gets "MY" string.</value>
            <remarks>
            <para>"MY" store corresponds to "Personal" tab of Certificates dialog in Internet Explorer options.</para>
            <para>The common use of this store with S/MIME is signing e-mails you send or decrypting e-mails you receive.</para>
            <para>To open a system certificate store by its name, use
            <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String)"/> constructor.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Security.CertificateStore.OtherPeople">
            <summary>
            Gets the name of the system certificate store containing certificates of other entities such as your address book members.
            </summary>
            <value>Gets "AddressBook" string.</value>
            <remarks>
            <para>"AddressBook" store corresponds to "Other People" tab of Certificates dialog in Internet Explorer options.</para>
            <para>The common use of this store with S/MIME is checking signatures fo e-mails you receive or encrypting e-mails you send.</para>
            <para>To open a system certificate store by its name, use
            <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String)"/> constructor.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Security.CertificateStore.IntermediateCA">
            <summary>
            Gets the name of the system certificate store containing certificates of intermediate certification authorities.
            </summary>
            <value>Gets "CA" string.</value>
            <remarks>
            <para>"CA" store corresponds to "Intermediate Certification Authorities" tab of Certificates dialog in Internet Explorer options.</para>
            <para>The common use of this store is holding certificates of organizations which issue end-user certificates.</para>
            <para>To open a system certificate store by its name, use
            <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String)"/> constructor.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Security.CertificateStore.RootCA">
            <summary>
            Gets the name of the system certificate store containing certificates of trusted root certification authorities.
            </summary>
            <value>Gets "Root" string.</value>
            <remarks>
            <para>"Root" store corresponds to "Trusted Root Certification Authorities" tab of Certificates dialog in Internet Explorer options.</para>
            <para>The common use of this store is holding certificates of organizations which issue end-user certificates.</para>
            <para>To open a system certificate store by its name, use
            <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String)"/> constructor.</para>
            </remarks>
        </member>
        <member name="M:MailBee.Security.CertificateStore.#ctor">
            <overloads>Opens an existing or creates a new store of certificates.</overloads>
            <summary>
            Creates a new certificate store in memory.
            </summary>
            <remarks>This overload is typically used for creating a store which can then be filled
            with one or more certificates and either saved to a file or passed to a method which accepts
            <see cref="T:MailBee.Security.CertificateStore"/> as a parameter. The latter case is useful when you need
            to notify a method about a store with some certificates in it but you do not already
            have such a store. For instance, you can call <see cref="M:MailBee.Security.Certificate.Validate(MailBee.Security.CertificateStore)"/>
            method with <i>extraStore</i> parameter pointing to a store containing certificates of all certification authorities
            needed for validation. However, it's possible that some of these certificates reside in another store. Since
            you cannot pass two stores to <see cref="M:MailBee.Security.Certificate.Validate(MailBee.Security.CertificateStore)"/> method, you should either
            create a persistent store containing all the certificates from the both stores, or combine them at runtime by creating a new memory
            store and then adding certificates from both stores to the memory one. The latter approach does not require
            permissions to create files or new registry entries (which would be needed for modifying persistent certificate stores
            which reside in files or Windows registry).</remarks>
        </member>
        <member name="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String)">
            <summary>
            Opens an existing or creates a new store of certificates.
            </summary>
            <param name="storeName">The name of the certificate store or the filename if the store is a file.</param>
            <param name="storeType">The type of the certificate store.</param>
            <param name="pfxPassword">PFX password if <paramref name="storeType"/> is <see cref="F:MailBee.Security.CertStoreFileType.Pfx"/>; otherwise,
            can be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><parameref name="storeName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string while <paramref name="storeType"/> is not <see cref="F:MailBee.Security.CertStoreType.Memory"/>.</exception>
            <exception cref="T:MailBee.MailBeeIOException">The specified PFX file can not be opened or read.</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error during opening the certificate store.</exception>
            <remarks>
            <para>Only <see cref="F:MailBee.Security.CertStoreType.Memory"/> stores can be created. Other stores can only be opened.
            It's possible, however, to create a memory store and then save it into a file using <see cref="M:MailBee.Security.CertificateStore.SaveToFile(System.String,MailBee.Security.CertStoreFileType,System.String)"/> method.
            To create a new system store, use <see cref="M:MailBee.Security.CertificateStore.RegisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)"/> method.</para>
            <para>If you open a file store and then modify its contents, it won't be updated on disk until you save it back to the file.
            A system store, however, gets updated immediately in its registry location each time you call any method which modifies this store.</para>
            <note>This overload opens system stores which are located in HKEY_CURRENT_USER registry branch only.
            To open a system store located in another branch of the registry (such as HKEY_LOCAL_MACHINE which is user-independent), use
            <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String,MailBee.Security.CryptoServiceProvider,MailBee.Security.RegistryStoreLocation)"/> overload.</note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.CertificateStore"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String,MailBee.Security.CryptoServiceProvider,MailBee.Security.RegistryStoreLocation)">
            <summary>
            Opens an existing or creates a new store of certificates.
            </summary>
            <param name="storeName">The name of the certificate store or the filename if the store is a file.</param>
            <param name="storeType">The type of the certificate store.</param>
            <param name="pfxPassword">PFX password if <paramref name="storeType"/> is <see cref="F:MailBee.Security.CertStoreFileType.Pfx"/>;
            otherwise, not used and can be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="csp">A reference to <see cref="T:MailBee.Security.CryptoServiceProvider"/> instance descripting Cryptographic service provider (CSP)
            to be used for the given store, or a null reference (<b>Nothing</b> in Visual Basic) if the default CSP should be used.</param>
            <param name="registryLocation">Windows registry location of the system store if <paramref name="storeType"/> is <see cref="F:MailBee.Security.CertStoreType.System"/>;
            otherwise, not used and can be any <see cref="T:MailBee.Security.RegistryStoreLocation"/> value.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><parameref name="storeName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string while <paramref name="storeType"/> is not <see cref="F:MailBee.Security.CertStoreType.Memory"/>.</exception>
            <exception cref="T:MailBee.MailBeeIOException">The specified PFX file can not be opened or read.</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error during opening the certificate store.</exception>
            <remarks>
            <para>Only <see cref="F:MailBee.Security.CertStoreType.Memory"/> stores can be created. Other stores can only be opened.
            It's possible, however, to create a memory store and then save it into a file using <see cref="M:MailBee.Security.CertificateStore.SaveToFile(System.String,MailBee.Security.CertStoreFileType,System.String)"/> method.
            To create a new system store, use <see cref="M:MailBee.Security.CertificateStore.RegisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)"/> method.</para>
            <para>If you open a file store and then modify its contents, it won't be updated on disk until you save it back to the file.
            A system store, however, gets updated immediately in its registry location each time you call any method which modifies this store.</para>
            </remarks>
        </member>
        <member name="M:MailBee.Security.CertificateStore.GetAllCertificates">
            <summary>
            Creates and returns a collection of all the certificates contained in the certificate store.
            <seealso cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)"/>
            </summary>
            <returns>A <see cref="T:MailBee.Security.CertificateCollection"/> object containing all the certificates in the certificate store.</returns>
            <remarks>
            <para>The returned collection is not bound to the originating certificate store.
            For instance, when a certificate is removed from the returned collection, it will remain in the store.
            To remove a certificate from the store, use <see cref="M:MailBee.Security.CertificateStore.DeleteCertificate(MailBee.Security.Certificate)"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.CertificateStore"/> class documentation.</example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.AddCertificate(MailBee.Security.Certificate,System.Boolean)">
            <summary>
            Adds the specified certificate to the store.
            <seealso cref="M:MailBee.Security.CertificateStore.AddCertificates(MailBee.Security.CertificateCollection,System.Boolean)"/>
            </summary>
            <param name="cert">The certificate that should be added.</param>
            <param name="overwrite">Sets whether the same certificate (if it already exists in the store) should be overwritten or not.</param>
            <returns><b>true</b> if certificate was successfully added to the store; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error on attempt to add the certificate to the store and <see cref="P:MailBee.Security.CertificateStore.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample registers a new certificate store, reads a certificate from a file and adds this certificate to the newly created store.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            CertificateStore.RegisterSystemStore(@"TestStore", RegistryStoreLocation.CurrentUser);
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(@"TestStore", CertStoreType.System, <span style="color: blue;">null</span>);
            Certificate cert = <span style="color: blue;">new</span> Certificate(@"C:\Temp\test.cer", CertFileType.Cer, <span style="color: blue;">null</span>);
            store.AddCertificate(cert, <span style="color: blue;">true</span>);
            </code>
            <code lang="VB">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            CertificateStore.RegisterSystemStore("TestStore", RegistryStoreLocation.CurrentUser)
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("TestStore", CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> cert <span style="color: blue;">As</span> Certificate = <span style="color: blue;">New</span> Certificate("C:\Temp\test.cer", CertFileType.Cer, <span style="color: blue;">Nothing</span>)
            store.AddCertificate(cert, <span style="color: blue;">True</span>)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.AddCertificates(MailBee.Security.CertificateCollection,System.Boolean)">
            <summary>
            Adds all the certificates from the specified collection to the store.
            <seealso cref="T:MailBee.Security.CertificateCollection"/>
            <seealso cref="M:MailBee.Security.CertificateStore.AddCertificate(MailBee.Security.Certificate,System.Boolean)"/>
            </summary>
            <param name="certs">The collection of the certificates to be added to the store.</param>
            <param name="overwrite">Sets whether the same certificates should be overwritten if they already exist in the store.</param>
            <returns><b>true</b> if the certificates were successfully added to the store; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="certs"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error on attempt to add any of the certificates to the store and <see cref="P:MailBee.Security.CertificateStore.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>If this method successfully added at least one certificate from the collection and then failed while
            adding the next certificate, those certificates which have already been added will remain in the store.
            In other words, adding multiple certificates is not a single transaction.
            </remarks>
            <example>This sample creates a special store and fills it with the certificates belonging to <i>user@domain.com</i> entity and saves this store to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            CertificateStore newStore = <span style="color: blue;">new</span> CertificateStore("", CertStoreType.Memory, <span style="color: blue;">null</span>);
            CertificateStore myStore = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateCollection coll = myStore.FindCertificates("user@domain.com", CertificateFields.EmailAddress);
            
            newStore.AddCertificates(coll, <span style="color: blue;">false</span>);
            newStore.SaveToFile(@"C:\Temp\store.sst", CertStoreFileType.Sst, <span style="color: blue;">null</span>);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> newStore <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("", CertStoreType.Memory, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> myStore <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> coll <span style="color: blue;">As</span> CertificateCollection = myStore.FindCertificates("user@domain.com", CertificateFields.EmailAddress)
            
            newStore.AddCertificates(coll, <span style="color: blue;">False</span>)
            newStore.SaveToFile("C:\Temp\store.sst", CertStoreFileType.Sst, <span style="color: blue;">Nothing</span>)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.DeleteCertificate(MailBee.Security.Certificate)">
            <summary>
            Removes the specified certificate from the store.
            </summary>
            <param name="cert">The certificate that should be removed from the store.</param>
            <returns><b>true</b> if the specified certificate was successfully removed; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error on attempt to remove the certificates from the store and <see cref="P:MailBee.Security.CertificateStore.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample removes all certificates having the specified e-mail address from the store.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore("TestStore", CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateCollection coll = store.FindCertificates("user@domain.com", CertificateFields.EmailAddress);
            
            <span style="color: blue;">foreach</span> (Certificate cert <span style="color: blue;">in</span> coll)
            {
            	store.DeleteCertificate(cert);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("TestStore", CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> coll <span style="color: blue;">As</span> CertificateCollection = store.FindCertificates("user@domain.com", CertificateFields.EmailAddress)
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> cert <span style="color: blue;">As</span> Certificate <span style="color: blue;">In</span> coll
            	store.DeleteCertificate(cert)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)">
            <summary>
            Searches the certificates in the store by the specified criteria.
            <seealso cref="T:MailBee.Security.CertificateFields"/>
            <seealso cref="T:MailBee.Security.CertificateCollection"/>
            </summary>
            <param name="substring">The string to be searched in the specified fields of the certificates in the store.</param>
            <param name="fields">The set of certificate fields where to perform the search.</param>
            <returns>A <see cref="T:MailBee.Security.CertificateCollection"/> of all matching certificates.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="substring"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Search is case-insensitive (<i>ABC</i> and <i>abc</i> are treated the same). For instance, if
            <paramref name="substring"/> is <i>John</i> and the corresponding certificate field is <i>"johndoe@company.com"</i>,
            this certificate will appear in the resulting collection.</remarks>
            <example>The example is available in <see cref="M:MailBee.Security.CertificateStore.DeleteCertificate(MailBee.Security.Certificate)"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.SaveToFile(System.String,MailBee.Security.CertStoreFileType,System.String)">
            <summary>
            Saves the certificate store into a file.
            <seealso cref="T:MailBee.Security.CertStoreFileType"/>
            </summary>
            <param name="filename">The filename of the file to be saved.</param>
            <param name="fileType">The format of the file store to be saved.</param>
            <param name="pfxPassword">PFX password to protect the store from unauthorized access, or a null reference (<b>Nothing</b> in Visual Basic) if <paramref name="fileType"/> is not <see cref="F:MailBee.Security.CertStoreFileType.Pfx"/>.</param>
            <returns><b>true</b> if the store was successfully saved to disk; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error on attempt to save the store to disk and <see cref="P:MailBee.Security.CertificateStore.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>The example is available in <see cref="M:MailBee.Security.CertificateStore.AddCertificates(MailBee.Security.CertificateCollection,System.Boolean)"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.RegisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)">
            <summary>
            Registers a new system certificate store.
            </summary>
            <param name="name">The system store name.</param>
            <param name="registryLocation">The store location in the registry.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error on attempt to register a store.</exception>
            <remarks>Use this method to create your own system stores.</remarks>
            <example>The example is available in <see cref="M:MailBee.Security.CertificateStore.AddCertificate(MailBee.Security.Certificate,System.Boolean)"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.UnregisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)">
            <summary>
            Unregisters an existing system certificate store.
            </summary>
            <param name="name">The name of the existing system store.</param>
            <param name="registryLocation">The store location in the registry.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">Win32 returned an error on attempt to register a store.</exception>
            <remarks>Unregistering the store physically removes the store along with all the certificates.
            <note>It's not recommended to unregister system stores unless they had been created by your applications.
            Unregistering a store which is used by the operating system may cause unpredictable results.</note>
            </remarks>
            <example>This sample registers a store, fills it with some certificates (copied from another store), and unregisters it.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            CertificateStore.RegisterSystemStore("TestStore", RegistryStoreLocation.CurrentUser);
            CertificateStore newStore = <span style="color: blue;">new</span> CertificateStore("TestStore", CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateStore myStore = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateCollection coll = myStore.FindCertificates("thawte", CertificateFields.EmailAddress);
            
            newStore.AddCertificates(coll, <span style="color: blue;">false</span>);
            coll = newStore.GetAllCertificates();
            
            <span style="color: blue;">foreach</span> (Certificate cert <span style="color: blue;">in</span> coll)
            {
            	Console.WriteLine(cert.IssuedTo);
            	Console.WriteLine(cert.IssuedBy);
            	Console.WriteLine(cert.EmailAddress);
            	Console.WriteLine(cert.ValidToDate);
            	Console.WriteLine("Has private key: " + cert.HasPrivateKey);
            	Console.WriteLine("------------------------------");
            }
            CertificateStore.UnregisterSystemStore("TestStore", RegistryStoreLocation.CurrentUser);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            CertificateStore.RegisterSystemStore("TestStore", RegistryStoreLocation.CurrentUser)
            <span style="color: blue;">Dim</span> newStore <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("TestStore", CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> myStore <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> coll <span style="color: blue;">As</span> CertificateCollection = myStore.FindCertificates("thawte", CertificateFields.EmailAddress)
            
            newStore.AddCertificates(coll, <span style="color: blue;">False</span>)
            coll = newStore.GetAllCertificates()
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> cert <span style="color: blue;">As</span> Certificate <span style="color: blue;">In</span> coll
            	Console.WriteLine(cert.IssuedTo)
            	Console.WriteLine(cert.IssuedBy)
            	Console.WriteLine(cert.EmailAddress)
            	Console.WriteLine(cert.ValidToDate)
            	Console.WriteLine("Has private key: " &amp; cert.HasPrivateKey)
            	Console.WriteLine("------------------------------")
            <span style="color: blue;">Next</span>
            CertificateStore.UnregisterSystemStore("TestStore", RegistryStoreLocation.CurrentUser)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CertificateStore.Dispose">
            <summary>
            Releases the resources associated with the current <see cref="T:MailBee.Security.CertificateStore"/> object.
            </summary>
        </member>
        <member name="P:MailBee.Security.CertificateStore.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the object will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the object methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Security.CertificateStore.LastResult"/> members to get more information about the error.
            <note>
            Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee.NET usage will still be thrown.
            <para>
            Typical example of such errors is passing invalid arguments to methods. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be supressed.
            </para>
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.Security.CertificateStore.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="P:MailBee.Security.CertificateStore.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of the constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="T:MailBee.Security.Certificate">
            <summary>
            Provides methods and properties for accessing a digital certificate.
            <seealso cref="T:MailBee.Security.CertificateStore"/>
            <seealso cref="T:MailBee.Security.ClientServerCertificates"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <remarks>
            <para><see cref="T:MailBee.Security.Certificate"/> class represents a digital certificate in MailBee.</para>
            <para>
            Digital certificate is a statement which uses a digital signature to bind together a public key of an entity
            with information about this entity. After the trusted organization (also called a certification authority, CA)
            has verified the entity, it issues the requested certificate to the entity.
            </para>
            <para>
            Certificates can contain different types of data, such as
            the serial number of the certificate, the algorithm used to sign the certificate, the name
            of the CA that issued the certificate, the name and public key of the entity requesting the certificate,
            and the CA's signature.
            </para>
            <para><see cref="P:MailBee.Security.Certificate.EmailAddress"/> and <see cref="P:MailBee.Security.Certificate.HasPrivateKey"/> are the most important properties of the certificate.</para>
            <note>To use this class, make sure MailBee.NET Security Powerup is licensed
            (see <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property for details).</note>
            </remarks>
            <example>This sample loads the certificate from the specified file and displays its fields.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Certificate cert = <span style="color: blue;">new</span> Certificate(@"C:\Temp\certificate.cer", CertFileType.Cer, <span style="color: blue;">null</span>);
            
            Console.WriteLine("Email address: " + cert.EmailAddress);
            Console.WriteLine("Private key available: " + cert.HasPrivateKey);
            Console.WriteLine("Issued by: " + cert.IssuedBy);
            Console.WriteLine("Issued to: " + cert.IssuedTo);
            Console.WriteLine("Issuer: " + cert.IssuedBy);
            Console.WriteLine("Key algorithm: " + cert.KeyAlgorithmString);
            Console.WriteLine("Name: " + cert.Name);
            Console.WriteLine("Public key: " + cert.PublicKeyString);
            Console.WriteLine("Serial number: " + cert.SerialNumberString);
            Console.WriteLine("Subject: " + cert.Subject);
            Console.WriteLine("Valid from " + cert.ValidFromDate + " till " + cert.ValidToDate);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> cert <span style="color: blue;">As</span> Certificate = <span style="color: blue;">New</span> Certificate("C:\Temp\certificate.cer", CertFileType.Cer, <span style="color: blue;">Nothing</span>)
            
            Console.WriteLine("Email address: " &amp; cert.EmailAddress)
            Console.WriteLine("Private key available: " &amp; cert.HasPrivateKey.ToString())
            Console.WriteLine("Issued by: " &amp; cert.IssuedBy)
            Console.WriteLine("Issued to: " &amp; cert.IssuedTo)
            Console.WriteLine("Issuer: " &amp; cert.IssuedBy)
            Console.WriteLine("Key algorithm: " &amp; cert.KeyAlgorithmString)
            Console.WriteLine("Name: " &amp; cert.Name)
            Console.WriteLine("Public key: " &amp; cert.PublicKeyString)
            Console.WriteLine("Serial number: " &amp; cert.SerialNumberString)
            Console.WriteLine("Subject: " &amp; cert.Subject)
            Console.WriteLine("Valid from " &amp; cert.ValidFromDate &amp; " till " &amp; cert.ValidToDate)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Certificate.#ctor(System.String,MailBee.Security.CertFileType,System.String)">
            <summary>
            Loads the certificate from a file and returns it as <see cref="T:MailBee.Security.Certificate"/> object.
            </summary>
            <param name="filename">The path to the certificate file.</param>
            <param name="fileType">The certificate file type.</param>
            <param name="pfxFilePassword">The .PFX file password, or a null reference (<b>Nothing</b> in Visual Basic)
            if <parameref name="fileType"/> is not <see cref="T:MailBee.Security.CertFileType">Pfx</see>.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><parameref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">The specified file can not be opened or read.</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateParsingException"><parameref name="filename"/> does not designate the certificate of the specified type.</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateWin32Exception">Win32 returned an error during processing the certificate data.</exception>
            <exception cref="T:MailBee.MailBeeLicenseException">MailBee.NET Security Powerup not licensed.</exception>
        </member>
        <member name="M:MailBee.Security.Certificate.#ctor(System.Byte[],MailBee.Security.CertFileType,System.String)">
            <summary>
            Loads the certificate from binary data and returns it as <see cref="T:MailBee.Security.Certificate"/> object.
            </summary>
            <param name="bytes">Binary content of the certificate data.</param>
            <param name="fileType">The format of the certificate data.</param>
            <param name="pfxFilePassword">The .PFX file password, or a null reference (<b>Nothing</b> in Visual Basic)
            if <parameref name="fileType"/> is not <see cref="T:MailBee.Security.CertFileType">Pfx</see>.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><parameref name="bytes"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateParsingException"><parameref name="bytes"/> is not a certificate data of the specified format.</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateWin32Exception">Win32 returned an error during during processing the certificate data.</exception>
            <exception cref="T:MailBee.MailBeeLicenseException">MailBee.NET Security Powerup not licensed.</exception>
            <remarks>Although the certificate is being read from memory, not from a disk file,
            <parameref name="fileType"/> still applies. For instance, when the certificate is being
            loaded from a disk file, MailBee simply reads the file data into memory and then calls the current
            constructor to create <see cref="T:MailBee.Security.Certificate"/> object accordingly the specified
            <parameref name="fileType"/> value and the data loaded from the file.</remarks>
        </member>
        <member name="M:MailBee.Security.Certificate.SaveToFile(System.String,MailBee.Security.CertFileType,System.String)">
            <summary>
            Saves the certificate into a file on disk.
            <seealso cref="M:MailBee.Security.Certificate.#ctor(System.String,MailBee.Security.CertFileType,System.String)"/>
            <seealso cref="M:MailBee.Security.Certificate.#ctor(System.Byte[],MailBee.Security.CertFileType,System.String)"/>
            </summary>
            <param name="filename">The path to the file.</param>
            <param name="fileType">The format of the file to save.</param>
            <param name="pfxPassword">PFX password if <paramref name="fileType"/> is <see cref="F:MailBee.Security.CertFileType.Pfx"/>,
            or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns><b>true</b> if the certificate was successfully saved to disk; otherwise, false.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><parameref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">The specified file can not be written to.</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateWin32Exception">Win32 returned an error during during processing the certificate data.</exception>
        </member>
        <member name="M:MailBee.Security.Certificate.Validate">
            <summary>
            Checks if the certificate is valid.
            <seealso cref="T:MailBee.Security.CertificateValidationFlags"/>
            </summary>
            <returns>A bitwise combination of <see cref="T:MailBee.Security.CertificateValidationFlags"/> indicating criteria the validation failed for,
            or <see cref="F:MailBee.Security.CertificateValidationFlags.None"/> if the certificate is valid.</returns>
            <exception cref="T:MailBee.Security.MailBeeCertificateWin32Exception">Win32 returned an error during during processing the certificate data.</exception>
            <remarks>You may get <see cref="F:MailBee.Security.CertificateValidationFlags.IsUntrustedRoot"/> value returned by this method
            even if you know the certificate is trusted. This may happen if the certification authority (CA) which issued the given
            certificate is not present in the system CA store. This often happens with ASP.NET applications
            because ASP.NET user by default has only a few CA's in its system store. You can either add more CA's there
            or export your CA (one or more) into a file and use it as an extra store. See <see cref="M:MailBee.Security.Certificate.Validate(MailBee.Security.CertificateStore)"/> overload or
            ASP.NET S/MIME demo projects shipped with the product for more details.
            </remarks>
            <example>This sample loads the certificate store from disk and validates all the certificates contained in this store.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(@"C:\Temp\certificate.p7b", CertStoreType.PublicFile, <span style="color: blue;">null</span>);
            CertificateCollection coll = store.GetAllCertificates();
            
            <span style="color: blue;">foreach</span> (Certificate cert <span style="color: blue;">in</span> coll)
            {
            	Console.WriteLine(cert.Name);
            	CertificateValidationFlags status = cert.Validate();
            	<span style="color: blue;">if</span> (status != CertificateValidationFlags.None)
            	{
            		Console.WriteLine("Untrusted");
            		<span style="color: blue;">if</span> ((status &amp; CertificateValidationFlags.IsNotTimeValid) &gt; 0)
            		{
            			Console.WriteLine("Certificate expired!");
            		}
            	}
            	<span style="color: blue;">else</span>
            	{
            		Console.WriteLine("Trusted");
            	}
            	Console.WriteLine("--------------------------------");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("C:\Temp\certificate.p7b", CertStoreType.PublicFile, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> coll <span style="color: blue;">As</span> CertificateCollection = store.GetAllCertificates()
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> cert <span style="color: blue;">As</span> Certificate <span style="color: blue;">In</span> coll
            	Console.WriteLine(cert.Name)
            	<span style="color: blue;">Dim</span> status <span style="color: blue;">As</span> CertificateValidationFlags = cert.Validate()
            
            	<span style="color: blue;">If</span> status &lt;&gt; CertificateValidationFlags.None <span style="color: blue;">Then</span>
            		Console.WriteLine("Untrusted")
            		<span style="color: blue;">If</span> ((status <span style="color: blue;">And</span> CertificateValidationFlags.IsNotTimeValid) &gt; 0) <span style="color: blue;">Then</span>
            			Console.WriteLine("Certificate expired!")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">Else</span>
            		Console.WriteLine("Trusted")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	Console.WriteLine("--------------------------------")
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Certificate.Validate(MailBee.Security.CertificateStore)">
            <summary>
            Checks if the certificate is valid.
            <seealso cref="T:MailBee.Security.CertificateValidationFlags"/>
            </summary>
            <param name="extraStore">A reference to the additional store of certification authorities,
            or a null reference (<b>Nothing</b> in Visual Basic) if only the system store should be used.</param>
            <returns>A bitwise combination of <see cref="T:MailBee.Security.CertificateValidationFlags"/> indicating criteria the validation failed for,
            or <see cref="F:MailBee.Security.CertificateValidationFlags.None"/> if the certificate is valid.</returns>
            <exception cref="T:MailBee.Security.MailBeeCertificateWin32Exception">Win32 returned an error during during processing the certificate data.</exception>
            <remarks>You may get <see cref="F:MailBee.Security.CertificateValidationFlags.IsUntrustedRoot"/> value returned by this method
            even if you know the certificate is trusted. This may happen if the certification authority (CA) which issued the given
            certificate is not present in the system CA store. This often happens with ASP.NET applications
            because ASP.NET user by default has only a few CA's in its system store. You can either add more CA's there
            or export your CA (one or more) into a file and use it as <parameref name="extraStore"/>.
            See ASP.NET S/MIME demo projects shipped with the product for more details.</remarks>
        </member>
        <member name="M:MailBee.Security.Certificate.Dispose">
            <summary>
            Releases the resources associated with the <see cref="T:MailBee.Security.Certificate"/> object.
            </summary>
        </member>
        <member name="P:MailBee.Security.Certificate.SerialNumber">
            <summary>
            Gets the serial number of the X.509-formatted certificate as a byte array.
            <seealso cref="P:MailBee.Security.Certificate.SerialNumberString"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A byte array representation of the certificate serial number.</value>
        </member>
        <member name="P:MailBee.Security.Certificate.SerialNumberString">
            <summary>
            Gets the serial number of the X.509-formatted certificate as a string.
            <seealso cref="P:MailBee.Security.Certificate.SerialNumber"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A string containing hexadecimal serial number of a digital certificate.</value>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.SignatureAlgorithm">
            <summary>
            Gets the information about cryptographic algorithm used to encrypt a message.
            <seealso cref="T:MailBee.Security.Algorithm"/>
            <seealso cref="P:MailBee.Security.Certificate.KeyAlgorithmString"/>
            </summary>
            <value>Object of <see cref="T:MailBee.Security.Algorithm"/> class representing information about the signature algorithm.</value>
            <example>This sample loads a certificate from the specified file and displays information about it.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Certificate cert = <span style="color: blue;">new</span> Certificate(@"C:\Temp\certificate.cer", CertFileType.Cer, <span style="color: blue;">null</span>);
            
            Console.WriteLine("Key algorithm name: " + cert.SignatureAlgorithm.Name);
            Console.WriteLine("Key algorithm OID: " + cert.SignatureAlgorithm.Oid);
            Console.WriteLine("Key algorithm ID: " + cert.SignatureAlgorithm.ID);
            Console.WriteLine("Key algorithm bit length: " + cert.SignatureAlgorithm.BitLength);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> cert <span style="color: blue;">As</span> Certificate = <span style="color: blue;">New</span> Certificate("C:\Temp\certificate.cer", CertFileType.Cer, <span style="color: blue;">Nothing</span>)
            
            Console.WriteLine("Key algorithm name: " &amp; cert.SignatureAlgorithm.Name)
            Console.WriteLine("Key algorithm OID: " &amp; cert.SignatureAlgorithm.Oid)
            Console.WriteLine("Key algorithm ID: " &amp; cert.SignatureAlgorithm.ID.ToString())
            Console.WriteLine("Key algorithm bit length: " &amp; cert.SignatureAlgorithm.BitLength.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Security.Certificate.KeyAlgorithmString">
            <summary>
            Gets a string containing OID of algorithm used to generate a public key of X.509 certificate.
            <seealso cref="P:MailBee.Security.Algorithm.Oid"/>
            <seealso cref="P:MailBee.Security.Certificate.SignatureAlgorithm"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>An <see cref="T:MailBee.Security.Algorithm"/> object containing the information about the cryptographic key.</value>
            <remarks>To know more about OID, refer to <see cref="P:MailBee.Security.Algorithm.Oid">Algorithm.Oid</see> property.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.IssuerDetails">
            <summary>
            Gets the name of the certification authority which issued this X.509 certificate.
            <seealso cref="P:MailBee.Security.Certificate.IssuedTo"/>
            <seealso cref="P:MailBee.Security.Certificate.IssuedBy"/>
            <seealso cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A string containing the name of certification authority which issued the certificate.</value>
            <remarks>
            The developer can perform search over this property value during searching for certificates in a certificate store using
            <see cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)"/> method.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.IssuedTo">
            <summary>
            Gets the name of the entity this certificate was issued to.
            <seealso cref="P:MailBee.Security.Certificate.IssuerDetails"/>
            <seealso cref="P:MailBee.Security.Certificate.IssuedBy"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A string containing the name of a person/organization whom the certificate was issued to.</value>
            <remarks>
            To get the information about X.509 certificate issuer, the developer can use the <see cref="P:MailBee.Security.Certificate.IssuerDetails"/>
            or <see cref="P:MailBee.Security.Certificate.IssuedBy"/> property.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.IssuedBy">
            <summary>
            Gets the name of the certification authority that issued the X.509 certificate.
            <seealso cref="P:MailBee.Security.Certificate.IssuedTo"/>
            <seealso cref="P:MailBee.Security.Certificate.IssuerDetails"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <remarks>
            <para>
            To get more detailed information about X.509 certificate issuer, the developer can use the <see cref="P:MailBee.Security.Certificate.IssuerDetails"/>
            property.
            </para>
            <para>
            Also, the <see cref="P:MailBee.Security.Certificate.IssuedBy"/> property can be used to determine whom this X.509 certificate was issued by.
            </para>
            </remarks>
            <value>A string containing the name of certificate authority that issued the certificate.</value>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> class documentation.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.Name">
            <summary>
            Gets the details about the principal to which the certificate was issued.
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A string containing the name of the principal the certificate was issued to.</value>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.ValidFromDate">
            <summary>
            Gets the date the certificate is valid from.
            <seealso cref="P:MailBee.Security.Certificate.ValidToDate"/>
            </summary>
            <value>A <see cref="T:System.DateTime"/> value representing the date from which the certificate gets no longer valid, or <see cref="F:System.DateTime.MinValue"/> if the date could not be parsed.</value>
            <exception cref="T:MailBee.MailBeeDateParsingException">A date parsing error occurred and <see cref="P:MailBee.Security.Certificate.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.ValidToDate">
            <summary>
            Gets the date the certificate certificate is no longer valid from.
            <seealso cref="P:MailBee.Security.Certificate.ValidFromDate"/>
            </summary>
            <value>A <see cref="T:System.DateTime"/> value representing the date when the certificate expires and becomes no longer valid, or <see cref="F:System.DateTime.MinValue"/> if the date could not be parsed.</value>
            <exception cref="T:MailBee.MailBeeDateParsingException">A date parsing error occurred and <see cref="P:MailBee.Security.Certificate.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.Subject">
            <summary>
            Gets the subject of X.509 certificate.
            </summary>
            <value>A string containing the certificate subject.</value>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.PublicKey">
            <summary>
            Gets a public key for X.509 certificate as a byte array.
            <seealso cref="P:MailBee.Security.Certificate.PublicKeyString"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A public key as an array of bytes.</value>
        </member>
        <member name="P:MailBee.Security.Certificate.PublicKeyString">
            <summary>
            Gets a string containing a public key for X.509 certificate.
            <seealso cref="P:MailBee.Security.Certificate.PublicKey"/>
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>A string containing the hexadecimal public key.</value>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.AsX509Certificate">
            <summary>
            Gets the certificate as <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> object.
            </summary>
            <value>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> object which represents the certificate.</value>
        </member>
        <member name="P:MailBee.Security.Certificate.RawData">
            <summary>
            Gets the raw X.509 certificate data as a byte array.
            <seealso cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>
            </summary>
            <value>The certificate as an array of bytes.</value>
            <example>
            <para>
            This sample selects the first certificate from the system store called "MY"
            ("Personal" tab of Certificates dialog in Internet Explorer) and saves the certificate
            raw data into the specified file to disk.
            </para>
            <note> To save the certificate to disk, this sample uses standard binary writer for demonstration purposes only.
            The developer can call the <see cref="M:MailBee.Security.Certificate.SaveToFile(System.String,MailBee.Security.CertFileType,System.String)"/> method to save the certificate to disk.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateCollection collection = store.GetAllCertificates();
            <span style="color: blue;">if</span> (collection.Count &gt; 0)
            {
            	Certificate cert = collection[0];
            	<span style="color: blue;">using</span> (BinaryWriter bw = <span style="color: blue;">new</span> BinaryWriter(File.Open(@"C:\Temp\newcert.cer", FileMode.Create)))
            	{
            		bw.Write(cert.RawData);
            		bw.Flush();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> collection <span style="color: blue;">As</span> CertificateCollection = store.GetAllCertificates()
            
            <span style="color: blue;">If</span> collection.Count &gt; 0 <span style="color: blue;">Then</span>
            	<span style="color: blue;">Dim</span> cert <span style="color: blue;">As</span> Certificate = collection(0)
            	<span style="color: blue;">Dim</span> bw <span style="color: blue;">As</span> <span style="color: blue;">New</span> BinaryWriter(File.Open("C:\Temp\newcert.cer", FileMode.Create))
            
            	bw.Write(cert.RawData)
            	bw.Flush()
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Security.Certificate.EmailAddress">
            <summary>
            Gets the e-mail address of the certificate principal.
            <seealso cref="P:MailBee.Security.Certificate.Name"/>
            <seealso cref="P:MailBee.Security.Certificate.Subject"/>
            </summary>
            <value>A string containing the e-mail address of the certificate principal.</value>
            <remarks>With regard to using certificates in e-mail area, <see cref="P:MailBee.Security.Certificate.EmailAddress"/>
            is the most important field of the certificate.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.HasPrivateKey">
            <summary>
            Gets whether the certificate has a private key.
            <seealso cref="P:MailBee.Security.Certificate.PublicKey"/>
            </summary>
            <value><b>true</b> if certificate includes the private key; otherwise, <b>false</b>.</value>
            <remarks>Certificates with private key can be using for all S/MIME operations (signing, encryption,
            checking a signature, decryption). Public
            certificates (without private key) can only be used for encryption and checking a signature.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.Certificate"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Certificate.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the object will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the object methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Security.Certificate.LastResult"/> members to get more information about the error.
            <note>
            Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee.NET usage will still be thrown.
            <para>
            Typical example of such errors is passing invalid arguments to methods. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be supressed.
            </para>
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.Security.Certificate.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="P:MailBee.Security.Certificate.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="T:MailBee.Mime.HeaderCollection">
            <summary>
            Represents a collection of all the headers of a mail message or a MIME part.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <remarks>
            This collection can be used to examine, modify, add or remove headers to the mail message or its
            individual parts (such as attachments).
            <para>
            For mail messages, this collection is available through the
            <see cref="P:MailBee.Mime.MailMessage.Headers">MailMessage.Headers</see>.
            </para>
            <para>For individual MIME parts, the developer can access headers via <see cref="P:MailBee.Mime.MimePart.Headers">MimePart.Headers</see> property.
            </para>
            <para><see cref="T:MailBee.Mime.Attachment"/> and <see cref="T:MailBee.Mime.TextBodyPart"/> objects also support <see cref="P:MailBee.Mime.MimePart.Headers">MimePart.Headers</see> property.</para>
            <para>To get the headers section of the message as string, use <see cref="P:MailBee.Mime.MailMessage.RawHeader">MailMessage.RawHeader</see> property. <see cref="P:MailBee.Mime.HeaderCollection.MimePart"/>
            class also supports such property. Please note that <b>RawHeader</b> properties will return empty string if the source
            of the message is not available (this is common when you're composing a new message rather than examining an existing one).</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.Header"/> class overview.
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.Items(System.String)">
            <summary>
            Returns the collection of headers having the given name.
            <seealso cref="P:MailBee.Mime.HeaderCollection.Item(System.String)"/>
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <param name="name">The name of the header.</param>
            <value>
            A <see cref="T:MailBee.Mime.HeaderCollection"/> object containing the headers having the specified name, or
            a null reference (<b>Nothing</b> in Visual Basic) if such headers do not exist in the collection.
            </value>
            <remarks>This method should be used if the mail message contains several headers with the same name and the developer
            wants to examine them all. In other cases, it's easier to use <see cref="P:MailBee.Mime.HeaderCollection.Item(System.String)"/> property.</remarks>
            <example>This sample loads the message from .EML file and displays "Received" headers of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Access the list of "Received" headers.</span>
            HeaderCollection receivedHeaders = msg.Headers.Items("Received");
            
            <span style="color: blue;">if</span> (receivedHeaders != <span style="color: blue;">null</span>)
            {
            	<span style="color: green;">// For each header...</span>
            	<span style="color: blue;">foreach</span> (Header hdr <span style="color: blue;">in</span> receivedHeaders)
            	{
            		<span style="color: green;">// Show the name and the value of the header.</span>
            		Console.WriteLine(<span style="color: blue;">string</span>.Format("{0}: {1}", hdr.Name, hdr.Value));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Access the list of "Received" headers.</span>
            <span style="color: blue;">Dim</span> receivedHeaders <span style="color: blue;">As</span> HeaderCollection = msg.Headers.Items("Received")
            
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> receivedHeaders <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	<span style="color: green;">' For each header...</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> hdr <span style="color: blue;">As</span> Header <span style="color: blue;">In</span> receivedHeaders
            		<span style="color: green;">' Show the name and the value of the header.</span>
            		Console.WriteLine(<span style="color: blue;">String</span>.Format("{0}: {1}", hdr.Name, hdr.Value))
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a header to the collection.
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <param name="name">The name of the header.</param>
            <param name="value">The value of the header.</param>
            <param name="overwrite">If <b>true</b> all found headers having the specified name are removed,
            while only one header will be inserted instead of them; otherwise, another header having the same name will be
            added.</param>
            <returns>
            <b>true</b> if the header was successfully added; otherwise, <b>false</b>.
            </returns>
            <example>This sample creates a new message and adds a header to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add a header.</span>
            msg.Headers.Add("MyHeader", "Some value for my own header", <span style="color: blue;">false</span>);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add a header.</span>
            msg.Headers.Add("MyHeader", "Some value for my own header", <span style="color: blue;">False</span>)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.Add(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Adds a header to the collection at the specified position.
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <param name="name">The name of the header.</param>
            <param name="value">The value of the header.</param>
            <param name="overwrite">If <b>true</b> all found headers having the specified name are removed,
            while only one header will be inserted instead of them; otherwise, another header having the same name will be
            added.</param>
            <param name="index">The zero-based index of the newly added header in the collection.</param>
            <returns>
            <b>true</b> if the header was successfully added; otherwise, <b>false</b>.
            </returns>
            <example>This sample creates a new message and adds a header at the beginning of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add a header.</span>
            msg.Headers.Add("MyHeader", "Some value for my own header", <span style="color: blue;">false</span>, 0);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add a header.</span>
            msg.Headers.Add("MyHeader", "Some value for my own header", <span style="color: blue;">False</span>, 0)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the header from the collection at the given zero-based index.
            <seealso cref="M:MailBee.Mime.HeaderCollection.Remove(MailBee.Mime.Header)"/>
            </summary>
            <param name="index">The zero-based index of the message header in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <example>This sample loads the message from .EML file and removes the first header of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// When the first header exists...</span>
            <span style="color: blue;">if</span> (msg.Headers.Count &gt; 0)
            {
            	<span style="color: green;">// Remove the first header.</span>
            	msg.Headers.RemoveAt(0);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' When the first header exists...</span>
            <span style="color: blue;">If</span> (msg.Headers.Count &gt; 0) <span style="color: blue;">Then</span>
            	<span style="color: green;">' Remove the first header.</span>
            	msg.Headers.RemoveAt(0)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.Clear">
            <summary>
            Clears the collection of the headers.
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <example>This sample loads the message from .EML file and removes all headers from this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all headers.</span>
            msg.Headers.Clear();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all headers.</span>
            msg.Headers.Clear()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.Remove(System.String)">
            <summary>
            Removes the header from the collection by the given name.
            <seealso cref="M:MailBee.Mime.HeaderCollection.RemoveAt(System.Int32)"/>
            </summary>
            <param name="name">The name of the header.</param>
            <returns>
            <b>true</b> if the header with the specified name was found and removed; otherwise, <b>false</b>.
            </returns>
            <remarks>
            <para>
            All headers having the specified name will be removed from the collection. To remove only one header having the specified name
            the developer should use the <see cref="M:MailBee.Mime.HeaderCollection.RemoveAt(System.Int32)"/> method.
            </para>
            </remarks>
            <example>This sample loads the message from .EML file and removes Subject header from this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// When specified header exists...</span>
            <span style="color: blue;">if</span> (msg.Headers["Subject"] != <span style="color: blue;">null</span>)
            {
            	<span style="color: green;">// Remove the specified header.</span>
            	msg.Headers.Remove("Subject");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' When specified header exists...</span>
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> msg.Headers("Subject") <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	<span style="color: green;">' Remove the specified header.</span>
            	msg.Headers.Remove("Subject")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.RemoveCustomHeaders">
            <summary>
            Removes any custom headers from the collection of the message headers.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <remarks>
            Removes the <see cref="T:MailBee.Mime.Header"/> objects with non-standard names from the collection of the message headers.
            The following headers are standard (and thus will not be removed by this method):
            <list type="bullet">
            <item><description>BCC</description></item>
            <item><description>CC</description></item>
            <item><description>Content-Type</description></item>
            <item><description>Date</description></item>
            <item><description>From</description></item>
            <item><description>Message-ID</description></item>
            <item><description>MIME-Version</description></item>
            <item><description>Organization</description></item>
            <item><description>Reply-To</description></item>
            <item><description>Return-Path</description></item>
            <item><description>Subject</description></item>
            <item><description>To</description></item>
            <item><description>X-Mailer</description></item>
            <item><description>X-MSMail-Priority</description></item>
            <item><description>X-Priority</description></item>
            </list>
            </remarks>
            <example>This sample loads the message from .EML file and removes the custom headers from this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all non-standard headers from the collection.</span>
            msg.Headers.RemoveCustomHeaders();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all non-standard headers from the collection.</span>
            msg.Headers.RemoveCustomHeaders()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.RemoveRouteHeaders">
            <summary>
            Removes all route headers from the collection.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <remarks>
            Removes all <see cref="T:MailBee.Mime.Header"/> objects having <i>Return-Path</i> or <i>Received</i> names.
            </remarks>
            <example>The following example demonstrates how the all route headers can be removed:
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all route headers.</span>
            msg.Headers.RemoveRouteHeaders();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all route headers.</span>
            msg.Headers.RemoveRouteHeaders()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.HeaderCollection.Exists(System.String)">
            <summary>
            Checks whether a header with the given name exists in the collection.
            <seealso cref="T:MailBee.Mime.Header"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="name">The name of the header.</param>
            <returns>
            <b>true</b> if the collection contains the header with the specified name; otherwise, <b>false</b>.
            </returns>
            <example>This sample creates the new message and adds a custom header if it does not yet exist.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            <span style="color: blue;">if</span> (!msg.Headers.Exists("X-MyHeader"))
            {
            	msg.Headers.Add("X-MyHeader", "some value for the header", <span style="color: blue;">false</span>);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            <span style="color: blue;">If</span> (<span style="color: blue;">Not</span> msg.Headers.Exists("X-MyHeader")) <span style="color: blue;">Then</span>
            	msg.Headers.Add("X-MyHeader", "some value for the header", <span style="color: blue;">False</span>)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.HeaderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Mime.Header"/> object in the collection at the specified zero-based index.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="index">The zero-based index of the header in the headers collection.</param>
            <value>
            A <see cref="T:MailBee.Mime.Header"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">If the specified index doesn't exist.</exception>
            <example>This sample loads the message from .EML file and displays all headers of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; msg.Headers.Count; i++)
            {
            	Console.WriteLine(<span style="color: blue;">string</span>.Format("{0}: {1}", msg.Headers[i].Name, msg.Headers[i].Value));
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            <span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> msg.Headers.Count - 1
            	Console.WriteLine(<span style="color: blue;">String</span>.Format("{0}: {1}", msg.Headers(i).Name, msg.Headers(i).Value))
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.HeaderCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Mime.Header"/> object of the collection by the header name.
            <seealso cref="M:MailBee.Mime.HeaderCollection.Items(System.String)"/>
            <seealso cref="T:MailBee.Mime.Header"/>
            </summary>
            <param name="name">The name of the header. Some examples: <i>To</i>, <i>Content-Type</i>, <i>X-UIDL</i>.</param>
            <value>
            The <see cref="T:MailBee.Mime.Header"/> object representing the header with the specified name, or a null reference (<b>Nothing</b> in Visual Basic) if no such header exists in the collection.
            </value>
            <remarks>
            If the collection contains several headers with the specified name, the first matching header will be returned.
            To access multiple headers with the same name, the developer should use <see cref="M:MailBee.Mime.HeaderCollection.Items(System.String)"/> method.
            </remarks>
            <example>This sample loads the message from .EML file and displays the value of <i>Subject:</i> header of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Get the header value by its name.</span>
            <span style="color: blue;">string</span> subjectHeaderValue = msg.Headers["Subject"];
            
            <span style="color: green;">// If this header exists...</span>
            <span style="color: blue;">if</span> (subjectHeaderValue != <span style="color: blue;">null</span>)
            {
            	<span style="color: green;">// Show the header of the message.</span>
            	Console.WriteLine("Message subject: " + subjectHeaderValue);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Get the header value by its name.</span>
            <span style="color: blue;">Dim</span> subjectHeaderValue <span style="color: blue;">As</span> <span style="color: blue;">String</span> = msg.Headers("Subject")
            
            <span style="color: green;">' If this header exists...</span>
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> subjectHeaderValue <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	<span style="color: green;">' Show the header of the message.</span>
            	Console.WriteLine("Message subject: " &amp; subjectHeaderValue)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.Mime.Header">
            <summary>
            Provides properties for examining or setting the name or the value of a single field of the headers section
            of a MIME part.
            <seealso cref="P:MailBee.Mime.MailMessage.RawHeader"/>
            <seealso cref="T:MailBee.Mime.MimePart"/>
            </summary>
            <remarks>
            <para>Each MIME part of the message (including the message itself which is actually a root MIME part) have header section containing
            of some name-value pairs. <see cref="T:MailBee.Mime.Header"/> class represents such a pair. To access the entire collection of MIME part headers, use
            <see cref="P:MailBee.Mime.MimePart.Headers">MimePart.Headers</see> property. To access headers of the message itself, it's easier to use
            <see cref="P:MailBee.Mime.MailMessage.Headers">MailMessage.Headers</see> property.</para>
            <para>Some examples of header names and values are represented below:
            <list type="table">
            <listheader><term>Name</term><term>Value</term></listheader>
            <item><description>From</description><description>John Doe &lt;jdoe@hisdomain.com&gt; (XXX Company)</description></item>
            <item><description>To</description><description>Katy Smith &lt;k.smith@herdomain.com&gt;</description></item>
            <item><description>Cc</description><description>techsupport@ourdomain.com</description></item>
            <item><description>Subject</description><description>Meeting request.</description></item>
            <item><description>Content-Type</description><description>multipart/mixed; boundary="--511842ECA261D"</description></item>
            <item><description>Date</description><description>Thu, 8 Dec 2005 19:27:22 -0500</description></item>
            <item><description>X-Priority</description><description>3 (Normal)</description></item>
            </list></para>
            </remarks>
            <example>
            This sample loads the message from .EML file and shows all the message headers.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every header...</span>
            <span style="color: blue;">foreach</span> (Header hdr <span style="color: blue;">in</span> msg.Headers)
            {
            	<span style="color: green;">// Show the header.</span>
            	Console.WriteLine(<span style="color: blue;">string</span>.Format("Name: {0}; Value: {1}", hdr.Name, hdr.Value));
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every header...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> hdr <span style="color: blue;">As</span> Header <span style="color: blue;">In</span> msg.Headers
            	<span style="color: green;">' Show the header.</span>
            	Console.WriteLine(<span style="color: blue;">String</span>.Format("Name: {0}; Value: {1}", hdr.Name, hdr.Value))
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Header.Name">
            <summary>
            Gets or sets the name of the message header as a string.
            <seealso cref="T:MailBee.Mime.HeaderCollection"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            A string containing the name of the message header.
            </value>
            <remarks>
            Some header names are:
            <list type="bullet">
            <item><description>Received</description></item>
            <item><description>Date</description></item>
            <item><description>From</description></item>
            <item><description>X-Mailer</description></item>
            <item><description>Reply-To</description></item>
            <item><description>Organization</description></item>
            <item><description>X-Priority</description></item>
            <item><description>Message-ID</description></item>
            <item><description>To</description></item>
            <item><description>CC</description></item>
            <item><description>Subject</description></item>
            <item><description>MIME-Version</description></item>
            <item><description>Content-Type</description></item>
            <item><description>Content-Transfer-Encoding</description></item>
            </list>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.Header"/> class overview.
            </example>
        </member>
        <member name="P:MailBee.Mime.Header.Value">
            <summary>
            Gets or sets the value of the message header as a string.
            <seealso cref="T:MailBee.Mime.HeaderCollection"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            A string containing the value of the message header.
            </value>
            <remarks>
            The examples of the header's names and values are available in <see cref="T:MailBee.Mime.Header"/> class overview.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.Header"/> class overview.
            </example>
        </member>
        <member name="T:MailBee.ImapMail.UidPlusResult">
            <summary>
            Represents a set of UIDs assigned to the copied or uploaded messages
            and other related information returned by the IMAP4 server which supports
            UIDPLUS extension.
            <seealso cref="M:MailBee.ImapMail.Imap.GetExtension(System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.CopyMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.MoveMessages(System.String,System.Boolean,System.String,MailBee.ImapMail.UidPlusResult)"/>
            </summary>
            <remarks>
            <para>If the server supports UIDPLUS extension (RFC2359), this
            allows the client (MailBee) to obtain the information about UIDs of uploaded, copied,
            or moved messages, which may be useful if the application needs to save this
            information somewhere (usually, in a database). In this case, the developer
            can pass a reference to the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object instance to the corresponding method
            of <see cref="T:MailBee.ImapMail.Imap"/> class (such as <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/>), call the method,
            and then examine the <see cref="T:MailBee.ImapMail.UidPlusResult"/> object properties.</para>
            <para>If, however, the server does not support
            UIDPLUS, the application may fall back to using UIDNEXT value to
            learn UID to be assigned to any new message in the folder. See the sample code and remarks in
            <see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> topic for details.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidPlusResult.IsSupported">
            <summary>
            Gets whether UIDPLUS is supported by the server.
            </summary>
            <value><b>true</b> if UIDPLUS capability is supported; otherwise, <b>false</b>.</value>
            <remarks>The value of this property is set during calling the <see cref="T:MailBee.ImapMail.Imap"/> class method
            this <see cref="T:MailBee.ImapMail.UidPlusResult"/> object has been passed to.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidPlusResult.SrcUidString">
            <summary>
            Gets the UID sequence of the messages being copied/moved from the current folder.
            </summary>
            <value>The string containing the UID sequence of the messages being copied/moved from the current folder,
            or a null reference (<b>Nothing</b> in Visual Basic) if UIDPLUS extension is not supported
            or the messages were not copied or moved.</value>
            <remarks>
            <para>After copying or moving messages, this property contains the UID sequence
            of the copied/moved messages in the source folder (which is the currently selected folder).
            For instance, if the message with UID 567 was copied from "Inbox" folder into "Sent" folder
            and was assigned UID 13 in "Sent" folder, this property will return "567".
            </para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method sets this property to null.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidPlusResult.DestUidString">
            <summary>
            Gets the UID sequence of the messages been uploaded/copied/moved into the target folder.
            </summary>
            <value>The string containing the UID sequence of the messages been copied/moved into the target folder,
            or a null reference (<b>Nothing</b> in Visual Basic) if UIDPLUS extension is not supported
            or the messages were not copied or moved.</value>
            <remarks>
            <para>After copying or moving messages, this property contains the UID sequence
            of the messages copied/moved into the destination folder.
            For instance, if the message with UID 567 was copied from "Inbox" folder into "Sent" folder
            and was assigned UID 13 in "Sent" folder, this property will return "13".
            </para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method sets this property to the UID assigned to the uploaded message
            (or null if UIDPLUS is not supported by the server).</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidPlusResult.DestUidValidity">
            <summary>
            Gets the UIDVALIDITY of the folder the messages have been uploaded/copied/moved into.
            <seealso cref="P:MailBee.ImapMail.Imap.UidValidity"/>
            </summary>
            <value>The new UIDVALIDITY value of the target folder after completion of uploading/copying/moving messages into this folder,
            or -1 if UIDPLUS is not supported by the server.
            </value>
            <remarks>For more information regarding UIDVALIDITY, see <see cref="P:MailBee.ImapMail.Imap.UidValidity"/> topic.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidPlusResult.SrcUids">
            <summary>
            Gets the UID collection of the messages being copied/moved from the current folder.
            </summary>
            <value>The collection of UIDs of the messages being copied/moved from the current folder,
            or a null reference (<b>Nothing</b> in Visual Basic) if UIDPLUS extension is not supported
            or the messages were not copied or moved.</value>
            <remarks>
            <para>After copying or moving messages, this property contains the UIDs
            of the copied/moved messages in the source folder (which is the currently selected folder).
            For instance, if the messages with UIDs 567 and 680 were moved from "Inbox" folder into "Sent" folder
            and were assigned UID 13 and 14 in "Sent" folder, this property will return the collection
            containing UIDs 567 and 680.
            </para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method sets this property to null.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidPlusResult.DestUids">
            <summary>
            Gets the UID collection of the messages been uploaded/copied/moved into the target folder.
            </summary>
            <value>The collection of UIDs of the messages been copied/moved into the target folder,
            or a null reference (<b>Nothing</b> in Visual Basic) if UIDPLUS extension is not supported
            or the messages were not copied or moved.</value>
            <remarks>
            <para>After copying or moving messages, this property contains the UIDs
            of the messages copied/moved into the destination folder.
            For instance, if the messages with UIDs 567 and 680 were moved from "Inbox" folder into "Sent" folder
            and were assigned UID 13 and 14 in "Sent" folder, this property will return the collection
            containing UIDs 13 and 14.
            </para>
            <para><see cref="M:MailBee.ImapMail.Imap.UploadMessage(MailBee.Mime.MailMessage,System.String,System.String,System.String,System.Boolean,MailBee.ImapMail.UidPlusResult)"/> method initializes this collection with the UID assigned to the uploaded message
            (or null if UIDPLUS is not supported by the server).</para>
            </remarks>
        </member>
        <member name="T:MailBee.DnsMX.DnsServer">
            <summary>
            Represents a DNS server to be queried about domain names of the Internet hosts.
            </summary>
            <remarks>MailBee uses instances of this class in order to lookup MX records of the
            Internet hosts. For example, <see cref="T:MailBee.SmtpMail.Smtp"/> component can perform MX
            lookup queries in direct-send scenarios (sending e-mails without SMTP relay server).</remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.DnsMX.DnsServer"/> class with the given IP address string,
            and assigns the top priority to this instance.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <param name="host">IP address of the DNS server.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="host"/> is not a valid IP address string.</exception>
            <remarks>You can find more information on the server priority in
            <see cref="T:MailBee.SortableByPriorityCollection"/> class documentation.</remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsServer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailBee.DnsMX.DnsServer"/> class with the given IP address string
            and priority value.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <param name="host">IP address of the DNS server.</param>
            <param name="priority">A preference of the DNS server. Lower values are preferred.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="host"/> is not a valid IP address string.</exception>
            <remarks>You can find more information on the server priority in
            <see cref="T:MailBee.SortableByPriorityCollection"/> class documentation.</remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsServer.Reset">
            <summary>
            Resets failure count to 0.
            </summary>
            <remarks>MailBee calls method each time the DNS server properly responds.
            If, however, the DNS server was banned by MailBee due to multiple repeated failures,
            the developer may call this method to force MailBee to use the DNS server again.</remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsServer.Host">
            <summary>
            Gets or sets an IP address of the DNS server as string.
            </summary>
            <value>IP address of the DNS server.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><see cref="P:MailBee.DnsMX.DnsServer.Host"/> is not a valid IP address string.</exception>
        </member>
        <member name="P:MailBee.DnsMX.DnsServer.IP">
            <summary>
            Gets an IP address of the DNS server as <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <value>IP address of the DNS server.</value>
        </member>
        <member name="P:MailBee.DnsMX.DnsServer.FailureCount">
            <summary>
            Gets the number of repeated failures of the DNS server.
            </summary>
            <value>The number of repeated failures of the DNS server. The default value is 0.</value>
            <remarks>You can find more information on how MailBee handles DNS server failures in
            <see cref="P:MailBee.Global.DnsMaxFailureCount"/> property documentation.</remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsServer.Priority">
            <summary>
            Gets or sets a value of the preference of the DNS server. Lower values are preferred.
            <seealso cref="T:MailBee.SortableByPriorityCollection"/>
            </summary>
            <value>An integer value in the range 0 to 999 indicating the preference of the DNS server.</value>
            <remarks>You can find more information on the server priority in
            <see cref="T:MailBee.SortableByPriorityCollection"/> class documentation.</remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsServer.UdpRetryCount">
            <summary>
            Gets or sets a value of the maximum number of times to attempt to connect
            to the DNS server using the UDP protocol.
            </summary>
            <value>An integer value in the range 0 to 10 indicating the maximum number
            of times to attempt to connect to the DNS server using the UDP protocol.
            The default value is 2.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><see cref="P:MailBee.DnsMX.DnsServer.UdpRetryCount"/>
            is less than 0 or greater than 10.</exception>
        </member>
        <member name="P:MailBee.DnsMX.DnsServer.UdpTimeout">
            <summary>
            Gets or sets the amount of time (in milliseconds) the system will wait for UDP message to be sent or received
            before the operation times out.
            </summary>
            <value>The amount of time (in milliseconds) the system will wait for UDP message to be sent or received
            before the operation times out. The default value is 5000 (5 seconds).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><see cref="P:MailBee.DnsMX.DnsServer.UdpTimeout"/>
            is negative.</exception>
        </member>
        <member name="T:MailBee.Security.SecurityProtocol">
            <summary>
            Specifies the protocol to be used for performing TLS/SSL negotiation and data encryption.
            </summary>
            <remarks>
            <para>The security protocol can be set via <b>SslProtocol</b> property of
            <see cref="T:MailBee.SmtpMail.SmtpServer"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, or
            <see cref="T:MailBee.ImapMail.Imap"/> classes.</para>
            <para>Most applications use <see cref="F:MailBee.Security.SecurityProtocol.Auto"/> option, which allows MailBee.NET
            to communicate with the server using the most secure of the available methods.</para>
            <note>If the mail server does not support automatic protocol negotiation (this usually results
            in getting <see cref="T:MailBee.MailBeeSocketResetException"/> thrown during TLS/SSL negotiation),
            the developer should mannually specify the protocol to be used (for example <see cref="F:MailBee.Security.SecurityProtocol.Tls1"/>).
            </note>
            </remarks>
        </member>
        <member name="F:MailBee.Security.SecurityProtocol.Auto">
            <summary>The most secure protocol supported by the server will be used to authenticate the client and encrypt the data.
            If the server supports TLS, this protocol will be used; otherwise, less secure protocols such as SSL2 or SSL3 will be tried.
            However, some servers require the client to specify the protocol and do not support automatic protocol negotiation.</summary>
        </member>
        <member name="F:MailBee.Security.SecurityProtocol.Ssl2">
            <summary>SSLv2 will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="F:MailBee.Security.SecurityProtocol.Ssl3">
            <summary>SSLv3 will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="F:MailBee.Security.SecurityProtocol.Tls1">
            <summary>TLS will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="T:MailBee.Security.SslStartupMode">
            <summary>
            Specifies in which way the mailer component should switch the connection into TLS/SSL mode.
            </summary>
            <remarks><b>SslMode</b> property of <see cref="T:MailBee.SmtpMail.SmtpServer"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, or
            <see cref="T:MailBee.ImapMail.Imap"/> classes can be used to set any of the values provided by this enumeration.</remarks>
        </member>
        <member name="F:MailBee.Security.SslStartupMode.Manual">
            <summary>
            The developer must manually call <b>StartTls</b> method of the mailer component
            to switch the connection into TLS/SSL mode.
            </summary>
        </member>
        <member name="F:MailBee.Security.SslStartupMode.OnConnect">
            <summary>
            The entire conversation with the mail server will take place under TLS/SSL layer.
            To use this mode, the developer should connect to the mail server on dedicated TLS/SSL port
            (usually, 465 for SMTP, 995 or 587 for POP3, and 993 for IMAP4).
            </summary>
        </member>
        <member name="F:MailBee.Security.SslStartupMode.UseStartTls">
            <summary>
            The mailer component will automatically call <b>StartTls</b> method when appropriate
            (prior to login for POP3/IMAP4, prior to hello for SMTP).
            No dedicated SSL/TLS port is required (the connection should be made to regular SMTP, POP3, or IMAP4 port).
            This approach provides the same security level as <see cref="F:MailBee.Security.SslStartupMode.OnConnect"/>. However, the mail server must support
            STARTTLS (STLS for POP3) extension.
            </summary>
        </member>
        <member name="T:MailBee.Security.Smime">
            <summary>
            Provides properties and methods for encrypting, decrypting, signing and verifying e-mail messages.
            </summary>
            <remarks>Using this class, you can perform the following operations with e-mail messages:
            <list type="bullet">
            <item><description>Encrypt or decrypt e-mails</description></item>
            <item><description>Sign e-mails with a digital signature</description></item>
            <item><description>Verify signatures of e-mails</description></item>
            </list>
            <note>To use this class, make sure MailBee.NET Security Powerup is licensed
            (see <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property for details).</note>
            </remarks>
            <example>
            This sample retrieves the last e-mail from the specified POP3 account,
            decrypts it if it's encrypted and verifies its signature if any. Then, it prints
            the plain-text version of the message to the console.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            Pop3 pop = <span style="color: blue;">new</span> Pop3();
            pop.Connect("server", 110, <span style="color: blue;">true</span>);
            pop.Login("login", "password");
            MailMessage msg = pop.DownloadEntireMessage(pop.InboxMessageCount);
            pop.Disconnect();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: blue;">if</span> (msg.IsEncrypted)
            	{
            		SmimeResult smResult = objSmime.DecryptAndVerify(msg, MessageVerificationFlags.All);
            		<span style="color: blue;">if</span> (smResult.VerificationResult &gt; 0)
            		{
            			Console.WriteLine("Verification failed");
            		}
            		<span style="color: blue;">else</span> <span style="color: blue;">if</span> (smResult.DecryptedMessage != <span style="color: blue;">null</span>)
            		{
            			Console.WriteLine(smResult.DecryptedMessage.BodyPlainText);
            		}
            	}
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            <span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> Pop3 = <span style="color: blue;">New</span> Pop3
            pop.Connect("server", 110, <span style="color: blue;">True</span>)
            pop.Login("login", "password")
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = pop.DownloadEntireMessage(pop.InboxMessageCount)
            pop.Disconnect()
            
            <span style="color: blue;">Try</span>
            	<span style="color: blue;">If</span> (msg.IsEncrypted) <span style="color: blue;">Then</span>
            		<span style="color: blue;">Dim</span> smResult <span style="color: blue;">As</span> SmimeResult = objSmime.DecryptAndVerify(msg, MessageVerificationFlags.All)
            		<span style="color: blue;">If</span> (smResult.VerificationResult &gt; 0) <span style="color: blue;">Then</span>
            			Console.WriteLine("Verification failed")
            		<span style="color: blue;">ElseIf</span> (<span style="color: blue;">Not</span> IsNothing(smResult.DecryptedMessage)) <span style="color: blue;">Then</span>
            			Console.WriteLine(smResult.DecryptedMessage.BodyPlainText)
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MailBee.Security.Smime"/> class.
            </summary>
            <exception cref="T:MailBee.MailBeeLicenseException">MailBee.NET Security Powerup not licensed.</exception>
        </member>
        <member name="M:MailBee.Security.Smime.Encrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateCollection)">
            <summary>
            Encrypts an e-mail message.
            <seealso cref="M:MailBee.Security.Smime.SignAndEncrypt(MailBee.Mime.MailMessage,MailBee.Security.Certificate,MailBee.Security.CertificateCollection)"/>
            </summary>
            <param name="message">The original message which should be encrypted.</param>
            <param name="encryptionCerts">The collection of public certificates of all the recipients of the message.</param>
            <returns>A reference to the encrypted message if the encryption went successfully; a reference to the original message if it was already encrypted;
            a null reference (<b>Nothing</b> in Visual Basic) if the encryption failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic) or <paramref name="encryptionCerts"/> is a null reference or an empty collection.</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">An error occurred and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method encrypts the specified message using <see cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/> and public keys of all the certificates in
            <paramref name="encryptionCerts"/> collection. If the e-mail message contains multiple recipients,
            this collection should contain all their certificates. Otherwise, those recipients which have no their certificates listed
            in <paramref name="encryptionCerts"/> will not be able to decrypt the message on their end.</para>
            <para>Thus, to encrypt a message, you need to have public certificates of its recipients. They can be stored
            in a file, in Windows registry, etc. You can check S/MIME Demo projects shipped with MailBee on how to
            open certificate stores and find out recipient certificates based on the recipient list of the message
            (which can be obtained with <see cref="M:MailBee.Mime.MailMessage.GetAllRecipients"/> method).</para>
            <para>The developer can also use <see cref="M:MailBee.Security.Smime.SignAndEncrypt(MailBee.Mime.MailMessage,MailBee.Security.Certificate,MailBee.Security.CertificateCollection)"/> method to encrypt a message and sign
            it with a digital signature in a single method call.</para>
            </remarks>
            <example>The following sample loads the message from disk, encrypts it with the recipient's certificate, and
            then saves it back to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\original.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Open the system certificate store which contains the recipients certificates.</span>
            	CertificateStore store = <span style="color: blue;">new</span> CertificateStore(CertificateStore.OtherPeople, CertStoreType.System, <span style="color: blue;">null</span>);
            	<span style="color: green;">// Search the recipient by e-mail.</span>
            	CertificateCollection encryptionCerts = store.FindCertificates("user1@domain.com", CertificateFields.EmailAddress);
            	<span style="color: green;">// Encrypt the message.</span>
            	MailMessage encMsg = objSmime.Encrypt(msg, encryptionCerts);
            	<span style="color: green;">// Save the encrypted message to the disk file.</span>
            	encMsg.SaveMessage(@"C:\Temp\encrypted.eml");
            	Console.WriteLine("Done.");
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\original.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Open the system certificate store which contains the recipients certificates.</span>
            	<span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.OtherPeople, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            	<span style="color: green;">' Search the recipient by e-mail.</span>
            	<span style="color: blue;">Dim</span> encryptionCerts <span style="color: blue;">As</span> CertificateCollection = store.FindCertificates("user1@domain.com", CertificateFields.EmailAddress)
            	<span style="color: green;">' Encrypt the message.</span>
            	<span style="color: blue;">Dim</span> encMsg <span style="color: blue;">As</span> MailMessage = objSmime.Encrypt(msg, encryptionCerts)
            	<span style="color: green;">' Save the encrypted message to disk.</span>
            	encMsg.SaveMessage("C:\Temp\encrypted.eml")
            	Console.WriteLine("Done.")
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.Sign(MailBee.Mime.MailMessage,MailBee.Security.Certificate)">
            <summary>
            Signs an e-mail message with a digital signature.
            <seealso cref="M:MailBee.Security.Smime.SignAndEncrypt(MailBee.Mime.MailMessage,MailBee.Security.Certificate,MailBee.Security.CertificateCollection)"/>
            </summary>
            <param name="message">The original e-mail message to be signed.</param>
            <param name="signingCert">The certificate to be used for signing the message. This certificate must contain a private key.</param>
            <returns>A reference to the signed message if the signing went successfully; a reference to the original message if it was already signed;
            a null reference (<b>Nothing</b> in Visual Basic) if the signing process failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> or <paramref name="signingCert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">An error occurred and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>Make sure the <see cref="T:MailBee.Security.Certificate"/> used for signing has the same <see cref="P:MailBee.Security.Certificate.EmailAddress"/> as <see cref="P:MailBee.Mime.EmailAddress.Email"/> value of <see cref="P:MailBee.Mime.MailMessage.From">MailMessage.From</see>
            of the message being signed. Otherwise, the message will still be signed successfully but it might not be trusted by its recipients when it gets delivered.</para>
            <para>To create a signature, MailBee uses <see cref="P:MailBee.Security.Smime.HashAlgorithm"/> and the private key of <paramref name="signingCert"/> to calculate a hash of the message data.</para>
            <para>The developer can also use the <see cref="M:MailBee.Security.Smime.SignAndEncrypt(MailBee.Mime.MailMessage,MailBee.Security.Certificate,MailBee.Security.CertificateCollection)"/> method to sign and encrypt a message within a single method call.</para>
            </remarks>
            <example>The following sample loads the message from disk, signs it with the sender's certificate, and
            saves it back to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespace at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\original.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Load certificate from the specified file.</span>
            	Certificate signingCert = <span style="color: blue;">new</span> Certificate(@"C:\Docs\cert.pfx", CertFileType.Pfx, "secret");
            	<span style="color: green;">// Sign the message.</span>
            	MailMessage signMsg = objSmime.Sign(msg, signingCert);
            	<span style="color: green;">// Save the signed message to disk.</span>
            	signMsg.SaveMessage(@"C:\Docs\signed.eml");
            	Console.WriteLine("Done.");
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\original.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Load certificate from the specified file.</span>
            	<span style="color: blue;">Dim</span> signingCert <span style="color: blue;">As</span> Certificate = <span style="color: blue;">New</span> Certificate("C:\Docs\cert.pfx", CertFileType.Pfx, "secret")
            	<span style="color: green;">' Sign the message.</span>
            	<span style="color: blue;">Dim</span> signMsg <span style="color: blue;">As</span> MailMessage = objSmime.Sign(msg, signingCert)
            	<span style="color: green;">' Save the signed message to disk.</span>
            	signMsg.SaveMessage("C:\Docs\signed.eml")
            	Console.WriteLine("Done.")
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)">
            <summary>
            Decrypts an e-mail message if it's encrypted.
            <seealso cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/>
            </summary>
            <param name="message">The original encrypted message to be decrypted.</param>
            <returns>A reference to <see cref="T:MailBee.Security.SmimeResult"/> object containing either the decrypted message or the original message if it was not encrypted;
            a null reference (<b>Nothing</b> in Visual Basic) if the decryption process failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">A WinAPI error occurred during opening <see cref="F:MailBee.Security.CertificateStore.Personal"/> certificate store and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">A WinAPI error occurred while performing S/MIME operation and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method looks for the appropriate certificate for decryption in the standard system certificate store named "MY" (<see cref="F:MailBee.Security.CertificateStore.Personal"/>).
            The certificate must contain a private key. In the case if the required certificate resides in another store,
            use <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateStore[])"/> overload.</para>
            <para>To access the decrypted message, use <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/> property of the returned <see cref="T:MailBee.Security.SmimeResult"/> object.
            To get the certificate used for decryption, use <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/> property of the same object.</para>
            <para>To check if the original message was encrypted, examine <see cref="P:MailBee.Mime.MailMessage.IsEncrypted"/> property value of the original <see cref="T:MailBee.Mime.MailMessage"/> object.</para>
            <para>To decrypt and verify a message within a single method call, use <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> method or its overloads.</para>
            </remarks>
            <example>This sample loads the message from disk, decrypts it, and displays its content.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\encrypted.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Decrypt the message.</span>
            	SmimeResult sResult = objSmime.Decrypt(msg);
            
            	<span style="color: green;">// Display the content of decrypted message.</span>
            	<span style="color: blue;">if</span> (sResult.DecryptedMessage != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(sResult.DecryptedMessage.BodyPlainText);
            	}
            	<span style="color: blue;">if</span> (sResult.DecryptionCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(sResult.DecryptionCertificate.Subject);
            	}
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\encrypted.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Decrypt the message.</span>
            	<span style="color: blue;">Dim</span> sResult <span style="color: blue;">As</span> SmimeResult = objSmime.Decrypt(msg)
            
            	<span style="color: green;">' Display the content of decrypted message.</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(sResult.DecryptedMessage)) <span style="color: blue;">Then</span>
            		Console.WriteLine(sResult.DecryptedMessage.BodyPlainText)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(sResult.DecryptionCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(sResult.DecryptionCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateStore[])">
            <summary>
            Decrypts an e-mail message if it's encrypted.
            <seealso cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/>
            </summary>
            <param name="message">The original encrypted message to be decrypted.</param>
            <param name="stores">The array of the certificate stores to be searched for the appropriate certificate for decrypting the message, or a null reference (<b>Nothing</b> in Visual Basic) if <see cref="F:MailBee.Security.CertificateStore.Personal"/> system storage should be used.</param>
            <returns>A reference to <see cref="T:MailBee.Security.SmimeResult"/> object containing either the decrypted message or the original message if it was not encrypted;
            a null reference (<b>Nothing</b> in Visual Basic) if the decryption process failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">A WinAPI error occurred during opening <see cref="F:MailBee.Security.CertificateStore.Personal"/> certificate store and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">A WinAPI error occurred while performing S/MIME operation and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method looks for the appropriate certificate for decryption in the specified certificate stores.
            The certificate must contain a private key.</para>
            <para>To access the decrypted message, use <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/> property of the returned <see cref="T:MailBee.Security.SmimeResult"/> object.
            To get the certificate used for decryption, use <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/> property of the same object.</para>
            <para>To check if the original message was encrypted, examine <see cref="P:MailBee.Mime.MailMessage.IsEncrypted"/> property value of the original <see cref="T:MailBee.Mime.MailMessage"/> object.</para>
            <para>To decrypt and verify a message within a single method call, use <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> method or its overloads.</para>
            </remarks>
            <example>This sample loads the message from the disk file, decrypts it, and displays its contents.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\encrypted_only.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	CertificateStore[] stores = <span style="color: blue;">new</span> CertificateStore[1];
            	stores[0] = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>);
            
            	<span style="color: green;">// Decrypt the message.</span>
            	SmimeResult sResult = objSmime.Decrypt(msg, stores);
            
            	<span style="color: green;">// Display the content of the message.</span>
            	<span style="color: blue;">if</span> (sResult.DecryptedMessage != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(sResult.DecryptedMessage.BodyPlainText);
            	}
            	<span style="color: blue;">if</span> (sResult.DecryptionCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(sResult.DecryptionCertificate.Subject);
            	}
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\encrypted_only.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: blue;">Dim</span> stores(0) <span style="color: blue;">As</span> CertificateStore
            	stores(0) = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            
            	<span style="color: green;">' Decrypt the message.</span>
            	<span style="color: blue;">Dim</span> sResult <span style="color: blue;">As</span> SmimeResult = objSmime.Decrypt(msg, stores)
            
            	<span style="color: green;">' Display the content of the message.</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(sResult.DecryptedMessage)) <span style="color: blue;">Then</span>
            		Console.WriteLine(sResult.DecryptedMessage.BodyPlainText)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(sResult.DecryptionCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(sResult.DecryptionCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)">
            <summary>
            Verifies if the signature of the specified e-mail message is valid.
            <seealso cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/>
            </summary>
            <param name="message">The message to be verified.</param>
            <param name="flags">A set of flags which specify the verification criteria.</param>
            <param name="extraStore">A reference to the certificate store containing additional certificates of the certification authorities,
            or a null reference (<b>Nothing</b> in Visual Basic) if only the system default certification authorities should be used for validating
            the certificate of the message signature.</param>
            <returns>A reference to <see cref="T:MailBee.Security.SmimeResult"/> object containing either
            a bitwise combination of <see cref="T:MailBee.Security.MessageVerificationFlags"/> indicating which conditions of <paramref name="flags"/> criteria have not been passed the verification
            or <see cref="F:MailBee.Security.MessageVerificationFlags.None"/> if the verification completed successfully or the message was not signed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para><paramref name="extraStore"/> usually needs to be set if the system default store lacks
            a certification authority which issued the certificate the message is signed with. This is common case for ASP.NET
            web applications because ASP.NET user has fewer certification authorities in its system default store than
            regular Windows users. See ASP.NET S/MIME Demo sample project shipped with MailBee for details.</para>
            <para>To check the message verification result, examine <see cref="P:MailBee.Security.SmimeResult.VerificationResult"/> property of the returned <see cref="T:MailBee.Security.SmimeResult"/> object.
            To access the signature certificate, use <see cref="P:MailBee.Security.SmimeResult.SignatureCertificate"/> property of the same object.</para>
            <para>To check if the original message had a digital signature, examine <see cref="P:MailBee.Mime.MailMessage.IsSigned"/> property value of the original <see cref="T:MailBee.Mime.MailMessage"/> object.</para>
            <para>To decrypt and verify a message within a single method call, use <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> method or its overloads.</para>
            </remarks>
            <example>This sample verifies the message signature using all the available criteria.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespace at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\signed_only.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Verify the message.</span>
            	SmimeResult smResult = objSmime.Verify(msg, MessageVerificationFlags.All, <span style="color: blue;">null</span>);
            	MessageVerificationFlags resultOptions = smResult.VerificationResult;
            	<span style="color: green;">// Check for the errors.</span>
            	<span style="color: blue;">if</span> (resultOptions != MessageVerificationFlags.None)
            	{
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.CertificateRevoked) == MessageVerificationFlags.CertificateRevoked)
            		{
            			Console.WriteLine("Error! Certificate revoked...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.MessageTampered) == MessageVerificationFlags.MessageTampered)
            		{
            			Console.WriteLine("Error! Message has been tampered...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.SignatureExpired) == MessageVerificationFlags.SignatureExpired)
            		{
            			Console.WriteLine("Error! Signature expired...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.SignerAndSenderDoNotMatch) == MessageVerificationFlags.SignerAndSenderDoNotMatch)
            		{
            			Console.WriteLine("Error! Signer and sender do not match...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.Untrusted) == MessageVerificationFlags.Untrusted)
            		{
            			Console.WriteLine("Error! Untrusted certificate...");
            		}
            	}
            	<span style="color: blue;">if</span> (smResult.SignatureCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.SignatureCertificate.Subject);
            	}
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\signed_only.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Verify the message.</span>
            	<span style="color: blue;">Dim</span> smResult <span style="color: blue;">As</span> SmimeResult = objSmime.Verify(msg, MessageVerificationFlags.All, <span style="color: blue;">Nothing</span>)
            	<span style="color: blue;">Dim</span> resultOptions <span style="color: blue;">As</span> MessageVerificationFlags = smResult.VerificationResult
            	<span style="color: green;">' Check for the errors.</span>
            	<span style="color: blue;">If</span> (resultOptions &lt;&gt; MessageVerificationFlags.None) <span style="color: blue;">Then</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.CertificateRevoked) = MessageVerificationFlags.CertificateRevoked) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Certificate revoked...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.MessageTampered) = MessageVerificationFlags.MessageTampered) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Message has been tampered...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.SignatureExpired) = MessageVerificationFlags.SignatureExpired) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Signature expired...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.SignerAndSenderDoNotMatch) = MessageVerificationFlags.SignerAndSenderDoNotMatch) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Signer and sender do not match...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.Untrusted) = MessageVerificationFlags.Untrusted) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Untrusted certificate...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.SignatureCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.SignatureCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.SignAndEncrypt(MailBee.Mime.MailMessage,MailBee.Security.Certificate,MailBee.Security.CertificateCollection)">
            <summary>
            Signs and encrypts an e-mail message.
            <seealso cref="M:MailBee.Security.Smime.Sign(MailBee.Mime.MailMessage,MailBee.Security.Certificate)"/>
            <seealso cref="M:MailBee.Security.Smime.Encrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateCollection)"/>
            </summary>
            <param name="message">The original e-mail message to be signed and encrypted.</param>
            <param name="signingCert">The certificate to be used for signing the message. This certificate must contain a private key.</param>
            <param name="encryptionCerts">The collection of public certificates of all the recipients of the message.</param>
            <returns>A reference to the signed and encrypted message if the signing and encryption went successfully; a reference to the original message if it was already signed and encrypted;
            a null reference (<b>Nothing</b> in Visual Basic) if the signing or encryption failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> or <paramref name="signingCert"/> is a null reference (<b>Nothing</b> in Visual Basic) or <paramref name="encryptionCerts"/> is a null reference or an empty collection.</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">An error occurred and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>See <see cref="M:MailBee.Security.Smime.Sign(MailBee.Mime.MailMessage,MailBee.Security.Certificate)"/> and <see cref="M:MailBee.Security.Smime.Encrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateCollection)"/> topics for details on signing and encryption process.</remarks>
            <example>This sample signs and encrypts a message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespace at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\original.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Search for the sender certificate in the system certificate store.</span>
            	CertificateStore myStore = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>);
            	CertificateCollection signingCerts = myStore.FindCertificates("user@afterlogic.com", CertificateFields.EmailAddress);
            	Certificate signingCert = <span style="color: blue;">null</span>;
            	<span style="color: blue;">if</span> (signingCerts.Count &gt; 0) signingCert = signingCerts[0];
            	<span style="color: green;">// Get the recipients certificates from the the system certificate store.</span>
            	CertificateCollection encryptionCerts = <span style="color: blue;">new</span> CertificateStore(CertificateStore.OtherPeople, CertStoreType.System, <span style="color: blue;">null</span>).GetAllCertificates();
            	<span style="color: green;">// Sign and encrypt the message.</span>
            	MailMessage signEncMsg = objSmime.SignAndEncrypt(msg, signingCert, encryptionCerts);
            	<span style="color: green;">// Save the resulting message.</span>
            	signEncMsg.SaveMessage(@"C:\Temp\result.eml");
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\original.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Search for the sender certificate in the system certificate store.</span>
            	<span style="color: blue;">Dim</span> myStore <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)
            	<span style="color: blue;">Dim</span> signingCerts <span style="color: blue;">As</span> CertificateCollection = myStore.FindCertificates("user@afterlogic.com", CertificateFields.EmailAddress)
            	<span style="color: blue;">Dim</span> signingCert <span style="color: blue;">As</span> Certificate = <span style="color: blue;">Nothing</span>
            	<span style="color: blue;">If</span> (signingCerts.Count &gt; 0) <span style="color: blue;">Then</span>
            		signingCert = signingCerts(0)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: green;">' Get the recipients certificates from the the system certificate store.</span>
            	<span style="color: blue;">Dim</span> encryptionCerts <span style="color: blue;">As</span> CertificateCollection = <span style="color: blue;">New</span> CertificateStore(CertificateStore.OtherPeople, CertStoreType.System, <span style="color: blue;">Nothing</span>).GetAllCertificates()
            	<span style="color: green;">' Sign and encrypt the message.</span>
            	<span style="color: blue;">Dim</span> signEncMsg <span style="color: blue;">As</span> MailMessage = objSmime.SignAndEncrypt(msg, signingCert, encryptionCerts)
            	<span style="color: green;">' Save the resulting message.</span>
            	signEncMsg.SaveMessage("C:\Temp\result.eml")
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)">
            <summary>
            Decrypts an e-mail message if it's encrypted and verifies its signature if it's signed.
            <seealso cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/>
            <seealso cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/>
            </summary>
            <param name="message">The original message to be decrypted and verified.</param>
            <param name="flags">A set of flags which specify the verification criteria.</param>
            <returns>A reference to <see cref="T:MailBee.Security.SmimeResult"/> object containing either the decrypted message or the original message if it was not encrypted;
            a null reference (<b>Nothing</b> in Visual Basic) if the decryption process failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">A WinAPI error occurred during opening <see cref="F:MailBee.Security.CertificateStore.Personal"/> certificate store and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">A WinAPI error occurred while performing S/MIME operation and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>The returned <see cref="T:MailBee.Security.SmimeResult"/> object provides access to the return values of this method, including
            <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/>, <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/>, <see cref="P:MailBee.Security.SmimeResult.VerificationResult"/>,
            and <see cref="P:MailBee.Security.SmimeResult.SignatureCertificate"/>.</para>
            <para>Thus, to access the decrypted message, use <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/> property;
            to get the certificate used for decryption, use <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/> property.</para>
            <para>To check the result of the message signature verification, examine <see cref="P:MailBee.Security.SmimeResult.VerificationResult"/> property value.
            To access the signature certificate, use <see cref="P:MailBee.Security.SmimeResult.SignatureCertificate"/> property.</para>
            <para>See <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/> and <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> topics for more details on decryption and verification process.</para>
            </remarks>
            <example>The sample loads the message from the disk file, decrypts and verifies it.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\encrypted.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Verify the message.</span>
            	SmimeResult smResult = objSmime.DecryptAndVerify(msg, MessageVerificationFlags.All);
            	MessageVerificationFlags resultOptions = smResult.VerificationResult;
            	<span style="color: green;">// Check whether verification has been passed successfully.</span>
            	<span style="color: blue;">if</span> (resultOptions != MessageVerificationFlags.None)
            	{
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.CertificateRevoked) == MessageVerificationFlags.CertificateRevoked)
            		{
            			Console.WriteLine("Error! Certificate revoked...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.MessageTampered) == MessageVerificationFlags.MessageTampered)
            		{
            			Console.WriteLine("Error! Message has been tampered...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.SignatureExpired) == MessageVerificationFlags.SignatureExpired)
            		{
            			Console.WriteLine("Error! Signature expired...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.SignerAndSenderDoNotMatch) == MessageVerificationFlags.SignerAndSenderDoNotMatch)
            		{
            			Console.WriteLine("Error! Signer and sender do not match...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.Untrusted) == MessageVerificationFlags.Untrusted)
            		{
            			Console.WriteLine("Error! Untrusted certificate...");
            		}
            	}
            	<span style="color: blue;">if</span> (smResult.SignatureCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.SignatureCertificate.Subject);
            	}
            	<span style="color: blue;">if</span> (smResult.DecryptionCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.DecryptionCertificate.Subject);
            	}
            	<span style="color: blue;">if</span> (smResult.DecryptedMessage != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.DecryptedMessage.BodyPlainText);
            	}
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\encrypted.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Verify the message.</span>
            	<span style="color: blue;">Dim</span> smResult <span style="color: blue;">As</span> SmimeResult = objSmime.DecryptAndVerify(msg, MessageVerificationFlags.All)
            	<span style="color: blue;">Dim</span> resultOptions <span style="color: blue;">As</span> MessageVerificationFlags = smResult.VerificationResult
            	<span style="color: green;">' Check whether verification has been passed successfully.</span>
            	<span style="color: blue;">If</span> (resultOptions &lt;&gt; MessageVerificationFlags.None) <span style="color: blue;">Then</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.CertificateRevoked) = MessageVerificationFlags.CertificateRevoked) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Certificate revoked...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.MessageTampered) = MessageVerificationFlags.MessageTampered) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Message has been tampered...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.SignatureExpired) = MessageVerificationFlags.SignatureExpired) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Signature expired...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.SignerAndSenderDoNotMatch) = MessageVerificationFlags.SignerAndSenderDoNotMatch) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Signer and sender do not match...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.Untrusted) = MessageVerificationFlags.Untrusted) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Untrusted certificate...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.SignatureCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.SignatureCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.DecryptionCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.DecryptionCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.DecryptedMessage)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.DecryptedMessage.BodyPlainText)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore[],MailBee.Security.CertificateStore)">
            <summary>
            Decrypts an e-mail message if it's encrypted and verifies its signature if it's signed.
            <seealso cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/>
            <seealso cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/>
            </summary>
            <param name="message">The original message to be decrypted and verified.</param>
            <param name="flags">A set of flags which specify the verification criteria.</param>
            <param name="storesForDecrypt">The array of the certificate stores to be searched for the appropriate certificate for decrypting the message, or a null reference (<b>Nothing</b> in Visual Basic) if <see cref="F:MailBee.Security.CertificateStore.Personal"/> system storage should be used.</param>
            <param name="extraStoreForVerify">A reference to the certificate store containing additional certificates of the certification authorities,
            or a null reference (<b>Nothing</b> in Visual Basic) if only the system default certification authorities should be used for validating
            the certificate of the message signature.</param>
            <returns>A reference to <see cref="T:MailBee.Security.SmimeResult"/> object containing either the decrypted message or the original message if it was not encrypted;
            a null reference (<b>Nothing</b> in Visual Basic) if the decryption process failed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">A WinAPI error occurred during opening <see cref="F:MailBee.Security.CertificateStore.Personal"/> certificate store and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <exception cref="T:MailBee.Security.MailBeeSmimeWin32Exception">A WinAPI error occurred while performing S/MIME operation and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>The returned <see cref="T:MailBee.Security.SmimeResult"/> object provides access to the return values of this method, including
            <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/>, <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/>, <see cref="P:MailBee.Security.SmimeResult.VerificationResult"/>,
            and <see cref="P:MailBee.Security.SmimeResult.SignatureCertificate"/>.</para>
            <para>Thus, to access the decrypted message, use <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/> property;
            to get the certificate used for decryption, use <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/> property.</para>
            <para>To check the result of the message signature verification, examine <see cref="P:MailBee.Security.SmimeResult.VerificationResult"/> property value.
            To access the signature certificate, use <see cref="P:MailBee.Security.SmimeResult.SignatureCertificate"/> property.</para>
            <para>See <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/> and <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> topics for more details on decryption and verification process.</para>
            </remarks>
            <example>This sample loads the message from the disk file, decrypts and verifies it.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Temp\encrypted.eml");
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            
            <span style="color: blue;">try</span>
            {
            	<span style="color: green;">// Verify the message.</span>
            	SmimeResult smResult = objSmime.DecryptAndVerify(msg, MessageVerificationFlags.All,
            		<span style="color: blue;">new</span> CertificateStore[] {<span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">null</span>)}, <span style="color: blue;">null</span>);
            	MessageVerificationFlags resultOptions = smResult.VerificationResult;
            	<span style="color: green;">// Check whether verification has been passed successfully.</span>
            	<span style="color: blue;">if</span> (resultOptions != MessageVerificationFlags.None)
            	{
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.CertificateRevoked) == MessageVerificationFlags.CertificateRevoked)
            		{
            			Console.WriteLine("Error! Certificate revoked...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.MessageTampered) == MessageVerificationFlags.MessageTampered)
            		{
            			Console.WriteLine("Error! Message has been tampered...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.SignatureExpired) == MessageVerificationFlags.SignatureExpired)
            		{
            			Console.WriteLine("Error! Signature expired...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.SignerAndSenderDoNotMatch) == MessageVerificationFlags.SignerAndSenderDoNotMatch)
            		{
            			Console.WriteLine("Error! Signer and sender do not match...");
            		}
            		<span style="color: blue;">if</span> ((resultOptions &amp; MessageVerificationFlags.Untrusted) == MessageVerificationFlags.Untrusted)
            		{
            			Console.WriteLine("Error! Untrusted certificate...");
            		}
            	}
            	<span style="color: blue;">if</span> (smResult.SignatureCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.SignatureCertificate.Subject);
            	}
            	<span style="color: blue;">if</span> (smResult.DecryptionCertificate != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.DecryptionCertificate.Subject);
            	}
            	<span style="color: blue;">if</span> (smResult.DecryptedMessage != <span style="color: blue;">null</span>)
            	{
            		Console.WriteLine(smResult.DecryptedMessage.BodyPlainText);
            	}
            }
            <span style="color: blue;">catch</span> (MailBeeException ex)
            {
            	Console.WriteLine(ex.Message);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Temp\encrypted.eml")
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            
            <span style="color: blue;">Try</span>
            	<span style="color: green;">' Verify the message.</span>
            	<span style="color: blue;">Dim</span> smResult <span style="color: blue;">As</span> SmimeResult = objSmime.DecryptAndVerify(msg, MessageVerificationFlags.All, _
            		<span style="color: blue;">New</span> CertificateStore() {<span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, CertStoreType.System, <span style="color: blue;">Nothing</span>)}, <span style="color: blue;">Nothing</span>)
            	<span style="color: blue;">Dim</span> resultOptions <span style="color: blue;">As</span> MessageVerificationFlags = smResult.VerificationResult
            	<span style="color: green;">' Check whether verification has been passed successfully.</span>
            	<span style="color: blue;">If</span> (resultOptions &lt;&gt; MessageVerificationFlags.None) <span style="color: blue;">Then</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.CertificateRevoked) = MessageVerificationFlags.CertificateRevoked) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Certificate revoked...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.MessageTampered) = MessageVerificationFlags.MessageTampered) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Message has been tampered...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.SignatureExpired) = MessageVerificationFlags.SignatureExpired) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Signature expired...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.SignerAndSenderDoNotMatch) = MessageVerificationFlags.SignerAndSenderDoNotMatch) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Signer and sender do not match...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">If</span> ((resultOptions &amp; MessageVerificationFlags.Untrusted) = MessageVerificationFlags.Untrusted) <span style="color: blue;">Then</span>
            			Console.WriteLine("Error! Untrusted certificate...")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.SignatureCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.SignatureCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.DecryptionCertificate)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.DecryptionCertificate.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(smResult.DecryptedMessage)) <span style="color: blue;">Then</span>
            		Console.WriteLine(smResult.DecryptedMessage.BodyPlainText)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Catch</span> ex <span style="color: blue;">As</span> MailBeeException
            	Console.WriteLine(ex.Message)
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.Smime.ResetToDefaults">
            <summary>
            Resets S/MIME settings to default values.
            </summary>
            <returns><b>true</b> if succeeded; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">Failed to create an instance of <see cref="T:MailBee.Security.CryptoServiceProvider"/> representing the default CSP and <see cref="P:MailBee.Security.Smime.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>This method reverts <see cref="P:MailBee.Security.Smime.Provider"/> property value back to the default CSP (<see cref="F:MailBee.Security.CryptoServiceProvider.Base"/>).</para>
            <para>The algorithm to use for encryption (<see cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/> property) is set to RC4.</para>
            <para>The algorithm to use for signing messages (<see cref="P:MailBee.Security.Smime.HashAlgorithm"/> property) is set to SHA1.</para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.CryptoServiceProvider"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Smime.Provider">
            <summary>
            Gets or sets the CSP to be used for cryptographic operations.
            <seealso cref="T:MailBee.Security.CryptoServiceProvider"/>
            <seealso cref="M:MailBee.Security.Smime.ResetToDefaults"/>
            </summary>
            <value>A reference to <see cref="T:MailBee.Security.CryptoServiceProvider"/> object representing the CSP to be used for cryptographic operations.
            The default CSP is <see cref="F:MailBee.Security.CryptoServiceProvider.Base"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>This property is for advanced use. Most applications do not need to change the default CSP.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.CryptoServiceProvider"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Smime.EncryptionAlgorithm">
            <summary>
            Gets or sets the algorithm to use for encrypting messages.
            <seealso cref="P:MailBee.Security.Smime.HashAlgorithm"/>
            <seealso cref="M:MailBee.Security.Smime.Encrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateCollection)"/>
            </summary>
            <value>A reference to <see cref="T:MailBee.Security.Algorithm"/> object representing the algorithm to be used for encrypting messages.
            The default algorithm is RC4.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>Usually, there is no need to change the default value of this property.</para>
            <para>In order to set this property, the developer can get <see cref="T:MailBee.Security.Algorithm"/> instance using <see cref="M:MailBee.Security.Algorithm.CreateInstanceByOid(System.String)"/>
            or <see cref="M:MailBee.Security.Algorithm.CreateInstanceById(System.Int32)"/> methods.</para>
            </remarks>
            <example>This sample sets DES encryption algorithm if it's supported by the operating system.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            Algorithm[] algs = objSmime.Provider.GetSupportedAlgorithms();
            Algorithm algDes = <span style="color: blue;">null</span>;
            
            <span style="color: green;">// Iterate through all encryption algorithms supported by CSP</span>
            <span style="color: blue;">foreach</span> (Algorithm alg <span style="color: blue;">in</span> algs)
            {
            	<span style="color: blue;">if</span> (alg.Name.ToLower() == "des")
            	{
            		algDes = alg;
            		<span style="color: blue;">break</span>;
            	}
            }
            <span style="color: blue;">if</span> (algDes != <span style="color: blue;">null</span>)
            {
            	objSmime.EncryptionAlgorithm = algDes;
            }
            </code>
            <code lang="Visul Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            <span style="color: blue;">Dim</span> algs() <span style="color: blue;">As</span> Algorithm = objSmime.Provider.GetSupportedAlgorithms()
            <span style="color: blue;">Dim</span> algDes <span style="color: blue;">As</span> Algorithm = <span style="color: blue;">Nothing</span>
            
            <span style="color: green;">' Iterate through all encryption algorithms supported by CSP</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> alg <span style="color: blue;">As</span> Algorithm <span style="color: blue;">In</span> algs
            	<span style="color: blue;">If</span> (alg.Name.ToLower() = "des") <span style="color: blue;">Then</span>
            		algDes = alg
            		<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            <span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(algDes)) <span style="color: blue;">Then</span>
            	objSmime.EncryptionAlgorithm = algDes
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Security.Smime.HashAlgorithm">
            <summary>
            Gets or sets the hash algorithm to use for signing messages with a digital signature.
            <seealso cref="M:MailBee.Security.Smime.Sign(MailBee.Mime.MailMessage,MailBee.Security.Certificate)"/>
            </summary>
            <value>A reference to <see cref="T:MailBee.Security.Algorithm"/> object representing the hash algorithm to be used for signing messages.
            The default algorithm is SHA1.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>Usually, there is no need to change the default value of this property.</para>
            <para>In order to set this property, the developer can get <see cref="T:MailBee.Security.Algorithm"/> instance using <see cref="M:MailBee.Security.Algorithm.CreateInstanceByOid(System.String)"/>
            or <see cref="M:MailBee.Security.Algorithm.CreateInstanceById(System.Int32)"/> methods.</para>
            </remarks>
            <example>This sample sets MD5 hash algorithm if it's supported by the operating system.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            Smime objSmime = <span style="color: blue;">new</span> Smime();
            Algorithm[] algs = objSmime.Provider.GetSupportedAlgorithms();
            Algorithm algHash = <span style="color: blue;">null</span>;
            
            <span style="color: green;">// Iterate through all hash algorithms supported by OS</span>
            <span style="color: blue;">foreach</span> (Algorithm alg <span style="color: blue;">in</span> algs)
            {
            	<span style="color: blue;">if</span> (alg.Name.ToLower() == "md5")
            	{
            		algHash = alg;
            		<span style="color: blue;">break</span>;
            	}
            }
            <span style="color: blue;">if</span> (algHash != <span style="color: blue;">null</span>)
            {
            	objSmime.HashAlgorithm = algHash;
            }
            </code>
            <code lang="VB">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> objSmime <span style="color: blue;">As</span> Smime = <span style="color: blue;">New</span> Smime
            <span style="color: blue;">Dim</span> algs() <span style="color: blue;">As</span> Algorithm = objSmime.Provider.GetSupportedAlgorithms()
            <span style="color: blue;">Dim</span> algHash <span style="color: blue;">As</span> Algorithm = <span style="color: blue;">Nothing</span>
            
            <span style="color: green;">' Iterate through all hash algorithms supported by OS</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> alg <span style="color: blue;">As</span> Algorithm <span style="color: blue;">In</span> algs
            	<span style="color: blue;">If</span> (alg.Name.ToLower() = "md5") <span style="color: blue;">Then</span>
            		algHash = alg
            		<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            <span style="color: blue;">If</span> (<span style="color: blue;">Not</span> IsNothing(algHash)) <span style="color: blue;">Then</span>
            	objSmime.HashAlgorithm = algHash
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Security.Smime.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors. 
            </summary>
            <value>A bool value indicating whether the object will throw exceptions
            on errors. The default value is <b>true</b>.</value>
            <remarks>When exceptions are disabled and an error occurs, the object methods return <b>false</b>
            (or a null reference (<b>Nothing</b> in Visual Basic) if the method normally returns
            an object). You can use <see cref="P:MailBee.Security.Smime.LastResult"/> members to get more information about the error.
            <note>
            Even if this property is set to <b>false</b>, the exceptions which occur
            due to errors in MailBee.NET usage will still be thrown.
            <para>
            Typical example of such errors is passing invalid arguments to methods. Such exceptions
            indicate programming errors in the application being developed, and thus cannot be supressed.
            </para>
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.Security.Smime.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="P:MailBee.Security.Smime.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
        </member>
        <member name="T:MailBee.Security.MailBeeSslException">
            <summary>
            An abstract parent for all exceptions that are thrown on TLS/SSL negotiation,
            decryption and encryption errors.
            </summary>
        </member>
        <member name="T:MailBee.Security.MailBeeCryptoProviderException">
            <summary>
            An abstract parent for all exceptions that are thrown on errors which occur during obtaining
            or examining Cryptographic Service Provider (CSP) system objects.
            </summary>
        </member>
        <member name="T:MailBee.Security.MailBeeCertificateStoreException">
            <summary>
            An abstract parent for all exceptions that are thrown on errors which occur during accessing
            certificate stores.
            </summary>
        </member>
        <member name="T:MailBee.Security.MailBeeCertificateException">
            <summary>
            An abstract parent for all exceptions that are thrown on errors which occur during accessing
            certificates.
            </summary>
        </member>
        <member name="T:MailBee.Security.MailBeeSmimeException">
            <summary>
            An abstract parent for all exceptions that are thrown on errors which occur during performing
            S/MIME operations.
            </summary>
            <value>S/MIME operations include encypting, decrypting and signing messages. Signature verification,
            being an S/MIME operation as well, does not produce <see cref="T:MailBee.Security.MailBeeSmimeException"/>, however.
            <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> method returns <see cref="F:MailBee.Security.MessageVerificationFlags.MessageTampered"/>
            if the signature is invalid but no <see cref="T:MailBee.Security.MailBeeSmimeException"/> is thrown.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeImpersonationException">
            <summary>
            An abstract parent for all exceptions that are thrown on errors which occur during starting or termniating the impersonation.
            </summary>
            <remarks>The only methods which can throw such exceptions are <see cref="M:MailBee.Security.Impersonation.LogonAs(System.String,System.String,System.String)"/> and <see cref="M:MailBee.Security.Impersonation.Logoff"/>.</remarks>
        </member>
        <member name="T:MailBee.Security.MailBeeSslWin32Exception">
            <summary>
            The exception that is thrown when underlying Win32 Schannel implementation of
            TLS/SSL functions returns an error.
            </summary>
            <remarks>
            <para>This exception is usually thrown on attempt to connect to a wrong port (for instance,
            if the client attempts to initiate TLS/SSL secure POP3 connection on port 110 instead of dedicated
            TLS/SSL port 995).</para>
            <para>If the dedicated TLS/SSL port is closed on the mail server, the client
            should attempt to connect using regular port (such as 110 for POP3) and then switch into TLS/SSL mode via STARTTLS
            (either using <b>StartTls</b> method of the mail component or specifying <see cref="F:MailBee.Security.SslStartupMode.UseStartTls"/> as
            <b>SslMode</b> property value).</para>
            <para>Another reason of having this exception thrown is an attempt to establish SSL connection using
            a client certificate when wrong password for this certificate was specified.</para>
            <para>The developer can obtain Win32 code of the occurred error from <see cref="P:MailBee.Security.MailBeeSslWin32Exception.NativeErrorCode"/> property.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Security.MailBeeSslWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by SSL-related WinAPI function.
            </summary>
            <value>An integer value representing the error code returned by one of the functions
            of Microsoft Schannel security package.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeCryptoProviderWin32Exception">
            <summary>
            The exception which is thrown when the underlying CSP-related WinAPI function returns an error.
            <seealso cref="T:MailBee.Security.CryptoServiceProvider"/>
            </summary>
            <remarks>
            <para>This exception is typically thrown when the name of the Cryptographic Service Provider (CSP) is specified incorrectly during creating an instance of <see cref="T:MailBee.Security.CryptoServiceProvider"/> class.</para>
            <para>The developer can obtain Win32 code of the occurred error from <see cref="P:MailBee.Security.MailBeeCryptoProviderWin32Exception.NativeErrorCode"/> property.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Security.MailBeeCryptoProviderWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by CSP-related WinAPI function.
            </summary>
            <value>An integer value representing the error code returned by CSP-related WinAPI function.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeCertificateStoreWin32Exception">
            <summary>
            The exception which is thrown when the underlying WinAPI function related to certificate store management returns an error.
            <seealso cref="T:MailBee.Security.CertificateStore"/>
            </summary>
            <remarks>
            <para>This exception is typically thrown when the underlying CryptoAPI functions cannot open the certificate store accordingly the specified parameters.</para>
            <para>The developer can obtain Win32 code of the occurred error from <see cref="P:MailBee.Security.MailBeeCertificateStoreWin32Exception.NativeErrorCode"/> property.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Security.MailBeeCertificateStoreWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by the WinAPI function.
            </summary>
            <value>An integer value representing the error code returned by the WinAPI function related to certificate store management.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeCertificateWin32Exception">
            <summary>
            The exception which is thrown when the underlying WinAPI function related to certificate management returns an error.
            <seealso cref="T:MailBee.Security.Certificate"/>
            </summary>
            <remarks>
            <para>This exception is typically thrown when the underlying CryptoAPI functions cannot open the certificate accordingly the specified parameters.</para>
            <para>The developer can obtain Win32 code of the occurred error from <see cref="P:MailBee.Security.MailBeeCertificateWin32Exception.NativeErrorCode"/> property.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Security.MailBeeCertificateWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by the WinAPI function.
            </summary>
            <value>An integer value representing the error code returned by the WinAPI function related to certificate management.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeCertificateParsingException">
            <summary>
            The exception which is thrown when it's not possible to parse the certificate data.
            <seealso cref="T:MailBee.Security.Certificate"/>
            </summary>
            <remarks>
            This exception is typically thrown on attempt to create <see cref="T:MailBee.Security.Certificate"/> object from invalid data.
            For instance, this may occur on attempt to open a certificate as <see cref="F:MailBee.Security.CertFileType.Pfx"/> while it's actually <see cref="F:MailBee.Security.CertFileType.P7b"/>.
            </remarks>
        </member>
        <member name="T:MailBee.Security.MailBeeSmimeWin32Exception">
            <summary>
            The exception which is thrown when the underlying S/MIME WinAPI function responsible for decrypting, encrypting or signing data returns an error.
            <seealso cref="T:MailBee.Security.Smime"/>
            </summary>
            <remarks>
            This exception is typically thrown if there is no certificate with a private key which can be used in order
            to decrypt an encoded message. Another common case takes place when the message is signed with the certificate which does not have the private key.
            <para>The developer can obtain Win32 code of the occurred error from <see cref="P:MailBee.Security.MailBeeSmimeWin32Exception.NativeErrorCode"/> property.</para>
            </remarks>
        </member>
        <member name="P:MailBee.Security.MailBeeSmimeWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by S/MIME-related WinAPI function.
            </summary>
            <value>An integer value representing the error code returned by the WinAPI function related to S/MIME.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeCertificateValidationException">
            <summary>
            The exception which is thrown during TLS/SSL handshake when automatic certificate validation is enabled and
            the server certificate does not pass the specified validation conditions.
            <seealso cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/>
            </summary>
            <remarks>To determine the exact conditions which failed to be met during validation, use <see cref="P:MailBee.Security.MailBeeCertificateValidationException.Status"/> property.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.ClientServerCertificates"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.MailBeeCertificateValidationException.Status">
            <summary>
            A set of flags which indicate the validation conditions which have not been met during validation
            of the server certificate.
            </summary>
            <value>A bitwise combination of <see cref="T:MailBee.Security.CertificateValidationFlags"/> which indicate the problems with the server certificate.</value>
            <remarks>This value lists all <see cref="T:MailBee.Security.CertificateValidationFlags"/> the validation has failed for, regardless if
            <see cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/> property value listed them or not. For instance, if
            <see cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/> value was <see cref="F:MailBee.Security.CertificateValidationFlags.IsNotTimeValid"/>
            and the validation process found that all the certificate fields are invalid (not just its datetime), <see cref="P:MailBee.Security.MailBeeCertificateValidationException.Status"/>
            property will return <see cref="F:MailBee.Security.CertificateValidationFlags.All"/>,
            not just <see cref="F:MailBee.Security.CertificateValidationFlags.IsNotTimeValid"/>.
            Thus, <see cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/> only controls whether the exception should be thrown if certain
            validation conditions are not met but it does not affect the returned value of <see cref="P:MailBee.Security.MailBeeCertificateValidationException.Status"/> property.</remarks>
            <example>The example is available in <see cref="T:MailBee.Security.ClientServerCertificates"/> topic.</example>
        </member>
        <member name="T:MailBee.Security.MailBeeImpersonationWin32Exception">
            <summary>
            The exception which is thrown when the underlying WinAPI function related to impersonation returns an error.
            <seealso cref="T:MailBee.Security.Impersonation"/>
            </summary>
            <remarks>This exception can only be thrown by <see cref="T:MailBee.Security.Impersonation"/> class methods.</remarks>
        </member>
        <member name="P:MailBee.Security.MailBeeImpersonationWin32Exception.NativeErrorCode">
            <summary>
            The Win32 error code value returned by the WinAPI function.
            </summary>
            <value>An integer value representing the error code returned by the WinAPI function related to impersonation.</value>
        </member>
        <member name="T:MailBee.Security.MailBeeDomainKeysException">
            <summary>
            The exception that is thrown when DomainKeys operation (signing or verification) cannot be performed.
            </summary>
        </member>
        <member name="T:MailBee.Security.ClientServerCertificates">
            <summary>
            Provides methods and properties for accessing client and server certificates 
            which are used in order to establish secure SSL connection with a mail server. 
            <seealso cref="T:MailBee.Security.Certificate"/>
            </summary>
            <remarks>
            <para>You can use this class to assign the client certificate to be presented to the mail server
            during SSL handshakes, or to access the server certificate which becomes available to the client
            once SSL handshake is done, or both. Also, you can tell MailBee to automatically validate the
            server certificate against any of the available criteria and throw exception if the server certificate
            does not pass the test.</para>
            <para><see cref="T:MailBee.Security.ClientServerCertificates"/> instance is available through
            <see cref="P:MailBee.SmtpMail.SmtpServer.SslCertificates">SmtpServer.SslCertificates</see>,
            <see cref="P:MailBee.Pop3Mail.Pop3.SslCertificates">Pop3.SslCertificates</see>
            and <see cref="P:MailBee.ImapMail.Imap.SslCertificates">Imap.SslCertificates</see> properties.</para>
            <note>To use this class, make sure MailBee.NET Security Powerup is licensed
            (see <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property for details).</note>
            </remarks>
            <example>This sample attempts to select a client certificate to be presented to the mail server,
            connects to the server (dedicated SSL connection, not STARTTLS), and automatically validates the server certificate. If the server certificate
            is invalid, the sample reports what exactly is wrong with the server certificate.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Start SSL handshake on "connecting to server" stage (dedicated port connection).</span>
            		<span style="color: green;">// If you wish to use STARTTLS (regular port connection), select UseStartTls value</span>
            		<span style="color: green;">// (port would be 110 and SSL handshake would occur later on StartTls or Login call).</span>
            		pop.SslMode = SslStartupMode.OnConnect;
            
            		<span style="color: green;">// Open Personal store of certificates, attempt to find the certificate containing</span>
            		<span style="color: green;">// "john" in the email address or name, and present this certificate to the server.</span>
            		CertificateStore store = <span style="color: blue;">new</span> CertificateStore(CertificateStore.Personal,
            			CertStoreType.System, <span style="color: blue;">null</span>);
            		CertificateCollection certs = store.FindCertificates("john",
            			CertificateFields.EmailAddress | CertificateFields.Name);
            		store.Dispose();
            		<span style="color: blue;">if</span> (certs.Count &gt; 0)
            		{
            			pop.SslCertificates.Client = certs[0];
            			Console.WriteLine("Client certificate set.");
            		}
            		<span style="color: blue;">else</span>
            		{
            			<span style="color: green;">// Most servers do not require clients to authenticate themselves via SSL</span>
            			<span style="color: green;">// certificates so that anonymous SSL connection usually works too unless</span>
            			<span style="color: green;">// your server is an exception.</span>
            			Console.WriteLine("Client certificate not set, the connection will be anonymous.");
            		}
            
            		<span style="color: green;">// Tell MailBee to automatically validate the server certificate and</span>
            		<span style="color: green;">// throw exception if any of the available conditions is not met.</span>
            		pop.SslCertificates.AutoValidation = CertificateValidationFlags.All;
            		<span style="color: blue;">try</span>
            		{
            			pop.Connect("mail.domain.com", 995);	<span style="color: green;">// 995 is dedicated S/POP3 port.</span>
            			pop.Disconnect();
            		}
            		<span style="color: blue;">catch</span> (MailBeeCertificateValidationException e)
            		{
            			<span style="color: green;">// Server certificate is not valid.</span>
            			Console.WriteLine(e.Message);
            
            			<span style="color: green;">// Build a string which lists the names of all the flags</span>
            			<span style="color: green;">// the certificate validation process has failed for.</span>
            			<span style="color: blue;">string</span> reasons = <span style="color: blue;">string</span>.Empty;
            			CertificateValidationFlags flags = e.Status;
            			<span style="color: blue;">int</span> mask = 1;
            			<span style="color: blue;">while</span> (flags &gt; 0)
            			{
            				CertificateValidationFlags flag = flags &amp; (CertificateValidationFlags)mask;
            				<span style="color: blue;">if</span> (flag != CertificateValidationFlags.None)
            				{
            					<span style="color: blue;">if</span> (reasons.Length &gt; 0)
            					{
            						reasons += ", ";
            					}
            					reasons += flag.ToString();
            					flags &amp;= (CertificateValidationFlags)~mask;
            				}
            				mask &lt;&lt;= 1;
            			}
            
            			Console.WriteLine("Reasons: " + reasons);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> Pop3 = <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Start SSL handshake on "connecting to server" stage (dedicated port connection).</span>
            		<span style="color: green;">' If you wish to use STARTTLS (regular port connection), select UseStartTls value</span>
            		<span style="color: green;">' (port would be 110 and SSL handshake would occur later on StartTls or Login call).</span>
            		pop.SslMode = SslStartupMode.OnConnect
            
            		<span style="color: green;">' Open Personal store of certificates, attempt to find the certificate containing</span>
            		<span style="color: green;">' "john" in the email address or name, and present this certificate to the server.</span>
            		<span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore(CertificateStore.Personal, _
            						 CertStoreType.System, <span style="color: blue;">Nothing</span>)
            		<span style="color: blue;">Dim</span> certs <span style="color: blue;">As</span> CertificateCollection = store.FindCertificates("john", _
            							CertificateFields.EmailAddress <span style="color: blue;">Or</span> CertificateFields.Name)
            		store.Dispose()
            		<span style="color: blue;">If</span> certs.Count &gt; 0 <span style="color: blue;">Then</span>
            			pop.SslCertificates.Client = certs(0)
            			Console.WriteLine("Client certificate set.")
            		<span style="color: blue;">Else</span>
            			<span style="color: green;">' Most servers do not require clients to authenticate themselves via SSL</span>
            			<span style="color: green;">' certificates so that anonymous SSL connection usually works too unless</span>
            			<span style="color: green;">' your server is an exception.</span>
            			Console.WriteLine("Client certificate not set, the connection will be anonymous.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		<span style="color: green;">' Tell MailBee to automatically validate the server certificate and</span>
            		<span style="color: green;">' throw exception if any of the available conditions is not met.</span>
            		pop.SslCertificates.AutoValidation = CertificateValidationFlags.All
            		<span style="color: blue;">Try</span>
            			pop.Connect("mail.domain.com", 995) <span style="color: green;">' 995 is dedicated S/POP3 port.</span>
            			pop.Disconnect()
            		<span style="color: blue;">Catch</span> e <span style="color: blue;">As</span> MailBeeCertificateValidationException
            			<span style="color: green;">' Server certificate is not valid.</span>
            			Console.WriteLine(e.Message)
            
            			<span style="color: green;">' Build a string which lists the names of all the flags</span>
            			<span style="color: green;">' the certificate validation process has failed for.</span>
            			<span style="color: blue;">Dim</span> reasons <span style="color: blue;">As</span> <span style="color: blue;">String</span> = <span style="color: blue;">String</span>.Empty
            			<span style="color: blue;">Dim</span> flags <span style="color: blue;">As</span> CertificateValidationFlags = e.Status
            			<span style="color: blue;">Dim</span> mask <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 1
            			<span style="color: blue;">While</span> flags &gt; 0
            				<span style="color: blue;">Dim</span> flag <span style="color: blue;">As</span> CertificateValidationFlags = flags &amp; <span style="color: blue;">CType</span>(mask, CertificateValidationFlags)
            				<span style="color: blue;">If</span> flag &lt;&gt; CertificateValidationFlags.None <span style="color: blue;">Then</span>
            					<span style="color: blue;">If</span> reasons.Length &gt; 0 <span style="color: blue;">Then</span>
            						reasons &amp;= ", "
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            					reasons &amp;= flag.ToString()
            					flags = flags <span style="color: blue;">And</span> <span style="color: blue;">CType</span>(<span style="color: blue;">Not</span> (mask), CertificateValidationFlags)
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				mask &lt;&lt;= 1
            			<span style="color: blue;">End</span> <span style="color: blue;">While</span>
            
            			Console.WriteLine("Reasons: " &amp; reasons)
            		<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.ClientServerCertificates.Dispose">
            <summary>
            Releases the resources associated with the current <see cref="T:MailBee.Security.ClientServerCertificates"/> object.
            </summary>
        </member>
        <member name="P:MailBee.Security.ClientServerCertificates.AutoValidation">
            <summary>
            Gets or sets the flags against which the server certificate should be automatically validated.
            <seealso cref="M:MailBee.Security.Certificate.Validate"/>
            <seealso cref="P:MailBee.Security.ClientServerCertificates.Server"/>
            </summary>
            <value>A combination of one or more <see cref="T:MailBee.Security.CertificateValidationFlags"/> values.
            The default value is <see cref="F:MailBee.Security.CertificateValidationFlags.None"/>.</value>
            <remarks>
            <para>If this property value is not <see cref="F:MailBee.Security.CertificateValidationFlags.None"/> and SSL handshake starts,
            MailBee will automatically validate the server certificate against all the flags specified.</para>
            <para>If the server certificate fails to pass validation against any of the flags specified, MailBee closes the connection and throws
            <see cref="T:MailBee.Security.MailBeeCertificateValidationException"/>.</para>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.ClientServerCertificates"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.ClientServerCertificates.Client">
            <summary>
            Gets or sets the client certificate.
            <seealso cref="P:MailBee.Security.ClientServerCertificates.Server"/>
            </summary>
            <value>A <see cref="T:MailBee.Security.Certificate"/> object representing the client's certificate if specified by the application.
            The default value is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>
            This certificate represents the client during the SSL handshake. If this certificate is not valid or missing,
            the server may break the connection. Most servers, however, do not require the client to
            present a certificate.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.ClientServerCertificates"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.ClientServerCertificates.Server">
            <summary>
            Gets the server certificate.
            <seealso cref="P:MailBee.Security.ClientServerCertificates.Client"/>
            </summary>
            <value>A <see cref="T:MailBee.Security.Certificate"/> object representing the certificate that was received 
            from the server once SSL handshake was completed, or a null reference (<b>Nothing</b> in Visual Basic) if
            SSL handshake is not yet completed or not connected to the server. The default value is a null reference.</value>
            <remarks>
            To tell MailBee to validate the server certificate automatically during SSL handshake, use <see cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/> property.
            To validate it manulally, use <see cref="M:MailBee.Security.Certificate.Validate"/> method of <see cref="P:MailBee.Security.ClientServerCertificates.Server"/> object once
            SSL handshake is done. You can also subscribe to <b>TlsStarted</b> event published by mailer components such as <see cref="T:MailBee.Pop3Mail.Pop3"/>
            to catch the very moment when the SSL handshake is done.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Security.ClientServerCertificates"/> topic.</example>
        </member>
        <member name="T:MailBee.Security.Algorithm">
            <summary>
            Represents a cryptographic algorithm used for signing and encryption operations.
            <seealso cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/>
            <seealso cref="P:MailBee.Security.Smime.HashAlgorithm"/>
            <seealso cref="T:MailBee.Security.CryptoServiceProvider"/>
            </summary>
            <remarks>
            <para>MailBee automatically selects the appropriate algorithms accordingly Windows defaults.</para>
            <para>
            Use this class only if the application logic requires using certain cryptographic algorithms.
            To select algorithms to be used by S/MIME functions of MailBee, set <see cref="P:MailBee.Security.Smime.EncryptionAlgorithm">Smime.EncryptionAlgorithm</see> or
            <see cref="P:MailBee.Security.Smime.HashAlgorithm">Smime.HashAlgorithm</see> properties.
            </para>
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/> topic.</example>
        </member>
        <member name="M:MailBee.Security.Algorithm.CreateInstanceByOid(System.String)">
            <summary>
            Returns <see cref="T:MailBee.Security.Algorithm"/> object by the specified system object identifier.
            <seealso cref="P:MailBee.Security.Algorithm.Oid"/>
            <seealso cref="M:MailBee.Security.Algorithm.CreateInstanceById(System.Int32)"/>
            </summary>
            <param name="oid">The string containing the object identifier (OID) of the cryptographic algorithm.</param>
            <returns>
            The corresponding <see cref="T:MailBee.Security.Algorithm"/> object, or a null reference (<b>Nothing</b> in Visual Basic) if
            no algorithm matching the specified OID was found.
            </returns>
            <remarks>
            <para>To view the full list of encryption and hash algorithms, refer to CRYPT_ALGORITHM_IDENTIFIER
            page of MSDN library.</para>
            <para>For instance, to obtain RC4 algorithm (used for encryption), pass "1.2.840.113549.3.4" string to this method.</para>
            <para>Or, to obtain MD5 hash algorithm (used for signing), pass "1.2.840.113549.1.1.4" string instead.</para>
            </remarks>
        </member>
        <member name="M:MailBee.Security.Algorithm.CreateInstanceById(System.Int32)">
            <summary>
            Returns <see cref="T:MailBee.Security.Algorithm"/> object by the specified identifier.
            <seealso cref="P:MailBee.Security.Algorithm.ID"/>
            <seealso cref="M:MailBee.Security.Algorithm.CreateInstanceByOid(System.String)"/>
            </summary>
            <param name="algId">The integer value representing the algorithm identifier (ID).</param>
            The corresponding <see cref="T:MailBee.Security.Algorithm"/> object, or a null reference (<b>Nothing</b> in Visual Basic) if
            no algorithm matching the specified ID was found.
        </member>
        <member name="P:MailBee.Security.Algorithm.ID">
            <summary>
            Gets the unique cryptographic algorithm identifier used by CryptoAPI.
            <seealso cref="T:MailBee.Security.CryptoServiceProvider"/>
            <seealso cref="P:MailBee.Security.Algorithm.Oid"/>
            </summary>
            <remarks>
            The developers of new custom cryptographic algorithms and new Cryptographic Service Providers can define new
            unique ID values.
            </remarks>
            <value>An integer value of the unique identifier of the cryptographic algorithm.
            </value>
            <example>
            The example is available in <see cref="P:MailBee.Security.Certificate.SignatureAlgorithm"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Security.Algorithm.BitLength">
            <summary>
            Gets the length of key used for message encryption in the cryptographic algorithm.
            </summary>
            <remarks>
            The same cryptographic algorithm can have a different length of key. A larger key provides a stronger encryption.
            </remarks>
            <value>
            An integer valuer specifying the length of the key of the cryptographic algorithm.
            </value>
            <example>
            The example is available in <see cref="P:MailBee.Security.Certificate.SignatureAlgorithm"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Security.Algorithm.Category">
            <summary>
            Gets the category (type) of cryptographic algorithm.
            <seealso cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/>
            <seealso cref="P:MailBee.Security.Smime.HashAlgorithm"/>
            </summary>
            <remarks>
            <see cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/> and <see cref="P:MailBee.Security.Smime.HashAlgorithm"/> algorithms must
            have the appropriate categories. For instance, an algorithm having <see cref="F:MailBee.Security.AlgorithmCategory.Signature"/>
            category can be used as <see cref="P:MailBee.Security.Smime.HashAlgorithm"/> but not as <see cref="P:MailBee.Security.Smime.EncryptionAlgorithm"/>.
            </remarks>
            <value>An <see cref="T:MailBee.Security.AlgorithmCategory"/> value specifying the category of the algorithm.</value>
        </member>
        <member name="P:MailBee.Security.Algorithm.Name">
            <summary>
            Gets the name of cryptographic algorithm.
            </summary>
            <value>
            A string containing the algorithm name.
            </value>
            <example>The example is available in <see cref="P:MailBee.Security.Certificate.SignatureAlgorithm"/> topic.</example>
        </member>
        <member name="P:MailBee.Security.Algorithm.Oid">
            <summary>
            Gets the unique string used by the operating system to identify this cryptographic algorithm.
            <seealso cref="P:MailBee.Security.Algorithm.ID"/>
            </summary>
            <remarks>
            An object identifier is a string consisting of a numeric sequence delimited by dots
            (i.e. <i>"1.2.840.113549.1.1.4"</i>, <i>"1.2.840.113549.3.4"</i>, <i>"2.5"</i>, etc).
            Some algorithms, however, may have no object identifier assigned.
            </remarks>
            <value>A string identifying the algorithm in the operating system.</value>
            <example>
            The example is available in <see cref="P:MailBee.Security.Certificate.SignatureAlgorithm"/> topic.
            </example>
        </member>
        <member name="T:MailBee.Mime.MessageParserConfig">
            <summary>
            Provides properties and methods which affect how the mail message is being parsed 
            from the raw data (MIME source) into the <see cref="T:MailBee.Mime.MailMessage"/> object properties and collections.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Builder"/>
            </summary>
            <remarks>
            <see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.
            </remarks>
            <example>
            This sample creates a new message, tells MailBee parser to save the message as message.htm file (and related files if any)
            during parsing the message, and parses the message to make message.htm be saved.
            <note>The message will be parsed automatically if it was not yet parsed and the application requested any item of the message
            which can be obtained from parsed message only. For instance, reading <see cref="P:MailBee.Mime.MailMessage.Subject"/> property or accessing
            <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection will trigger the parser if the message was not parsed yet.
            However, in this sample we do not need any values of <see cref="T:MailBee.Mime.MailMessage"/> properties and thus we request parsing explicitly
            using <see cref="M:MailBee.Mime.MessageParserConfig.Apply"/> method.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Download the first message from the mail server.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("mail.domain.com", "jdoe", "secret", 1);
            
            		<span style="color: green;">// By default, MailBee does not store anything to disk during parsing messages.</span>
            		<span style="color: green;">// Tell MailBee parser to save the message as message.htm file during parsing.</span>
            		msg.Parser.AutoSaveHtmlMode = HtmlMessageAutoSaving.SaveMessageHtmAndRelatedFiles;
            
            		<span style="color: green;">// By default, MailBee does not create HTML version for plain-text messages. To</span>
            		<span style="color: green;">// make sure the created message.htm will not be empty in the case of plain-text</span>
            		<span style="color: green;">// message, tell MailBee to create HTML version (which will then be saved as</span>
            		<span style="color: green;">// message.htm file). Thus, if the message does contain HTML version, it will be</span>
            		<span style="color: green;">// used. If not, MailBee will generate it.</span>
            		msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml;
            
            		<span style="color: green;">// By default, message.htm would be saved in the current folder of the application.</span>
            		<span style="color: green;">// Tell MailBee to save message.htm and related files into another location.</span>
            		msg.Parser.WorkingFolder = @"C:\Docs";
            
            		<span style="color: green;">// Apply parsing and make message.htm file be saved. Alternatively, we could have</span>
            		<span style="color: green;">// just called reading msg.Subject or similar property to trigger the parser.</span>
            		<span style="color: green;">// However, it would not be elegant approach. Also, Apply method will make the</span>
            		<span style="color: green;">// message get reparsed if it was already parsed. This is not used in the current</span>
            		<span style="color: green;">// sample but can be helpful if you need to apply different parsing settings to</span>
            		<span style="color: green;">// the same message.</span>
            		msg.Parser.Apply();
            
            		<span style="color: green;">// Show the path of the folder where message.htm was saved.</span>
            		Console.WriteLine(msg.Parser.GetMessageFolder());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Download the first message from the mail server.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("mail.domain.com", "jdoe", "secret", 1)
            
            		<span style="color: green;">' By default, MailBee does not store anything to disk during parsing messages.</span>
            		<span style="color: green;">' Tell MailBee parser to save the message as message.htm file during parsing.</span>
            		msg.Parser.AutoSaveHtmlMode = HtmlMessageAutoSaving.SaveMessageHtmAndRelatedFiles
            
            		<span style="color: green;">' By default, MailBee does not create HTML version for plain-text messages. To</span>
            		<span style="color: green;">' make sure the created message.htm will not be empty in the case of plain-text</span>
            		<span style="color: green;">' message, tell MailBee to create HTML version (which will then be saved as</span>
            		<span style="color: green;">' message.htm file). Thus, if the message does contain HTML version, it will be</span>
            		<span style="color: green;">' used. If not, MailBee will generate it.</span>
            		msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml
            
            		<span style="color: green;">' By default, message.htm would be saved in the current folder of the application.</span>
            		<span style="color: green;">' Tell MailBee to save message.htm and related files into another location.</span>
            		msg.Parser.WorkingFolder = "C:\Docs"
            
            		<span style="color: green;">' Apply parsing and make message.htm file be saved. Alternatively, we could have</span>
            		<span style="color: green;">' just called reading msg.Subject or similar property to trigger the parser.</span>
            		<span style="color: green;">' However, it would not be elegant approach. Also, Apply method will make the</span>
            		<span style="color: green;">' message get reparsed if it was already parsed. This is not used in the current</span>
            		<span style="color: green;">' sample but can be helpful if you need to apply different parsing settings to</span>
            		<span style="color: green;">' the same message.</span>
            		msg.Parser.Apply()
            
            		<span style="color: green;">' Show the path of the folder where message.htm was saved.</span>
            		Console.WriteLine(msg.Parser.GetMessageFolder())
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MessageParserConfig.Apply">
            <summary>
            Applies the current parsing options and re-parses the message.
            </summary>
            <remarks>
            <para>A mail message does not get parsed until any of its properties which requires parsing has been accessed.
            For instance, if you just received a message from the mail server, it does not get parsed as this point. You may set the required
            parsing options at this point and then access any of the properties or methods of this message which make it get parsed.
            No need to call <see cref="M:MailBee.Mime.MessageParserConfig.Apply"/> methods in this case.</para>
            <para>However, you may need to call this method if the parsing settings have changed
            after the message has already been parsed (for instance, you accessed the property which made the message get parsed and from this property value
            you found out that you need to reparse the message with different setting). See <see cref="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly"/> topic for more information.</para>
            </remarks>
            <example>The example is available int <see cref="T:MailBee.Mime.MessageParserConfig"/> topic.
            </example>
        </member>
        <member name="M:MailBee.Mime.MessageParserConfig.GetMessageFolder">
            <summary>
            Returns the full path to the folder where the message files were saved by
            <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> or <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/> method calls
            or by enabled message autosave mechanism.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/>
            </summary>
            <returns>A string containing the full path to the folder where the message files were saved due to calling
            <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> or or <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/> methods or due to parsing the message
            with enabled autosave mechanism, or a null reference (<b>Nothing</b> in Visual Basic) if no files have been saved yet (the methods above have not been called yet,
            the message with enabled autosave mechanism was not parsed yet, or the files saved by these methods have already been deleted on <see cref="M:MailBee.Mime.MessageParserConfig.Reset"/> or <see cref="M:MailBee.Mime.MailMessage.Dispose"/>
            call).</returns>
            <remarks>
            <para>For example, this method is useful when the message files were saved into the unique folder (created in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> by
            <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method with <i>folderMode</i> parameter
            set to <see cref="F:MailBee.Mime.MessageFolderBehavior.CreateOnly"/>). In this case, the unique folder is created but not automatically deleted
            when the <see cref="T:MailBee.Mime.MailMessage"/> object gets destroyed. The developer can call this method to get the unique folder path, save it somewhere
            (such as ASP.NET Session) and then use this path to delete the folder later.</para>
            <para>If <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> was called with <i>folderMode</i>
            set to <see cref="F:MailBee.Mime.MessageFolderBehavior.DoNotCreate"/> (or parameterless overload of <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> was used),
            no unique folder is created, all message files are stored directly in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/>, and <see cref="M:MailBee.Mime.MessageParserConfig.GetMessageFolder"/> method
            returns the same value as <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> property.</para>
            <para>Automatic saving of the message files during parsing the message can be enabled with <see cref="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode"/> if required. By default,
            MailBee does not write anything to disk during parsing.</para>
            <para>When <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> is a null reference,
            it's internally assumed that <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> specifies the system temporary folder of the current user.
            Thus, <see cref="M:MailBee.Mime.MessageParserConfig.GetMessageFolder"/> value will be different from <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> (which is a null reference)
            but the behaviour will be the same as described above (for instance, in regard to whether to create unique message sub-folders in the specified folder, etc).</para>
            </remarks>
            <example>This sample demonstrates how to get the path of the folder with the message files if MailBee is configured to create
            unique folder specially for this message within the specified folder.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.WorkingFolder = @"C:\Temp";
            Console.WriteLine(msg.GetHtmlAndSaveRelatedFiles(@"C:\Temp",
            	VirtualMappingType.NonWeb,
            	MessageFolderBehavior.CreateAndDelete));
            Console.WriteLine(msg.Parser.GetMessageFolder());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.WorkingFolder = "C:\Temp"
            Console.WriteLine(msg.GetHtmlAndSaveRelatedFiles("C:\Temp", _
            	VirtualMappingType.NonWeb, _
            	MessageFolderBehavior.CreateAndDelete))
            Console.WriteLine(msg.Parser.GetMessageFolder())
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MessageParserConfig.Reset">
            <summary>
            Resets the parsing settings to the default values.
            </summary>
        </member>
        <member name="M:MailBee.Mime.MessageParserConfig.SetHtmlOutputMode">
            <summary>
            Configures the parser to prepare the message for displaying in HTML container (such as browser).
            <seealso cref="M:MailBee.Mime.MessageParserConfig.Apply"/>
            <seealso cref="M:MailBee.Mime.MessageParserConfig.SetPlainOutputMode"/>
            </summary>
            <remarks>
            This method configures the parser as follows:
            <list type="bullet">
            <item><description><c>PlainToHtmlMode=PlainToHtmlAutoConvert.IfNoHtml;</c></description></item>
            <item><description><c>HtmlToPlainMode=HtmlToPlainAutoConvert.Never;</c></description></item>
            <item><description><c>HtmlToSimpleHtmlMode=HtmlToSimpleHtmlAutoConvert.Never;</c></description></item>
            <item><description><c>HeadersAsHtml=true;</c></description></item>
            </list>
            You should call this method before the message gets parsed. If you called it after, you should reparse it with <see cref="M:MailBee.Mime.MessageParserConfig.Apply"/> method.
            </remarks>
        </member>
        <member name="M:MailBee.Mime.MessageParserConfig.SetPlainOutputMode">
            <summary>
            Configures the parser to prepare the message for displaying in plain-text container (such as a TextBox control in WinForms application or the console).
            <seealso cref="M:MailBee.Mime.MessageParserConfig.Apply"/>
            <seealso cref="M:MailBee.Mime.MessageParserConfig.SetHtmlOutputMode"/>
            </summary>
            <remarks>
            This method configures the parser as follows:
            <list type="bullet">
            <item><description><c>PlainToHtmlMode=PlainToHtmlAutoConvert.Never;</c></description></item>
            <item><description><c>HtmlToPlainMode=HtmlToPlainAutoConvert.IfNoPlain</c></description></item>
            <item><description><c>HtmlToSimpleHtmlMode=HtmlToSimpleHtmlAutoConvert.Never;</c></description></item>
            <item><description><c>HeadersAsHtml=false;</c></description></item>
            </list>
            To specify an output message in HTML text mode, use <see cref="M:MailBee.Mime.MessageParserConfig.SetPlainOutputMode"/> property.
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MessageParserConfig"/> class overview.
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.AHRefCleanup">
            <summary>
            Gets or sets the options of processing &lt;A HREF&gt; tags in the HTML body.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.AHRefSuffix"/>
            <seealso cref="T:MailBee.Html.Processor"/>
            </summary>
            <value>
            A set of flags specifying the attributes which should be removed from all &lt;A HREF&gt; tags.
            The default value is <see cref="F:MailBee.Mime.AHRefTagAttributes.None"/>.
            </value>
            <remarks>
            <para>You can use this and <see cref="P:MailBee.Mime.MessageParserConfig.AHRefSuffix"/> properties together to decorate &lt;A HREF&gt; tags,
            for instance, remove <see cref="F:MailBee.Mime.AHRefTagAttributes.Target"/> attribute and add <i>target=_blank</i> to every
            &lt;A HREF&gt; tag to make links open in a new window.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file and removes all <see cref="F:MailBee.Mime.AHRefTagAttributes.Onclick"/> attributes from
            all &lt;A HREF&gt; tags.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.AHRefCleanup = AHRefTagAttributes.Onclick;
            msg.Parser.Apply();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.AHRefCleanup = AHRefTagAttributes.Onclick
            msg.Parser.Apply()
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.AHRefSuffix">
            <summary>
            Gets or sets a string which should be added to all &lt;A HREF&gt; tags as their attribute.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.AHRefCleanup"/>
            </summary>
            <value>
            A string to be added to all &lt;A HREF&gt; tags as their attribute. The default value is an empty string
            (nothing gets added).
            </value>
            <remarks>
            <para>This and <see cref="P:MailBee.Mime.MessageParserConfig.AHRefCleanup"/> properties are usually used together.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file, removes <see cref="F:MailBee.Mime.AHRefTagAttributes.Target"/> attributes from
            all &lt;A HREF&gt; tags, and adds <i>target=_blank</i> instead. This will make all the links open in a new window.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.AHRefCleanup = AHRefTagAttributes.Target;
            msg.Parser.AHRefSuffix = "target=_blank";
            msg.Parser.Apply();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.AHRefCleanup = AHRefTagAttributes.Target
            msg.Parser.AHRefSuffix = "target=_blank"
            msg.Parser.Apply()
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode">
            <summary>
            Gets or sets if (and how) the HTML body of the message should be saved to disk.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/>
            </summary>
            <value>
            The method of saving the HTML body of the message to disk during parsing the message.
            The default value is <see cref="F:MailBee.Mime.HtmlMessageAutoSaving.NoAutoSave"/>.
            </value>
            <remarks>
            <para>This property makes it easier to get any HTML message as a file. You can also save the message as HTML file
            using <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/> method.</para>
            <para>To make plain-text messages be saved as HTML files as well, you should also set
            <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/> property value to <see cref="F:MailBee.Mime.PlainToHtmlAutoConvert.IfNoHtml"/>.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer 
            should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MessageParserConfig"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.CharsetConverter">
            <summary>
            Gets the object which controls charset conversions of string values of
            <see cref="T:MailBee.Mime.MailMessage"/> properties when these values are returned to the application.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.StringConversionConfig"/> instance which provides access to the settings
            which controls charset conversions of string values of
            <see cref="T:MailBee.Mime.MailMessage"/> properties when these values are returned to the application.</value>
            <remarks>
            <para>This property is for advanced use.</para>
            <para>
            By default, all returned strings are Unicode. This property allows the developer to make returned
            strings be represented in any charset. This may be useful for web applications which do not use UTF-8.
            WinForms and console applications (and UTF-8 web applications) do not need to use this property.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer 
            should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.CharsetMetaTagMode">
            <summary>
            Gets or sets if (and how) &lt;META&gt; tags should be processed.
            </summary>
            <value>
            The method of processing &lt;META&gt; tags which contain charset information.
            The default value is <see cref="F:MailBee.Mime.CharsetMetaTagProcessing.DoNothing"/>.
            </value>
            <remarks>
            <para>This property can be used to enable modification of &lt;META&gt; containing the charset specification of the HTML body.
            HTML messages often contain tags like <i>&lt;META content="xxxxxx; charset=xxxxxx"&gt;</i>. However, if the application displays everything
            in another charset (usually, UTF-8), this charset specification will no longer be valid. It's recommended to remove
            it from the body by setting <see cref="P:MailBee.Mime.MessageParserConfig.CharsetMetaTagMode"/> to <see cref="F:MailBee.Mime.CharsetMetaTagProcessing.RemoveCharsetMetaTag"/>
            before the message gets parsed. When no charset is specified in &lt;META&gt; tag, the client browser will obtain it from the web page
            header where it will already be correctly specified by ASP.NET engine.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file and sets the correct charset in META tag of the HTML body.
            Because it's not yet known which charset will be used to print the HTML body contents on the web page,
            <i>&lt;META content="xxxxxx; charset=xxxxxx"&gt;</i> tag will be simply removed. This is usually OK since the correct
            charset information will be available in the web page header.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.CharsetMetaTagMode = CharsetMetaTagProcessing.SetCorrectCharset;
            msg.Parser.Apply();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.CharsetMetaTagMode = CharsetMetaTagProcessing.SetCorrectCharset
            msg.Parser.Apply()
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.DatesAsUtc">
            <summary>
            Indicates whether MailBee should return datetime values adjusted to UTC (GMT) timezone.
            </summary>
            <value>If <b>true</b>, all date properties such as <see cref="P:MailBee.Mime.MailMessage.Date"/>, <see cref="P:MailBee.Mime.MailMessage.DateReceived"/>, etc
            will return datetime values as UTC (GMT) time; if <b>false</b>, MailBee will return datetime values as local time.
            The default value is <b>false</b>.</value>
            <remarks>
            <para>If this property is set to <b>true</b>, all dates specified in mail message are returned as UTC.
            Otherwise, all dates are timezone-corrected to match local time of the computer running MailBee.</para>
            <para>This property has immediate effect. There is no need to re-parse the message (i.e. no need to call <see cref="M:MailBee.Mime.MessageParserConfig.Apply"/> method).</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.EncodingDefault">
            <summary>
            Gets or sets <see cref="T:System.Text.Encoding"/> to use when the charset is not specified in the e-mail message.
            </summary>
            <value>
            An <see cref="T:System.Text.Encoding"/> object specifying the charset to use
            during parsing the message for decoding message bytes into strings if the charset is not specifed in the message.
            The default value is <see cref="P:MailBee.Global.DefaultEncoding">Global.DefaultEncoding</see>.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.EncodingOverride">
            <summary>
            Gets or sets <see cref="T:System.Text.Encoding"/> to use for decoding the message headers and text body parts from bytes to strings.
            <seealso cref="P:MailBee.Global.DefaultEncoding"/>
            </summary>
            <value>
            A <see cref="T:System.Text.Encoding"/> object specifying the charset to be used when decoding headers
            and text parts of the message from bytes to strings, or a null reference (<b>Nothing</b> in Visual Basic) 
            if the charset settings should be obtained from the message (if it contains the charset information) 
            or from <see cref="P:MailBee.Mime.MessageParserConfig.EncodingDefault"/> property (if the charset information is missing in the message).
            The default value is a null reference.
            </value>
            <remarks>
            If this property is not null, MailBee will use the specified encoding instead of the charset specified in the message
            or in <see cref="P:MailBee.Mime.MessageParserConfig.EncodingDefault"/> property. This can be useful if the charset information in the message is incorrect
            and the developer needs to manually override the charset specification.
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.HeadersAsHtml">
            <summary>
            Gets or sets whether the message headers should be returned as HTML.
            </summary>
            <value>
            <b>true</b> if the message headers should be returned in HTML-encoded form; <b>false</b> if they should be returned as-is.
            The default value is <b>false</b>.
            </value>
            <remarks>
            <para>
            If this property is set to <b>true</b>, all <see cref="T:MailBee.Mime.MailMessage"/> properties representing the message headers 
            (like <see cref="P:MailBee.Mime.MailMessage.RawHeader"/>, <see cref="P:MailBee.Mime.MailMessage.To"/>, <see cref="P:MailBee.Mime.MailMessage.From"/>, <see cref="P:MailBee.Mime.MailMessage.Subject"/>, etc)
            will return their values HTML encoded. For instance, <i>"&gt;"</i> will be returned as <i>"&amp;gt;"</i>.</para>
            <para>This can be useful when printing values of <see cref="T:MailBee.Mime.MailMessage"/> properties into HTML container (such as browser).</para>
            <para>This property has immediate effect. There is no need to ever call <see cref="M:MailBee.Mime.MessageParserConfig.Apply"/> after changing its value.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample creates a new message, sets To field and displays its value both HTML-encoded and as-is.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.To.AsString = "John Doe &lt;jdoe@domain.com&gt;";
            Console.WriteLine("HTML Encoding off: " + msg.To.ToString());
            msg.Parser.HeadersAsHtml = <span style="color: blue;">true</span>;
            Console.WriteLine("HTML Encoding on: " + msg.To.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.To.AsString = "John Doe &lt;jdoe@domain.com&gt;"
            Console.WriteLine("HTML Encoding off: " &amp; msg.To.ToString())
            msg.Parser.HeadersAsHtml = <span style="color: blue;">True</span>
            Console.WriteLine("HTML Encoding on: " &amp; msg.To.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode">
            <summary>
            Gets or sets the mode which specifies if the HTML body should be automatically converted into the plain text.
            <seealso cref="T:MailBee.Mime.HtmlToPlainConvertOptions"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            The mode which specifies the condition which triggers automatic conversion of HTML body into plain-text body during parsing the message.
            The default value is <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.Never"/>.
            </value>
            <remarks>
            <para>Set this property value to <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.IfNoPlain"/> to tell MailBee to automatically generate plain-text version
            of HTML body if it's not available in the message.</para>
            <para>To set additional options of converting HTML into plain text, use <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainOptions"/> property.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file and tells MailBee to automatically create plain-text version from HTML version if no plain-text version is available.
            Also, the conversion process is tuned so that the contents of ALT attributes of &lt;IMG&gt; tags would appear in the generated plain text.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain;
            msg.Parser.HtmlToPlainOptions = HtmlToPlainConvertOptions.AddImgAltText;
            Console.WriteLine(msg.BodyPlainText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain
            msg.Parser.HtmlToPlainOptions = HtmlToPlainConvertOptions.AddImgAltText
            Console.WriteLine(msg.BodyPlainText)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.HtmlToPlainOptions">
            <summary>
            Gets or sets the options which affect how the HTML body of the message gets converted into plain text.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/>
            </summary>
            <value>
            A set of flags which affect how the HTML body of the message gets converted into plain text.
            The default value is <see cref="F:MailBee.Mime.HtmlToPlainConvertOptions.None"/>.
            </value>
            <remarks>
            Usually this property is used together with <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/> property.
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use 
            <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode">
            <summary>
            Gets or sets the mode which specifies when the HTML part of the message should be converted into simple HTML (plain text converted into HTML).
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/>
            </summary>
            <value>
            The mode specifying the condition which triggers automatic conversion of the HTML part of the message into simple HTML during parsing the message.
            The default value is <see cref="F:MailBee.Mime.HtmlToSimpleHtmlAutoConvert.Never"/>.
            </value>
            <remarks>
            Simple HTML represenation can be useful if it's required to get plain-text version of HTML body but display this plain text
            in HTML container (such as browser). See <see cref="T:MailBee.Mime.HtmlToSimpleHtmlAutoConvert"/> topic for details.
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file, converts HTML body into simple HTML format,
            and displays it.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.HtmlToSimpleHtmlMode = HtmlToSimpleHtmlAutoConvert.IfHtml;
            msg.Parser.HtmlToSimpleHtmlOptions = HtmlToSimpleHtmlConvertOptions.AddImgAltText;
            Console.WriteLine(msg.BodyHtmlText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.HtmlToSimpleHtmlMode = HtmlToSimpleHtmlAutoConvert.IfHtml
            msg.Parser.HtmlToSimpleHtmlOptions = HtmlToSimpleHtmlConvertOptions.AddImgAltText
            Console.WriteLine(msg.BodyHtmlText)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlOptions">
            <summary>
            Gets or sets the options which affect how the HTML part of the message gets converted into simple HTML.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode"/>
            </summary>
            <value>
            A set of flags which affect how the HTML part of the message gets converted into simple HTML.
            The default value is <see cref="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.None"/>.
            </value>
            <remarks>
            Usually, this property is used together with <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode"/> property.
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly">
            <summary>
            Gets or sets if only the headers of the message should be parsed.
            <seealso cref="P:MailBee.Mime.MailMessage.RawHeader"/>
            </summary>
            <value>
            <b>true</b> if only the headers of the message should be parsed; otherwise, the entire message will be parsed.
            The default value is <b>false</b>.
            </value>
            <remarks>
            <para>Parsing the message header only can save resources and improve performance in the case if only the headers
            is everything needed at the current moment. When downloading the message from the mail server, you can use methods which
            get just message headers. But when loading the message from a file or any other source which is not a mail server,
            you should use <see cref="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly"/> for that.</para>
            <para>Unlike other properties of <see cref="T:MailBee.Mime.MessageParserConfig"/> object which can be set both before and after calling <see cref="M:MailBee.Mime.MailMessage.LoadMessage(System.String)"/>
            method, effect of <see cref="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly"/> differs depending on whether you called it BEFORE loading the message from a file (or stream) or AFTER.
            If you set <see cref="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly"/> BEFORE loading the message, the loading routine will not even load everything but the header from the file (or stream).
            If you set <see cref="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly"/> AFTER loading the message (but before accessing any of its properties which may trigger the parsing), the loading routine
            will already be completed to this moment and the entire message source will be read from the file (or stream); in this case, only the header of this message source will be parsed
            but the message source itself will be complete. For instance, you can then change <see cref="P:MailBee.Mime.MessageParserConfig.ParseHeaderOnly"/> value back to <b>false</b> and call <see cref="M:MailBee.Mime.MessageParserConfig.Apply"/>
            to re-parse this message completely this time. For instance, you can use this approach to preview messages during search: you read a message completely but parse
            only its header. If the header contains certain data (let's say, <see cref="P:MailBee.Mime.MailMessage.Subject"/> of certain kind), you then reparse it completely and get the data you need.
            If <see cref="P:MailBee.Mime.MailMessage.Subject"/> does not contain the required string, you discard the message and proceed to another one.
            </para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer
            should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message header from .EML file and displays the subject of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.Parser.ParseHeaderOnly = <span style="color: blue;">true</span>;
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            Console.WriteLine(msg.Subject);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.Parser.ParseHeaderOnly = <span style="color: blue;">True</span>
            msg.LoadMessage("C:\Docs\TestMail.eml")
            Console.WriteLine(msg.Subject)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode">
            <summary>
            Gets or sets if the plain-text body of the message should be automatically converted into HTML.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlOptions"/>
            </summary>
            <value>
            The mode specifying the condition which triggers automatic conversion the plain-text body of the message into HTML.
            The default value is <see cref="F:MailBee.Mime.PlainToHtmlAutoConvert.Never"/>.
            </value>
            <remarks>
            <para>You may need to set this property in order to display plain-text message in an HTML container (such as browser).</para>
            <para>To set additional options for coverting plain text into HTML, use <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainOptions"/> property.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file, converts its plain-text body into HTML if the HTML body is not available in the message,
            and displays the HTML body.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml;
            msg.Parser.PlainToHtmlOptions = PlainToHtmlConvertOptions.UriToLink;
            Console.WriteLine(msg.BodyHtmlText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfNoHtml
            msg.Parser.PlainToHtmlOptions = PlainToHtmlConvertOptions.UriToLink
            Console.WriteLine(msg.BodyHtmlText)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.PlainToHtmlOptions">
            <summary>
            Gets or sets options which affect how the plain-text message body gets converted into HTML.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/>
            </summary>
            <value>
            A set of flags which affect how the plain-text message body gets converted into HTML. 
            The default value is <see cref="F:MailBee.Mime.PlainToHtmlConvertOptions.None"/>.
            </value>
            <remarks>
            Usually this property is used together with <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/> property. 
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.PlainToHtmlQuotationTag">
            <summary>
            Gets or sets the string containing the tag to be used for highlighting quotations in the message.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode"/>
            </summary>
            <value>
            A string containing the quoting tag (like <i>&lt;...&gt;</i>). The default value is an empty string.
            </value>
            <remarks>
            Usually this property is used in plain-text reply messages. If it's set to non-empty string,
            then the following activities are also performed during converting plain-text into HTML:
            <list type="bullet">
            <item><description>To determine the quotation sign, the alphanumeric string (without spaces) ending with "&gt;" will be
            searched on every line of the plain-text body</description></item>
            <item><description>Then the entire quotation will be highlighted in the finished HTML text</description></item>
            </list>
            Closing tags are generated automatically. For instance, if <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlQuotationTag"/> is <i>&lt;font color=red&gt;</i>,
            MailBee will automatically finish every quoted line with <i>&lt;/font&gt;</i>.
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should
            use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>This sample loads the message from .EML file, sets the quoting tag and tells MailBee to generate HTML version of the plain-text
            body even if the HTML body is available (this is required since we're not interested in HTML body in this sample), and displays the
            generated HTML body with quotations high-lighted.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfPlain;
            msg.Parser.PlainToHtmlOptions = PlainToHtmlConvertOptions.UriToLink;
            msg.Parser.PlainToHtmlQuotationTag = "&lt;font color=red&gt;";
            Console.WriteLine(msg.BodyHtmlText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            msg.Parser.PlainToHtmlMode = PlainToHtmlAutoConvert.IfPlain
            msg.Parser.PlainToHtmlOptions = PlainToHtmlConvertOptions.UriToLink
            msg.Parser.PlainToHtmlQuotationTag = "&lt;font color=red&gt;"
            Console.WriteLine(msg.BodyHtmlText)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageParserConfig.WorkingFolder">
            <summary>
            Gets or sets the path to the temporary folder where the files related to the message should be stored.
            <seealso cref="M:MailBee.Mime.MessageParserConfig.GetMessageFolder"/>
            </summary>
            <value>
            A string containing the path to the temporary folder where the related files should be stored, or an empty string if they should be stored
            in the current folder or a null reference if they should be stored in the system temporary folder of the currently logged user. The default value is an empty
            string.
            </value>
            <remarks>
            <para>If this property is an empty string (the default value), the related files will be saved to the current folder
            during call of <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> method; in the case of <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/> method,
            they will be saved into the same folder where the HTML file denoted by <i>filename</i> paramater will be saved to.</para>
            <para>If the message parser was configured to automatically save related files and optionally message.htm file during parsing the message (<see cref="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode"/> is <see cref="F:MailBee.Mime.HtmlMessageAutoSaving.SaveMessageHtmAndRelatedFiles"/>
            or <see cref="F:MailBee.Mime.HtmlMessageAutoSaving.AlterHtmlBody"/>), the effect of setting <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> will be the same as for <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> method. Thus, if <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> is an empty
            string, related files and message.htm file will be saved in the current folder.</para>
            <para>If <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method was used to save related files and
            <i>folderMode</i> parameter value was NOT <see cref="F:MailBee.Mime.MessageFolderBehavior.DoNotCreate"/>, related files will be stored not directly in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> but
            in its sub-folder which will be created specially for this message with unique name. This makes it possible to use the same <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> for processing
            multiple messages simultaneously without the risk of mixing files belonging to different messages.</para>
            <note><see cref="T:MailBee.Mime.MessageParserConfig"/> object cannot be used on its own. To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.</note>
            </remarks>
            <example>The example is available in <see cref="T:MailBee.Mime.MessageParserConfig"/> topic.
            </example>
        </member>
        <member name="T:MailBee.Mime.EmailAddressCollection">
            <summary>
            Provides properties and methods for managing and examining the collection of the <see cref="T:MailBee.Mime.EmailAddress"/> objects.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.EmailAddress"/>
            </summary>
            <remarks>
            <see cref="T:MailBee.Mime.EmailAddressCollection"/> of <see cref="T:MailBee.Mime.EmailAddress"/> objects stores multiple e-mail addresses (such as the list of To, CC or BCC recipients).
            <para>In the most cases, the developer does not need to directly create an <see cref="T:MailBee.Mime.EmailAddress"/> to specify e-mail addresses 
            because the most methods and properties which deal with e-mail addresses also accept string inputs as e-mail address values.</para>
            <para><see cref="T:MailBee.Mime.EmailAddressCollection"/> class offers <see cref="P:MailBee.Mime.EmailAddressCollection.AsString"/> property for this. For instance, to specify 
            <see cref="P:MailBee.Mime.MailMessage.To">MailMessage.To</see> as a string,
            set <c>msg.To.AsString</c> value (assuming <c>msg</c> is <see cref="T:MailBee.Mime.MailMessage"/> instance).
            </para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the e-mail address of each message recipient.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every recipient...</span>
            <span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> msg.To)
            {
            	<span style="color: green;">// Show full information about the recipient's e-mail address.</span>
            	Console.WriteLine("Recipient name: " + adr.DisplayName);
            	Console.WriteLine("Recipient address: " + adr.Email);
            	Console.WriteLine("Recipient info: " + adr.Remarks);
            	Console.WriteLine("Account name: " + adr.GetAccountName());
            	Console.WriteLine("Domain name: " + adr.GetDomain());
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every recipient...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> msg.To
            	<span style="color: green;">' Show full information about the recipient's e-mail address.</span>
            	Console.WriteLine("Recipient name: " &amp; adr.DisplayName)
            	Console.WriteLine("Recipient address: " &amp; adr.Email)
            	Console.WriteLine("Recipient info: " &amp; adr.Remarks)
            	Console.WriteLine("Account name: " &amp; adr.GetAccountName())
            	Console.WriteLine("Domain name: " &amp; adr.GetDomain())
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:MailBee.Mime.EmailAddressCollection"/> instance from a string containing e-mail addresses.
            <seealso cref="P:MailBee.Mime.EmailAddressCollection.AsString"/>
            </summary>
            <param name="emails">The string containing the list of the e-mail addresses delimited
            with comma (,) or semicolon (;). The e-mail addresses may include display names or remarks.</param>
            <example>This sample creates a new collection of the e-mail addresses and displays each address in this collection.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddressCollection adrs = <span style="color: blue;">new</span> EmailAddressCollection("jdoe@domain1.com, some one &lt;someone@domain2.com&gt;, me@host.com (Comment)");
            <span style="color: blue;">foreach</span> (EmailAddress address <span style="color: blue;">in</span> adrs)
            {
            	Console.WriteLine(address.Email);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adrs <span style="color: blue;">As</span> EmailAddressCollection = <span style="color: blue;">New</span> EmailAddressCollection("jdoe@domain1.com, some one &lt;someone@domain2.com&gt;, me@host.com (Comment)")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> address <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> adrs
            	Console.WriteLine(address.Email)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Add(MailBee.Mime.EmailAddress)">
            <overloads>Adds an e-mail address or addresses to the collection.</overloads>
            <summary>
            Adds the specified <see cref="T:MailBee.Mime.EmailAddress"/> object to the collection.
            <seealso cref="T:MailBee.Mime.EmailAddress"/>
            </summary>
            <param name="address">The <see cref="T:MailBee.Mime.EmailAddress"/> object to be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="address"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample loads creates new message and adds a recipient to this message as a new <see cref="T:MailBee.Mime.EmailAddress"/> object.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Set a new e-mail address.</span>
            EmailAddress adr = <span style="color: blue;">new</span> EmailAddress("john_doe@domain.com");
            
            <span style="color: green;">// Add the e-mail address to the list of the recipients.</span>
            msg.To.Add(adr);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Set a new e-mail address.</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> EmailAddress = <span style="color: blue;">New</span> EmailAddress("john_doe@domain.com")
            
            <span style="color: green;">' Add the e-mail address to the list of the recipients.</span>
            msg.To.Add(adr)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Add(MailBee.Mime.EmailAddressCollection)">
            <overloads>Adds an e-mail address or addresses to the collection.</overloads>
            <summary>
            Adds the list of the e-mail addresses specified as <see cref="T:MailBee.Mime.EmailAddressCollection"/> to the current collection.
            <seealso cref="P:MailBee.Mime.EmailAddressCollection.AsString"/>
            </summary>
            <param name="addresses">The <see cref="T:MailBee.Mime.EmailAddressCollection"/> object containing the list of the e-mail addresses to be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="addresses"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new collection of the e-mail addresses and populates it with some addresses, loads the message from .EML file,
            and adds this collection to the message recipients collection.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddressCollection adrs = <span style="color: blue;">new</span> EmailAddressCollection();
            adrs.AddFromString("User1 &lt;user1@domain.com&gt;");
            adrs.Add("user2@domain.com");
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.To.Add(adrs);
            <span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> adrs)
            {
            	Console.WriteLine(adr.Email);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adrs = <span style="color: blue;">New</span> EmailAddressCollection
            adrs.AddFromString("User1 &lt;user1@domain.com&gt;")
            adrs.Add("user2@domain.com")
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.To.Add(adrs)
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> adrs
            	Console.WriteLine(adr.Email)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Add(System.String)">
            <overloads>Adds an e-mail address or addresses to the collection.</overloads>
            <summary>
            Adds the specified e-mail address to the collection.
            <seealso cref="M:MailBee.Mime.EmailAddressCollection.AddFromString(System.String)"/>
            </summary>
            <param name="email">The string containing the actual e-mail address (such as <i>user@domain.com</i>).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="email"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>To add a full e-mail address (such as "John Doe, Jr." &lt;jdoe@domain.com&gt;),
            the developer can use <see cref="M:MailBee.Mime.EmailAddressCollection.AddFromString(System.String)"/> method.</remarks>
            <example>This sample creates a new message and adds a recipient to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add a new mail address to the "To:" collection.</span>
            msg.To.Add("john_doe@domain.com");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add a new mail address to the "To:" collection.</span>
            msg.To.Add("john_doe@domain.com")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Add(System.String,System.String)">
            <overloads>Adds an e-mail address or addresses to the collection.</overloads>
            <summary>
            Adds the e-mail address (specified as actual e-mail address and display name parts) to the collection.
            <seealso cref="T:MailBee.Mime.EmailAddress"/>
            </summary>
            <param name="email">The actual e-mail address (such as <i>JohnDoe@domain.com</i>).</param>
            <param name="name">The name which is displayed with the actual e-mail address (such as <i>John Doe</i>).
            If a null reference (<b>Nothing</b> in Visual Basic), no display name will be assigned to the e-mail address.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="email"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new message and adds a recipient to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add a new mail address to the collection.</span>
            msg.To.Add("jdoe@domain.com", "John Doe");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add a new mail address to the collection.</span>
            msg.To.Add("jdoe@domain.com", "John Doe")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Add(System.String,System.String,System.String)">
            <overloads>Adds an e-mail address or addresses to the collection.</overloads>
            <summary>
            Adds the e-mail address (specified as actual e-mail address, display name and remarks parts) to the collection.
            <seealso cref="T:MailBee.Mime.EmailAddress"/>
            </summary>
            <param name="email">The actual e-mail address (such as <i>JohnDoe@domain.com</i>).</param>
            <param name="name">The name which is displayed with the actual e-mail address (such as <i>John Doe</i>).
            If a null reference (<b>Nothing</b> in Visual Basic), no display name will be assigned to the e-mail address.</param>
            <param name="remarks">The remarks which are displayed with the actual e-mail address (such as <i>ABC Company</i>).
            If a null reference (<b>Nothing</b> in Visual Basic), no remarks will be assigned to the e-mail address.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="email"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample creates a new message and adds a recipient to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add a new mail address to the collection.</span>
            msg.To.Add("jdoe@domain.com", "John Doe", "ABC Company");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add a new mail address to the collection.</span>
            msg.To.Add("jdoe@domain.com", "John Doe", "ABC Company")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.AddFromString(System.String)">
            <summary>
            Adds the specified full e-mail addresses (including display name if any) to the collection.
            <seealso cref="P:MailBee.Mime.EmailAddressCollection.AsString"/>
            <seealso cref="M:MailBee.Mime.EmailAddress.Parse(System.String)"/>
            </summary>
            <param name="addressString">The string containing the full e-mail addresses delimited with comma (,) or semicolon (;).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="address"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>
            For instance, if the string is <i>"John Doe" &lt;j.doe@domain.com&gt; (ABC Company)</i>,
            a single <see cref="T:MailBee.Mime.EmailAddress"/> object will be appended to the collection and its
            <see cref="P:MailBee.Mime.EmailAddress.DisplayName"/> property will be set to <i>John Doe</i>, <see cref="P:MailBee.Mime.EmailAddress.Remarks"/> property
            will be set to <i>ABC Company</i>, and the <see cref="P:MailBee.Mime.EmailAddress.Email"/> property will be set to <i>j.doe@domain.com</i> value.
            </para>
            </remarks>
            <example>This sample creates the new message and adds the new recipient's e-mail address to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add the mail address to the collection.</span>
            msg.To.AddFromString("John Doe &lt;jdoe@domain.com&gt; (ABC Company)");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add the mail address to the collection.</span>
            msg.To.AddFromString("John Doe &lt;jdoe@domain.com&gt; (ABC Company)")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:MailBee.Mime.EmailAddress"/> object having the the specified zero-based index from the collection.
            <seealso cref="M:MailBee.Mime.EmailAddressCollection.Remove(System.String)"/>
            </summary>
            <param name="index">The zero-based index number of the e-mail address in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <example>This sample loads the message from .EML file and removes the first recipient's e-mail address.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// If there are any recipients...</span>
            <span style="color: blue;">if</span> (msg.To.Count &gt; 0)
            {
            	<span style="color: green;">// Remove the first recipient.</span>
            	msg.To.RemoveAt(0);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' If there are any recipients...</span>
            <span style="color: blue;">If</span> (msg.To.Count &gt; 0) <span style="color: blue;">Then</span>
            	<span style="color: green;">' Remove the first recipient.</span>
            	msg.To.RemoveAt(0)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Remove(System.String)">
            <summary>
            Removes the specified e-mail address from the collection.
            <seealso cref="M:MailBee.Mime.EmailAddressCollection.RemoveAt(System.Int32)"/>
            </summary>
            <param name="email">Actual e-mail address to be deleted (i.e. <i>user@domain.com</i>).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="address"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>If the specified e-mail address appears multiple times in the collection, all such entries will be removed.</para>
            <para>To remove the e-mail address from the collection by the index, the developer should use <see cref="M:MailBee.Mime.EmailAddressCollection.RemoveAt(System.Int32)"/> method.</para>
            </remarks>
            <example>This sample adds some e-mail addresses into To: field and then removes one of them.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            msg.To.Add("user1@domain.com");
            msg.To.Add("user2@domain.com", "User 2");
            msg.To.Add("user3@domain.com", <span style="color: blue;">null</span>, "User 3");
            
            Console.WriteLine(msg.To.ToString());
            
            msg.To.Remove("user2@domain.com");
            
            Console.WriteLine(msg.To.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            msg.To.Add("user1@domain.com")
            msg.To.Add("user2@domain.com", "User 2")
            msg.To.Add("user3@domain.com", <span style="color: blue;">Nothing</span>, "User 3")
            
            Console.WriteLine(msg.To.ToString())
            
            msg.To.Remove("user2@domain.com")
            
            Console.WriteLine(msg.To.ToString())
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Clear">
            <summary>
            Clears the entire collection of the e-mail addresses.
            <seealso cref="M:MailBee.Mime.MailMessage.Clear(MailBee.Mime.MessageElements)"/>
            </summary>
            <remarks>
            Removes all <see cref="T:MailBee.Mime.EmailAddress"/> objects from the collection.
            </remarks>
            <example>This sample loads the message from .EML file and removes all the message recipients:
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all recipients from the message.</span>
            msg.To.Clear();
            msg.Cc.Clear();
            msg.Bcc.Clear();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all recipients from the message.</span>
            msg.To.Clear()
            msg.Cc.Clear()
            msg.Bcc.Clear()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.Parse(System.String)">
            <summary>
            Creates a new <see cref="T:MailBee.Mime.EmailAddressCollection"/> instance from the specified string containing the list of e-mail addresses.
            <seealso cref="M:MailBee.Mime.EmailAddressCollection.#ctor(System.String)"/>
            </summary>
            <returns><see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing <paramref name="addressString"/> addresses.</returns>
            <param name="addressString">The string specifying the list of the e-mail addresses delimited
            with comma (<i>,</i>) or semicolon (<i>;</i>).</param>
            <example>This sample creates a new collection of full e-mail addresses and displays each actual e-mail address.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddressCollection adrs =
            	EmailAddressCollection.Parse(@"User1 &lt;user1@domain.com&gt;, user2@domain.com");
            <span style="color: blue;">foreach</span> (EmailAddress adr <span style="color: blue;">in</span> adrs)
            {
            	Console.WriteLine(adr.Email);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adrs <span style="color: blue;">As</span> EmailAddressCollection = _
            	EmailAddressCollection.Parse("User1 &lt;user1@domain.com&gt;, user2@domain.com")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> adr <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> adrs
            	Console.WriteLine(adr.Email)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.EmailAddressCollection.ToString">
            <summary>
            Returns the string containing all the e-mail addresses in the collection.
            <seealso cref="P:MailBee.Mime.EmailAddressCollection.AsString"/>
            </summary>
            <returns>
            The comma-separated list of the full e-mail addresses (with optional friendly names and remarks) in the collection.
            </returns>
            <remarks>
            By default, the e-mail addresses are delimited with comma (",") character. See <see cref="P:MailBee.Mime.EmailAddressCollection.AsString"/> topic on how
            to change the delimiter to semicolon (;).
            </remarks>
            <example>This sample creates the new collection of the e-mail addresses and displays this collection as string.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddressCollection adrs = <span style="color: blue;">new</span> EmailAddressCollection();
            adrs.AddFromString("jdoe@domain1.com");
            adrs.AddFromString("some one &lt;someone@domain2.com&gt;");
            adrs.AddFromString("me@host.com (Comment)");
            Console.WriteLine(adrs.ToString());
            
            <span style="color: green;">// Output: jdoe@domain1.com, "some one" &lt;someone@domain2.com&gt;, me@host.com (Comment)</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adrs = <span style="color: blue;">New</span> EmailAddressCollection
            adrs.AddFromString("jdoe@domain1.com")
            adrs.AddFromString("some one &lt;someone@domain2.com&gt;")
            adrs.AddFromString("me@host.com (Comment)")
            Console.WriteLine(adrs.ToString())
            
            <span style="color: green;">' Output: jdoe@domain1.com, "some one" &lt;someone@domain2.com&gt;, me@host.com (Comment)</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.EmailAddressCollection.AsString">
            <summary>
            Gets or sets all the e-mail addresses in the collection as a string.
            <seealso cref="M:MailBee.Mime.EmailAddressCollection.Add(MailBee.Mime.EmailAddress)"/>
            </summary>
            <value>
            A string containing all the full e-mail addresses in the collection (with display names and remarks if any).
            </value>
            <remarks>
            <para>Another way of adding e-mail addresses to the collection is using <see cref="M:MailBee.Mime.EmailAddressCollection.Add(MailBee.Mime.EmailAddress)"/> method.</para>
            <para>The e-mail addresses will be delimited with comma (,). However, if the given collection belongs to the <see cref="T:MailBee.Mime.MailMessage"/>
            object (for instance, represents <see cref="P:MailBee.Mime.MailMessage.To"/> property), the delimiter in the output string
            will be either comma (,) or semicolon (;) depending on <see cref="P:MailBee.Mime.MessageBuilderConfig.AddressDelimeter">MailMessage.Builder.AddressDelimeter</see>
            property value. Anyway, when parsing an e-mail address string rather than building it, both comma and semicolon are recognized as valid delimiters.</para>
            </remarks>
            <example>This sample creates a new collection of e-mail addresses and displays each address from this collection.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            EmailAddressCollection adrs = <span style="color: blue;">new</span> EmailAddressCollection("jdoe@domain1.com, some one &lt;someone@domain2.com&gt;, me@host.com (Comment)");
            adrs.AsString = @"user1@domain.com, ""User 2"" &lt;user2@domain.com&gt;, user3@domain.com (Domain Company, LLC)";
            <span style="color: blue;">foreach</span> (EmailAddress address <span style="color: blue;">in</span> adrs)
            {
            	Console.WriteLine(address.Email);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> adrs <span style="color: blue;">As</span> EmailAddressCollection = <span style="color: blue;">New</span> EmailAddressCollection("jdoe@domain1.com, some one &lt;someone@domain2.com&gt;, me@host.com (Comment)")
            adrs.AsString = "user1@domain.com, ""User 2"" &lt;user2@domain.com&gt;, user3@domain.com (Domain Company, LLC)"
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> address <span style="color: blue;">As</span> EmailAddress <span style="color: blue;">In</span> adrs
            	Console.WriteLine(address.Email)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.EmailAddressCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.Mime.EmailAddress"/> object at the specified zero-based index in the collection.
            <seealso cref="T:MailBee.Mime.EmailAddress"/>
            </summary>
            <param name="index">The zero-based index of the e-mail address in the collection.</param>
            <value>
            An <see cref="T:MailBee.Mime.EmailAddress"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index does not exist.
            </exception>
            <example>This sample loads the message from .EML file and displays the e-mail address of each message recipient.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            EmailAddressCollection adr = msg.GetAllRecipients();
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; msg.GetAllRecipients().Count; i++)
            {
            	Console.WriteLine(adr[i]);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            <span style="color: blue;">Dim</span> adr <span style="color: blue;">As</span> EmailAddressCollection = msg.GetAllRecipients()
            <span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> msg.GetAllRecipients().Count
            	Console.WriteLine(adr(i))
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.ImapMail.MessageIndexCollection">
            <summary>
            Represents an abstract list of indices (such as ordinal message numbers or UIDs) of mail messages.
            <seealso cref="T:MailBee.ImapMail.MessageNumberCollection"/>
            <seealso cref="T:MailBee.ImapMail.UidCollection"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            </summary>
            <remarks>
            <para>This class is an abstract parent of <see cref="T:MailBee.ImapMail.MessageNumberCollection"/>
            and <see cref="T:MailBee.ImapMail.UidCollection"/> classes.</para>
            <para>Some methods of the <see cref="T:MailBee.ImapMail.Imap"/> object (such as <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>)  can return
            both a collection of ordinal message numbers (<see cref="T:MailBee.ImapMail.MessageNumberCollection"/>)
            and a collection of UIDs (<see cref="T:MailBee.ImapMail.UidCollection"/>). The type of the returned collection
            is contolled via <i>indexIsUid</i> parameter value of these methods. Also,
            the developer should typecast the returned value to the appropriate type
            (<see cref="T:MailBee.ImapMail.MessageNumberCollection"/> or <see cref="T:MailBee.ImapMail.UidCollection"/>). See
            the sample code in <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/> topic for more information.</para>
            <para><see cref="T:MailBee.ImapMail.MessageNumberCollection"/> and <see cref="T:MailBee.ImapMail.UidCollection"/>
            classes can also be used to build and parse sequences of UIDs or message numbers
            in IMAP4 format (e.g. "5,8,14:22,24:26,35").</para>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.MessageIndexCollection.AddSet(System.String)">
            <summary>
            Adds the specified sequence of message numbers or UIDs to the collection.
            </summary>
            <param name="messageIndexSet">The message sequence in IMAP4 format.</param>
            <exception cref="T:System.Exception">The message sequence parsing failed.</exception>
            <remarks>The sequence to be parsed can contain the following characters only:
            digits (0-9), commas (,), and colon (:). Also, the sequence must be monotonically increasing.
            Examples of valid sequences: "1", "4:5,7,9", "1:135", "15,29".
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.MessageIndexCollection.AddRange(System.String,System.String)">
            <summary>
            When overridden in a derived class, should add the specified range of message numbers or UIDs to the collection.
            <seealso cref="T:MailBee.ImapMail.MessageNumberCollection"/>
            <seealso cref="T:MailBee.ImapMail.UidCollection"/>
            </summary>
            <param name="startIndex">The lower index of the range.</param>
            <param name="endIndex">The higher index of the range.</param>
        </member>
        <member name="M:MailBee.ImapMail.MessageIndexCollection.AddIndex(System.String)">
            <summary>
            When overridden in a derived class, should add the message index (ordinal message number or UID) specified as string, to the collection.
            <seealso cref="T:MailBee.ImapMail.MessageNumberCollection"/>
            <seealso cref="T:MailBee.ImapMail.UidCollection"/>
            </summary>
            <param name="index">The message index.</param>
        </member>
        <member name="M:MailBee.ImapMail.MessageIndexCollection.IsPartOfRange(System.Int32)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.ImapMail.MessageIndexCollection.ToString">
            <summary>
            Returns the message sequence as a string in IMAP4 format.
            </summary>
            <returns>The string containing the message sequence in IMAP4 format.</returns>
            <remarks>For instance, if the collection contains message indices 5, 8, 11, 12, 13, 67, 68,
            this method returns "5,8,11:13,67:68".</remarks>
        </member>
        <member name="T:MailBee.ImapMail.UidCollection">
            <summary>
            Represents a list of UIDs of mail messages.
            <seealso cref="T:MailBee.ImapMail.MessageIndexCollection"/>
            <seealso cref="T:MailBee.ImapMail.MessageNumberCollection"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            </summary>
            <remarks>
            <para>This class implements <see cref="T:MailBee.ImapMail.MessageIndexCollection"/> as a collection
            of <see cref="T:System.Int64"/> values.</para>
            <note>In MailBee, UID is represented as a <see cref="T:System.Int64"/> value. Actually,
            UID is a 32-bit unsigned value. Due to this, it's possible to get UID value
            which won't fit in the range of values allowed for <see cref="T:System.Int32"/> type (which
            is 32-bit signed). Although .NET framework supports <see cref="T:System.UInt32"/> type (32-bit
            unsigned), not all .NET languages support this type (i.e. it's not CLS-compliant).
            Also, with <see cref="T:System.UInt32"/> it's not possible to represent negative values which
            are used by MailBee to represent invalid data (such as when certain value cannot be parsed).
            </note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.UidCollection.Add(System.Int64)">
            <summary>
            Adds the specified UID to the collection.
            </summary>
            <param name="uid">The UID value.</param>
        </member>
        <member name="M:MailBee.ImapMail.UidCollection.AddRange(System.String,System.String)">
            <summary>
            Adds the specified range of UIDs to the collection.
            </summary>
            <param name="startIndex">The string containing the lower UID in the range.</param>
            <param name="endIndex">The string containing the higher UID in the range.</param>
            <exception cref="T:System.Exception">Parsing the supplied strings into UIDs failed.</exception>
            <remarks><paramref name="endIndex"/> must be not less than <paramref name="startIndex"/>.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.UidCollection.AddIndex(System.String)">
            <summary>
            Adds the UID specified as string, to the collection.
            </summary>
            <param name="index">The string containing the UID to be added.</param>
            <exception cref="T:System.Exception">Parsing the supplied string into UID failed.</exception>
        </member>
        <member name="M:MailBee.ImapMail.UidCollection.IsPartOfRange(System.Int32)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.ImapMail.UidCollection.Parse(System.String)">
            <summary>
            Creates a new <see cref="T:MailBee.ImapMail.UidCollection"/> from the specified UID sequence.
            </summary>
            <param name="uidString">The UID sequence string in IMAP4 format.</param>
            <returns>A reference to the <see cref="T:MailBee.ImapMail.UidCollection"/> object representing
            the specified UID sequence, or a null reference (<b>Nothing</b> in Visual Basic)
            if the UID sequence could not be parsed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="uidString"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>The <paramref name="uidString"/> must conform to the rules described
            in <see cref="M:MailBee.ImapMail.MessageIndexCollection.AddSet(System.String)"/> method remarks.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.UidCollection.Item(System.Int32)">
            <summary>
            Gets the UID at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index of the UID in the collection.</param>
            <value>
            A <see cref="T:System.Int64"/> value having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.ImapMail.MessageNumberCollection">
            <summary>
            Represents a list of ordinal message numbers of mail messages.
            <seealso cref="T:MailBee.ImapMail.MessageIndexCollection"/>
            <seealso cref="T:MailBee.ImapMail.UidCollection"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            </summary>
            <remarks>
            <para>This class implements <see cref="T:MailBee.ImapMail.MessageIndexCollection"/> as a collection
            of <see cref="T:System.Int32"/> values.</para>
            <note>Although .NET collections are zero-based, message indices (ordinal message numbers
            and UIDs) are one-based. E.g. if this collection contains a single item referencing the first
            message in the folder, the index of this item in the collection will be 0, while its value
            (message number) will be 1.
            </note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.MessageNumberCollection.Add(System.Int32)">
            <summary>
            Adds the specified ordinal message number to the collection.
            </summary>
            <param name="messageNumber">The ordinal message number.</param>
        </member>
        <member name="M:MailBee.ImapMail.MessageNumberCollection.AddRange(System.String,System.String)">
            <summary>
            Adds the specified range of message numbers to the collection.
            </summary>
            <param name="startIndex">The string containing the lower message number in the range.</param>
            <param name="endIndex">The string containing the higher message number in the range.</param>
            <exception cref="T:System.Exception">Parsing the supplied strings into message numbers failed.</exception>
            <remarks><paramref name="endIndex"/> must be not less than <paramref name="startIndex"/>.</remarks>
        </member>
        <member name="M:MailBee.ImapMail.MessageNumberCollection.AddIndex(System.String)">
            <summary>
            Adds the ordinal message number specified as string, to the collection.
            </summary>
            <param name="index">The string containing the ordinal message number to be added.</param>
            <exception cref="T:System.Exception">Parsing the supplied string into an ordinal message number failed.</exception>
        </member>
        <member name="M:MailBee.ImapMail.MessageNumberCollection.IsPartOfRange(System.Int32)">
            <summary>
            This member is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:MailBee.ImapMail.MessageNumberCollection.Parse(System.String)">
            <summary>
            Creates a new <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> from the specified message number sequence.
            </summary>
            <param name="messageNumberString">The string containing the sequence of ordinal message numbers in IMAP4 format.</param>
            <returns>A reference to the <see cref="T:MailBee.ImapMail.MessageNumberCollection"/> object representing
            the specified message number sequence, or a null reference (<b>Nothing</b> in Visual Basic)
            if the message number sequence could not be parsed.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="messageNumberString"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>The <paramref name="messageNumberString"/> must conform to the rules described
            in <see cref="M:MailBee.ImapMail.MessageIndexCollection.AddSet(System.String)"/> method remarks.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.MessageNumberCollection.Item(System.Int32)">
            <summary>
            Gets the ordinal message number at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index of the ordinal message number in the collection.</param>
            <value>
            An <see cref="T:System.Int32"/> value having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.DnsMX.DnsCache">
            <summary>
            Provides properties and methods which allow the developer to control whether and how
            MailBee will cache DNS MX (and some other) records when performing DNS MX lookup and TXT queries.
            <seealso cref="P:MailBee.SmtpMail.Smtp.DnsServers"/>
            </summary>
            <remarks>
            <para>By default, DNS MX caching is enabled which may greatly increase performance of
            "direct send" operations which involve sending large amounts of e-mails directly to end
            recipients mail servers (without using SMTP relay server).</para>
            <para>MailBee also maintains TXT and PTR records cache. TXT records are used for DomainKeys sender verification (a sort of antispam technology).
            Checking PTR records (reverse DNS) of the IP address from which the e-mail came
            (extracted from <c>MailMessage.TimeStamps[0].From</c>) is another method of sender verification.</para>
            <note>DNS cache maintained by <see cref="T:MailBee.DnsMX.DnsCache"/> class is shared by all instances of
            <see cref="T:MailBee.SmtpMail.Smtp"/> objects within the application domain.</note>
            </remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsCache.Clear">
            <summary>
            Removes all existing entries from the DNS cache.
            </summary>
            <remarks>This method is thread-safe.</remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsCache.Timeout">
            <summary>
            Gets or sets the interval which specifies for how long DNS records in the cache remain actual.
            </summary>
            <value>Positive integer value which specifies the amount time (in minutes) to allow
            DNS records remain in the cache. The default value is 90 minutes.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is negative or zero.</exception>
            <remarks>
            <para>By default, a DNS record in the cache considered be valid for 90 minutes since
            the moment it was added to the cache. Increasing <see cref="P:MailBee.DnsMX.DnsCache.Timeout"/> value may improve performance
            in the case if DNS records of recipient domains change rarely.</para>
            <para>In the case if all DNS records become invalid (for instance, after reconfiguration of the network)
            and the cache is no longer valid, the developer may manually initialize it by either running the application
            again or calling <see cref="M:MailBee.DnsMX.DnsCache.Clear"/> method to clear the DNS cache of the existing instance of the application.</para>
            </remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsCache.Enabled">
            <summary>
            Gets or sets whether DNS records caching should be used.
            </summary>
            <value><b>true</b> if DNS records caching is enabled; otherwise, <b>false</b>. The default value is <b>true</b>.</value>
            <remarks>Under normal circumstances, disabling DNS caching is not recommended due to significant performance impact.
            However, this may help in troubleshooting.</remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsCache.Count">
            <summary>
            Gets the number of DNS records already in the cache.
            </summary>
            <value>An integer value specifying the number of DNS MX, TXT and PTR records already in the cache.
            The value is zero if the cache is empty.</value>
        </member>
        <member name="P:MailBee.DnsMX.DnsCache.SmtpMXMaxFailureCount">
            <summary>
            Gets or sets the maximum number of seriated failures of the SMTP MX server required in order to consider
            the SMTP MX server down.
            </summary>
            <value>The number of seriated failures of the SMTP MX server which needs to be achieved in order to consider this server down.
            The default value is 1.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is less than 1.</exception>
            <remarks>
            <para>When making connections to SMTP MX servers, it may happen that the connection with the server
            cannot be temporarily established. However, the server may revert back to function shortly (on the next
            connection attempt or after certain time interval elapses).</para>
            <note>This property does not set the number of attempts to connect to the server prior to returning
            an error. It only sets whether MailBee should cache the information about bad status of the given
            SMTP MX server for subsequent sending of other e-mail messages if any. In other words,
            this property makes sense only if the application sends multiple messages, not just one.
            Also, this property will not have any effect if DNS MX caching is disabled (<see cref="P:MailBee.DnsMX.DnsCache.Enabled"/> is <b>false</b>).</note>
            <para>If the given SMTP MX server reached <see cref="P:MailBee.DnsMX.DnsCache.SmtpMXMaxFailureCount"/> number of seriated
            failures, MailBee won't try to connect to it until <see cref="P:MailBee.DnsMX.DnsCache.SmtpMXNextAttemptInterval"/> elapses.</para>
            </remarks>
        </member>
        <member name="P:MailBee.DnsMX.DnsCache.SmtpMXNextAttemptInterval">
            <summary>
            Gets or sets the amount of time (in milliseconds) the failed SMTP MX server spends in quarantine.
            </summary>
            <value>The length of the period (in milliseconds) the failed SMTP MX server spends in quarantine. The default value is 1000 (1 second).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is negative.</exception>
            <remarks>
            If the SMTP MX server could not be contacted <see cref="P:MailBee.DnsMX.DnsCache.SmtpMXMaxFailureCount"/> times,
            it's set in quarantine for <see cref="P:MailBee.DnsMX.DnsCache.SmtpMXNextAttemptInterval"/> milliseconds. During this interval,
            the server is not used (other servers used if any, or an error occurs if all the servers are in
            quarantine). When <see cref="P:MailBee.DnsMX.DnsCache.SmtpMXNextAttemptInterval"/> elapses, MailBee may try this server again. If it fails again, it's been
            put in quarantine again (this time, <see cref="P:MailBee.DnsMX.DnsCache.SmtpMXMaxFailureCount"/> will have no effect since the server is already known
            as dead).
            <note>This property will have no effect if DNS MX caching is disabled (<see cref="P:MailBee.DnsMX.DnsCache.Enabled"/> is <b>false</b>).</note>
            </remarks>
        </member>
        <member name="T:MailBee.BounceMail.CommonType">
            <summary>
            Defines the general types of delivery statuses in delivery notification messages.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.Common"/>
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.IsBounced"/>
            <seealso cref="P:MailBee.BounceMail.DsnRecipient.Action"/>
            </summary>
            <remarks>
            <para>Since a delivery status notification (DSN) message may contain delivery reports for multiple recipients
            of the original e-mail message, the delivery status might be available for each recipient separately.</para>
            <para>To determine if an e-mail is a bounce (non-delivery report) for the given recipient, use <see cref="P:MailBee.BounceMail.RecipientStatus.Common"/> or
            <see cref="P:MailBee.BounceMail.RecipientStatus.IsBounced"/> properties if you have <see cref="T:MailBee.BounceMail.RecipientStatus"/> object for that recipient.</para>
            <para><see cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/> method returns the collection of <see cref="T:MailBee.BounceMail.RecipientStatus"/> objects
            in <see cref="P:MailBee.BounceMail.Result.Recipients"/> property. This collection contains delivery statuses for all recipients in the DSN message.
            To get the e-mail address of the particular recipient, use <see cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>
            property of the <see cref="T:MailBee.BounceMail.RecipientStatus"/> object.</para>
            <para>If, for some reason, you are using <see cref="T:MailBee.BounceMail.DsnRecipient"/> class instead of <see cref="T:MailBee.BounceMail.RecipientStatus"/>, you can use
            <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> property to learn the delivery status. <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> property uses values of
            <see cref="T:MailBee.BounceMail.DsnAction"/> type which provides DSN statuses exactly as they are specified in the DSN attachment of the DSN message.
            <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> property value won't be available in the case if the DSN message does not have a DSN attachment
            (see <see cref="T:MailBee.BounceMail.DsnAttachment"/> topic for details). <see cref="P:MailBee.BounceMail.RecipientStatus.Common"/> property is more general. If
            <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> is available, MailBee initializes <see cref="P:MailBee.BounceMail.RecipientStatus.Common"/> from it. If the message does not
            have a DSN attachment (and <see cref="P:MailBee.BounceMail.DsnRecipient.Action"/> is not available), MailBee extracts this information from the message body.
            </para>
            </remarks>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.Undeliverable">
            <summary>
            The message was not delivered to the recipient.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.Blocked">
            <summary>
            The message was blocked by the client side.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.Information">
            <summary>
            An informational notification was issued to the sender.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.Warning">
            <summary>
            Mail transfer software issued a warning while delivering the message.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.Receipt">
            <summary>
            The receipt generated after delivering the message.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.UserDefined">
            <summary>
            You can find the type of the delivery notification message using
            <see cref="P:MailBee.BounceMail.RecipientStatus.UserDefined">ResultItem.UserDefined</see> property.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.CommonType.Unknown">
            <summary>
            An unknown notification message.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.DetailedType">
            <summary>
            Defines the extended types of delivery notification messages.
            <seealso cref="T:MailBee.BounceMail.CommonType"/>
            <seealso cref="T:MailBee.BounceMail.DsnAction"/>
            </summary>
            <remarks>This is more detailed version of <see cref="T:MailBee.BounceMail.CommonType"/>. To obtain the extended status of
            the delivery to certain recipient, use <see cref="P:MailBee.BounceMail.RecipientStatus.Detailed"/> property of <see cref="T:MailBee.BounceMail.RecipientStatus"/>
            object which corresponds to the given recipient. See <see cref="T:MailBee.BounceMail.CommonType"/> topic for more information
            on how to obtain <see cref="T:MailBee.BounceMail.RecipientStatus"/> object for the given recipient.</remarks>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Hard">
            <summary>
            Hard bounce. The message could not be delivered to the recipient and it's not worth trying to resend it later.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Soft">
            <summary>
            Soft bounce. The message was not delivered to the recipient this time, but you can retry to deliver it later.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Spam">
            <summary>
            The message is treated as spam.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Virus">
            <summary>
            The message contains a virus.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.ChallengeResponse">
            <summary>
            A challenge response was issued to check whether the original message was sent by a human rather than by a spam robot.
            You should follow the instructions in the bounce message to confirm delivery of the original message.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.OtherBlocked">
            <summary>
            The message was blocked for undefined reason.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.AutoReply">
            <summary>
            This notification contains auto-reply to the original message.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.AddressChanged">
            <summary>
            The recepient address was changed. Please update your address book.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Modified">
            <summary>
            The message was modified.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Forwarded">
            <summary>
            The message was forwarded.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Subscribe">
            <summary>
            The notification on subscription event.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Unsubscribe">
            <summary>
            The notification on unsubscription event.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Temporary">
            <summary>
            The message is still not delivered to the recipient but you should not yet attempt to resend it because
            the mail server will retry to resend it later.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Delivered">
            <summary>
            The message was successfully delivered to the recepient.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Read">
            <summary>
            The message was read by the recepient.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.UserDefined">
            <summary>
            You can find the type of the delivery notification message using
            <see cref="P:MailBee.BounceMail.RecipientStatus.UserDefined">ResultItem.UserDefined</see> property.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.DetailedType.Unknown">
            <summary>
            An unknown notification message.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.RecipientStatusSource">
            <summary>
            Defines from which parts of the DSN message MailBee should load <see cref="T:MailBee.BounceMail.RecipientStatus"/> object.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.Source"/>
            </summary>
            <remarks>
            <para>Because DSN messages may contain duplicated information in different formats, you can tell MailBee
            the exact order of obtaining such information. Usually, more detailed and precise data is contained in DSN attachment
            while text description is less formal and less reliable.</para>
            <para>You can set this mode using <see cref="P:MailBee.BounceMail.RecipientStatus.Source"/> property.</para>
            </remarks>
        </member>
        <member name="F:MailBee.BounceMail.RecipientStatusSource.DsnThenText">
            <summary>
            Loads <see cref="T:MailBee.BounceMail.RecipientStatus"/> object from the DSN attachment if available; otherwise, from the message body text.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.RecipientStatusSource.Dsn">
            <summary>
            Always loads <see cref="T:MailBee.BounceMail.RecipientStatus"/> object only from the DSN attachment. If the DSN attachment is missing in the
            notification message, most <see cref="T:MailBee.BounceMail.RecipientStatus"/> properties will return a null reference.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.RecipientStatusSource.TextThenDsn">
            <summary>
            Loads <see cref="T:MailBee.BounceMail.RecipientStatus"/> object from the message body text if available; otherwise, from the DSN attachment.
            </summary>
        </member>
        <member name="F:MailBee.BounceMail.RecipientStatusSource.Text">
            <summary>
            Always loads <see cref="T:MailBee.BounceMail.RecipientStatus"/> object only from the message body text. If the message body text is missing in the
            notification message, most <see cref="T:MailBee.BounceMail.RecipientStatus"/> properties will return a null reference.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.RecipientStatus">
            <summary>
            Represents the delivery results for a particular recipient's e-mail address.
            </summary>
            <remarks>
            <para>You can use this object to examine the delivery status for a particular recipient. This information
            includes the e-mail address, the type of the status (e.g. not delivered, delivered, etc), and other information.</para>
            <para>To obtain this object for every recipient listed in the DSN message, call <see cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/> method and iterate through
            the <see cref="P:MailBee.BounceMail.Result.Recipients"/> collection of the returned <see cref="T:MailBee.BounceMail.Result"/> object.</para>
            <para>To obtain information which is not specific to a particular recipient but is the same for all
            recipients (such as the header of the original message or its unique tracking id assigned by the sending software),
            use other properties of <see cref="T:MailBee.BounceMail.Result"/> object. For instance, if you previously set <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">Smtp.DeliveryNotification.TrackingID</see>
            for e-mails you sent out and now want to find this tracking ID in the bounced messages, you will need to use <see cref="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID">Result.DsnStructure.OriginalEnvelopeID</see> property.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> topic.
            </example>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.Common">
            <summary>
            Gets the delivery status.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.Detailed"/>
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>
            </summary>
            <value>
            The common status of delivery of the original message to certain recipient.
            </value>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.Detailed">
            <summary>
            Gets the detailed delivery status.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.Common"/>
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>
            </summary>
            <value>
            The detailed status of delivery of the original message to certain recipient.
            </value>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.UserDefined">
            <summary>
            Gets the delivery status as a string.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>
            </summary>
            <value>
            The string status of delivery of the original message to certain recipient.
            </value>
            <remarks>
            You can use this property if <see cref="P:MailBee.BounceMail.RecipientStatus.Common"/> property
            is <see cref="F:MailBee.BounceMail.CommonType.UserDefined">CommonType.UserDefined</see>
            or <see cref="P:MailBee.BounceMail.RecipientStatus.Detailed"/> property is <see cref="F:MailBee.BounceMail.DetailedType.UserDefined">DetailedType.UserDefined</see>.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.DsnInfo">
            <summary>
            A reference to <see cref="T:MailBee.BounceMail.DsnRecipient"/> object which provides 
            Delivery Status Notification data for the recipient.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>
            </summary>
            <value>
            A <see cref="T:MailBee.BounceMail.DsnRecipient"/> object which contains parsed DSN attachment data, or a
            null reference (<b>Nothing</b> in Visual Basic) if the DSN attachment is missing in the DSN message.
            </value>
            <remarks>
            MailBee sets this property even if <see cref="P:MailBee.BounceMail.RecipientStatus.Source"/> is set not to use DSN attachments.
            </remarks>
            <example>
            The example is available in
            <see cref="P:MailBee.BounceMail.DsnRecipient.Items">DsnRecipientFields.Items</see> topic.
            </example>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.Description">
            <summary>
            Gets the description string from the DSN message.
            <seealso cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>
            </summary>
            <value>
            A string containing the description for the DSN for certain recipient, or
            a null reference (<b>Nothing</b> in Visual Basic) if not available.
            </value>
            <remarks>
            <para><see cref="P:MailBee.BounceMail.RecipientStatus.Description"/> is a human-readable text which usually contains the reason why the original
            message was bounced.</para>
            <para>MailBee can take this description either from the DSN message body text of from the DSN attachment
            (see <see cref="P:MailBee.BounceMail.RecipientStatus.Source"/> property for details).</para>
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.IsBounced">
            <summary>
            Indicates whether this DSN message can be treated as a bounce e-mail.
            </summary>
            <value><b>true</b> if the message is bounced; otherwise, <b>false</b>.</value>
            <remarks>
            <para><b>true</b> means that <see cref="P:MailBee.BounceMail.RecipientStatus.Common"/> property is
            <see cref="F:MailBee.BounceMail.CommonType.Undeliverable">CommonType.Undeliverable</see> or
            <see cref="F:MailBee.BounceMail.CommonType.Blocked">CommonType.Blocked</see>, or
            <see cref="P:MailBee.BounceMail.RecipientStatus.Detailed"/> property is <see cref="F:MailBee.BounceMail.DetailedType.AddressChanged">DetailedType.AddressChanged</see>.</para>
            <para>If the message is not bounce, it can be informational or warning message (or it was not recognized).</para>
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.EmailAddress">
            <summary>
            Gets the e-mail address of the recipient for which this <see cref="T:MailBee.BounceMail.RecipientStatus"/> object applies.
            </summary>
            <value>A string value with the e-mail address, or
            a null reference (<b>Nothing</b> in Visual Basic) if not available.</value>
            <remarks>
            If <see cref="P:MailBee.BounceMail.RecipientStatus.IsBounced"/> is <b>true</b>, that means that the original
            e-mail message was not delivered to <see cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/> recipient. You may consider exclusion of this e-mail
            address from your mailing list.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatus.Source">
            <summary>
            Gets or sets from which data the <see cref="T:MailBee.BounceMail.RecipientStatus"/> object should return the recipient delivery status
            information.
            </summary>
            <value>
            A <see cref="T:MailBee.BounceMail.RecipientStatusSource"/> value. The default value is <see cref="F:MailBee.BounceMail.RecipientStatusSource.DsnThenText"/>.
            </value>
            <remarks>This property controls whether to take DSN information (such as <see cref="P:MailBee.BounceMail.RecipientStatus.EmailAddress"/>, <see cref="P:MailBee.BounceMail.RecipientStatus.Description"/>, etc)
            from the DSN attachment or from the text body. Changing this property value has immediate effect (i.e. it's not required
            to reparse or reprocess the DSN message in order to apply the changes).</remarks>
        </member>
        <member name="T:MailBee.SmtpMail.ExtendedSmtpOptions">
            <summary>
            Provides flags specifying which ESMTP extensions will be enabled during SMTP session.
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.Pipelining"/>
            <seealso cref="P:MailBee.Global.SafeMode"/>
            </summary>
            <remarks>
            <para>Even if ESMTP extensions are enabled, MailBee will use only those extensions
            which are supported by a particular ESMTP server. The flags provided by this enumeration
            should be used if the developer wishes to disable certain ESMTP extensions even if they
            are supported by the server.</para>
            <para>8BITMIME/BINARYMIME ESMTP extensions are disabled by default and cannot be enabled via
            this enumeration's flags. This is because 8BITMIME/BINARYMIME, when used, cause problems
            with delivery of e-mail messages via multiple SMTP servers in chain. This happens when
            MailBee submits a message to 8BITMIME/BINARYMIME-enabled SMTP relay server and that
            server then attempts to relay the message to the end recipient's SMTP server and
            that destination SMTP server does not support 8BITMIME/BINARYMIME.</para>
            <para>To enable 8BITMIME/BINARYMIME (if it's required for some reason), set <see cref="P:MailBee.SmtpMail.Smtp.Conversion8BitTo7bit"/> property to non-default value.</para>
            <note>ESMTP PIPELINING extension can be disabled by setting <see cref="P:MailBee.SmtpMail.SmtpServer.Pipelining">SmtpServer.Pipelining</see>
            property value to <b>false</b>. Or, for direct send mode (via DNS MX lookup), the property to set is
            <see cref="P:MailBee.SmtpMail.DirectSendServerConfig.SmtpOptions">Smtp.DirectSendDefaults.SmtpOptions</see>.</note>
            <para>To disable all extended features (except AUTH) and achieve maximum compatibility level, set <see cref="P:MailBee.Global.SafeMode">Global.SafeMode</see>
            to <b>true</b> prior to creating any instances of MailBee classes or calling their methods.</para>
            </remarks>
        </member>
        <member name="F:MailBee.SmtpMail.ExtendedSmtpOptions.Default">
            <summary>
            CHUNKING, DSN, SIZE, and AUTH extensions are enabled.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.ExtendedSmtpOptions.NoChunking">
            <summary>
            Disable CHUNKING extension (RFC1830.3). Sending large messages will be less efficient.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.ExtendedSmtpOptions.NoDsn">
            <summary>
            Disable Delivery Status Notification extension (RFC1891). <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/>
            settings will be ignored.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.ExtendedSmtpOptions.NoSize">
            <summary>
            Disable SIZE extension (RFC1870). Exceeding maximum allowed message size will
            not be detected until the message data is completely sent to the server.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.ExtendedSmtpOptions.ClassicSmtpMode">
            <summary>
            Completely disable ESMTP and send HELO command instead of EHLO as initial greeting.
            No ESMTP extensions (including PIPELINING) will be available. <see cref="M:MailBee.SmtpMail.Smtp.GetExtensions"/> method
            will return a null reference (<b>Nothing</b> in Visual Basic). ESMTP authentication will not work
            (POP-before-SMTP authentication will still work if it's supported by the server).
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.Smtp8bitDataConversion">
            <summary>
            Defines the available actions to perform when the message contains 8bit data when
            the SMTP server does not support transmission of 8bit data.
            <seealso cref="P:MailBee.SmtpMail.Smtp.Conversion8BitTo7bit"/>
            </summary>
            <remarks>
            <para>The developer can set this action via <see cref="P:MailBee.SmtpMail.Smtp.Conversion8BitTo7bit"/> property.</para>
            <para>All modes other than <see cref="F:MailBee.SmtpMail.Smtp8bitDataConversion.DoNothing"/> will either take advantage of
            8BITMIME (RFC1426) and BINARYMIME (RFC1830.4) extensions (so that no 8bit-to-7bit conversion will be made)
            or do 8bit-to-7bit conversion (or throw exceptions, raise warning events, etc) if the SMTP server does not support these extensions
            or MailBee was configured to operate in classic SMTP mode with all ESMTP extensions disabled
            (see <see cref="P:MailBee.SmtpMail.SmtpServer.SmtpOptions"/> for details).</para>
            </remarks>
        </member>
        <member name="F:MailBee.SmtpMail.Smtp8bitDataConversion.DoNothing">
            <summary>
            Do not care about 8bit-to-7bit conversion. The fastest setting.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.Smtp8bitDataConversion.ConvertAndWarn">
            <summary>
            Check if the SMTP server supports 8BITMIME/BINARYMIME extensions.
            If they are supported, no conversion will be made. If they are not supported,
            convert the data into 7bit and raise <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> warning event
            passing <see cref="T:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException"/> as
            <see cref="P:MailBee.ErrorEventArgs.Reason"/> parameter value, and also put the
            corresponding message into the log if logging is enabled.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.Smtp8bitDataConversion.ConvertAndForget">
            <summary>
            Check 8BITMIME/BINARYMIME availibility and silently convert the data into 7bit
            if 8BITMIME/BINARYMIME not supported.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.Smtp8bitDataConversion.WarnOnly">
            <summary>
            Check 8BITMIME/BINARYMIME availibility and, if they are not supported,
            raise <see cref="E:MailBee.SmtpMail.Smtp.ErrorOccurred"/> warning event
            passing <see cref="T:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException"/> as
            <see cref="P:MailBee.ErrorEventArgs.Reason"/> parameter value, and also put the
            corresponding message into the log if logging is enabled.
            </summary>
        </member>
        <member name="F:MailBee.SmtpMail.Smtp8bitDataConversion.ThrowException">
            <summary>
            Check 8BITMIME/BINARYMIME availibility and, if they are not supported,
            throw <see cref="T:MailBee.SmtpMail.MailBeeSmtp8bitDataNotSupportedException"/>.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SendMailJob">
            <summary>
            Represents a task to send (or submit to the pickup folder) a single e-mail message
            or a series of e-mail messages created as a mail merge of a data table and an e-mail template.
            <seealso cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/>
            <seealso cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/>
            </summary>
            <remarks>
            <para>Send-mail job is a task for MailBee to create and/or send individual mail message or a
            series of messages based on a common template (mail merge).
            </para>
            <para>Jobs can be created using <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/> method of <see cref="T:MailBee.SmtpMail.Smtp"/> class
            (there are several overloads for mail merge and single message jobs).</para>
            <para>Once one or more jobs have been added to the <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> queue, the developer can
            request to start processing of these jobs. This processing usually involves sending out e-mail messages
            contained in jobs or submitting these e-mail messages to a pickup folder for direct delivery to the SMTP server or MailBee Message Queue
            if it's installed on the same machine where MailBee-powered application is running.</para>
            <para>To start processing jobs, use <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>, <see cref="M:MailBee.SmtpMail.Smtp.BeginSendJobs(System.AsyncCallback,System.Object)"/>, or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/> methods.</para>
            <para>When the job assumes sending of a single e-mail message, no extra jobs are created. However,
            when the job is a mail merge job (and thus actually assumes creating and sending multiple messages), MailBee processes such job
            via creating a series of individual mail merge jobs (each of them assumes sending a single e-mail message). For instance, if a mail merge job for processing 100
            data rows has been put into processing, MailBee will finally end up with 100 items total in <see cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/> and <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collections.
            This default behavior, however, can be changed with <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> overload.
            </para>
            <note>The easiest way to perform mail merge is using <see cref="M:MailBee.SmtpMail.Smtp.SendMailMerge(System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable)"/> method.
            It can be used to put a "mail merge over database" job into the queue
            and immediately process it, doing mail merge for each row in the data table with a e-mail template and then sending out
            resulting e-mail messages.</note>
            </remarks>
        </member>
        <member name="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString">
            <summary>
            Returns the string containing comma-separated list of data table row indices yet to be processed as mail merge.
            <seealso cref="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsPending"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsSuccessful"/>
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>
            </summary>
            <returns>Comma-separated list of data table row indices of a pending mail merge job,
            index of the data row of the finished job, or "0" string if this job is not mail merge job.</returns>
            <remarks>
            <para>
            For jobs which reside in <see cref="P:MailBee.SmtpMail.Smtp.JobsPending">Smtp.JobsPending</see> collection, <see cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString"/>
            will usually return "0" for "not a mail merge" jobs (jobs of sending a single message),
            "x, -1" for mail merge jobs of sending all the rows in the data table (where x is zero initially, and then
            x will be sequentially incremented as mail merge process comes along), or "y" where y is an index of the data row
            of the finished mail merge job.
            </para>
            <para>However, mail merge jobs in <see cref="P:MailBee.SmtpMail.Smtp.JobsPending">Smtp.JobsPending</see> can also have arbitrary sets of data row indices to
            be processed (for instance, "0,4,199,200,501,-1" which means "process rows 0, 4, 199, 200, 501, and the rest of the table",
            or "5,10,15" which means "process rows 5, 10, and 15"). A mail merge job with arbitrary set of data row indices can be placed
            into <see cref="P:MailBee.SmtpMail.Smtp.JobsPending">Smtp.JobsPending</see> collection using
            <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)">Smtp.AddJob</see> method overload.</para>
            <para>In most cases, to get the results of mail merge (which rows have been
            processed successfully, which have been failed, etc), the developer should use
            <see cref="M:MailBee.SmtpMail.SendMailJobCollection.GetIndicesAsString(System.Data.DataTable,System.String)">SendMailJobCollection.GetIndicesAsString</see> method instead.
            For instance, <c>mailer.JobsFailed.GetIndicesAsString(null)</c> (in C# syntax, assuming <c>mailer</c> is <see cref="T:MailBee.SmtpMail.Smtp"/> instance)
            will return all data row indices for all failed jobs. Thus, there will be no need to manually iterate through <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>
            and call <see cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString"/> for every job in the collection.</para>
            </remarks>
            <example>You can find the example at <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> topic.</example>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.Tag">
            <summary>
            Gets the tag assigned by the developer to this job.
            </summary>
            <value>A string assigned to the job by the developer, or empty string if tag was not assigned.</value>
            <remarks>
            <para>
            The developer can use tags to to keep track of the processed jobs.
            Tags also appear in the log helping to match log messages to particular jobs.</para>
            <para>To enqueue a job so that it would have tag assigned, the developer should use
            <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)">Smtp.AddJob(string, string, EmailAddressCollection)</see> or
            <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)">Smtp.AddJob(string, string, EmailAddressCollection, DataTable, object, bool, bool)</see>
            methods.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.Message">
            <summary>
            Gets a reference to the mail message object to be sent or merged.
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/>
            </summary>
            <value>A reference to the mail message object (if the job consists of sending
            a single e-mail message, not mail merge) or a template e-mail for mail merge.</value>
            <remarks>
            <para>If the job is of sending a single e-mail message supplied by the application, <see cref="P:MailBee.SmtpMail.SendMailJob.Message"/> refers to the mail message object to be sent.
            If the job is a mail merge job, <see cref="P:MailBee.SmtpMail.SendMailJob.Message"/> refers to the template which will be merged (or, for finished jobs, was already merged) with data table rows.</para>
            <para>For mail merge jobs, the developer can use <see cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/> property to get the result of mail merge of the template with a data row.
            However, MailBee does not keep merged messages in finished jobs to avoid memory overhead (unless
            <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> method was called with <i>keepMergedData</i> set to <b>true</b>).
            </para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.MergedMessage">
            <summary>
            Gets a reference to the mail message produced as a result of mail merge of the template with a data row.
            </summary>
            <value>A reference to the mail message produced as a result of mail merge of the template with a single data table row,
            or a null reference (<b>Nothing</b> in Visual Basic) if this job is not a mail merge job or if the merged message is no longer needed.</value>
            <remarks>
            <para>In most cases, this property returns null because the merged message is not yet available before the job goes
            into processing, and is no longer available once the job is finished (MailBee removes merged message object from
            memory to avoid having <see cref="T:MailBee.Mime.MailMessage"/> objects for every data row in memory simultaneously).
            </para>
            <para>However, the developer may prevent automatic disposing of <see cref="T:MailBee.Mime.MailMessage"/> objects created during mail merge:
            to put the mail merge job into pending list, call <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection,System.Data.DataTable,System.Object,System.Boolean,System.Boolean)"/> method
            with <i>keepMergedData</i> set to <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.SenderEmail">
            <summary>
            Gets the actual sender e-mail address string (or its pattern for mail merge jobs).
            </summary>
            <value>The string containing the e-mail address of the actual sender of the mail message, or an actual sender e-mail address template for mail merge jobs.</value>
            <remarks>This address is usually the same as "From:" address of the mail message (or mail merge template).
            However, it can be different if the e-mail or mail merge needs to be sent from fake address
            (when "From:" address is different from SMTP "MAIL FROM:" address). To achieve this,
            call <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/> method with
            non-null value of <i>senderEmail</i> parameter (or <i>senderEmailPattern</i>
            for mail merge overloads of this method).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.MergedSenderEmail">
            <summary>
            Gets the actual sender e-mail address string produced by mail merge process.
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.SenderEmail"/>
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/>
            </summary>
            <value>The actual sender e-mail address string produced by mail merge process, or a null reference
            (<b>Nothing</b> in Visual Basic) if this job is not a mail merge job or if the merged message is no longer needed.</value>
            <remarks>This property plays the same role for <see cref="P:MailBee.SmtpMail.SendMailJob.SenderEmail"/> as
            <see cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/> does for <see cref="P:MailBee.SmtpMail.SendMailJob.Message"/>.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.Recipients">
            <summary>
            Gets the list of the actual recipients of the mail message (or its pattern for mail merge jobs).
            </summary>
            <value>A reference to the collection of the actual recipients of the mail message,
            or an actual recipients template for mail merge jobs.
            </value>
            <remarks>This collection usually lists "To", "CC", and "BCC" recipients of the mail message.
            However, it can be different if the e-mail or mail merge needs to be sent to fake addresses
            (when "To:" and/or "Cc:" and "Bcc:" addresses are different from SMTP "RCPT TO:" addresses). To achieve this,
            call <see cref="M:MailBee.SmtpMail.Smtp.AddJob(System.String,System.String,MailBee.Mime.EmailAddressCollection)"/> method with
            non-null value of <i>recipients</i> parameter (or <i>recipientsPattern</i>
            for mail merge overloads of this method).</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.MergedRecipients">
            <summary>
            Gets the list of the actual recipients produced by mail merge process.
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.Recipients"/>
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/>
            </summary>
            <value>The list of the actual recipients produced by mail merge process, or a null reference
            (<b>Nothing</b> in Visual Basic) if this job is not a mail merge job or if the merged message is no longer needed.</value>
            <remarks>This property plays the same role for <see cref="P:MailBee.SmtpMail.SendMailJob.Recipients"/> as
            <see cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/> does for <see cref="P:MailBee.SmtpMail.SendMailJob.Message"/>.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.DsnSettings">
            <summary>
            Gets a reference to the delivery status notification settings for the mail message (or their patterns for mail merge jobs).
            </summary>
            <value>A reference to the delivery status notification (DSN) settings for the mail message, or DNS template
            for mail merge jobs.</value>
            <remarks>
            <para>For mail merge, <see cref="P:MailBee.SmtpMail.SendMailJob.DsnSettings"/> property allows the application to use templates for DSN settings. For instance,
            using pattern in <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID"/> value can be used
            to assign individual <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID"/> for each mail message generated during mail merge.</para>
            <note>In order to use DSN, make sure the SMTP server supports DSN extension (see <see cref="T:MailBee.SmtpMail.DeliveryNotificationOptions"/> section for more information).</note>
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.MergedDsnSettings">
            <summary>
            Gets a reference to the delivery status notification settings produced by mail merge process.
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.DsnSettings"/>
            <seealso cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/>
            </summary>
            <value>The delivery status notification (DSN) settings produced by mail merge process, or a null reference
            (<b>Nothing</b> in Visual Basic) if this job is not a mail merge job or if the merged message is no longer needed.</value>
            <remarks>
            This property plays the same role for <see cref="P:MailBee.SmtpMail.SendMailJob.DsnSettings"/> as
            <see cref="P:MailBee.SmtpMail.SendMailJob.MergedMessage"/> does for <see cref="P:MailBee.SmtpMail.SendMailJob.Message"/>.
            </remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.MergeTable">
            <summary>
            Gets the data table for the mail merge.
            </summary>
            <value>A reference to the source of the data for mail merge, or a null reference
            (<b>Nothing</b> in Visual Basic) if this job is not a mail merge job.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.IsMessageSent">
            <summary>
            Gets if the message was successfully sent or submitted to the pickup folder.
            </summary>
            <value><b>true</b> if the message was successfully sent (for methods such as <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/>)
            or submitted to the pickup folder (for methods such as <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>).</value>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.ErrorReason">
            <summary>
            Gets the reason of the error which prevented the mail message from being sent or submitted to the pickup folder.
            <seealso cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>
            </summary>
            <value>A reference to the exception (descendant of <see cref="T:MailBee.MailBeeException"/>) which prevented
            the mail message from successful sending or submitting to the pickup folder, or a null reference
            (<b>Nothing</b> in Visual Basic) if the mail message was sent or submitted successfully.</value>
            <remarks>Because methods which process jobs queue (such as <see cref="M:MailBee.SmtpMail.Smtp.SendJobs"/> or <see cref="M:MailBee.SmtpMail.Smtp.SubmitJobsToPickupFolder(System.String)"/>)
            operate on multiple jobs in this queue, it would be inconvenient if failure of any job
            stopped the entire process. Thus, methods which process jobs do not raise exceptions and silently
            continue to the next job in the queue in the case of error. Still, the application has ways of tracking
            failures (for instance, <see cref="E:MailBee.SmtpMail.Smtp.MessageNotSent"/> event or <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/> collection).
            In the case of <see cref="P:MailBee.SmtpMail.Smtp.JobsFailed"/>, <see cref="P:MailBee.SmtpMail.SendMailJob.ErrorReason"/> can be used for every job
            in this collection to determine exact reason of the error.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SendMailJob.MergeRowIndex">
            <summary>
            Gets the index of the data row used for mail merge of this message.
            </summary>
            <value>The index of the data row in <see cref="P:MailBee.SmtpMail.SendMailJob.MergeTable"/> data table used for mail merge of this message,
            or zero if this mail message was not composed as a merge of database data with mail template.</value>
            <remarks>
            <para>For mail merge operations, <c>job.MergeTable[e.MergeRowIndex]</c> (in C# syntax, assuming <c>job</c>
            is an instance of <see cref="T:MailBee.SmtpMail.SendMailJob"/> class) returns the first
            <see cref="T:System.Data.DataRow"/> to be merged with the template.</para>
            <para>Since <see cref="T:MailBee.SmtpMail.SendMailJob"/> objects in <see cref="P:MailBee.SmtpMail.Smtp.JobsPending"/> collection
            can represent mail merge jobs of processing multiple data rows, <see cref="P:MailBee.SmtpMail.SendMailJob.MergeRowIndex"/>
            can actually refer to the first data row index in the entire list data row indices
            associated with such <see cref="T:MailBee.SmtpMail.SendMailJob"/> object. To get all the indices, use
            <see cref="M:MailBee.SmtpMail.SendMailJob.GetIndicesAsString"/> method.</para>
            </remarks>
        </member>
        <member name="T:MailBee.Mime.MimePart">
            <summary>
            Represents a MIME part of the message.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.Attachment"/>
            <seealso cref="T:MailBee.Mime.TextBodyPart"/>
            </summary>
            <remarks>
            <para>Each e-mail message consists of one or more MIME parts.
            Each MIME part consists of a header section and (optionally) a body section. The body section may
            contain the actual content (text, binary data, etc) or other MIME parts nested into this part.
            Attachments, text body parts and the message itself are examples of MIME parts.</para>
            <para>During parsing the message, MailBee creates a tree of linked <see cref="T:MailBee.Mime.MimePart"/> and <see cref="T:MailBee.Mime.MimePartCollection"/> objects.</para>
            <para>To access the MIME part which corresponds to the message itself (the root part), use
            <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> property. To access the MIME part which corresponds
            to a certain attachment, use <see cref="P:MailBee.Mime.Attachment.AsMimePart"/> property of that <see cref="T:MailBee.Mime.Attachment"/>
            object. To access the MIME part which corresponds to a certain text body part,
            use <see cref="P:MailBee.Mime.TextBodyPart.AsMimePart"/> property of that <see cref="T:MailBee.Mime.TextBodyPart"/>
            object.</para>
            <para>Because most properties of <see cref="T:MailBee.Mime.MimePart"/> and <see cref="T:MailBee.Mime.Attachment"/> object have the same meaning
            (and every attachment is internally a MIME part - you can get it with <see cref="P:MailBee.Mime.Attachment.AsMimePart">Attachment.AsMimePart</see> property),
            the documentation on these properties usually refers to their versions in <see cref="T:MailBee.Mime.Attachment"/> class.
            Some <see cref="T:MailBee.Mime.MimePart"/> properties, however, not applicable or important for <see cref="T:MailBee.Mime.Attachment"/> object and thus can only be found in <see cref="T:MailBee.Mime.MimePart"/> class.</para>
            <para>It's usually not need to create <see cref="T:MailBee.Mime.MimePart"/> objects manually. To compose a message consisting of multiple parts,
            add attachments or text body parts to it. MailBee will produce MIME parts for them during building the message.</para>
            <para>However, it's possible to create an instance of <see cref="T:MailBee.Mime.MimePart"/> class using <see cref="M:MailBee.Mime.MimePart.Parse(System.Byte[])"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.MimePart.Boundary"/> topic.</example>
        </member>
        <member name="M:MailBee.Mime.MimePart.Parse(System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:MailBee.Mime.MimePart"/> object from the specified MIME data.
            <seealso cref="T:MailBee.Mime.MimePartCollection"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="dataToParse">The byte array containing the MIME part contents (the header and the body).</param>
            <returns>A reference to the created <see cref="T:MailBee.Mime.MimePart"/> object.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="dataToParse"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>You can use this method to parse standalone MIME parts rather than entire messages. For instance, it's possible to tell IMAP server
            to return a particular MIME part. You can then parse the received data using <see cref="M:MailBee.Mime.MimePart.Parse(System.Byte[])"/> method. Then, you can create <see cref="T:MailBee.Mime.Attachment"/>
            object from the created <see cref="T:MailBee.Mime.MimePart"/>.</remarks>
            <example>The example is available in <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)">Envelope.GetEnvelopeItem</see> topic.</example>
        </member>
        <member name="M:MailBee.Mime.MimePart.GetAllParts">
            <summary>
            Returns the collection containing this MIME part and all its sub-parts (if any) as a flat list.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="T:MailBee.Mime.MimePartCollection"/>
            <seealso cref="P:MailBee.Mime.MimePart.SubParts"/>
            </summary>
            <returns>
            A reference to the <see cref="T:MailBee.Mime.MimePartCollection"/> object containing body structures of the MIME part
            and all its sub-parts (including sub-sub-parts, etc).
            </returns>
            <remarks>
            <p>
            The developer can use this method to get flat representation of the MIME parts tree.
            This is useful when it's required to quickly iterate through all of the MIME parts
            (for instance, to count all the attachments of the mail message).
            </p>
            <p>
            To get the collection of immediate sub-parts of the MIME part, use <see cref="P:MailBee.Mime.MimePart.SubParts"/> property.
            </p>
            <note>
            If a MIME part does not have any sub-parts, this method will return <see cref="T:MailBee.Mime.MimePartCollection"/>
            object containing only this MIME part itself.
            </note>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.MimePartCollection"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Boundary">
            <summary>
            Gets the string which delimits MIME parts nested into this part.
            <seealso cref="T:MailBee.Mime.MimePartCollection"/>
            </summary>
            <value>
            A string containing the delimiter separating MIME sub-parts of this part if. If this part is not multi-part, the return value is an empty string.
            </value>
            <remarks>
            <para>
            If the MIME part is multi-part (has one or more MIME parts nested into it), these sub-parts should be separated
            with a unique delimiter string. This string is specified in <i>boundary</i> attribute of the
            Content-Type header of the part header section.
            </para>
            <para>
            For instance, if the MIME part header is <i>Content-type: multipart/mixed; boundary="Boundary_(ID_frk7dChObvUn0w8y7BE4uQ)"</i>,
            the <see cref="P:MailBee.Mime.MimePart.Boundary"/> property will return <i>Boundary_(ID_frk7dChObvUn0w8y7BE4uQ)</i> value.
            </para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the boundary used to delimit sub-root MIME parts of this message.
            If the message is not multi-part and consists of a root part only, the sample will print an empty line.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Show the boundary.</span>
            Console.WriteLine(msg.MimePartTree.Boundary);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Show the boundary.</span>
            Console.WriteLine(msg.MimePartTree.Boundary)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Charset">
            <summary>
            Gets the name of the character encoding of the MIME part.
            <seealso cref="P:MailBee.Mime.MailMessage.Charset"/>
            </summary>
            <value>
            A string containing the name of the character encoding of the MIME part, or an empty string if the charset is not specified in the MIME part.
            </value>
            <remarks>
            <para>For instance, if Content-Type header string is <i>Content-Type: text/plain; charset="EUC-KR"</i>,
            this property will return <i>EUC-KR</i> value.</para>
            <note>Although <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> object represents the root MIME part of the message
            and thus headers of that <see cref="T:MailBee.Mime.MimePart"/> are the same as headers of the <see cref="T:MailBee.Mime.MailMessage"/> itself, there still can be difference
            between <c>msg.Charset</c> and <c>msg.MimePartRoot.Charset</c> values. This is because <c>msg.MimePartRoot.Charset</c> always returns the charset information specified in the headers of
            this MIME part, while <c>msg.Charset</c> returns the charset specified in another MIME part in the case if the root part of the message does not contain
            the charset information but any of the nested parts does. This is common case for multi-part messages because multi-part parts do not contain charset information.
            Use <see cref="P:MailBee.Mime.MailMessage.Charset">MailMessage.Charset</see> to determine the overall charset of the message.</note>
            </remarks>
            <example>This sample loads the message from .EML file and displays the charset of the message as specified in the root part.
            This value will be empty if the message is multi-part (for instance, contains attachments or alternative plain-text body).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Show the charset specified in the message headers.</span>
            Console.WriteLine(msg.MimePartTree.Charset);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Show the charset specified in the message headers.</span>
            Console.WriteLine(msg.MimePartTree.Charset)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.ContentID">
            <summary>
            Gets the Content-ID value of the MIME part.
            <seealso cref="P:MailBee.Mime.MimePart.IsInline"/>
            </summary>
            <value>
            A string containing the Content-ID (CID) value of the MIME part, or an empty string if the MIME part has no Content-ID.
            </value>
            <remarks>
            See <see cref="P:MailBee.Mime.Attachment.ContentID">Attachment.ContentID</see> for more information regarding Content-IDs.
            </remarks>
            <example>This sample loads the message from .EML file and displays Content-ID of each MIME part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every MIME part...</span>
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: green;">// ...show MIME part identifier.</span>
            	Console.WriteLine(part.ContentID);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every MIME part...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: green;">' ...show MIME part identifier.</span>
            	Console.WriteLine(part.ContentID)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.ContentLocation">
            <summary>
            Gets the content location of the MIME part.
            <seealso cref="P:MailBee.Mime.MimePart.ContentID"/>
            </summary>
            <value>
            A string containing the MIME part's content location taken from Content-Location header,
            or an empty string if Content-Location header is not set.
            </value>
            <remarks>
            <para>
            The value of this property is taken from Content-Location header of the message.
            It usually contains the URI (URL) of the resource contained in this MIME part.
            </para>
            <para>
            For instance, if the header is <i>Content-Location: http://www.afterlogic.com/images/top.gif</i>,
            <see cref="P:MailBee.Mime.MimePart.ContentLocation"/> property will return <i>http://www.afterlogic.com/images/top.gif</i> value.
            </para>
            <para>See <see cref="P:MailBee.Mime.Attachment.ContentLocation">Attachment.ContentLocation</see> for more information regarding Content-Location.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the location of each MIME part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	Console.WriteLine(part.ContentLocation);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	Console.WriteLine(part.ContentLocation)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Description">
            <summary>
            Gets the content description of the MIME part as a string.
            </summary>
            <value>
            A string containing the MIME part's content description taken from Content-Description header, or an empty string if Content-Description header is not set.
            The default value is an empty string.
            </value>
            <remarks>
            See <see cref="P:MailBee.Mime.Attachment.Description">Attachment.Description</see> for more information regarding Content-Description.
            </remarks>
            <example>This sample loads the message from file and displays the description of the root MIME part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            Console.WriteLine(msg.MimePartTree.Description);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            Console.WriteLine(msg.MimePartTree.Description)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Disposition">
            <summary>
            Gets the content disposition of the MIME part.
            <seealso cref="P:MailBee.Mime.MimePart.IsInline"/>
            </summary>
            <value>
            A string containing the MIME part's disposition taken from Content-Disposition header, or an empty string if Content-Disposition header is not set.
            The default value is an empty string.
            </value>
            <remarks>
            <para>For instance, if the header is <i>Content-Disposition: attachment; filename="image.jpg"</i>,
            the <i>attachment</i> value will be returned (additional parameters will be omitted).</para>
            <para>If <see cref="P:MailBee.Mime.MimePart.Disposition"/> is <i>inline</i> or missing, this means this MIME part contains a resource which
            must be rendered when the message body gets displayed. If it's <i>attachment</i>, the resource is a file
            which does not need to be rendered in order to correctly display the message.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays disposition of the root MIME part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            Console.WriteLine(msg.MimePartTree.Disposition);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            Console.WriteLine(msg.MimePartTree.Disposition)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Filename">
            <summary>
            Gets the filename of the MIME part as specified in the message.
            <seealso cref="P:MailBee.Mime.MimePart.Name"/>
            </summary>
            <value>
            A string containing the MIME part's filename taken from <i>filename</i> parameter of Content-Disposition header, or an empty string if not available.
            </value>
            <remarks>
            <para>For instance, if the header is <i>Content-Disposition: attachment; filename="image.jpg"</i>,
            the <see cref="P:MailBee.Mime.MimePart.Filename"/> property will contain the <i>image.jpg</i> value.</para>
            <note>This property corresponds to <see cref="P:MailBee.Mime.Attachment.FilenameOriginal">Attachment.FilenameOriginal</see> property, not to
            <see cref="P:MailBee.Mime.Attachment.Filename">Attachment.Filename</see>. For instance, if <see cref="P:MailBee.Mime.MimePart.Filename"/> is empty,
            <see cref="P:MailBee.Mime.Attachment.Filename">Attachment.Filename</see> will still contain valid name which can be used to
            save the file to disk.</note>
            </remarks>
            <example>This sample loads the message from .EML file and displays the filenames of each MIME part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	Console.WriteLine(part.Filename);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	Console.WriteLine(part.Filename)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.IsComplete">
            <summary>
            Indicates whether the MIME part of the message was received completely.
            <seealso cref="P:MailBee.Mime.MailMessage.IsEntire"/>
            <seealso cref="P:MailBee.Mime.MailMessage.SizeOnServer"/>
            </summary>
            <value>
            <b>true</b> if the MIME part was received completely; otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>If the message was received partially, this property may return <b>false</b> for some MIME parts
            of the message.</para>
            <para>MailBee tests if the MIME part is complete by checking if the closing boundary was found. This, however,
            works for multi-part messages only. If the message consists of a single part and does not include any boundaries,
            it's not possible to determine if the part was received completely. However, in this case you can check
            <see cref="P:MailBee.Mime.MailMessage.SizeOnServer">MailMessage.SizeOnServer</see> property. If its value is larger than
            <see cref="P:MailBee.Mime.MailMessage.Size">MailMessage.Size</see>, the message was incompletely received from the mail server.</para>
            </remarks>
            <example>This sample loads the message from file and checks if all MIME parts of this message were received entirely.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">bool</span> allPartsAreComplete = <span style="color: blue;">true</span>;
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: blue;">if</span> (!part.IsComplete)
            	{
            		allPartsAreComplete = <span style="color: blue;">false</span>;
            		<span style="color: blue;">break</span>;
            	}
            }
            <span style="color: blue;">if</span> (allPartsAreComplete)
            {
            	Console.WriteLine("allPartsAreComplete == true");
            }
            <span style="color: blue;">else</span>
            {
            	Console.WriteLine("allPartsAreComplete == false");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">Dim</span> allPartsAreComplete <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span> = <span style="color: blue;">True</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> part.IsComplete <span style="color: blue;">Then</span>
            		allPartsAreComplete = <span style="color: blue;">False</span>
            		<span style="color: blue;">Exit</span> <span style="color: blue;">For</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            <span style="color: blue;">If</span> allPartsAreComplete <span style="color: blue;">Then</span>
            	Console.WriteLine("allPartsAreComplete = True")
            <span style="color: blue;">Else</span>
            	Console.WriteLine("allPartsAreComplete = False")
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.IsFile">
            <summary>
            Indicates whether the MIME part is a file.
            </summary>
            <value>
            <b>true</b> if the MIME part is a file; otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>See <see cref="P:MailBee.Mime.Attachment.IsFile">Attachment.IsFile</see> for more information.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays all MIME parts recognized as files.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: blue;">if</span> (part.IsFile)
            	{
            		Console.WriteLine("MIME part " + part.Filename + " is file.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: blue;">If</span> part.IsFile <span style="color: blue;">Then</span>
            		Console.WriteLine("MIME part " &amp; part.Filename &amp; " is file.")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.IsInline">
            <summary>
            Indicates whether the MIME part is inline.
            <seealso cref="P:MailBee.Mime.MimePart.IsRelated"/>
            </summary>
            <value>
            <b>true</b> if the MIME part is inline; otherwise, <b>false</b>.
            </value>
            <remarks>
            See <see cref="P:MailBee.Mime.Attachment.IsFile">Attachment.IsInline</see> for more information.
            </remarks>
            <example>This sample loads the message from .EML file and displays all inline MIME parts of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: blue;">if</span> (part.IsInline)
            	{
            		Console.WriteLine("MIME part " + part.Name + " is inline.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: blue;">If</span> part.IsInline <span style="color: blue;">Then</span>
            		Console.WriteLine("MIME part " &amp; part.Name &amp; " is inline.")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.IsMessageInside">
            <summary>
            Indicates whether the MIME part is an encapsulated mail message.
            <seealso cref="M:MailBee.Mime.Attachment.GetEncapsulatedMessage"/>
            </summary>
            <value>
            <b>true</b> if the MIME part is a mail message; otherwise, <b>false</b>.
            <i></i>
            </value>
            <remarks>
            <para>See <see cref="M:MailBee.Mime.Attachment.GetEncapsulatedMessage">Attachment.GetEncapsulatedMessage</see> for more information.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the number of encapsulated mail messages.
            It does not count, however, any encapsulated messages which may reside within other encapsulated messages (multiple
            messages nested within each other).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            <span style="color: blue;">int</span> innerMessageCount = 0;
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: blue;">if</span> (part.IsMessageInside)
            	{
            		innerMessageCount++;
            	}
            }
            Console.WriteLine("Number of inner messages: " + innerMessageCount.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> innerMessageCount <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: blue;">If</span> part.IsMessageInside <span style="color: blue;">Then</span>
            		innerMessageCount = innerMessageCount + 1
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            Console.WriteLine("Number of inner messages: " &amp; innerMessageCount.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.IsRelated">
            <summary>
            Indicates whether the MIME part is related to other MIME parts of this message.
            <seealso cref="P:MailBee.Mime.MimePart.IsInline"/>
            </summary>
            <value>
            <b>true</b> if the MIME part is related to other MIME part of this message; otherwise, <b>false</b>.
            </value>
            <remarks>
            The MIME part is considered to be related if it's inline and has non-empty <see cref="P:MailBee.Mime.MimePart.ContentID"/>. This means
            this part is probably mentioned in the message body and thus relates to that body.
            </remarks>
            <example>This sample loads the message from .EML file and displays the number of the related MIME parts.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            <span style="color: blue;">int</span> relatedPartsCount = 0;
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: blue;">if</span> (part.IsRelated)
            	{
            		relatedPartsCount++;
            	}
            }
            Console.WriteLine("Number of related parts: " + relatedPartsCount.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> relatedPartsCount <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = 0
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: blue;">If</span> part.IsRelated <span style="color: blue;">Then</span>
            		relatedPartsCount = relatedPartsCount + 1
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            Console.WriteLine("Number of related parts: " &amp; relatedPartsCount.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.MailEncodingOriginal">
            <summary>
            Gets the name of the mail transfer encoding of the MIME part.
            <seealso cref="T:MailBee.Mime.MailTransferEncoding"/>
            </summary>
            <value>
            A string containing the name of the mail transfer encoding of the MIME part, or an empty string
            if the mail transfer encoding information is not available.
            </value>
            <remarks>
            The value of this property is taken from Content-Transfer-Encoding header.
            The examples of such encodings are <i>Base64</i>, <i>Quoted-Printable</i>, etc. If missing,
            this the mail transfer encoding is not used and the MIME part data should be read as is.
            <note>This value is for advanced use only. You do not need to manually decode MIME part data because MailBee always
            decodes it automatically.</note>
            </remarks>
            <example>This sample loads the message from .EML file and displays the mail transfer encoding of the root MIME part.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            Console.WriteLine(msg.MimePartTree.MailEncodingOriginal);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            Console.WriteLine(msg.MimePartTree.MailEncodingOriginal)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Name">
            <summary>
            Gets the name of the MIME part.
            <seealso cref="P:MailBee.Mime.MimePart.Filename"/>
            </summary>
            <value>
            A string containing the "friendly name" (or "display name") of the MIME part, or an empty string if the friendly name
            is not available.
            </value>
            <remarks>
            <para>The value of this property is taken from the <i>name</i> parameter of the <i>Content-Type</i>
            message header.</para>
            <para>See <see cref="P:MailBee.Mime.Attachment.Name">Attachment.Name</see> for more information regarding MIME part friendly name.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the name of each MIME part.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	Console.WriteLine(part.Name);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	Console.WriteLine(part.Name)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.PartType">
            <summary>
            Gets the category of the MIME part content.
            <seealso cref="P:MailBee.Mime.MimePart.ContentType"/>
            </summary>
            <value>
            The category of the MIME part.
            </value>
            <remarks>
            While <see cref="P:MailBee.Mime.MimePart.ContentType"/> property returns string value, this property returns
            one of more generalized <see cref="T:MailBee.Mime.MimePartType"/> values.
            </remarks>
            <example>This sample loads the message from .EML file and displays the category type of the root MIME part.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            Console.WriteLine(msg.MimePartTree.PartType.ToString());
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            Console.WriteLine(msg.MimePartTree.PartType.ToString())
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.RawHeader">
            <summary>
            Gets a string containing the header section of the MIME part in the original form.
            <seealso cref="P:MailBee.Mime.MimePart.Headers"/>
            </summary>
            <value>
            A string containing the MIME part header section as it came with the message, or an empty
            string if the MIME part was added by the application (for instance, as <see cref="T:MailBee.Mime.Attachment"/> object)
            rather than extracted from the message.
            </value>
            <example>This sample loads the message from .EML file and displays the raw header sections of each MIME part.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	Console.WriteLine(part.RawHeader);
            	Console.WriteLine();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	Console.WriteLine(part.RawHeader)
            	Console.WriteLine()
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Size">
            <summary>
            Gets the size of the MIME part content in bytes.
            </summary>
            <returns>
            </returns>
            <value>
            A size of the MIME part of the message in bytes.
            </value>
            <remarks>
            This size includes the lengths of the header and body sections of the MIME part of the message.
            If the body was mail-transfer-encoded in the message, this size will reflect the size of the MIME part
            BEFORE decoding. This is different from <see cref="P:MailBee.Mime.Attachment.Size">Attachment.Size</see> value which returns
            the size of the attachment body section AFTER decoding. Also, <see cref="P:MailBee.Mime.Attachment.Size">Attachment.Size</see> does
            not count the header section.
            </remarks>
            <example>This sample loads the message from .EML file and displays the size of all MIME parts.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	Console.WriteLine(part.Size.ToString());
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	Console.WriteLine(part.Size.ToString())
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.SubParts">
            <summary>
            Gets the collection of all immediate sub-parts of the MIME part.
            </summary>
            <value>
            A reference to the collection of all immediate sub-parts of the MIME part, or a null reference
            (<b>Nothing</b> in Visual Basic) if this MIME part is not multi-part.
            </value>
            <remarks>
            This property contains the collection of immediate sub-parts of the MIME part.
            To get the MIME part and all its sub-parts (including sub-sub-parts) as a flat list, use <see cref="M:MailBee.Mime.MimePart.GetAllParts"/>
            method.
            </remarks>
            <example>This sample loads the message from .EML file and displays the content type of each MIME part of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">if</span> (msg.MimePartTree.SubParts != <span style="color: blue;">null</span>)
            {
            	<span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.SubParts)
            	{
            		Console.WriteLine(part.ContentType.ToString());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> msg.MimePartTree.SubParts <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.SubParts
            		Console.WriteLine(part.ContentType.ToString())
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.Headers">
            <summary>
            Gets or sets the collection of the MIME part headers.
            <seealso cref="P:MailBee.Mime.MimePart.RawHeader"/>
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.HeaderCollection"/> object containing the headers of the MIME part.
            </value>
            <remarks>
            You can modify these headers. See <see cref="P:MailBee.Mime.Attachment.Headers">Attachment.Headers</see> for more information.
            </remarks>
            <example>This sample loads the message from .EML file and displays all headers of each MIME part of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	Console.WriteLine(<span style="color: blue;">string</span>.Format("MimePart {0} headers values:", part.Name));
            	<span style="color: blue;">foreach</span> (Header hdr <span style="color: blue;">in</span> part.Headers)
            	{
            		Console.WriteLine(hdr.Value);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	Console.WriteLine(<span style="color: blue;">String</span>.Format("MimePart {0} headers values:", part.Name))
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> hdr <span style="color: blue;">As</span> Header <span style="color: blue;">In</span> part.Headers
            		Console.WriteLine(hdr.Value)
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MimePart.ContentType">
            <summary>
            Gets the content type of the MIME part as a string.
            <seealso cref="P:MailBee.Mime.MimePart.Headers"/>
            </summary>
            <value>
            A string containing the MIME part's content type taken from Content-Type header,
            or an empty string if the content type is not set.
            </value>
            <remarks>
            <para>The content type value usually consists of common and specific types delimited with "/" character
            (e.g. <i>image/jpeg</i>, <i>text/html</i>, <i>text/plain</i>, etc).
            For instance, if the header is <i>Content-Type: text/plain; charset="GB2312"</i>,
            the <i>text/plain</i> value will be returned (additional parameters of Content-Type header will be omitted).</para>
            <para>See <see cref="P:MailBee.Mime.Attachment.ContentType">Attachment.ContentType</see> for more information regarding content types.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the content type of each MIME part of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every part...</span>
            <span style="color: blue;">foreach</span> (MimePart part <span style="color: blue;">in</span> msg.MimePartTree.GetAllParts())
            {
            	<span style="color: green;">// ...show part type.</span>
            	Console.WriteLine("The type is " + part.ContentType);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every part...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> MimePart <span style="color: blue;">In</span> msg.MimePartTree.GetAllParts()
            	<span style="color: green;">' ...show part type.</span>
            	Console.WriteLine("The type is " &amp; part.ContentType)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.DnsMX.DnsAutodetectOptions">
            <summary>
            Provides options for selecting methods of automatic detection of the DNS servers
            registered in the system.
            <seealso cref="T:MailBee.SmtpMail.Smtp"/>
            </summary>
            <remarks>If multiple methods are specified, they are tried in the order their values increase
            until at least one DNS server definition is found.
            <note>To search WMI database (<see cref="F:MailBee.DnsMX.DnsAutodetectOptions.Wmi"/> option), the application must have appropriate permissions to use
            System.Management.dll (which encapsulates <see cref="N:System.Management"/> namespace). For instance, web applications
            configured to run on "High" trust level have no permissions to access this assembly. In this case,
            <see cref="M:MailBee.DnsMX.DnsServerCollection.Autodetect"/> method will not find any DNS server records in WMI database.
            Changing trust level to "Full" eliminates the problem.</note>
            </remarks>
            <example>This sample populates the collection of DNS servers with the servers defined
            in the config files (such as app.config, web.config, or machine.config).
            If it does not find any DNS server definitions in the config files, then
            Windows registry is searched.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.SmtpMail;
            <span style="color: blue;">using</span> MailBee.DnsMX;
            
            <span style="color: green;">// The actual code</span>
            Smtp smtp = <span style="color: blue;">new</span> Smtp();
            smtp.DnsServers.Autodetect(DnsAutodetectOptions.ConfigFiles | DnsAutodetectOptions.Registry);
            
            <span style="color: green;">// Example of XML config file settings which must be placed into &lt;appSettings&gt; section of the file</span>
            <span style="color: green;">// (&lt;appSettings&gt; can also appear as &lt;applicationSettings&gt; in .NET 2.0).</span>
            <span style="color: green;">// It defines 2 DNS servers with top (0) priority and 1 backup server with lower (1) priority</span>
            <span style="color: green;">// (for 192.168.0.2 server, the priority is not specified and thus defaults to the top priority):</span>
            
            <span style="color: green;">&lt;add key="MailBee.DnsMX.DnsServerCollection" value="192.168.0.1,0;192.168.0.2;192.168.0.100,1"/&gt;</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.SmtpMail
            <span style="color: blue;">Imports</span> MailBee.DnsMX
            
            <span style="color: green;">' The actual code</span>
            <span style="color: blue;">Dim</span> smtp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smtp 
            smtp.DnsServers.Autodetect(DnsAutodetectOptions.ConfigFiles <span style="color: blue;">Or</span> DnsAutodetectOptions.Registry) 
            
            <span style="color: green;">' Example of XML config file settings which must be placed into &lt;appSettings&gt; section of the file</span>
            <span style="color: green;">' (&lt;appSettings&gt; can also appear as &lt;applicationSettings&gt; in .NET 2.0).</span>
            <span style="color: green;">' It defines 2 DNS servers with top (0) priority and 1 backup server with lower (1) priority</span>
            <span style="color: green;">' (for 192.168.0.2 server, the priority is not specified and thus defaults to the top priority):</span>
            
            <span style="color: green;">&lt;add key="MailBee.DnsMX.DnsServerCollection" value="192.168.0.1,0;192.168.0.2;192.168.0.100,1"/&gt;</span>
            </code>
            </example>
        </member>
        <member name="F:MailBee.DnsMX.DnsAutodetectOptions.None">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsAutodetectOptions.ConfigFiles">
            <summary>
            Search DNS server definitions in "MailBee.DnsMX.DnsServerCollection" key of "appSettings"
            section of the config files (such as app.config, web.config, or machine.config), where the key value
            contains ";"-separated list of DNS servers in "IP Address,Priority" format. If the priority is omitted,
            the top (0) priority will be assigned to the DNS server.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsAutodetectOptions.Registry">
            <summary>
            Search DNS server definitions in Windows registry.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsAutodetectOptions.Wmi">
            <summary>
            Search DNS server definitions in WMI database.
            </summary>
        </member>
        <member name="F:MailBee.DnsMX.DnsAutodetectOptions.RootServers">
            <summary>
            Populate DNS servers collection with the Internet root DNS servers:
            A.ROOT-SERVERS.NET, B.ROOT-SERVERS.NET, C.ROOT-SERVERS.NET, D.ROOT-SERVERS.NET.
            This method is not recommended since the root servers report no DNS records for
            most hosts in the Internet.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.DsnAttachment">
            <summary>
            Represents a Delivery Status Notification attachment in RFC 1894 format.
            <seealso cref="T:MailBee.BounceMail.DsnRecipient"/>
            </summary>
            <remarks>
            <para>Although there is no single standard for Delivery Status Notification (DSN),
            the format described in RFC 1894 is the most popular. Also, many bounced messages of proprietary
            formats include RFC 1894 DSN as attachment. This means a bounced message can contain
            duplicated information: in the main body and in RFC 1894 DSN attachment.</para>
            <para>Thus, a DSN message may include or not include DSN attachment. <see cref="T:MailBee.BounceMail.DsnAttachment"/> object
            deals with DSN attachments only.</para>
            <para>In most cases, there is no need to create <see cref="T:MailBee.BounceMail.DsnAttachment"/> directly. You can use <see cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/> method
            and examine each <see cref="T:MailBee.BounceMail.RecipientStatus"/> of <see cref="P:MailBee.BounceMail.Result.Recipients"/> collection of the returned <see cref="T:MailBee.BounceMail.Result"/> object.</para>
            <para><see cref="T:MailBee.BounceMail.RecipientStatus"/> object provides <see cref="P:MailBee.BounceMail.RecipientStatus.DsnInfo"/> property which returns <see cref="T:MailBee.BounceMail.DsnAttachment"/> object
            (if the message includes a DSN attachment). For instance, you can use it to get <see cref="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID"/> of the message.</para>
            <para>You may, however, need to create <see cref="T:MailBee.BounceMail.DsnAttachment"/> object manually
            if you got RFC 1894 DSN data from another source, not from <see cref="T:MailBee.Mime.MailMessage"/> object.</para>
            <para>The most important properties are <see cref="P:MailBee.BounceMail.DsnAttachment.Recipients"/> (which contains delivery status
            and other details for each recipient listed in the DSN) and <see cref="P:MailBee.BounceMail.DsnAttachment.Items"/> which provides
            direct access to all fields of the DSN.</para>
            </remarks>
            <example>
            This sample converts a <see cref="T:MailBee.Mime.MimePart"/> into <see cref="T:MailBee.BounceMail.DsnAttachment"/> object
            and displays some of its properties. For brevity, we assume <see cref="T:MailBee.Mime.MimePart"/> object
            is already available to the application. For instance, you can create it from byte array using
            <see cref="M:MailBee.Mime.MimePart.Parse(System.Byte[])"/> method.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.BounceMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Assume that MimePart object is already set.</span>
            		MimePart part = ...;
            
            		DsnAttachment dsnAttach = <span style="color: blue;">new</span> DsnAttachment(<span style="color: blue;">new</span> Attachment(part), <span style="color: blue;">null</span>);
            
            		Console.WriteLine("------------------ DSN attachment as text ------------------");
            		Console.WriteLine(dsnAttach.ToString());
            		Console.WriteLine("--------------- DSN headers as StringDictionary ------------");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> key <span style="color: blue;">in</span> dsnAttach.Items.Keys)
            		{
            			Console.WriteLine("DSN item: {0} = {1}", key, dsnAttach.Items[key]);
            		}
            		Console.WriteLine("------------------------------------------------------------");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.BounceMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Assume that MimePart object is already set.</span>
            		<span style="color: blue;">Dim</span> part <span style="color: blue;">As</span> MimePart = ...
            
            		<span style="color: blue;">Dim</span> dsnAttach <span style="color: blue;">As</span> DsnAttachment = <span style="color: blue;">New</span> DsnAttachment(<span style="color: blue;">New</span> Attachment(part), <span style="color: blue;">Nothing</span>)
            
            		Console.WriteLine("------------------ DSN attachment as text ------------------")
            		Console.WriteLine(dsnAttach.ToString())
            		Console.WriteLine("--------------- DSN headers as StringDictionary ------------")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> key <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> dsnAttach.Items.Keys
            			Console.WriteLine("Dsn item: {0} = {1}", key, dsnAttach.Items(key))
            		<span style="color: blue;">Next</span>
            		Console.WriteLine("------------------------------------------------------------")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.BounceMail.DsnAttachment.#ctor(MailBee.Mime.Attachment,System.Text.Encoding)">
            <summary>
            Creates a new instance of <see cref="T:MailBee.BounceMail.DsnAttachment"/> class from the specified
            attachment.
            </summary>
            <param name="dsnAttach">The attachment containing DSN data.</param>
            <param name="enc">The encoding to use for decoding the attachment data from bytes to strings.
            If a null reference (<b>Nothing</b> in Visual Basic), the encoding will be determined from
            the attachment header (<see cref="P:MailBee.Mime.MimePart.Charset">Attachment.AsMimePart.Charset</see>).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="dsnAttach"/> is a null reference or its Content-Type is not "message/delivery-status" (not a DSN).</exception>
            <remarks>This constructor is useful if you need to create <see cref="T:MailBee.BounceMail.DsnAttachment"/> object
            from arbitrary data, not from <see cref="T:MailBee.Mime.MailMessage"/> object. See <see cref="T:MailBee.BounceMail.DsnAttachment"/>
            class description for details.</remarks>
        </member>
        <member name="M:MailBee.BounceMail.DsnAttachment.ToString">
            <summary>
            Returns the DSN attachment contents as a string.
            </summary>
            <value>
            A string containing the DSN attachment body.
            </value>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.Items">
            <summary>
            Gets the list of all fields in the DSN attachment.
            </summary>
            <value>
            The key-value string collection of all the fields in the DSN attachment.
            </value>
            <remarks>This collection is alternative to other properties of <see cref="T:MailBee.BounceMail.DsnAttachment"/> class.
            Other properties (like <see cref="P:MailBee.BounceMail.DsnAttachment.ArrivalDate"/>) return the corresponding value in parsed form.
            <see cref="P:MailBee.BounceMail.DsnAttachment.Items"/> property provides access to all the fields as they are specified in the DSN source.
            It can also be used to extract those values which are not available through other properties
            (for instance, vendor-specific properties which are not defined by RFC 1894).</remarks>
            <example>
            This code sample shows how to operate with parsed DSN data.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.BounceMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load DSN templates database from file.</span>
            		DeliveryStatusParser parser = <span style="color: blue;">new</span> DeliveryStatusParser(@"C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">true</span>);
            
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\Temp\IncomingMail", "*.eml");
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Process all .EML files in the folder.</span>
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			Result result = parser.Process(msg);
            
            			Console.WriteLine("\r\nProcessed e-mail: " + file);
            
            			<span style="color: blue;">if</span> (result == <span style="color: blue;">null</span> || result.DsnStructure == <span style="color: blue;">null</span>)
            			{
            				Console.WriteLine("------------------------------------------------------");
            				Console.WriteLine("This message doesn't have DSN message part.");
            				Console.WriteLine("------------------------------------------------------");
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("------------------ DSN part as text ------------------");
            				Console.WriteLine(result.DsnStructure.ToString());
            				Console.WriteLine("------------- DSN header as StringDictionary ---------");
            				<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> key <span style="color: blue;">in</span> result.DsnStructure.Items.Keys)
            				{
            					Console.WriteLine("DSN item: {0} = {1}", key, result.DsnStructure.Items[key]);
            				}
            				Console.WriteLine("------------------------------------------------------");
            
            				<span style="color: blue;">foreach</span> (RecipientStatus res <span style="color: blue;">in</span> result.Recipients)
            				{
            					<span style="color: blue;">if</span> (res.DsnInfo != <span style="color: blue;">null</span>)
            					{
            						Console.WriteLine("DSN subpart for: {0} e-mail", res.EmailAddress);
            						Console.WriteLine("---------------- DSN subpart as text -----------------");
            						Console.WriteLine(res.DsnInfo.ToString());
            						Console.WriteLine("------------- DSN header as StringDictionary ---------");
            						<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> key <span style="color: blue;">in</span> res.DsnInfo.Items.Keys)
            						{
            							Console.WriteLine("DSN subpart item: {0} = {1}", key, res.DsnInfo.Items[key]);
            						}
            						Console.WriteLine("------------------------------------------------------");
            					}
            				}
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> Microsoft.VisualBasic
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.BounceMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Load DSN templates database from file.</span>
            		<span style="color: blue;">Dim</span> parser <span style="color: blue;">As</span> DeliveryStatusParser = <span style="color: blue;">New</span> DeliveryStatusParser("C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">True</span>)
            
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\Temp\IncomingMail", "*.eml")
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Process all .EML files in the folder.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			<span style="color: blue;">Dim</span> result <span style="color: blue;">As</span> Result = parser.Process(msg)
            
            			Console.WriteLine(ControlChars.CrLf &amp; "Processed e-mail: " &amp; file)
            
            			<span style="color: blue;">If</span> result <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Or</span> result.DsnStructure <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            				Console.WriteLine("------------------------------------------------------")
            				Console.WriteLine("This message doesn't have DSN message part.")
            				Console.WriteLine("------------------------------------------------------")
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("------------------ DSN part as text ------------------")
            				Console.WriteLine(result.DsnStructure.ToString())
            				Console.WriteLine("------------- DSN header as StringDictionary ---------")
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> key <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> result.DsnStructure.Items.Keys
            					Console.WriteLine("DSN item: {0} = {1}", key, result.DsnStructure.Items(key))
            				<span style="color: blue;">Next</span>
            				Console.WriteLine("------------------------------------------------------")
            
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> res <span style="color: blue;">As</span> RecipientStatus <span style="color: blue;">In</span> result.Recipients
            					<span style="color: blue;">If</span> <span style="color: blue;">Not</span> res.DsnInfo <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            						Console.WriteLine("DSN subpart for: {0} e-mail", res.EmailAddress)
            						Console.WriteLine("---------------- DSN subpart as text -----------------")
            						Console.WriteLine(res.DsnInfo.ToString())
            						Console.WriteLine("------------- DSN header as StringDictionary ---------")
            						<span style="color: blue;">For</span> <span style="color: blue;">Each</span> key <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> res.DsnInfo.Items.Keys
            							Console.WriteLine("DSN subpart item: {0} = {1}", key, res.DsnInfo.Items(key))
            						<span style="color: blue;">Next</span>
            						Console.WriteLine("------------------------------------------------------")
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">Next</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.Recipients">
            <summary>
            Gets the list of the delivery statuses of the original e-mail message
            to its recipients.
            </summary>
            <value>
            The list containing the delivery status details of the original e-mail message
            to those of its recipients which have been handled by the mail server
            which sent this DSN e-mail.
            </value>
            <remarks>
            <para>The returned collection contains the delivery status, the e-mail address and other details
            for the recipients of the original e-mail message. The original e-mail message is a message
            for which this DSN was issued upon delivery (or not delivery) by the mail server which sent this DSN e-mail.</para>
            <note>The returned collection does not necessarily contain all the recipients of the original message.
            If the message is addressed to e-mail addresses at different domains (i.e. <i>user@domain1.com</i> and
            <i>user@domain2.com</i>), their destination mail servers may be different. Thus, each of these servers can
            send its own DSN regarding the delivery to the recipient belonging to its own domain.</note>
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID">
            <summary>
            Gets the original envelope ID.
            </summary>
            <value>
            A string containing the original envelope ID taken from "Original-Envelope-Id" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field contains an "envelope identifier" which uniquely
            identifies the transaction during which the message was submitted by sender.
            When sending the original e-mail message, you can specify this ID using
            <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">Smtp.DeliveryNotification.TrackingID</see> property
            (the sending mail server, however, must support DSN extension).
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.ReportingMtaType">
            <summary>
            Gets the reporting MTA type.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.ReportingMtaName"/>
            </summary>
            <value>
            A string representaion of the message transfer agent type from "Reporting-MTA" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            Reporting MTA is the one which is reporting the results
            of delivery attempts described in this DSN. Usually, it's either the destination mail server
            (the SMTP MX server which accepts mail for the domain of the recipient e-mail address)
            or the sending e-mail server if the destination mail server could not be contacted
            (for instance, the recipient domain is invalid).
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.ReportingMtaName">
            <summary>
            Gets the reporting MTA name.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.ReportingMtaType"/>
            </summary>
            <value>
            A string representaion of the message transfer agent name from "Reporting-MTA" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            Reporting MTA is the one which is reporting the results
            of delivery attempts described in this DSN. See <see cref="P:MailBee.BounceMail.DsnAttachment.ReportingMtaType"/> topic for details.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.DsnGatewayType">
            <summary>
            Gets the DSN gateway type.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.DsnGatewayName"/>
            </summary>
            <value>
            A string representaion of the message gateway type from "DSN-Gateway" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field indicates the type of the gateway
            or MTA which translated a foreign (non-Internet) delivery status
            notification into this DSN.  This field MUST appear in any DSN which
            was translated by a gateway from a foreign system into DSN format,
            and MUST NOT appear otherwise.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.DsnGatewayName">
            <summary>
            Gets the DSN gateway name.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.DsnGatewayType"/>
            </summary>
            <value>
            A string representaion of the message gateway name from "DSN-Gateway" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field indicates the name of the gateway
            or MTA which translated a foreign (non-Internet) delivery status
            notification into this DSN.  This field MUST appear in any DSN which
            was translated by a gateway from a foreign system into DSN format,
            and MUST NOT appear otherwise.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.ReceivedFromMtaType">
            <summary>
            Gets the type of the MTA from which the message was received.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.ReceivedFromMtaName"/>
            </summary>
            <value>
            A string representaion of the message transfer agent type from "Received-From-MTA" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
             The Received-From MTA is the MTA from which the Reporting MTA received the
             message, and accepted responsibility for delivery of the message.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.ReceivedFromMtaName">
            <summary>
            Gets the name of the MTA from which the message was received.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.ReceivedFromMtaType"/>
            </summary>
            <value>
            A string representaion of the message transfer agent name from "Received-From-MTA" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
             The Received-From MTA is the MTA from which the Reporting MTA received the
             message, and accepted responsibility for delivery of the message.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.ArrivalDateAsString">
            <summary>
            Gets the message arrival date as string.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.ArrivalDate"/>
            </summary>
            <value>
            A string value of the message arrival moment from "Arrival-Date" DSN field,
            or a null reference (<b>Nothing</b> in Visual Basic) if no such field contained in the DSN.
            </value>
            <remarks>
            This field contains string with the date and time at which the message
            arrived at the Reporting MTA.
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.DsnAttachment.ArrivalDate">
            <summary>
            Gets the message arrival date.
            <seealso cref="P:MailBee.BounceMail.DsnAttachment.ArrivalDateAsString"/>
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value of the message arrival moment from "Arrival-Date" DSN field,
            or <see cref="F:System.DateTime.MinValue"/> if no such field contained in the DSN.
            </value>
            <remarks>
            This field indicates the date and time at which the message arrived at the
            Reporting MTA.
            </remarks>
        </member>
        <member name="T:MailBee.Proxy.ProxyProtocol">
            <summary>
            Defines the available modes of establishing connection with a mail server via a proxy server.
            </summary>
        </member>
        <member name="F:MailBee.Proxy.ProxyProtocol.NoProxy">
            <summary>
            Do not use a proxy server and connect directly to a mail server.
            </summary>
        </member>
        <member name="F:MailBee.Proxy.ProxyProtocol.Socks4">
            <summary>
            Connect through a SOCK4 proxy server.
            </summary>
        </member>
        <member name="F:MailBee.Proxy.ProxyProtocol.Socks5">
            <summary>
            Connect through a SOCK5 proxy server.
            </summary>
        </member>
        <member name="F:MailBee.Proxy.ProxyProtocol.Http">
            <summary>
            Connect through an HTTP proxy server.
            </summary>
        </member>
        <member name="T:MailBee.Proxy.ProxyServer">
            <summary>
            Contains properties which define the proxy server settings.
            </summary>
            <remarks>The following properties of MailBee classes have <see cref="T:MailBee.Proxy.ProxyServer"/> type:
            <see cref="P:MailBee.Pop3Mail.Pop3.Proxy">Pop3.Proxy</see>, <see cref="P:MailBee.ImapMail.Imap.Proxy">Imap.Proxy</see>, <see cref="P:MailBee.SmtpMail.SmtpServer.Proxy">SmtpServer.Proxy</see>.</remarks>
        </member>
        <member name="P:MailBee.Proxy.ProxyServer.Protocol">
            <summary>
            Gets or sets which proxy protocol (if any) should be used when connecting to a mail server.
            </summary>
            <value>One of <see cref="T:MailBee.Proxy.ProxyProtocol"/> values specifying which proxy protocol to use
            when establishing connection with a mail server via a proxy server. The default value is
            <see cref="F:MailBee.Proxy.ProxyProtocol.NoProxy"/> which means the proxy server won't be used at all and the
            connection will be made directly with a mail server.</value>
        </member>
        <member name="P:MailBee.Proxy.ProxyServer.Name">
            <summary>
            Gets or sets the IP address or the domain name of the proxy server.
            </summary>
            <value>The IP address string or the domain name of the proxy server. The default value is an empty string.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Proxy.ProxyServer.Port">
            <summary>
            Gets or sets the port number on which to communicate with the proxy server.
            </summary>
            <value>The port number on which to communicate with the proxy server. The default value is
            1080.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/>
            is an invalid port number.</exception>
            <remarks>Usually, the default value of 1080 is ok for SOCKS4 and SOCKS5 proxy servers.
            HTTP proxy, however, usually operates on port 808.</remarks>
        </member>
        <member name="P:MailBee.Proxy.ProxyServer.AccountName">
            <summary>
            Gets or sets the user account name on the proxy server.
            </summary>
            <value>The user account name on the proxy server. The default value is an empty string.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Usually, SOCKS5 and HTTP proxies require authentication (and thus <see cref="P:MailBee.Proxy.ProxyServer.AccountName"/> and
            <see cref="P:MailBee.Proxy.ProxyServer.Password"/> properties set) while SOCKS4 proxies do not use authentication.</remarks>
        </member>
        <member name="P:MailBee.Proxy.ProxyServer.Password">
            <summary>
            Gets or sets the user account password on the proxy server.
            </summary>
            <value>The user account password on the proxy server. The default value is an empty string.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Usually, SOCKS5 and HTTP proxies require authentication (and thus <see cref="P:MailBee.Proxy.ProxyServer.AccountName"/> and
            <see cref="P:MailBee.Proxy.ProxyServer.Password"/> properties set) while SOCKS4 proxies do not use authentication.</remarks>
        </member>
        <member name="P:MailBee.Proxy.ProxyServer.StringEncoding">
            <summary>
            Gets or sets the encoding used to convert strings sent to the proxy server to bytes.
            </summary>
            <value>A reference to the encoding object used to convert strings sent to the proxy server to bytes. The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><i>value</i> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="T:MailBee.Pop3Mail.Pop3InboxPreloadOptions">
            <summary>
            Specifies which elements of the mailbox statistics to download immediately
            after successful logging in the mailbox.
            <seealso cref="P:MailBee.Pop3Mail.Pop3.InboxPreloadOptions"/>
            </summary>
            <remarks>This enumeration should be used in special cases only. Normally
            (when <see cref="F:MailBee.Pop3Mail.Pop3InboxPreloadOptions.None"/> is used), MailBee
            automatically downloads mailbox statistics when required. For instance, if the
            application never calls any methods which operate with Unique-ID values
            (the methods like <see cref="M:MailBee.Pop3Mail.Pop3.GetMessageUidFromIndex(System.Int32)"/>, <i>UIDL</i> POP3 command
            will never be issued. If, however, <see cref="M:MailBee.Pop3Mail.Pop3.GetMessageUidFromIndex(System.Int32)"/> gets called,
            MailBee will detect <i>UIDL</i> has not been issued yet, and then send this command
            to the server. If the developer does not want to rely on automatic download of
            mailbox statistics, the options provided by this enumeration can be used.</remarks>
        </member>
        <member name="F:MailBee.Pop3Mail.Pop3InboxPreloadOptions.None">
            <summary>
            Do not preload any elements of mailbox statistics (lengths and Unique-ID's of messages). 
            </summary>
        </member>
        <member name="F:MailBee.Pop3Mail.Pop3InboxPreloadOptions.List">
            <summary>
            After successful login, send <i>LIST</i> POP3 command and download the list of lengths
            of all messages in the mailbox.
            </summary>
        </member>
        <member name="F:MailBee.Pop3Mail.Pop3InboxPreloadOptions.Uidl">
            <summary>
            After successful login, send <i>UIDL</i> POP3 command and download the list of Unique-ID's
            of all messages in the mailbox.
            </summary>
        </member>
        <member name="T:MailBee.Mime.NewAttachmentOptions">
            <summary>
            Defines the available flags affecting how a new <see cref="T:MailBee.Mime.Attachment"/> object will be created by 
            <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String,System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)"/>
            method and its overloads which accept <i>options</i> parameter. 
            </summary>
        </member>
        <member name="F:MailBee.Mime.NewAttachmentOptions.None">
            <summary>
            No additional options.
            </summary>
        </member>
        <member name="F:MailBee.Mime.NewAttachmentOptions.ReplaceIfExists">
            <summary>
            If the attachment with such name already exists in collection, it will be replaced with the newly created one.
            Otherwise, the newly created attachment will be appended to collection.
            </summary>
        </member>
        <member name="F:MailBee.Mime.NewAttachmentOptions.Inline">
            <summary>
            Forcibly add the attachment as inline object.
            </summary>
        </member>
        <member name="F:MailBee.Mime.NewAttachmentOptions.NoDefaultHeaders">
            <summary>
            Add only custom headers (specified by <i>customHeaders</i> parameter of
            <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String,System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)"/>)
            method) and do not produce any default headers.
            </summary>
        </member>
        <member name="F:MailBee.Mime.NewAttachmentOptions.PathIsUri">
            <summary>
            The path to the attachment is a URI (URL) rather than filesystem path. Example is <i>http://www.domain.com/picture.gif</i>.
            If this flag is not set, filesystem path will be assumed (e.g. <i>C:\Inetpub\wwwroot\picture.gif</i>).
            This flag has no effect for those overloads of <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String,System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)"/>
            method which add the attachment from memory rather than from a file.
            </summary>
        </member>
        <member name="T:MailBee.Mime.PlainToHtmlAutoConvert">
            <summary>
            Defines modes which specify the condition which triggers automatic conversion of the plain-text body
            into HTML during parsing the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <remarks>You can set any of these modes via <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode">MailMessage.Parser.PlainToHtmlMode</see> property.</remarks>
        </member>
        <member name="F:MailBee.Mime.PlainToHtmlAutoConvert.IfNoHtml">
            <summary>
            When the message does not have an HTML body.
            </summary>
        </member>
        <member name="F:MailBee.Mime.PlainToHtmlAutoConvert.IfPlain">
            <summary>
            When the message does have the plain-text body (if there is the HTML body as well, it will be overwritten).
            </summary>
        </member>
        <member name="F:MailBee.Mime.PlainToHtmlAutoConvert.Never">
            <summary>
            The plain-text body will not be automatically converted into HTML.
            </summary>
        </member>
        <member name="T:MailBee.Mime.PlainToHtmlConvertOptions">
            <summary>
            Defines the available flags affecting conversion of the plain-text body into HTML during parsing the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <remarks>
            You can set any combination of these options via <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlOptions">MailMessage.Parser.PlainToHtmlOptions</see> property.
            </remarks>
        </member>
        <member name="F:MailBee.Mime.PlainToHtmlConvertOptions.None">
            <summary>
            No additional options.
            </summary>
        </member>
        <member name="F:MailBee.Mime.PlainToHtmlConvertOptions.UriToLink">
            <summary>
            All URIs (URLs) contained in the plain-text body of the message should be converted into HTML links
            (e.g. <i>http://www.afterlogic.com</i> will be converted into <i>&lt;a href="http://www.afterlogic.com"&gt;http://www.afterlogic.com&lt;/a&gt;</i> link).
            Can be used in conjunction with <see cref="P:MailBee.Mime.MessageParserConfig.AHRefSuffix"/> to further decorate HTML links being produced.
            </summary>
        </member>
        <member name="T:MailBee.Mime.HtmlToSimpleHtmlConvertOptions">
            <summary>
            Defines the available flags which affect how HTML body of a message should be converted into simple HTML.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlOptions"/>
            </summary>
            <remarks>
            You can set any combination of these options via <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlOptions">MailMessage.Parser.HtmlToSimpleHtmlOptions</see> property.
            </remarks>
        </member>
        <member name="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.None">
            <summary>
            No extra processing.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.AddImgAltText">
            <summary>
            The alternative text (contents of <i>ALT</i> element of <i>IMG</i> tag) will be put in simple HTML in place of this image in the original HTML.
            If this flag is not set, no mention of the image will be available in the resulting simple HTML.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.WriteImageIfNoAlt">
            <summary>
            If there is no alternative text for the image, the <i>"image"</i> string will be added as the alternative text. Has no effect if
            <see cref="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.AddImgAltText"/> flag is not specified.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.MakeLinkForImg">
            <summary>
            Make alternative text of the original image a link to the original image. For example, if the original HTML was <i>&lt;img src="http://www.server.com/picture.gif" alt="Our Picture"&gt;</i>,
            the following simple HTML is produced: <i>&lt;a href="http://www.server.com/picture.gif"&gt;Our Picture&lt;/a&gt;</i>.
            Has no effect if <see cref="F:MailBee.Mime.HtmlToSimpleHtmlConvertOptions.AddImgAltText"/> flag is not specified.
            </summary>
        </member>
        <member name="T:MailBee.Mime.AddressDelimeterChar">
            <summary>
            Defines the available characters for delimiting e-mail addresses when building an e-mail address string.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <remarks>
            <para>When building an e-mail address string containing multiple addresses (such as To, CC, BCC fields),
            MailBee can delimit individual addresses with either comma or semicolon. This can be set via
            <see cref="P:MailBee.Mime.MessageBuilderConfig.AddressDelimeter">MailMessage.Builder.AddressDelimeter</see> property.</para>
            <para>Still, it's recommended to leave the default value (comma) since using semicolon violates MIME standard and some mail clients
            might not be able to correctly parse messages containing semicolon-delimited e-mail addresses.</para>
            <note>When parsing (rather than building) e-mail address string, MailBee recognizes both comma and semicolon as delimiters.</note>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.AddressDelimeterChar.Comma">
            <summary>
            Use comma character (",").
            </summary>
        </member>
        <member name="F:MailBee.Mime.AddressDelimeterChar.Semicolon">
            <summary>
            Use semicolon character (";").
            </summary>
        </member>
        <member name="T:MailBee.Mime.HtmlToSimpleHtmlAutoConvert">
            <summary>
            Defines the available modes which specify if HTML body of a message should be converted into simple HTML.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlOptions"/>
            </summary>
            <remarks>
            <para>
            Simple HTML is a plain text representation intended for displaying in HTML container (such
            as browser) where line terminators are replaced with &lt;br&gt; tags, URIs are high-lighted
            using &lt;a href="<i>URI</i>"&gt; tags, etc.
            </para>
            <para>
            For instance, Outlook Express displays simple HTML version of plain text body for those messages which do
            not have their original HTML body. In other words, simple HTML is an HTML converted into plain-text and then back to HTML.
            </para>
            <para>The developer may consider to render HTML documents into simple HTML format for security reasons (because all potentially
            dangerous content will be removed from the document).</para>
            The developer can set this mode via <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode">MailMessage.Parser.HtmlToSimpleHtmlMode</see> property.
            <note>URI is a synonym of an URL.</note>
            </remarks>
            <example>
            The example is available in <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToSimpleHtmlMode">MailMessage.Parser.HtmlToSimpleHtmlMode</see> property documentation.
            </example>
        </member>
        <member name="F:MailBee.Mime.HtmlToSimpleHtmlAutoConvert.IfHtml">
            <summary>
            If the HTML message body exists, it will automatically be converted into simple HTML.
            The previous HTML body of the message will be overwritten.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToSimpleHtmlAutoConvert.Never">
            <summary>
            The HTML message body will never be automatically converted into simple HTML.
            </summary>
        </member>
        <member name="T:MailBee.Mime.HtmlToPlainConvertOptions">
            <summary>
            Defines the available flags which affect how HTML body of a message is converted into plain text.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainOptions"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/>
            </summary>
            <remarks>
            You can set any combination of these options via <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainOptions">MailMessage.Parser.HtmlToPlainOptions</see> property.
            <para>By default (<see cref="F:MailBee.Mime.HtmlToPlainConvertOptions.None"/> value), all HTML tags are removed and line terminators are inserted instead of HTML's line terminators such as &lt;br&gt;, &lt;p&gt;, etc.</para>
            <note>URI is a synonym of an URL.</note>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainConvertOptions.None">
            <summary>
            No extra processing.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainConvertOptions.AddImgAltText">
            <summary>
            Alternative text contained in the <i>ALT</i> attribute of the <i>&lt;IMG&gt;</i> tag will be put into plain-text.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainConvertOptions.WriteImageIfNoAlt">
            <summary>
            If alternative text was not set in the <i>&lt;IMG&gt;</i> tag, the <i>image</i> string will be put into
            plain text.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainConvertOptions.AddUriForImg">
            <summary>
            For each image, its URI will be placed into plain text.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainConvertOptions.AddUriForAHRef">
            <summary>
            The URI contained in the &lt;a href=""&gt; tag will be put into plain-text after the content of this tag.
            For instance, if HTML was <i>&lt;a href="http://www.afterlogic.com"&gt;AfterLogic Corporation&lt;/a&gt;</i>, the plain-text version
            will be <i>AfterLogic Corporation &lt;http://www.afterlogic.com&gt;</i>.
            </summary>
        </member>
        <member name="T:MailBee.Mime.HtmlToPlainAutoConvert">
            <summary>
            Defines the available modes which specify when HTML body of a message should automatically be converted into plain text during parsing of this message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainOptions"/>
            </summary>
            <remarks>
            You can set any of these mode via <see cref="P:MailBee.Mime.MessageParserConfig.HtmlToPlainMode">MailMessage.Parser.HtmlToPlainMode</see> property.
            </remarks>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainAutoConvert.IfNoPlain">
            <summary>
            Convert when the message does not have a plain text body.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainAutoConvert.IfHtml">
            <summary>
            Convert when the message has an HTML body (if the plain text body exists as well, it will be overwritten).
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlToPlainAutoConvert.Never">
            <summary>
            HTML body of the message will never be automatically converted into plain text during parsing of this message.
            </summary>
        </member>
        <member name="T:MailBee.Mime.CharsetMetaTagProcessing">
            <summary>
            Defines the available modes which affect processing of <i>META</i> tags
            during parsing HTML body of the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.CharsetMetaTagMode"/>
            </summary>
            <remarks>
            <para>If the HTML body of the message contains <i>META</i> tag with charset information, this
            may prevent the body from being properly displayed in the client browser if the HTML body content
            was converted from the original charset to another charset (for instance, if <i>gb2312</i> (Chinese
            Simplified) text has been converted into UTF-8 which is a default response encoding of ASP.NET
            web applications). In such cases, it's recommended to tell MailBee to remove <i>META</i> tag containing charset information (<see cref="F:MailBee.Mime.CharsetMetaTagProcessing.RemoveCharsetMetaTag"/> option).</para>
            <para>You can set any of these modes via <see cref="P:MailBee.Mime.MessageParserConfig.CharsetMetaTagMode">MailMessage.Parser.CharsetMetaTagMode</see> property.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.CharsetMetaTagProcessing.DoNothing">
            <summary>
            No modifications.
            </summary>
        </member>
        <member name="F:MailBee.Mime.CharsetMetaTagProcessing.RemoveCharsetMetaTag">
            <summary>
            Remove <i>&lt;META content="xxxxxx; charset=xxxxxx"&gt;</i> tag completely.
            </summary>
        </member>
        <member name="F:MailBee.Mime.CharsetMetaTagProcessing.SetCorrectCharset">
            <summary>
            Replace the value specified in <i>charset</i> parameter of the <i>&lt;META&gt;</i> tag
            with the target charset which will be used to output data to the client (according to <see cref="P:MailBee.Mime.MessageParserConfig.CharsetConverter">MailMessage.Parser.CharsetConverter</see> settings), or
            remove this tag completely if the target charset is not specified (the value of
            <see cref="T:MailBee.Mime.StringConversionMode">MailMessage.Parser.CharsetConverter.StringConversionConfig.ConversionMode</see> is <see cref="F:MailBee.Mime.StringConversionMode.NoConversion"/>).
            </summary>
        </member>
        <member name="T:MailBee.Mime.HtmlMessageAutoSaving">
            <summary>
            Defines the available modes for automatic saving of the HTML body or related files of the message
            into <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> location during parsing the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode"/>
            </summary>
            <remarks>
            You can set any of these modes via <see cref="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode">MailMessage.Parser.AutoSaveHtmlMode</see> property.
            <note>If you wish to make plain-text messages be saved as HTML files as well (so that it would always be
            possible to render any e-mail message just by displaying message.htm file, regardless if the message is HTML or plain-text),
            set <see cref="P:MailBee.Mime.MessageParserConfig.PlainToHtmlMode">MailMessage.Parser.PlainToHtmlMode</see> to <see cref="F:MailBee.Mime.PlainToHtmlAutoConvert.IfNoHtml"/> in addition
            to setting of <see cref="P:MailBee.Mime.MessageParserConfig.AutoSaveHtmlMode">MailMessage.Parser.AutoSaveHtmlMode</see>.
            </note>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.HtmlMessageAutoSaving.NoAutoSave">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlMessageAutoSaving.SaveMessageHtmAndRelatedFiles">
            <summary>
            Save HTML body of the message into the <i>message.htm</i> file.
            All related files will be saved into the same location.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlMessageAutoSaving.SaveMessageMht">
            <summary>
            Save HTML body of the message and all related files into a single <i>message.mht</i> file (Web Archive).
            </summary>
        </member>
        <member name="F:MailBee.Mime.HtmlMessageAutoSaving.AlterHtmlBody">
            <summary>
            Save all related objects into <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see> and
            replace all CIDs in the message HTML body with relatives URIs (in fact, filenames) pointing to the corresponding related files in
            <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/>.
            </summary>
        </member>
        <member name="T:MailBee.Mime.AHRefTagAttributes">
            <summary>
            Defines the available attributes of <i>&lt;A HREF&gt;</i> tags contained in HTML message body
            which can be affected by cleanup process during parsing the message.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.AHRefCleanup"/>
            <seealso cref="P:MailBee.Mime.MessageParserConfig.AHRefSuffix"/>
            </summary>
            <remarks>
            <para>
            In order to display an HTML body of a message in the browser, it's a common practice
            to process links in a certain way. For instance, the developer may wish to apply specific styles or attributes
            to each <i>&lt;A HREF&gt;</i> tag (such as add <i>target=_blank</i> attribute to make links open in a new window).
            The existing attributes need to be deleted in this case (otherwise, they would interfere with the new ones).
            </para>
            <para>
            To specify which attributes of <i>&lt;A HREF&gt;</i> tags must be deleted during parsing the message,
            the developer should set <see cref="P:MailBee.Mime.MessageParserConfig.AHRefCleanup">MailMessage.Parser.AHRefCleanup</see> property.
            </para>
            <para>To specify which attributes need to be added to <i>&lt;A HREF&gt;</i> tags, the developer
            should set <see cref="P:MailBee.Mime.MessageParserConfig.AHRefSuffix">MailMessage.Parser.AHRefSuffix</see> property.
            </para>
            <note>More advanced processing of HTML documents is supported by <see cref="N:MailBee.Html"/> classes.</note>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.AHRefTagAttributes.None">
            <summary>
            No attributes will be affected.
            </summary>
        </member>
        <member name="F:MailBee.Mime.AHRefTagAttributes.Target">
            <summary>
            The <i>target</i> attribute will be affected.
            </summary>
        </member>
        <member name="F:MailBee.Mime.AHRefTagAttributes.ClassAndStyle">
            <summary>
            The <i>class</i> and <i>style</i> attributes will be affected.
            </summary>
        </member>
        <member name="F:MailBee.Mime.AHRefTagAttributes.Onclick">
            <summary>
            The <i>onclick</i> attribute will be affected.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MailSensitivity">
            <summary>
            Defines the available values for <see cref="P:MailBee.Mime.MailMessage.Sensitivity">MailMessage.Sensitivity</see> property.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailSensitivity.None">
            <summary>
            No sensitivity is set.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailSensitivity.Normal">
            <summary>
            The normal sensitivity.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailSensitivity.Personal">
            <summary>
            The sensitivity is set to <i>Personal</i>, as specified by Outlook clients.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailSensitivity.Private">
            <summary>
            The sensitivity is set to <i>Private</i>, as specified by Outlook clients.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailSensitivity.Confidential">
            <summary>
            The sensitivity is set to <i>CompanyConfidential</i>, as specified by Outlook clients.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MailTransferEncoding">
            <summary>
            Defines the available values for the properties specifying mail transfer encoding for text parts of the message
            </summary>
            <remarks>The properties of this type are <see cref="P:MailBee.Mime.MailMessage.MailTransferEncodingPlain">MailMessage.MailTransferEncodingPlain</see>,
            <see cref="P:MailBee.Mime.MailMessage.MailTransferEncodingHtml">MailMessage.MailTransferEncodingHtml</see>, <see cref="P:MailBee.Mime.TextBodyPart.TransferEncoding">TextBodyPart.TransferEncoding</see>.</remarks>
        </member>
        <member name="F:MailBee.Mime.MailTransferEncoding.None">
            <summary>
            The text part is not encoded.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailTransferEncoding.Raw7bit">
            <summary>
            The contents of the text part are not encoded 7-bit chars (ASCII) only.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailTransferEncoding.Raw8bit">
            <summary>
            The contents of the text part are not encoded 8-bit chars.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailTransferEncoding.QuotedPrintable">
            <summary>
            The contents of the text part are encoded with Quoted-Printable. The output is 7-bit,
            ASCII chars except '=' char are represented as itself, 8-bit chars and '=' char are represented as '=XX'.
            Recommended for texts which are mostly ASCII.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailTransferEncoding.Base64">
            <summary>
            The contents of the text part are encoded with Base64. The output is 7-bit but not human readable. 3 chars are
            represented as 4 7-bit bytes. Recommended for binary data and non-ASCII texts.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailTransferEncoding.Uue">
            <summary>
            The contents of the text part are encoded with UUE. Like Base64, the ouput is 7-bit but not human readable.
            Not recommended for use but supported for compatibility.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MailPriority">
            <summary>
            Defines the available values for <see cref="P:MailBee.Mime.MailMessage.Priority">MailMessage.Priority</see> property.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailPriority.None">
            <summary>
            The priority is not set.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailPriority.Highest">
            <summary>
            The highest priority.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailPriority.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailPriority.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailPriority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MailPriority.Lowest">
            <summary>
            The lowest priority.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MessageElements">
            <summary>
            Defines a set of flags which specify message elements to be cleared by <see cref="M:MailBee.Mime.MailMessage.Clear(MailBee.Mime.MessageElements)">MailMessage.Clear</see> method call.
            <seealso cref="M:MailBee.Mime.MailMessage.Clear(MailBee.Mime.MessageElements)"/>
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageElements.None">
            <summary>
            No elements to remove.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageElements.Recipients">
            <summary>
            Remove all message recipients specified in <see cref="P:MailBee.Mime.MailMessage.To"/>, 
            <see cref="P:MailBee.Mime.MailMessage.Cc"/>, and <see cref="P:MailBee.Mime.MailMessage.Bcc"/> fields.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageElements.Attachments">
            <summary>
            Remove all items from <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageElements.CustomHeaders">
            <summary>
            Remove all non-standard headers from the message.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageElements.RouteHeaders">
            <summary>
            Remove all <i>Received</i> and <i>Return-Path</i> headers from the message. 
            </summary>
        </member>
        <member name="T:MailBee.Mime.MimePartType">
            <summary>
            Defines the available categories of MIME parts.
            <seealso cref="T:MailBee.Mime.MimePart"/>
            </summary>
            <remarks>
            To determine the category of the given MIME part, use <see cref="P:MailBee.Mime.MimePart.PartType"/> property.
            </remarks>
        </member>
        <member name="F:MailBee.Mime.MimePartType.Other">
            <summary>
            The MIME part format is non-standard.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.PlainText">
            <summary>
            The MIME part contains plain text (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>text/plain</i> value).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.Html">
            <summary>
            The MIME part contains HTML (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>text/html</i> value).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.RichText">
            <summary>
            The MIME part contains text in rich-text format (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>text/rtf</i> or <i>text/richtext</i> value).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.Xml">
            <summary>
            The MIME part contains XML data (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>text/xml</i> value).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.Rfc822Message">
            <summary>
            The MIME part contains encapsulated e-mail message (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>message/rfc822</i> value).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.Image">
            <summary>
            The MIME part represents an image (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>image/*</i> value, e.g.
            <i>image/jpeg</i>, <i>image/gif</i>, etc).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MimePartType.Multipart">
            <summary>
            The MIME part contains nested MIME parts
            (<see cref="P:MailBee.Mime.MimePart.ContentType"/> is <i>multipart/*</i> value, e.g.
            <i>multipart/mixed</i>, <i>multipart/related</i>, etc).
            </summary>
        </member>
        <member name="T:MailBee.Mime.HeaderEncodingOptions">
            <summary>
            Defines the available options which affect how message headers are encoded with
            mail transfer encodings such as Base64 or Quoted-Printable.
            <seealso cref="M:MailBee.Mime.MailMessage.EncodeAllHeaders(System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)"/>
            </summary>
            <remarks>
            <para>The MIME standard requires message headers containing extended (non-ASCII) characters
            be encoded using Base64 or Quoted-Printable mail transfer encodings.</para>
            <para><see cref="M:MailBee.Mime.MailMessage.EncodeAllHeaders(System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)"/> method can be used to encode the message headers automatically.</para>
            <para>To encode individual headers, use <see cref="M:MailBee.Mime.MailMessage.GetEncodedHeaderValue(System.String,System.String,System.Text.Encoding,MailBee.Mime.HeaderEncodingOptions)"/> method.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.HeaderEncodingOptions.None">
            <summary>
            Use default Quoted-Printable encoding when required.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HeaderEncodingOptions.ForceEncoding">
            <summary>
            Force headers encoding even if there are no extended characters in the header.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HeaderEncodingOptions.Base64">
            <summary>
            Use Base64 instead of Quoted-Printable encoding. Base64 encoding is more efficient than Quoted-Printable when header
            values mainly consist of extended characters. Quoted-Printable is preferred if header values mostly contain standard ASCII characters.
            </summary>
        </member>
        <member name="F:MailBee.Mime.HeaderEncodingOptions.IgnoreAttachments">
            <summary>
            Headers of message attachments should NOT be encoded (even if the <see cref="F:MailBee.Mime.HeaderEncodingOptions.ForceEncoding"/> flag is set).
            Useful if the mail reader program used by the message recipients can not properly handle encoded filenames.
            </summary>
        </member>
        <member name="T:MailBee.Mime.VirtualMappingType">
            <summary>
            Defines the available modes which specify how the virtual paths should be generated by
            <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/>
            method for inline attachments referenced in HTML body.
            <seealso cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/>
            </summary>
            <remarks>
            <para>
            These modes specify how physical paths to embedded pictures (and other inline attachments related in HTML body and saved into temporary location
            by <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method)
            are mapped into URIs placed into SRC elements of corresponding HTML tags.
            </para>
            <note>
            URI is a synonym of an URL.
            </note>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.VirtualMappingType.NonWeb">
            <summary> 
            Virtual paths are not used, physical paths themselves are placed in URIs
            (e.g. <i>&lt;IMG SRC="C:\Inetpub\wwwroot\picture.gif"&gt;</i>).
            </summary>
        </member>
        <member name="F:MailBee.Mime.VirtualMappingType.Static">
            <summary>
            Virtual paths are used instead of physical paths
            (e.g. <i>&lt;IMG SRC="http://www.domain.com/picture.gif"&gt;</i>). The message files must
            be stored in a location visible from the web.
            </summary>
        </member>
        <member name="F:MailBee.Mime.VirtualMappingType.Dynamic">
            <summary>
            The virtual path must point to a downloader script. MailBee.NET will also supply <i>message_id</i>
            and <i>file_id</i> parameters in URI. The downloader script can use them to locate the file to be
            downloaded to the client. The message files can be stored in a location which can be accessed by the downloader script
            but is not directly visible from the web (for better security). See
            <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/>
            method documentation for more information.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MessageFolderBehavior">
            <summary>
            Defines the available modes of maintaining the unique message folder associated with the mail message.
            </summary>
            <remarks>
            <para>When using <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/>
            method to save message files into temporary location, the developer has option to tell MailBee to create
            a unique folder in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> and place all message files there, not in
            <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> itself. This is useful when multiple messages are processed simultaneously
            (such as in a web application which is accessed by multiple users).
            </para>
            <para>If the option to create a unique folder is selected, the name of this folder is generated as:<br/>
            <c>WorkingFolder + "\" + MD5Digest(Message-ID)</c>.</para>
            <note>
            MailBee neither saves anything to disk nor creates any folders unless the developer explicitly requests this
            (for instance, calls <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method).
            Anyway, messages get parsed directly in memory.
            </note>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.MessageFolderBehavior.CreateAndDelete">
            <summary>
            On <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles(System.String,MailBee.Mime.VirtualMappingType,MailBee.Mime.MessageFolderBehavior)"/> method call,
            create temporary folder in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/> and place the message files there.
            Once the <see cref="T:MailBee.Mime.MailMessage"/> object is deleted, this folder will be automatically removed with all its contents.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageFolderBehavior.CreateOnly">
            <summary>
            Similar to <see cref="F:MailBee.Mime.MessageFolderBehavior.CreateAndDelete"/>, but the unique folder will not be deleted on <see cref="T:MailBee.Mime.MailMessage"/> object
            destruction. This is useful in web applications where <see cref="T:MailBee.Mime.MailMessage"/> object exists only for the time of generating response
            to the client. The developer should remember the folder name (using <see cref="M:MailBee.Mime.MessageParserConfig.GetMessageFolder"/> method) and
            delete it later (when the message is no longer needed).
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageFolderBehavior.DoNotCreate">
            <summary>
            Do not create a unique folder and place all the files directly in <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder"/>.
            No files or folders will be deleted on <see cref="T:MailBee.Mime.MailMessage"/> object destruction.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MessageBodyType">
            <summary>
            Defines the available types of the mail message body being loaded with <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType)"/> method.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageBodyType.Plain">
            <summary>
            Plain-text body.
            </summary>
        </member>
        <member name="F:MailBee.Mime.MessageBodyType.Html">
            <summary>
            HTML body.
            </summary>
        </member>
        <member name="T:MailBee.Mime.ImportRelatedFilesOptions">
            <summary>
            Defines the available flags which affect how files related to the HTML body of the mail message
            are attached to the message by <see cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/> method.
            <seealso cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/>
            </summary>
            <remarks>
            URI is a synonym of an URL.
            </remarks>
        </member>
        <member name="F:MailBee.Mime.ImportRelatedFilesOptions.None">
            <summary>
            No additional options.
            </summary>
        </member>
        <member name="F:MailBee.Mime.ImportRelatedFilesOptions.ImportFromUris">
            <summary>
            The files which are referenced in the HTML message body via URIs will be downloaded from their
            web locations and attached to the message. If this flag is not set, only local files will be imported
            while URI references will be left as-is.
            </summary>
        </member>
        <member name="T:MailBee.Mime.ImportBodyOptions">
            <summary>
            Defines the available flags for importing the body of the mail message from a file or URI via
            <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/> method.
            <seealso cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/>
            </summary>
            <remarks>
            URI is a synonym of an URL.
            </remarks>
        </member>
        <member name="F:MailBee.Mime.ImportBodyOptions.None">
            <summary>
            Simply overwrite the existing message body with the imported data.
            </summary>
        </member>
        <member name="F:MailBee.Mime.ImportBodyOptions.Append">
            <summary>
            The imported body will be appended to the existing message body.
            </summary>
        </member>
        <member name="F:MailBee.Mime.ImportBodyOptions.PathIsUri">
            <summary>
            The <i>path</i> parameter of <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/> method is URI rather than disk file path.
            If this option is not set, absolute or relative path on disk is assumed.
            </summary>
        </member>
        <member name="F:MailBee.Mime.ImportBodyOptions.ImportRelatedFiles">
            <summary>
            The files related to the imported message body (inline pictures, etc) will also be imported
            (they will appear as inline attachments, having <see cref="P:MailBee.Mime.Attachment.IsInline"/> set to <b>true</b>).
            </summary>
        </member>
        <member name="F:MailBee.Mime.ImportBodyOptions.ImportRelatedFilesFromUris">
            <summary>
            The files which are referenced in the imported message body via URIs will be downloaded from their
            web locations and attached to the message. If this flag is not set, only local files will be imported
            while URI references will be left as-is.
            </summary>
        </member>
        <member name="T:MailBee.Mime.Attachment">
            <summary>
            Provides properties and methods for constructing or examining a single attachment to the mail message.
            <seealso cref="T:MailBee.Mime.AttachmentCollection"/>
            </summary>
            <remarks>
            All the attachments to the message (including embedded pictures) are stored in <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection of the <see cref="T:MailBee.Mime.MailMessage"/> object.
            </remarks>
            <example>
            This sample loads the message from .EML file and displays filenames of all attachments to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show the filename of the attachment.</span>
            	Console.WriteLine("Attachment name is " + attach.Filename);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the filename of the attachment.</span>
            	Console.WriteLine("Attachment name is " &amp; attach.Filename)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.Attachment.#ctor(MailBee.Mime.MimePart)">
            <summary>
            Creates a new instance of <see cref="T:MailBee.Mime.Attachment"/> object from the specified <see cref="T:MailBee.Mime.MimePart"/> object.
            <seealso cref="T:MailBee.Mime.MimePart"/>
            </summary>
            <param name="src">The <see cref="T:MailBee.Mime.MimePart"/> object from which to create the attachment.</param>
            <example>The example is available in <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)"/>
            method documentation.</example>
        </member>
        <member name="M:MailBee.Mime.Attachment.GetAttachmentsFromTnef">
            <summary>
            Extracts all the files from TNEF container and returns them as <see cref="T:MailBee.Mime.AttachmentCollection"/>.
            <seealso cref="P:MailBee.Mime.Attachment.IsTnef"/>
            </summary>
            <returns>
            An <see cref="T:MailBee.Mime.AttachmentCollection"/> object representing the collection of
            attachments extracted from TNEF, or a null reference (<b>Nothing</b> in Visual Basic)
            if the attachment is not a valid TNEF container.
            </returns>
            <remarks>Prior to calling this method, check <see cref="P:MailBee.Mime.Attachment.IsTnef"/> property value to determine
            whether the attachment is TNEF or not.
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.Attachment.IsTnef"/> topic.</example>
        </member>
        <member name="M:MailBee.Mime.Attachment.GetData">
            <summary>
            Gets the actual content of the attachment as a byte array.
            <seealso cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/>
            <seealso cref="P:MailBee.Mime.Attachment.Size"/>
            </summary>
            <returns>A byte array containing the actual content of the attachment.</returns>
            <remarks>
            To get a certain portion of the attachment's content (rather than the entire data),
            use <see cref="M:MailBee.Mime.Attachment.GetData(System.Int32,System.Int32)"/> overload.
            </remarks>
            <example>This sample loads the message from .EML file and saves the first attachment to disk
            using <see cref="M:MailBee.Mime.Attachment.GetData"/> method and streams.
            <note>In real-world apps, it's easier to use <see cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/>
            or <see cref="M:MailBee.Mime.Attachment.SaveToFolder(System.String,System.Boolean)"/> methods to save an attachment to disk.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// When there is any attachment...</span>
            <span style="color: blue;">if</span> (msg.Attachments.Count &gt; 0)
            {
            	<span style="color: green;">// ...then open a file for writing...</span>
            	<span style="color: blue;">using</span> (BinaryWriter bw = <span style="color: blue;">new</span> BinaryWriter(File.OpenWrite(@"C:\Temp\" + msg.Attachments[0].Filename)))
            	{
            		<span style="color: green;">// ...and write the attachment's content to the file.</span>
            		bw.Write(msg.Attachments[0].GetData());
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' When there is any attachment...</span>
            <span style="color: blue;">If</span> msg.Attachments.Count &gt; 0 <span style="color: blue;">Then</span>
            	<span style="color: green;">' ...then open a file for writing...</span>
            	<span style="color: blue;">Dim</span> bw <span style="color: blue;">As</span> BinaryWriter
            	<span style="color: blue;">Try</span>
            		bw = <span style="color: blue;">New</span> BinaryWriter(File.OpenWrite("C:\Temp\" &amp; msg.Attachments(0).Filename))
            		
            		<span style="color: green;">' ...and write the attachment's content to the file.</span>
            		bw.Write(msg.Attachments(0).GetData())
            	<span style="color: blue;">Finally</span>
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> bw <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			bw.Close()
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.Attachment.GetData(System.Int32,System.Int32)">
            <summary>
            Gets the specified portion of the actual content of the attachment as a byte array.
            <seealso cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/>
            <seealso cref="P:MailBee.Mime.Attachment.Size"/>
            </summary>
            <param name="offset">The number of bytes which should be skipped before starting reading the attachment content.</param>
            <param name="size">The number of bytes which should be read. If -1, the content will be read from the <i>offset</i> position till the end of the data.</param>
            <returns>The specified portion of the actual content of the attachment as a byte array.</returns>
            <example>This sample loads the message from .EML file and saves the first attachment to disk using
            <see cref="T:System.IO.BinaryWriter"/> object.
            <note>In real-world apps, it's easier to use <see cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/>
            or <see cref="M:MailBee.Mime.Attachment.SaveToFolder(System.String,System.Boolean)"/> methods to save an attachment to disk.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// When there is any attachment...</span>
            <span style="color: blue;">if</span> (msg.Attachments.Count &gt; 0)
            {
            	<span style="color: green;">// ...open a file for writing...</span>
            	<span style="color: blue;">using</span> (BinaryWriter bw = <span style="color: blue;">new</span> BinaryWriter(File.OpenWrite(@"C:\Temp\" + msg.Attachments[0].Filename)))
            	{
            		<span style="color: green;">// ...and write the attachment content to the file.</span>
            		bw.Write(msg.Attachments[0].GetData(0, -1));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' When there is any attachment...</span>
            <span style="color: blue;">If</span> msg.Attachments.Count &gt; 0 <span style="color: blue;">Then</span>
            	<span style="color: green;">' ...open a file for writing...</span>
            	<span style="color: blue;">Dim</span> bw <span style="color: blue;">As</span> BinaryWriter
            	<span style="color: blue;">Try</span>
            		bw = <span style="color: blue;">New</span> BinaryWriter(System.IO.File.OpenWrite("C:\Temp\" &amp; msg.Attachments(0).Filename))
            		
            		<span style="color: green;">' ...and write the attachment content to the file.</span>
            		bw.Write(msg.Attachments(0).GetData(0, -1))
            	<span style="color: blue;">Finally</span>
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> bw <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			bw.Close()
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>	
            	<span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.Attachment.GetEncapsulatedMessage">
            <summary>
            Gets the encapsulated e-mail message as a <see cref="T:MailBee.Mime.MailMessage"/> object.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="P:MailBee.Mime.Attachment.IsMessageInside"/>
            </summary>
            <returns>
            A <see cref="T:MailBee.Mime.MailMessage"/> object containing the encapsulated e-mail message, or a null reference
            (<b>Nothing</b> in Visual Basic) if the attachment is not an e-mail message.
            </returns>
            <remarks>
            This method extracts the encapsulated e-mail message from the attachment content, and represents it as
            a <see cref="T:MailBee.Mime.MailMessage"/> object for any further use. The extracted message can then be easily examined,
            resent, replied, saved to disk, or processed in any other way.
            <note>
            To detect if the attachment is an e-mail message, the developer can use <see cref="P:MailBee.Mime.Attachment.IsMessageInside"/> property.
            </note>
            </remarks>
            <example>This sample loads the message from .EML file, extracts the encapsulated message, and displays
            all headers of the encapsulated message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            MailMessage attachedMsg = <span style="color: blue;">null</span>;
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...get the inner e-mail from the attachment.</span>
            	attachedMsg = attach.GetEncapsulatedMessage();
            
            	<span style="color: green;">// When there is any inner e-mail...</span>
            	<span style="color: blue;">if</span> (attachedMsg != <span style="color: blue;">null</span>)
            	{
            		<span style="color: green;">// ...show the header section of that e-mail.</span>
            		Console.WriteLine(attachedMsg.RawHeader);
            		Console.WriteLine();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: blue;">Dim</span> attachedMsg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">Nothing</span>
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...get the inner e-mail from the attachment.</span>
            	attachedMsg = attach.GetEncapsulatedMessage()
            
            	<span style="color: green;">' When there is any inner e-mail...</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> attachedMsg <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            		<span style="color: green;">' ...show the header section of that e-mail.</span>
            		Console.WriteLine(attachedMsg.RawHeader)
            		Console.WriteLine()
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)">
            <summary>
            Saves the content of the attachment into the specified file.
            <seealso cref="M:MailBee.Mime.Attachment.SaveToFolder(System.String,System.Boolean)"/>
            </summary>
            <param name="filename">The absolute or relative path under which to save the attachment.</param>
            <param name="overwrite">Denotes if the file must be overwritten if it already exists.</param>
            <returns><b>true</b> if the attachment was successfully saved to disk; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.Attachment.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The developer can use <see cref="M:MailBee.Mime.Attachment.SaveToFolder(System.String,System.Boolean)"/> method to save the attachment
            into specified folder under the actual filename of the attachment.
            <note>If <paramref name="overwrite"/> is <b>false</b> and the file with the same filename already exists, the attachment will be saved
            under another name. For instance, if <i>cat.gif</i> is being saved and such file already exists, it will be actually saved
            as <i>cat[1].gif</i>. The developer can use <see cref="P:MailBee.Mime.Attachment.SavedAs"/> property to obtain the filename of the saved file.</note>
            </remarks>
            <example>This sample loads the message from .EML file and saves all the attachments to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...save it to disk.</span>
            	attach.Save(@"C:\Temp\" + attach.Filename, <span style="color: blue;">true</span>);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment... </span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...save it to disk.</span>
            	attach.Save("C:\Temp\" &amp; attach.Filename, <span style="color: blue;">True</span>)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.Attachment.SaveToFolder(System.String,System.Boolean)">
            <summary>
            Saves the content of the attachment into a file in the specified folder.
            <seealso cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/>
            </summary>
            <param name="folderName">The absolute or relative path to the folder where the attachment file should be saved.</param>
            <param name="overwrite">Specifies if the file must be overwritten if it already exists.</param>
            <returns><b>true</b> if the attachment was successfully saved to disk; otherwise, <b>false</b>.</returns>
            <remarks>
            This method saves the attachment content to the folder under the actual filename of the attachment (which is taken from <see cref="P:MailBee.Mime.Attachment.Filename"/> property).
            To save the attachment under another filename, use the <see cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/> method.
            <note>If <paramref name="overwrite"/> is <b>false</b> and the file with the same filename already exists, the attachment will be saved
            under another name. For instance, if <i>cat.gif</i> is being saved and such file already exists, it will be actually saved
            as <i>cat[1].gif</i>. The developer can use <see cref="P:MailBee.Mime.Attachment.SavedAs"/> property to obtain the filename of the saved file.</note>
            </remarks>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.Attachment.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample downloads the message from POP3 account and saves all the message attachments into the specified folder. ,
            <note><see cref="M:MailBee.Mime.Attachment.SaveToFolder(System.String,System.Boolean)"/> method is used for demonstration purposes only.
            Real-world applications can use the <see cref="M:MailBee.Mime.AttachmentCollection.SaveAll(System.String)"/> method to
            save all the message attachments into the specified folder with a single method call.</note>
            <code lang="C#">
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Quickly download the first message from the specified POP3 account.</span>
            		MailMessage msg = Pop3.QuickDownloadMessage("pop3.mail.com", "jdoe", "password", 1);
            
            		<span style="color: green;">// For every attachment...</span>
            		<span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            		{
            			<span style="color: green;">// ...save it into the specified folder.</span>
            			attach.SaveToFolder(@"C:\Temp\", <span style="color: blue;">true</span>);
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: green;">' Quickly download the first message from the specified POP3 account.</span>
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = Pop3.QuickDownloadMessage("pop3.mail.com", "jdoe", "password", 1)
            
            		<span style="color: green;">' For every attachment...</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            			<span style="color: green;">' ...save it into the specified folder.</span>
            			attach.SaveToFolder("C:\Temp\", <span style="color: blue;">True</span>)
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.AsMimePart">
            <summary>
            Gets the attachment as <see cref="T:MailBee.Mime.MimePart"/> object.
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.MimePart"/> object representing the attachment of the mail message as a MIME part.
            </value>
            <remarks>
            <para><see cref="T:MailBee.Mime.MimePart"/> corresponding to the given attachment provides access to those properties that are not available 
            in <see cref="T:MailBee.Mime.Attachment"/> but accessible in <see cref="T:MailBee.Mime.MimePart"/> only.</para>
            <para>To get the root part of the MIME parts tree of the message, use <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> property
            of <see cref="T:MailBee.Mime.MailMessage"/> object. <see cref="P:MailBee.Mime.MailMessage.MimePartTree"/> MIME part contains
            all the MIME parts of the message.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays Content-Disposition of all attachments
            of this message. Content-Disposition value is not available in <see cref="T:MailBee.Mime.Attachment"/> object but can be retrieved
            using <see cref="T:MailBee.Mime.MimePart"/> object.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show the filename and content-disposition of the attachment.</span>
            	Console.WriteLine("Attachment name: " + attach.Filename);
            	Console.WriteLine("Disposition: " + attach.AsMimePart.Disposition);
            	Console.WriteLine();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the filename and content-disposition of the attachment.</span>
            	Console.WriteLine("Attachment name: " &amp; attach.Filename)
            	Console.WriteLine("Disposition: " &amp; attach.AsMimePart.Disposition)
            	Console.WriteLine()
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.ContentID">
            <summary>
            Gets the Content-ID value of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.ContentLocation"/>
            <seealso cref="P:MailBee.Mime.Attachment.IsInline"/>
            </summary>
            <value>
            A string containing the Content-ID (CID) value of the attachment, or an empty string if the attachment has no Content-ID.
            </value>
            <remarks>
            <para>
            Each attachment which is referenced in the message body (e.g. a picture in HTML body) usually has a
            Content-ID header which is used to reference this attachment from the message body. 
            </para>
            <para>
            For instance, if the HTML body contains <i>&lt;IMG SRC="cid:picture1"&gt;</i>, it's expected there is an attached image with
            Content-ID <i>picture1</i>. This image must be displayed in place of <i>&lt;IMG SRC="cid:picture1"&gt;</i> tag when the HTML
            body is being rendered.
            </para>
            <note>MailBee.NET has special features for displaying HTML body with embedded pictures. See <see cref="M:MailBee.Mime.MailMessage.SaveHtmlAndRelatedFiles(System.String)"/>
            and <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> methods for more information.</note>
            </remarks>
            <example>This sample loads the message from .EML file and displays CIDs of each attachment.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)	
            {
            	<span style="color: green;">// ...show the attachment identifier.</span>
            	Console.WriteLine("CID is " + attach.ContentID);
            }	
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the attachment identifier.</span>
            	Console.WriteLine("CID is " &amp; attach.ContentID)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.ContentLocation">
            <summary>
            Gets the content location of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.ContentID"/>
            <seealso cref="P:MailBee.Mime.Attachment.Headers"/>
            </summary>
            <value>
            A string containing the attachment's content location taken from Content-Location header,
            or an empty string if Content-Location header is not set.
            </value>
            <remarks><see cref="P:MailBee.Mime.Attachment.ContentLocation"/>, if present, is typically a URL to the resource
            (where resource is the attachment data). Some mail clients, however,
            place Content-ID value in <see cref="P:MailBee.Mime.Attachment.ContentLocation"/>. Thus, if Content-ID is expected
            and <see cref="P:MailBee.Mime.Attachment.ContentID"/> header is missing while <see cref="P:MailBee.Mime.Attachment.ContentLocation"/> is present,
            MailBee uses its value as Content-ID of the resource.</remarks>
            <example>This sample loads the message from .EML file and displays content location of each attachment of the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)			 
            {
            	<span style="color: green;">// ...show attachment content location.</span>
            	Console.WriteLine("The location is " + attach.ContentLocation);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show attachment content location.</span>
            	Console.WriteLine("The location is " &amp; attach.ContentLocation)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.ContentType">
            <summary>
            Gets the content type of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.Headers"/>
            </summary>
            <value>
            A string containing the attachment's content type taken from Content-Type header,
            or an empty string if the content type is not set.
            </value>
            <remarks>
            Some examples of attachment content types:
            <list type="bullet">
            <item><description>text/plain</description></item>
            <item><description>text/html</description></item>
            <item><description>text/calendar</description></item>
            <item><description>multipart/related</description></item>
            <item><description>multipart/alternative</description></item>
            <item><description>multipart/mixed</description></item>
            <item><description>application/x-zip-compressed</description></item>
            <item><description>application/msword</description></item>
            </list>
            <para>When adding an attachment to the e-mail message (for instance, using <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String)"/> method 
            of <see cref="T:MailBee.Mime.AttachmentCollection"/>) and the content type is not specified, MailBee automatically determines its content type
            according to the file extension.
            </para>   
            </remarks>
            <example>This sample loads the message from .EML file and displays the content type of each attachment.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)			 
            {
            	<span style="color: green;">// ...show attachment type.</span>
            	Console.WriteLine("The type is " + attach.ContentType);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show attachment type.</span>
            	Console.WriteLine("The type is " &amp; attach.ContentType)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.Description">
            <summary>
            Gets the description of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.Headers"/>
            </summary>
            <value>
            A string containing the attachment description taken from Content-Description header, or an empty string if Content-Description header is not set.
            The default value is an empty string.
            </value>
            <example>This sample loads the message from .EML file and displays the content description of each attachment.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)			 
            {
            	<span style="color: green;">// ...show the attachment description.</span>
            	Console.WriteLine("Description is " + attach.Description);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the attachment description.</span>
            	Console.WriteLine("Description is " &amp; attach.Description)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.FilenameOriginal">
            <summary>
            Gets the original filename of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.Name"/>
            <seealso cref="P:MailBee.Mime.Attachment.Filename"/>
            <seealso cref="P:MailBee.Mime.Attachment.SavedAs"/>
            </summary>
            <value>
            A string containing the original filename of the attachment.
            </value>
            <remarks>
            <para>The value of this property is taken from <i>filename</i> parameter of <i>Content-Disposition</i> header.</para>
            <para>If <i>Content-Disposition</i> header or <i>filename</i> parameter is missing, <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> property will contain
            an empty string, while <see cref="P:MailBee.Mime.Attachment.Filename"/> property will be set to non-empty value (taken from other headers or autogenerated by MailBee).</para>
            <para>
            The developer can use <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> to get the real name of the attached file as it was specified in the e-mail.
            To get the unique filename of the attachment within the <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection,
            use <see cref="P:MailBee.Mime.Attachment.Filename"/> property.
            </para>
            <para>For instance, when two files with equal filenames <i>cat.jpg</i> are attached to the message, their original filenames
            will be <i>cat.jpg</i> for both the files, but their <see cref="P:MailBee.Mime.Attachment.Filename"/> values will be <i>cat.jpg</i> and <i>cat[1].jpg</i>.
            </para>
            Thus, <see cref="P:MailBee.Mime.Attachment.Filename"/> is usually equal to <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> of the same attachment, but it may be different sometimes.
            </remarks>
            <example>This sample loads the message from .EML file and displays the original filename of each attachment.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)			 
            {
            	<span style="color: green;">// ...show the original filename of the attachment.</span>
            	Console.WriteLine("Filename is " + attach.FilenameOriginal);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the original filename of the attachment.</span>
            	Console.WriteLine("Filename is " &amp; attach.FilenameOriginal)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.SavedAs">
            <summary>
            Gets the full path to the attachment which was saved to disk.
            <seealso cref="P:MailBee.Mime.Attachment.Name"/>
            <seealso cref="P:MailBee.Mime.Attachment.Filename"/>
            <seealso cref="P:MailBee.Mime.Attachment.FilenameOriginal"/>
            </summary>
            <value>
            A string containing the full path to the attachment which was saved to disk, or empty string if the attachment
            was not saved to disk yet.
            </value>
            <remarks>
            <para>This property is especially useful when the attachment was saved to disk implicitly (for instance, when all embedded pictures/files
            referenced in the HTML body were saved to disk by <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> method call, and the developer
            wants to know the exact paths to the saved files).</para>
            <para>Filenames of such files depend on the way they were saved. Usually attachments are saved under the path specified by the developer
            if saving was explicit (e.g. with <see cref="M:MailBee.Mime.Attachment.Save(System.String,System.Boolean)"/> method); or if saving was implicit (e.g. with <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/> method), 
            attachments are saved to <see cref="P:MailBee.Mime.MessageParserConfig.WorkingFolder">MailMessage.Parser.WorkingFolder</see>.</para>
            </remarks>
            <example>This sample loads the message from .EML file, saves every attachment to disk specifying only the folder,
            and displays the full path to each saved file.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)			 
            {
            	<span style="color: green;">// ...save the attachment into the specified folder overwriting the existing file if necessary,</span>
            	attach.SaveToFolder(@"C:\Temp\", <span style="color: blue;">true</span>);
            
            	<span style="color: green;">// and show the full path to the saved file.</span>
            	Console.WriteLine("The path is " + attach.SavedAs);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...save the attachment into the specified folder overwriting the existing file if necessary,</span>
            	attach.SaveToFolder("C:\Temp\", <span style="color: blue;">True</span>)
            	
            	<span style="color: green;">' and show the full path to the saved file.</span>
            	Console.WriteLine("The path is " &amp; attach.SavedAs)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.Filename">
            <summary>
            Gets the filename of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.Name"/>
            <seealso cref="P:MailBee.Mime.Attachment.SavedAs"/>
            <seealso cref="P:MailBee.Mime.Attachment.FilenameOriginal"/>
            </summary>
            <value>
            A string containing the filename of the attachment. The value is NEVER an empty string.
            </value>
            <remarks>
            <para>Within the <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection, every attachment has the unique <see cref="P:MailBee.Mime.Attachment.Filename"/>.</para>
            <para><see cref="P:MailBee.Mime.Attachment.Filename"/> property value is set accordingly the following considerations:
            <list type="bullet">
            <item><description>If <i>filename</i> parameter of <i>Content-Disposition</i> header is set,
            its value is passed to this property</description></item>
            <item><description>If <i>filename</i> parameter of <i>Content-Disposition</i> header is missing,
            <i>name</i> parameter of <i>Content-Type</i> header is used</description></item>
            <item><description>If the value obtained from the previous steps is an empty string,
            <see cref="P:MailBee.Mime.MailMessage.Subject"/> of the message is used</description></item>
            <item><description>If the value obtained from the previous steps is not a unique name
            (i.e. <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection already contains another
            attachment with the same <see cref="P:MailBee.Mime.Attachment.Filename"/>), this value is extended with <i>[i]</i>
            where <i>i</i> is a unique number (1, 2, 3, etc). For instance, <i>picture.gif</i> becomes
            <i>picture[2].gif</i> if <see cref="P:MailBee.Mime.MailMessage.Attachments"/> collection already contains
            <i>picture.gif</i> and <i>picture[1].gif</i>.</description></item>
            </list>
            </para>
            <para>To get the real name of the attached file (as it appears in the e-mail message),
            use <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> property.
            </para>
            <para>Thus, <see cref="P:MailBee.Mime.Attachment.Filename"/> is usually equal to <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> of the same attachment, but it may be different sometimes.</para>
            <para>Other useful properties are <see cref="P:MailBee.Mime.Attachment.Name"/> (gets the friendly name of the attachment if available)
            and <see cref="P:MailBee.Mime.Attachment.SavedAs"/> (gets the full path to the file if the attachment was saved to disk).</para>
            </remarks>
            <example>This sample creates a new message, attaches 3 files, and displays the unique filename for
            each attached file. The sample demonstrates attaching files which will have the same filenames in the e-mail message
            (although their source locations are different). The message will have <i>1.jpg</i>, <i>1.jpg</i> and <i>2.jpg</i>
            attachments (these will be their <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> values) while their unqiue <see cref="P:MailBee.Mime.Attachment.Filename"/> values
            will be <i>1.jpg</i>, <i>1[1].jpg</i> and <i>2.jpg</i>.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Attach some files.</span>
            msg.Attachments.Add(@"C:\Temp\My_Images\1.jpg", "1.jpg");
            msg.Attachments.Add(@"C:\Temp\My_Images\2.jpg", "1.jpg");
            msg.Attachments.Add(@"C:\Temp\Other_Images\1.jpg", "2.jpg");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show the unique filename of the attachment.</span>
            	Console.WriteLine("Unique filename is " + attach.Filename);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Attach some files.</span>
            msg.Attachments.Add("C:\Temp\My_Images\1.jpg", "1.jpg")
            msg.Attachments.Add("C:\Temp\My_Images\2.jpg", "1.jpg")
            msg.Attachments.Add("C:\Temp\Other_Images\1.jpg", "2.jpg")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the unique filename of the attachment.</span>
            	Console.WriteLine("Unique filename is " &amp; attach.Filename)
            <span style="color: blue;">Next</span>
            </code>		
            Running the code above produces the following results:
            <code>
            1.jpg
            1[1].jpg
            2.jpg
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.Headers">
            <summary>
            Gets the collection of the attachment headers.
            <seealso cref="P:MailBee.Mime.Attachment.RawHeader"/>
            </summary>
            <value>
            A <see cref="T:MailBee.Mime.HeaderCollection"/> object containing the headers of the attachment.
            </value>
            <remarks>
            <para>This property allows the developer to access any headers of the attachment, add new headers, or modify/delete existing ones.</para>
            <para>Use <see cref="P:MailBee.Mime.Attachment.RawHeader"/> property to get the header section of the attachment as a string.</para>
            </remarks>
            <example>This sample loads the message from .EML file and displays the headers of each attachment.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show the name of the attachment and iterate through its headers.</span>
            	Console.WriteLine("Headers of " + attach.Filename + " attachment:");
            
            	<span style="color: green;">// For every header...</span>
            	<span style="color: blue;">foreach</span> (Header hdr <span style="color: blue;">in</span> attach.Headers)
            	{
            		<span style="color: green;">// ...show the header name and value.</span>
            		Console.WriteLine(hdr.Name + ": " + hdr.Value);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the name of the attachment and iterate through its headers.</span>
            	Console.WriteLine("Headers of " &amp; attach.Name &amp; " attachment:")
            
            	<span style="color: green;">' For every header...</span>
            	<span style="color: blue;">For</span> <span style="color: blue;">Each</span> hdr <span style="color: blue;">As</span> Header <span style="color: blue;">In</span> attach.Headers
            		<span style="color: green;">' ...show the header name and value.</span>
            		Console.WriteLine(hdr.Name &amp; ": " &amp; hdr.Value)
            	<span style="color: blue;">Next</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.IsFile">
            <summary>
            Indicates if the attachment is a file.
            <seealso cref="P:MailBee.Mime.Attachment.IsInline"/>
            </summary>
            <value>
            <b>true</b> if the attachment is a file; otherwise, <b>false</b>.
            </value>
            <remarks>
            If the <i>filename</i> parameter of Content-Disposition header is not empty,
            attachment is considered to be a file. Some attachments, however, are not files:
            for instance, antivirus program may add some textual information as an attachment to the message,
            but this attachment has no filename and is not intended for saving to disk.
            </remarks>
            <example>This sample loads the message from .EML file and displays filenames of all files attached to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...when it's a file...</span>
            	<span style="color: blue;">if</span> (attach.IsFile)
            	{
            		<span style="color: green;">// ...then show its filename.</span>
            		Console.WriteLine("Attachment " + attach.Filename + " is a file.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...when it's a file...</span>
            	<span style="color: blue;">If</span> attach.IsFile <span style="color: blue;">Then</span>
            		<span style="color: green;">' ...then show its filename.</span>
            		Console.WriteLine("Attachment " &amp; attach.Filename &amp; " is a file.")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>	
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.IsInline">
            <summary>
            Indicates if the attachment is inline.
            <seealso cref="P:MailBee.Mime.Attachment.ContentID"/>
            </summary>
            <value>
            <b>true</b> if the attachment is inline; otherwise, <b>false</b>.
            </value>
            <remarks>
            Attachment is considered inline when it should be rendered along with the message body.
            For instance, images and sounds in an HTML message are inline attachments while .zip archives
            are not. Inline attachments often have non-empty <see cref="P:MailBee.Mime.Attachment.ContentID"/> value which is used
            to reference such attachments within HTML body of the message.
            </remarks>
            <example>This sample loads the message from .EML file and displays the filenames of all inline attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...when attachment is inline...</span>
            	<span style="color: blue;">if</span> (attach.IsInline)
            	{
            		<span style="color: green;">// ...then show its filename.</span>
            		Console.WriteLine("Attachment " + attach.Filename + " is inline.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...when attachment is inline...</span>
            	<span style="color: blue;">If</span> attach.IsInline <span style="color: blue;">Then</span>
            		<span style="color: green;">' ...then show its filename.</span>
            		Console.WriteLine("Attachment " &amp; attach.Filename &amp; " is inline.")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>	
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.IsMessageInside">
            <summary>
            Indicates if the attachment contains a mail message.
            <seealso cref="M:MailBee.Mime.Attachment.GetEncapsulatedMessage"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            <b>true</b> if the attachment is a mail message; otherwise, <b>false</b>.
            </value>
            <remarks>
            For instance, if the mail message was forwarded as attachment to another message,
            the developer can use this property to determine whether the attachment contains the forwarded message.
            If it does, <see cref="M:MailBee.Mime.Attachment.GetEncapsulatedMessage"/> method can be used to extract the encapsulated <see cref="T:MailBee.Mime.MailMessage"/>
            object from the attachment.
            </remarks>
            <example>This sample loads the message from .EML file and displays subjects of all attached e-mails.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...when the attachment is an e-mail message...</span>
            	<span style="color: blue;">if</span> (attach.IsMessageInside)
            	{
            		<span style="color: green;">// ...then extract the e-mail message from the attachment...</span>
            		MailMessage attachedMsg = attach.GetEncapsulatedMessage();
            
            		<span style="color: green;">// and show its Subject field.</span>
            		Console.WriteLine("Forwarded message subject is " + attachedMsg.Subject);
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...when the attachment is an e-mail message...</span>
            	<span style="color: blue;">If</span> attach.IsMessageInside <span style="color: blue;">Then</span>
            		<span style="color: green;">' ...then extract the e-mail message from the attachment...</span>
            		<span style="color: blue;">Dim</span> attachedMsg <span style="color: blue;">As</span> MailMessage = attach.GetEncapsulatedMessage()
            		
            		<span style="color: green;">' and show its Subject field.</span>
            		Console.WriteLine("Forwarded message subject is " &amp; attachedMsg.Subject)
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.IsTnef">
            <summary>
            Indicates if the attachment is MS-TNEF (winmail.dat) container which can have other attachments inside.
            <seealso cref="M:MailBee.Mime.Attachment.GetAttachmentsFromTnef"/>
            </summary>
            <value>
            <b>true</b> if the attachment has MS-TNEF format; otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>Transport Neutral Encapsulation Format or TNEF is a Microsoft data format used by Microsoft Outlook and Microsoft Exchange Server.
            TNEF attachments are usually named <i>winmail.dat</i> or <i>win.dat</i>.
            </para>
            <para>TNEF is not a common standard so that most mail clients do not natively support it.
            However, MailBee allows the developer to extract attachments from TNEF containers into <see cref="T:MailBee.Mime.AttachmentCollection"/>
            using <see cref="M:MailBee.Mime.Attachment.GetAttachmentsFromTnef"/> method and then treat them like any other attachments.
            </para>
            </remarks>
            <example>This sample loads the message from .EML file and saves all TNEF-formatted attachments to disk (if any).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\mstnef.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...when the attachment is TNEF...</span>
            	<span style="color: blue;">if</span> (attach.IsTnef)
            	{
            		<span style="color: green;">// ...extract all the files from it and save them to the folder.</span>
            		attach.GetAttachmentsFromTnef().SaveAll(@"C:\Temp");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\mstnef.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...when the attachment is TNEF...</span>
            	<span style="color: blue;">If</span> (attach.IsTnef) <span style="color: blue;">Then</span>
            		<span style="color: green;">' ...extract all the files from it and save them to the folder.</span>
            		attach.GetAttachmentsFromTnef().SaveAll("C:\Temp")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.IsZip">
            <summary>
            Indicates if the attachment is a zip archive.
            <seealso cref="P:MailBee.Mime.Attachment.FilenameOriginal"/>
            </summary>
            <value>
            <b>true</b> if the attachment filename has .ZIP extension; otherwise, <b>false</b>.
            </value>
            <example>This sample loads the message from .EML file and displays the filenames of all attached zip files.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...when the attachment is a zip file...</span>
            	<span style="color: blue;">if</span> (attach.IsZip)
            	{
            		<span style="color: green;">// ...show its filename.</span>
            		Console.WriteLine("Attachment " + attach.Filename + " is a zip archive.");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...when the attachment is a zip file...</span>
            	<span style="color: blue;">If</span> attach.IsZip <span style="color: blue;">Then</span>
            		<span style="color: green;">' ...show its filename.</span>
            		Console.WriteLine("Attachment " &amp; attach.Filename &amp; " is zip archive.")
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="T:MailBee.ErrorCodes"/>
            <seealso cref="P:MailBee.Mime.Attachment.ThrowExceptions"/>
            </summary>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <remarks>The error code is one of constants defined in <see cref="T:MailBee.ErrorCodes"/> class.</remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> property documentation.
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.Name">
            <summary>
            Gets the friendly name of the attachment.
            <seealso cref="P:MailBee.Mime.Attachment.FilenameOriginal"/>
            <seealso cref="P:MailBee.Mime.Attachment.Filename"/>
            <seealso cref="P:MailBee.Mime.Attachment.SavedAs"/>
            </summary>
            <value>
            A string containing the "friendly name" (or "display name") of the attachment, or an empty string if the friendly name
            is not available.
            </value>
            <remarks>
            This property contains the attachment friendly name which is taken from <i>name</i> parameter of Content-Type header of the attachment.
            An attachment friendly name is usually equal to its <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/>, but it may be different sometimes. To obtain the original filename 
            of the attached file, use <see cref="P:MailBee.Mime.Attachment.FilenameOriginal"/> property. 
            <note>Since <see cref="P:MailBee.Mime.Attachment.Name"/> value can be empty, it's usually more convenient to use <see cref="P:MailBee.Mime.Attachment.Filename"/> value instead.</note>
            </remarks>
            <example>This sample loads the message from .EML file and displays the friendly names of all attachments.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show its friendly name.</span>
            	Console.WriteLine("Name is " + attach.Name);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show its friendly name.</span>
            	Console.WriteLine("Name is " &amp; attach.Name)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.RawHeader">
            <summary>
            Gets a string containing the header section of the attachment in the original form.
            <seealso cref="P:MailBee.Mime.Attachment.Headers"/>
            </summary>
            <value>
            A string containing the attachment header section as it came with the message, or an empty
            string if the attachment was added by the application rather than extracted from the message.
            </value>
            <example>This sample loads the message from .EML file and displays the raw header of each attachment.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show its header section.</span>
            	Console.WriteLine(attach.RawHeader);
            	Console.WriteLine();
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show its header section.</span>
            	Console.WriteLine(attach.RawHeader)
            	Console.WriteLine()
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.Size">
            <summary>
            Gets the length of the binary content of the attachment.
            <seealso cref="M:MailBee.Mime.Attachment.GetData"/>
            </summary>
            <value>
            The length of the binary content of the message attachment in bytes. 
            </value>
            <remarks>
            This property contains the length of the attachment's content in decoded form (after the mail message has already been parsed
            and all MIME parts have been decoded from base64, quoted-printable, etc).
            </remarks>
            <example>This sample loads the message from .EML file and displays the size of each attachment's data.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// ...show the length of the attachment data in bytes.</span>
            	Console.WriteLine("The size is " + attach.Size.ToString());
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' ...show the length of the attachment data in bytes.</span>
            	Console.WriteLine("The size is " &amp; attach.Size.ToString())
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.Attachment.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors.
            <seealso cref="P:MailBee.Mime.Attachment.LastResult"/>
            </summary>
            <value>
            <b>true</b> if the <see cref="T:MailBee.Mime.Attachment"/> object will throw exceptions on errors; otherwise, <b>false</b>.
            The default value is <b>true</b>.
            </value>
            <remarks>
            If this property is set to <b>true</b> and an error occurs, an exception derived from <see cref="T:MailBee.MailBeeException"/> is thrown.
            Otherwise, the exception will not occur but the method which caused will report error (returning <b>false</b>, null reference, etc).
            Anyway, the code of the last occurred error will be contained in the <see cref="P:MailBee.Mime.Attachment.LastResult"/> property. The list of
            all error codes is available in <see cref="T:MailBee.ErrorCodes"/> class overview.
            </remarks>
            <example>The example is available in <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions">MailMessage.ThrowExceptions</see> topic.</example>
        </member>
        <member name="T:MailBee.ImapMail.MessageFlagSet">
            <summary>
            Represents a set of flags of a mail message.
            <seealso cref="T:MailBee.ImapMail.SystemMessageFlags"/>
            </summary>
            <remarks>
            <para>Message flags can be of two types: system (standard) and non-standard.
            System flags can be examined using <see cref="P:MailBee.ImapMail.MessageFlagSet.SystemFlags"/> property. <see cref="P:MailBee.ImapMail.MessageFlagSet.AllFlags"/>
            property returns all the flags as an array of strings. <see cref="M:MailBee.ImapMail.MessageFlagSet.ToString"/>
            method returns all the the flags as a string.</para>
            <para>To learn flags of particular messages, the developer can use <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean)"/>
            method (or its overloads), and then examine <see cref="P:MailBee.ImapMail.Envelope.Flags"/> property
            of <see cref="T:MailBee.ImapMail.Envelope"/> objects contained within the returned <see cref="T:MailBee.ImapMail.EnvelopeCollection"/>.</para>
            <para>To learn which message flags are defined in the currently selected folder,
            the developer can use <see cref="P:MailBee.ImapMail.Imap.Flags"/> property of the <see cref="T:MailBee.ImapMail.Imap"/> object.</para>
            <para>To learn which message flags can be applied to messages permanently of whether it's allowed
            to define new flags by applying them to messages, the developer can use
            <see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/> property of the <see cref="T:MailBee.ImapMail.Imap"/> object.</para>
            <para>To apply flags to messages, the developer can use <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/> method.
            <see cref="M:MailBee.ImapMail.Imap.DeleteMessages(System.String,System.Boolean)"/> method is a particular case of <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/>
            method which adds "\Deleted" flag to messages.</para>
            <para>To search messages having specified flags set, the developer can use <see cref="M:MailBee.ImapMail.Imap.Search(System.Boolean,System.String,System.String)"/>
            method.</para>
            <note>Message flags is not the same as folder flags (<see cref="T:MailBee.ImapMail.FolderFlags"/>). Each folder has 3 groups of flags set:
            folder flags (which can be examined via <see cref="P:MailBee.ImapMail.Folder.Flags"/> property of <see cref="T:MailBee.ImapMail.Folder"/> object),
            permanent message flags (<see cref="P:MailBee.ImapMail.Imap.PermanentFlags"/> property of the <see cref="T:MailBee.ImapMail.Imap"/> object),
            and available message flags (<see cref="P:MailBee.ImapMail.Imap.Flags"/> property of the <see cref="T:MailBee.ImapMail.Imap"/> object).</note>
            </remarks>
        </member>
        <member name="M:MailBee.ImapMail.MessageFlagSet.ToString">
            <summary>
            Returns the entire list of flags as a string.
            </summary>
            <returns>The string containing all the message flags associated with the given message or folder as a space-delimited list.</returns>
            <remarks>The returned string is in IMAP4 format of flag list. For instance, "\Seen \Answered $Personal".</remarks>
        </member>
        <member name="M:MailBee.ImapMail.MessageFlagSet.SystemFlagsToString(MailBee.ImapMail.SystemMessageFlags)">
            <summary>
            Converts the specified set of system message flags into IMAP4 flag list.
            </summary>
            <param name="systemFlags">A set of system flags.</param>
            <returns>The space-delimited flag list string in IMAP4 format containing the specified system flags.</returns>
            <remarks>Example of the returned value: "\Seen \Answered".</remarks>
        </member>
        <member name="P:MailBee.ImapMail.MessageFlagSet.SystemFlags">
            <summary>
            Gets the system (standard) flags subset of the entire list of flags.
            </summary>
            <value>The <see cref="T:MailBee.ImapMail.SystemMessageFlags"/> enumeration containing the system
            message flags associated with the given message or folder.</value>
        </member>
        <member name="P:MailBee.ImapMail.MessageFlagSet.AllFlags">
            <summary>
            Gets the entire list of flags as array of strings.
            </summary>
            <value>The array of strings containing all the
            message flags associated with the given message or folder.</value>
            <remarks>In the returned array, system flags are prefixed with "\" character.
            For instance, the following list can be returned: "\Seen", "\Answered", "$Personal".
            <note>In C#, "\" character has special meaning. To insert it into string, either duplicate it
            or prefix the entire string with "@" character.</note>
            </remarks>
        </member>
        <member name="T:MailBee.ImapMail.ImapEnvelopeDownloadedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/> event.
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs.MessageNumber">
            <summary>
            Gets the message number (ordinal position in the folder) of the downloaded envelope.
            </summary>
            <value>An integer value in the range 1 to <see cref="P:MailBee.ImapMail.Imap.MessageCount"/>,
            representing the message number of the downloaded envelope.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs.DataLength">
            <summary>
            Gets the length (in bytes) of the FETCH response containing the downloaded envelope data.
            </summary>
            <value>The length (in bytes) of the server response containing the downloaded envelope data.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs.DownloadedEnvelope">
            <summary>
            Gets or sets the envelope which had been downloaded.
            </summary>
            <value>A reference to the mail message envelope which had been just downloaded, or a null reference
            (<b>Nothing</b> in Visual Basic) if there had been no message data in the server response.</value>
            <remarks>
            <para>When this property value is a null reference, this usually means the mail server replied with
            a response which could not be completely parsed (i.e. the mail server produces incorrect IMAP4 responses). In this case, the correspodning method
            of <see cref="T:MailBee.ImapMail.Imap"/> class which had been used to download message(s) will throw an exception after the method has
            finished receiving data from the IMAP4 server.</para>
            <para>The developer can also manually set this property value to a null reference to avoid
            inclusion of this envelope into the resulting <see cref="T:MailBee.ImapMail.EnvelopeCollection"/>. For methods returning a single envelope
            (such as <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/>), the result will be a null reference.</para>
            <para>Setting this property to a null reference is also useful for downloading very large number of messages at once
            (when they won't fit in memory). In this case, the developer can save each message to database/disk in <see cref="E:MailBee.ImapMail.Imap.EnvelopeDownloaded"/>
            event handler and then set <see cref="P:MailBee.ImapMail.ImapEnvelopeDownloadedEventArgs.DownloadedEnvelope"/> to a null reference to free the resources. This is efficient
            and memory conservative appoach.</para>
            </remarks>
        </member>
        <member name="T:MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> event.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.ImapMail.Imap.EnvelopeDataChunkReceived"/> event.
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventArgs.MessageNumber">
            <summary>
            Gets the message number (ordinal position in the folder) of the envelope the downloaded data chunk corresponds to.
            </summary>
            <value>An integer value in the range 1 to <see cref="P:MailBee.ImapMail.Imap.MessageCount"/>,
            representing the message number of the envelope being downloaded.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventArgs.BytesJustReceived">
            <summary>
            Gets the number of bytes received from the server during the operation which raised the
            current event.
            </summary>
            <value>The number of bytes received from the server during the operation which raised the
            current event.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapEnvelopeDataChunkReceivedEventArgs.TotalBytesReceived">
            <summary>
            Gets the total length (in bytes) of the already received data of the series of FETCH responses currently
            being downloaded. 
            </summary>
            <value>The total length (in bytes) of the already received data of the series of FETCH responses currently
            being downloaded, including the bytes just received.</value>
        </member>
        <member name="T:MailBee.ImapMail.ImapServerStatusEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.ImapMail.Imap.ServerStatus"/> event.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.ImapServerStatusEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.ImapMail.Imap.ServerStatus"/> event.
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.ImapServerStatusEventArgs.StatusID">
            <summary>
            Gets the status string of the current response.
            </summary>
            <value>The string containing the status response string in uppercase form.</value>
            <remarks>This can be one of the following values: "OK", "NO", "BAD", "PREAUTH", "BYE", "FLAGS".</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapServerStatusEventArgs.OptionalData">
            <summary>
            Gets the contents of the optional response code of the response.
            </summary>
            <value>The string containing the inner contents of the optional response (the part of the status response enclosed in square brackets),
            or a null reference (<b>Nothing</b> in Visual Basic) if the response does not have the optional response code.</value>
            <remarks>For instance, if the optional response code is "[alert]", this property returns "alert".
            The square brackets themselves are not returned.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable">
            <summary>
            Gets the human readable part of the status response.
            <seealso cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.IsAlert"/>
            </summary>
            <value>The string containing the human readable part of the status response,
            or a null reference (<b>Nothing</b> in Visual Basic) if the response does not have the human readable part.</value>
            <remarks>If <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.IsAlert"/> is <b>true</b>, the application must present
            <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable"/> to the user.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapServerStatusEventArgs.Details">
            <summary>
            Gets the response body.
            </summary>
            <value>The string containing the rest of the status response beyond the status string and the optional
            response code, or a null reference (<b>Nothing</b> in Visual Basic) if the response is a status response or
            it does not have any data beyond the status code or the optional response code.</value>
            <remarks>
            <para>The status responses are "OK", "NO", "BAD", "PREAUTH", "BYE". In these responses,
            any additional data beyond the status code or the optional response code is treated
            as <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable"/> text. For other responses ("FLAGS"), the rest of the response
            will contain information specific to this response (for instance, a set of flags for "FLAGS" response).
            This information is in IMAP4 format and is not directly intended to be read by humans, and will be
            available in <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.Details"/> property value.</para>
            <para>Thus, both <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.Details"/> and <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable"/> properties cannot be non-null for the same response.
            If one of these properties is non-null, another will be null. Both properties can be null, however.</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapServerStatusEventArgs.IsAlert">
            <summary>
            Gets whether the status response is "[ALERT]" response.
            <seealso cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable"/>
            <seealso cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.OptionalData"/>
            </summary>
            <value><b>true</b> if the response contains "[ALERT]" optional response code; otherwise, <b>false</b>.</value>
            <remarks>If this property returns <b>true</b>, the <see cref="P:MailBee.ImapMail.ImapServerStatusEventArgs.HumanReadable"/> property value
            MUST be presented to the user. For instance, the server may warn its clients that it's going to shutdown soon.</remarks>
        </member>
        <member name="T:MailBee.ImapMail.ImapMessageStatusEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.ImapMail.Imap.MessageStatus"/> event.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.ImapMessageStatusEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.ImapMail.Imap.MessageStatus"/> event.
            </summary>
        </member>
        <member name="P:MailBee.ImapMail.ImapMessageStatusEventArgs.StatusID">
            <summary>
            Gets the status string of the current response.
            </summary>
            <value>The string containing the status response string in uppercase form.</value>
            <remarks>This can be one of the following values: "EXISTS", "RECENT", "EXPUNGE", "FETCH".</remarks>
        </member>
        <member name="P:MailBee.ImapMail.ImapMessageStatusEventArgs.MessageCountOrIndex">
            <summary>
            Gets the count or index of message(s) mentioned in the current response.
            <seealso cref="P:MailBee.ImapMail.ImapMessageStatusEventArgs.StatusID"/>
            </summary>
            <value>For "EXISTS" and "RECENT" responses, returns the count of all or recent messages in the folder;
            for "EXPUNGE" or "FETCH" responses, returns the index of the message which was purged or whose flags were modified.</value>
        </member>
        <member name="P:MailBee.ImapMail.ImapMessageStatusEventArgs.Flags">
            <summary>
            Gets the new value of the message flags.
            <seealso cref="P:MailBee.ImapMail.ImapMessageStatusEventArgs.StatusID"/>
            </summary>
            <value>For "FETCH" response, returns a reference to the <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object containing the flags of the message;
            otherwise, a null reference (<b>Nothing</b> in Visual Basic).</value>
        </member>
        <member name="T:MailBee.ImapMail.ImapIdlingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.ImapMail.Imap.Idling"/> event.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.ImapIdlingEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.ImapMail.Imap.Idling"/> event.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.FolderCollection">
            <summary>
            Provides properties and methods for examining the collection of the <see cref="T:MailBee.ImapMail.Folder"/> objects.
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
        </member>
        <member name="M:MailBee.ImapMail.FolderCollection.Reverse">
            <summary>
            Reverses the order of the list of the folders that are stored in the collection.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.DeleteFolder(System.String)"/>
            </summary>
            <remarks>
            For instance, this method can be used to optimize deleting of folders with their subfolders. Because
            it's not usually permitted to delete a folder which contains subfolders, these subfolders must be removed first.
            However, mail servers usually place subfolders after their parent folders in the returned folder list. Thus,
            it's more efficient to iterate through this collection in descending order, removing subfolders first and their parent folders last.
            See <see cref="M:MailBee.ImapMail.Imap.DeleteFolder(System.String)"/> topic for the sample code.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.ImapMail.Folder"/> object at the specified zero-based index in the collection.
            <seealso cref="T:MailBee.ImapMail.Folder"/>
            </summary>
            <param name="index">The zero-based index of the <see cref="T:MailBee.ImapMail.Folder"/> object in the collection.</param>
            <value>
            A <see cref="T:MailBee.ImapMail.Folder"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.Html.RuleSet">
            <summary>
            Provides methods for creating rules for processing of HTML tags.
            <seealso cref="T:MailBee.Html.Rule"/>
            <seealso cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/>
            </summary>
            <remarks>
            <para>This class represents a set of rules which describe how certain tags
            should be processed with <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> or <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> methods.</para>
            <para>Each <see cref="T:MailBee.Html.Rule"/> in the <see cref="T:MailBee.Html.RuleSet"/> represents a rule to apply
            to a certain tag having certain attributes.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)">
            <summary>
            Adds a rule which represents the condition when <see cref="T:MailBee.Html.ProcessElementDelegate"/> delegate should be executed.
            <seealso cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/>
            </summary>
            <param name="tagName">The name of the tag or for which to execute the delegate. Case-insensitive.</param>
            <param name="tagAttrs">The list of attributes any of which must exist in the definition of <paramref name="tagName"/> tags
            in order to execute the delegate, or a null reference (<b>Nothing</b> in Visual Basic) to execute the delegate for any tags with <paramref name="tagName"/> name
            (regardless of which attributes they have).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="tagName"/> is a null reference (<b>Nothing</b> in Visual Basic)
            or an empty string.</exception>
            <remarks>
            <para>For instance, if <paramref name="tagName"/> is <i>A</i> and <paramref name="tagAttrs"/> is a null reference,
            <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method will execute <see cref="T:MailBee.Html.ProcessElementDelegate"/> delegate (specified in <i>del</i> parameter)
            for all &lt;A&gt; tags in the document.</para>
            <para>If <paramref name="tagName"/> is <i>INPUT</i> and <paramref name="tagAttrs"/> contains <i>TYPE=IMAGE</i> and <i>TYPE=FILE</i> attributes,
            <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method will execute the delegate for all <i>&lt;INPUT TYPE=IMAGE&gt;</i> and <i>&lt;INPUT TYPE=FILE&gt;</i> tags but not for
            <i>&lt;INPUT TYPE=TEXT&gt;</i> tags.</para>
            <para>This method creates a <see cref="T:MailBee.Html.Rule"/> of <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> type.
            Rules of other types have the same conditions (tag name and optional list of attributes). The only difference between rule types
            is what action to perform when the condition gets satisfied. <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule simply calls
            the delegate. Other rules call the delegate first, then check the return value of the delegate and perform
            the specified action only if the delegate returned <b>true</b>.</para>
            <note>If <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method was called with <i>del</i> parameter set to a null reference,
            <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule will have no effect. Rules of other types will
            be executed as if the delegate always returned <b>true</b>.</note>
            <para>The above applies to both <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> and <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> methods.</para>
            </remarks>
            <example>
            This sample demonstrates removing of images from an HTML source and replacing of BR tags
            with HR tags.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> System.Net;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// The delegate is used for processing of the HTML source.</span>
            	<span style="color: green;">// All IMG tags will be removed and all BR tags will be replaced with HR tags.</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">bool</span> ProcessDelegate(Element elem, Rule rule)
            	{
            		<span style="color: blue;">switch</span> (elem.TagName.ToLower())
            		{
            			<span style="color: blue;">case</span> "img":
            				elem.Remove();
            				<span style="color: blue;">break</span>;
            			<span style="color: blue;">case</span> "br":
            				elem.TagName = "hr";
            				<span style="color: blue;">return</span> <span style="color: blue;">false</span>;
            		}
            		<span style="color: blue;">return</span> <span style="color: blue;">true</span>;
            	}
            
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Create a new stream and load the HTML document into it.</span>
            		WebRequest myWebRequest = WebRequest.Create("http://www.afterlogic.com"); 
            		WebResponse myWebResponse = myWebRequest.GetResponse(); 
            		Stream receivingStream = myWebResponse.GetResponseStream();
            
            		Processor htmlProcessor = <span style="color: blue;">new</span> Processor();
            
            		<span style="color: green;">// Load the stream into Processor instance.</span>
            		htmlProcessor.LoadFromStream(receivingStream, Global.DefaultEncoding);
            
            		ProcessElementDelegate del = <span style="color: blue;">new</span> ProcessElementDelegate(ProcessDelegate);
            
            		RuleSet rules = <span style="color: blue;">new</span> RuleSet();
            
            		<span style="color: green;">// Add HTML processing rules.</span>
            		rules.AddTagProcessingCondition("img", <span style="color: blue;">null</span>);
            		rules.AddTagProcessingCondition("br", <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Process the delegate and the rules.</span>
            		htmlProcessor.Dom.Process(rules, del);
            
            		<span style="color: green;">// Save the resulting HTML to disk.</span>
            		FileStream outStream = <span style="color: blue;">new</span> FileStream(@"C:\afterlogic.html", FileMode.Create, FileAccess.Write, FileShare.None);
            
            		htmlProcessor.SaveToStream(outStream, Global.DefaultEncoding);
            		outStream.Close();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> System.Net
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' The delegate is used for processing of the HTML source.</span>
            	<span style="color: green;">' All IMG tags will be removed and all BR tags will be replaced with HR tags.</span>
            	<span style="color: blue;">Function</span> ProcessDelegate(<span style="color: blue;">ByVal</span> elem <span style="color: blue;">As</span> Element, <span style="color: blue;">ByVal</span> rule <span style="color: blue;">As</span> Rule) <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span>
            		<span style="color: blue;">Select</span> <span style="color: blue;">Case</span> (elem.TagName.ToLower())
            			<span style="color: blue;">Case</span> "img"
            				elem.Remove()
            			<span style="color: blue;">Case</span> "br"
            				elem.TagName = "hr"
            				<span style="color: blue;">Return</span> <span style="color: blue;">False</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">Select</span>
            		<span style="color: blue;">Return</span> <span style="color: blue;">True</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Function</span>
            
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Create a new stream and load the HTML document into it.</span>
            		<span style="color: blue;">Dim</span> myWebRequest <span style="color: blue;">As</span> WebRequest = WebRequest.Create("http://www.afterlogic.com")
            		<span style="color: blue;">Dim</span> myWebResponse <span style="color: blue;">As</span> WebResponse = myWebRequest.GetResponse()
            		<span style="color: blue;">Dim</span> receivingStream <span style="color: blue;">As</span> Stream = myWebResponse.GetResponseStream()
            
            		<span style="color: blue;">Dim</span> htmlProcessor <span style="color: blue;">As</span> <span style="color: blue;">New</span> Processor
            
            		<span style="color: green;">' Load the stream into Processor instance.</span>
            		htmlProcessor.LoadFromStream(receivingStream, Global.DefaultEncoding)
            
            		<span style="color: blue;">Dim</span> del <span style="color: blue;">As</span> ProcessElementDelegate = <span style="color: blue;">AddressOf</span> ProcessDelegate
            
            		<span style="color: blue;">Dim</span> rules <span style="color: blue;">As</span> <span style="color: blue;">New</span> RuleSet
            
            		<span style="color: green;">' Add HTML processing rules.</span>
            		rules.AddTagProcessingCondition("img", <span style="color: blue;">Nothing</span>)
            		rules.AddTagProcessingCondition("br", <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Process the delegate and the rules.</span>
            		htmlProcessor.Dom.Process(rules, del)
            
            		<span style="color: green;">' Save the resulting HTML to disk.</span>
            		<span style="color: blue;">Dim</span> outStream <span style="color: blue;">As</span> FileStream = <span style="color: blue;">New</span> FileStream("C:\afterlogic.html", FileMode.Create, FileAccess.Write, FileShare.None)
            
            		htmlProcessor.SaveToStream(outStream, Global.DefaultEncoding)
            		outStream.Close()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Html.RuleSet.AddTagProcessingRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,System.Boolean)">
            <summary>
            Adds a rule for changing attributes of HTML tags.
            </summary>
            <param name="tagName">The name of the tag for which to change the attributes. Case-insensitive.</param>
            <param name="tagAttrs">The list of attributes any of which must exist in the definition of <paramref name="tagName"/> tags
            in order to trigger the rule's action, or a null reference (<b>Nothing</b> in Visual Basic) to apply the rule for any tags with <paramref name="tagName"/> name
            (regardless of which attributes they have).</param>
            <param name="attrsToAdd">The list of attributes to be added to the
            <paramref name="tagName"/> tag. Can be a null reference if <paramref name="replaceMode"/> is <b>false</b>.</param>
            <param name="attrsToRemove">The list of attributes to be removed from the
            <paramref name="tagName"/> tag. Can be a null reference if <paramref name="replaceMode"/> is <b>false</b>.</param>
            <param name="replaceMode">If <b>true</b>, <paramref name="attrsToRemove"/> attributes will be replaced with <paramref name="attrsToAdd"/> ones; otherwise,
            <paramref name="attrsToRemove"/> attributes will simply be removed and <paramref name="attrsToAdd"/> ones will be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="tagName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string, or <paramref name="replaceMode"/> is <b>true</b> and <paramref name="attrsToAdd"/> does not match <paramref name="attrsToRemove"/>.
            </exception>
            <remarks>
            <para>The condition when this rule satisfies is the same as for <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule
            (created with <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> method). See <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic for the details
            which apply to the HTML processing rules of all types.</para>
            <para>Once the matching tag was found and the delegate (if any) returned <b>true</b>, the processing continues as follows
            (depending on <paramref name="replaceMode"/> value):</para>
            <list type="bullet">
            <item><description>If <paramref name="replaceMode"/> is <b>false</b>, MailBee searches for any <paramref name="attrsToRemove"/> attributes
            in the tag definition and removes them. <paramref name="attrsToAdd"/> attributes are added. Any of these actions are optional (and thus
            <paramref name="attrsToAdd"/> or <paramref name="attrsToRemove"/> can be empty).</description></item>
            <item><description>If <paramref name="replaceMode"/> is <b>true</b>, MailBee compares lengths of <paramref name="attrsToAdd"/> and <paramref name="attrsToRemove"/>
            collections. If they are equal, MailBee will then iterate through every attribute of the tag and if it finds such attribute in <paramref name="attrsToRemove"/>
            (let's say, at index <i>i</i>), it replaces <i>i</i>-th attribute in <paramref name="attrsToRemove"/> with
            <i>i</i>-th attribute in <paramref name="attrsToAdd"/>. In other words, attributes <i>A</i>, <i>B</i> and <i>C</i> will be replaced
            with <i>X</i>, <i>Y</i> and <i>Z</i> correspondingly.
            If lengths of <paramref name="attrsToAdd"/> and <paramref name="attrsToRemove"/> are not equal but
            <paramref name="attrsToAdd"/> length is 1, any attributes contained in <paramref name="attrsToRemove"/> will be replaced with
            the attribute in <paramref name="attrsToAdd"/>. In other words, attributes <i>A</i>, <i>B</i> and <i>C</i> will be replaced
            with <i>X</i>, <i>X</i> and <i>X</i> correspondingly.
            Otherwise (<paramref name="attrsToAdd"/> and/or <paramref name="attrsToRemove"/> is a null reference or their lengths do not match),
            MailBee will throw an exception.</description></item>
            </list>
            <note><paramref name="tagAttrs"/> collection is not related with <paramref name="attrsToAdd"/> or <paramref name="attrsToRemove"/> in any way.
            <paramref name="tagAttrs"/> only specifies attributes any of which the <paramref name="tagName"/> tag must have in order to satisfy the rule condition.
            However, <paramref name="tagAttrs"/> is not used later when the rule action begins.</note>
            </remarks>
            <example>
            This sample change the background color of the HTML page to black.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> System.Net;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Create new stream with an HTML markup.</span>
            		WebRequest myWebRequest = WebRequest.Create("http://www.afterlogic.com"); 
            		WebResponse myWebResponse = myWebRequest.GetResponse(); 
            		Stream receivingStream = myWebResponse.GetResponseStream();
            
            		Processor htmlProcessor = <span style="color: blue;">new</span> Processor();
            
            		htmlProcessor.LoadFromStream(receivingStream, Global.DefaultEncoding);
            
            		RuleSet rules = <span style="color: blue;">new</span> RuleSet();
            
            		<span style="color: green;">// Create new rule for processing.</span>
            		TagAttributeCollection attributes = <span style="color: blue;">new</span> TagAttributeCollection();
            		TagAttribute attribute = <span style="color: blue;">new</span> TagAttribute();
            		attribute.Definition = "bgcolor = 'black'";
            
            		attributes.Add(attribute);
            
            		rules.AddTagRemovalRule("link", <span style="color: blue;">null</span>);
            		rules.AddTagProcessingRule("body", <span style="color: blue;">null</span>, attributes, <span style="color: blue;">null</span>, <span style="color: blue;">false</span>);
            
            		<span style="color: green;">// Processing of the rule.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">null</span>));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> System.Net
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Create new stream with an HTML markup.</span>
            		<span style="color: blue;">Dim</span> myWebRequest <span style="color: blue;">As</span> WebRequest = WebRequest.Create("http://www.afterlogic.com")
            		<span style="color: blue;">Dim</span> myWebResponse <span style="color: blue;">As</span> WebResponse = myWebRequest.GetResponse()
            		<span style="color: blue;">Dim</span> receivingStream <span style="color: blue;">As</span> Stream = myWebResponse.GetResponseStream()
            
            		<span style="color: blue;">Dim</span> htmlProcessor <span style="color: blue;">As</span> <span style="color: blue;">New</span> Processor
            
            		htmlProcessor.LoadFromStream(receivingStream, Global.DefaultEncoding)
            
            		<span style="color: blue;">Dim</span> rules <span style="color: blue;">As</span> <span style="color: blue;">New</span> RuleSet
            
            		<span style="color: green;">' Create new rule for processing.</span>
            		<span style="color: blue;">Dim</span> attributes <span style="color: blue;">As</span> TagAttributeCollection = <span style="color: blue;">New</span> TagAttributeCollection
            		<span style="color: blue;">Dim</span> attribute <span style="color: blue;">As</span> TagAttribute = <span style="color: blue;">New</span> TagAttribute
            		attribute.Definition = "bgcolor = 'black'"
            
            		attributes.Add(attribute)
            
            		rules.AddTagRemovalRule("link", <span style="color: blue;">Nothing</span>)
            		rules.AddTagProcessingRule("body", <span style="color: blue;">Nothing</span>, attributes, <span style="color: blue;">Nothing</span>, <span style="color: blue;">False</span>)
            
            		<span style="color: green;">' Processing of the rule.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">Nothing</span>))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Html.RuleSet.AddTagRemovalRule(System.String,MailBee.Html.TagAttributeCollection)">
            <summary>
            Adds a rule for removing tags with the given name and attributes.
            </summary>
            <param name="tagName">The name of the tag to be removed. Case-insensitive. </param>
            <param name="tagAttrs">The list of attributes any of which must exist in the definition of <paramref name="tagName"/> tags
            in order to trigger the rule's action, or a null reference (<b>Nothing</b> in Visual Basic) to apply the rule for any tags with <paramref name="tagName"/> name
            (regardless of which attributes they have).</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="tagName"/> is a null reference (<b>Nothing</b> in Visual Basic)
            or an empty string.</exception>
            <remarks>
            <para>The condition when this rule satisfies is the same as for <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule
            (created with <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> method). See <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic for the details
            which apply to the HTML processing rules of all types.</para>
            <para>The action for this rule removes the matching tag with all its inner contents.</para>
            </remarks>
            <example>
            <code lang="C#">
            This sample removes all images from the HTML e-mail.
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load HTML message from file.</span>
            		MailMessage message = <span style="color: blue;">new</span> MailMessage();
            		message.LoadMessage(@"C:\message.eml");
            
            		Processor htmlProcessor = <span style="color: blue;">new</span> Processor();
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText;
            
            		RuleSet rules = <span style="color: blue;">new</span> RuleSet();
            
            		rules.AddTagRemovalRule("img", <span style="color: blue;">null</span>);
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Process the rule and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">null</span>));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Load HTML message from file.</span>
            		<span style="color: blue;">Dim</span> message <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		message.LoadMessage("C:\message.eml")
            
            		<span style="color: blue;">Dim</span> htmlProcessor <span style="color: blue;">As</span> <span style="color: blue;">New</span> Processor
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText
            
            		<span style="color: blue;">Dim</span> rules <span style="color: blue;">As</span> <span style="color: blue;">New</span> RuleSet
            
            		rules.AddTagRemovalRule("img", <span style="color: blue;">Nothing</span>)
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Process the rule and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">Nothing</span>))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Html.RuleSet.AddTagReplacementRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.Element)">
            <summary>
            Adds a rule for replacing certain tags with the specified replacement element.
            </summary>
            <param name="tagName">The name of the tag to be replaced. Case-insensitive.</param>
            <param name="tagAttrs">The list of attributes any of which must exist in the definition of <paramref name="tagName"/> tags
            in order to trigger the rule's action, or a null reference (<b>Nothing</b> in Visual Basic) to apply the rule for any tags with <paramref name="tagName"/> name
            (regardless of which attributes they have).</param>
            <param name="replacement">The element which will replace the original element.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="tagName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string,
            or <paramref name="replacement"/> is a null reference.
            </exception>
            <remarks>
            <para>The condition when this rule satisfies is the same as for <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule
            (created with <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> method). See <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic for the details
            which apply to the HTML processing rules of all types.</para>
            <para>The action for this rule removes the matching tag with all its inner contents and puts the replacement tag at the same
            position in the document.</para>
            </remarks>
            <example>
            This sample replaces all of tables with HTML comments in the HTML source.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load HTML message from file.</span>
            		MailMessage message = <span style="color: blue;">new</span> MailMessage();
            		message.LoadMessage(@"C:\message.eml");
            
            		Processor htmlProcessor = <span style="color: blue;">new</span> Processor();
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText;
            
            		RuleSet rules = <span style="color: blue;">new</span> RuleSet();
            
            		Element elem = <span style="color: blue;">new</span> Element();
            		elem.TagName = "!--table was here--";
            
            		rules.AddTagReplacementRule("table", <span style="color: blue;">null</span>, elem);
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Process the rule and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">null</span>));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Load HTML message from file.</span>
            		<span style="color: blue;">Dim</span> message <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		message.LoadMessage("C:\message.eml")
            
            		<span style="color: blue;">Dim</span> htmlProcessor <span style="color: blue;">As</span> <span style="color: blue;">New</span> Processor
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText
            
            		<span style="color: blue;">Dim</span> rules <span style="color: blue;">As</span> <span style="color: blue;">New</span> RuleSet
            
            		<span style="color: blue;">Dim</span> elem <span style="color: blue;">As</span> <span style="color: blue;">New</span> Element
            		elem.TagName = "!--table was here--"
            
            		rules.AddTagReplacementRule("table", <span style="color: blue;">Nothing</span>, elem)
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Process the rule and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">Nothing</span>))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Html.RuleSet.AddTagReplacementRule(System.String,MailBee.Html.TagAttributeCollection,System.String,System.Boolean)">
            <summary>
            Adds a rule for replacing certain tags with the specified replacement string.
            </summary>
            <param name="tagName">The name of the tag to be replaced. Case-insensitive.</param>
            <param name="tagAttrs">The list of attributes any of which must exist in the definition of <paramref name="tagName"/> tags
            in order to trigger the rule's action, or a null reference (<b>Nothing</b> in Visual Basic) to apply the rule for any tags with <paramref name="tagName"/> name
            (regardless of which attributes they have).</param>
            <param name="replacement">The string which will replace <see cref="P:MailBee.Html.Element.TagDefinition"/> or <see cref="P:MailBee.Html.Element.OuterHtml"/> of the the original element.</param>
            <param name="replaceTagDefinitionOnly">If <b>true</b>,
            only the tag definition (opening tag and closing tag if any) will be replaced; otherwise, the entire
            <see cref="T:MailBee.Html.Element"/> with all inner contents will be replaced.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="tagName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string,
            or <paramref name="replacement"/> is a null reference (or an empty string if <paramref name="replaceTagDefinitionOnly"/> is <b>true</b>).
            </exception>
            <remarks>
            <para>The condition when this rule satisfies is the same as for <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule
            (created with <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> method). See <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic for the details
            which apply to the HTML processing rules of all types.</para>
            <para>The action for this rule replaces the matching tag either completely (<see cref="P:MailBee.Html.Element.OuterHtml"/> gets replaced)
            or partially (only <see cref="P:MailBee.Html.Element.TagDefinition"/> gets replaced) depending on <paramref name="replaceTagDefinitionOnly"/> value.
            If <paramref name="replaceTagDefinitionOnly"/> is <b>true</b>, this rule simply renames the matching tags removing the original name and attributes with
            supplied ones while leaving <see cref="P:MailBee.Html.Element.InnerHtml"/> intact.</para>
            </remarks>
            <example>
            This sample replaces BR tag definitions with HR tag definitions.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load HTML message from file.</span>
            		MailMessage message = <span style="color: blue;">new</span> MailMessage();
            		message.LoadMessage(@"C:\message.eml");
            
            		Processor htmlProcessor = <span style="color: blue;">new</span> Processor();
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText;
            
            		RuleSet rules = <span style="color: blue;">new</span> RuleSet();
            
            		rules.AddTagReplacementRule("br", <span style="color: blue;">null</span>, "hr", <span style="color: blue;">true</span>);
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Process the rule and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">null</span>));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Load HTML message from file.</span>
            		<span style="color: blue;">Dim</span> message <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		message.LoadMessage("C:\message.eml")
            
            		<span style="color: blue;">Dim</span> htmlProcessor <span style="color: blue;">As</span> <span style="color: blue;">New</span> Processor
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText
            
            		<span style="color: blue;">Dim</span> rules <span style="color: blue;">As</span> <span style="color: blue;">New</span> RuleSet
            
            		rules.AddTagReplacementRule("br", <span style="color: blue;">Nothing</span>, "hr", <span style="color: blue;">True</span>)
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Process the rule and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">Nothing</span>))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Html.RuleSet.GetSafeHtmlRules">
            <summary>
            Returns a set of rules which specify removing of all potentially unsafe content from the HTML document.
            </summary>
            <returns>A <see cref="T:MailBee.Html.RuleSet"/> object containing the rules which cause all potentially unsafe content
            be removed during processing.</returns>
            <remarks>If you pass the returned object to <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> or <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method,
            it will perform the following actions:
            <list type="bullet">
            <item><description>remove &lt;SCRIPT&gt;...&lt;/SCRIPT&gt; tags with all their contents</description></item>
            <item><description>remove &lt;IFRAME&gt;...&lt;/IFRAME&gt; tags with all their contents</description></item>
            <item><description>remove &lt;BGSOUND&gt; tags</description></item>
            <item><description>remove &lt;EMBED&gt; tags</description></item>
            <item><description>remove &lt;FRAME&gt; tags</description></item>
            <item><description>remove &lt;FRAMESET&gt;...&lt;/FRAMESET&gt; tags with all their contents</description></item>
            <item><description>remove &lt;OBJECT&gt;...&lt;/OBJECT&gt; tags with all their contents</description></item>
            <item><description>remove &lt;APPLET&gt;...&lt;/APPLET&gt; tags with all their contents</description></item>
            <item><description>remove SRC/LOWSRC attributes from &lt;IMG&gt; and &lt;INPUT&gt; tags
            if these attributes contain scripts (i.e. the attribute value starts with 
            <i>javascript</i>, <i>vbscript</i> or <i>about</i>)</description></item>
            <item><description>remove HREF attribute from &lt;A&gt; tags if this attribute contains scripts</description></item>
            <item><description>remove contenteditable attribute from any tag</description></item>
            <item><description>remove data* (e.g. <i>dataSrc</i>) attributes from any tag</description></item>
            <item><description>remove on* (e.g. <i>onclick</i>) attributes from any tag</description></item>
            </list>
            </remarks>
            <example>
            This sample applies the safe-HTML rules to clean up the HTML message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load HTML message from file.</span>
            		MailMessage message = <span style="color: blue;">new</span> MailMessage();
            		message.LoadMessage(@"C:\message.eml");
            
            		Processor htmlProcessor = <span style="color: blue;">new</span> Processor();
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText;
            
            		<span style="color: green;">// Get rules for removing all uneasy things (such as scripts) from the body.</span>
            		RuleSet rules = RuleSet.GetSafeHtmlRules();
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">null</span>);
            
            		<span style="color: green;">// Process the rules and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">null</span>));
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main()
            		<span style="color: green;">' Load HTML message from file.</span>
            		<span style="color: blue;">Dim</span> message <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            		message.LoadMessage("C:\message.eml")
            
            		<span style="color: blue;">Dim</span> htmlProcessor <span style="color: blue;">As</span> <span style="color: blue;">New</span> Processor
            
            		htmlProcessor.Dom.OuterHtml = message.BodyHtmlText
            
            		<span style="color: green;">' Get rules for removing all uneasy things (such as scripts) from the body.</span>
            		<span style="color: blue;">Dim</span> rules <span style="color: blue;">As</span> RuleSet = RuleSet.GetSafeHtmlRules()
            
            		htmlProcessor.Dom.Process(rules, <span style="color: blue;">Nothing</span>)
            
            		<span style="color: green;">' Process the rules and display the results.</span>
            		Console.WriteLine(htmlProcessor.Dom.ProcessToString(rules, <span style="color: blue;">Nothing</span>))
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Html.RuleSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.Html.Rule"/> object at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index number of the attachment in the collection.</param>
            <value>
            An <see cref="T:MailBee.Html.Rule"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index does not exist.
            </exception>
        </member>
        <member name="T:MailBee.Html.ProcessElementDelegate">
            <summary>
            Defines the signature (the parameters and the return value) of the application-defined method
            which can be used as a filter which triggers when a rule condition gets satisfied
            and controls whether to perform the action defined by this rule.
            <seealso cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/>
            <seealso cref="T:MailBee.Html.RuleSet"/>
            <seealso cref="T:MailBee.Html.Rule"/>
            <seealso cref="T:MailBee.Html.TagRuleTypes"/>
            </summary>
            <param name="elem">The element which satisfied conditions of the rule.</param>
            <param name="rule">The rule which was satisfied.</param>
            <returns>Should return <b>true</b> to tell MailBee to apply the action associated with the rule for which this delegate was called, or <b>false</b>
            to ignore this rule and continue. Has no effect on rules of <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> type.</returns>
            <remarks>
            <para>This delegate defines a pattern for the callback method MailBee executes when it encounters
            any matches of HTML processing rule conditions with particular HTML elements. You can implement any
            custom processing in this method, modify the given HTML element, or decide whether the rule should be applied
            by returning <b>true</b> of <b>false</b>.</para>
            <para><see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method, while being running, executes a delegate method every
            time when any of the rules gets satisfied. This happens when the rule condition matches a particular
            HTML tag (for instance, you're using a rule which applies to all &lt;A&gt; tags with HREF attributes and
            <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method encountered such a tag).</para>
            <para><see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method then executes the delegate passing a reference to the matching
            <see cref="T:MailBee.Html.Element"/>. The delegate method should examine the supplied element and return either <b>true</b>
            to let MailBee apply the rule action to this element or <b>false</b> to ignore it.
            The return value of the delegate, however, does not affect whether <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method will
            continue processing of subsequent elements of the document. To make <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method completely stop processing
            of the current document, call <see cref="M:MailBee.Html.Element.Stop"/> method for the same object
            you earlier called <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> for.</para>
            <para>Rules of all types (defined in <see cref="T:MailBee.Html.TagRuleTypes"/> enumeration) cause the delegate be executed. Moreover,
            <see cref="F:MailBee.Html.TagRuleTypes.ProcessingCondition"/> rule does not perform any actions except calling the delegate itself.</para>
            </remarks>
            <example>
            The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic.
            </example>
        </member>
        <member name="T:MailBee.DnsMX.IMailBeeNegativeDnsResponseException">
            <summary>
            Defines properties which provide additional information regarding the negative response from the DNS server.
            </summary>
        </member>
        <member name="P:MailBee.DnsMX.IMailBeeNegativeDnsResponseException.ID">
            <summary>
            Gets a value of the DNS response ID as returned by the DNS server.
            </summary>
            <value>ID of the DNS response.</value>
        </member>
        <member name="P:MailBee.DnsMX.IMailBeeNegativeDnsResponseException.ResponseData">
            <summary>
            Gets a value of the entire DNS response data.
            </summary>
            <value>DNS response data.</value>
        </member>
        <member name="P:MailBee.DnsMX.IMailBeeNegativeDnsResponseException.ResponseCode">
            <summary>
            Gets a value of the DNS response code.
            </summary>
            <value>DNS response code.</value>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeDnsServerDisabledException">
            <summary>
            The exception that is thrown when there was an attempt to connect to the DNS server
            banned by MailBee because this server is down.
            </summary>
            <remarks>MailBee keeps track of DNS servers failures. If certain server fails,
            MailBee bans it for <see cref="P:MailBee.Global.DnsNextAttemptInterval"/> amount of time, and
            MailBee switches to the next server in turn. If all the available servers become banned,
            this exception is thrown for the last server.</remarks>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsServerDisabledException.Server">
            <summary>
            Gets a reference to the banned DNS server.
            </summary>
            <value>A reference to the banned DNS server.</value>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeInvalidBinaryResponseException">
            <summary>
            The exception that is thrown when the binary response from the server cannot be parsed. 
            </summary>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeInvalidBinaryResponseException.ResponseData">
            <summary>
            Gets a value of the entire DNS response data.
            </summary>
            <value>DNS response data.</value>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeDnsProtocolException">
            <summary>
            The exception that is thrown when either MailBee or a DNS server encounter DNS protocol error.
            </summary>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsProtocolException.HostName">
            <summary>
            Gets a value of a host name the DNS server was queried about.
            </summary>
            <value>A host name the DNS server was expected to resolve or lookup.</value>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeDnsQueryMismatchException">
            <summary>
            The exception that is thrown when the response got from the DNS server does not match
            the original query to the DNS server.
            </summary>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsQueryMismatchException.ActualID">
            <summary>
            Gets a value of the DNS response ID as returned by the DNS server.
            </summary>
            <value>ID of the DNS response.</value>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsQueryMismatchException.ExpectedID">
            <summary>
            Gets an ID value of the DNS query originally sent to the DNS server.
            </summary>
            <value>ID of the original DNS query.</value>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeDnsLackOfRecursionException">
            <summary>
            The exception that is thrown if the DNS server returned no records of A type for the given host name.
            </summary>
            <remarks>Due to distributed nature of Internet domains database, DNS servers are usually capable of
            immediate lookup of DNS records only for a limited subset of Internet domains. In order to lookup
            DNS records for domains belonging to external networks, a DNS server must be capable of DNS recursion
            which is a process of querying DNS server of higher level in the case when the current DNS server cannot find the
            requested resource in its local database. If the DNS server does not support recursion, it's
            practically useless since such server can serve only very restricted set of domains.</remarks>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeDnsProtocolNegativeResponseException">
            <summary>
            The exception that is thrown when the DNS server replied with non-successful (non-zero) response code.
            </summary>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsProtocolNegativeResponseException.ID">
            <summary>
            Gets a value of the DNS response ID as returned by the DNS server.
            </summary>
            <value>ID of the DNS response.</value>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsProtocolNegativeResponseException.ResponseData">
            <summary>
            Gets a value of the entire DNS response data.
            </summary>
            <value>DNS response data.</value>
        </member>
        <member name="P:MailBee.DnsMX.MailBeeDnsProtocolNegativeResponseException.ResponseCode">
            <summary>
            Gets a value of the DNS response code.
            </summary>
            <value>DNS response code.</value>
        </member>
        <member name="T:MailBee.DnsMX.MailBeeDnsNameErrorException">
            <summary>
            The exception that is thrown when the DNS server cannot find the queried domain name in
            the domains database.
            </summary>
        </member>
        <member name="T:MailBee.BounceMail.RecipientStatusCollection">
            <summary>
            Represents a collection of delivery status information objects for all recipients listed
            in the DSN message.
            <seealso cref="T:MailBee.BounceMail.RecipientStatus"/>
            </summary>
            <remarks>
            <para>Because an e-mail message can can be addressed to multiple recipients,
            a DSN message may contain more than one delivery status notification.</para>
            <para>To get this collection, use <see cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)">Notification.Process</see> method to obtain <see cref="T:MailBee.BounceMail.Result"/>
            object and then examine <see cref="P:MailBee.BounceMail.Result.Recipients"/> property.</para>
            </remarks>
        </member>
        <member name="P:MailBee.BounceMail.RecipientStatusCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.BounceMail.RecipientStatus"/> object at the specified
            zero-based index in the collection.
            <seealso cref="T:MailBee.BounceMail.RecipientStatus"/>
            </summary>
            <param name="index">The zero-based index number of the <see cref="T:MailBee.BounceMail.RecipientStatus"/>
            object in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index does not exist.
            </exception>
            <returns>An <see cref="T:MailBee.BounceMail.RecipientStatus"/> object having the specified zero-based index
            in the collection.</returns>
            <example>
            The example is available in <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> topic.
            </example>
        </member>
        <member name="T:MailBee.Security.SmimeResult">
            <summary>
            Provides access to the decrypted message, signature verification status and other
            values returned by the methods of <see cref="T:MailBee.Security.Smime"/> class.
            <seealso cref="T:MailBee.Security.Smime"/>
            </summary>
            <remarks>The following methods of <see cref="T:MailBee.Security.Smime"/> class return <see cref="T:MailBee.Security.SmimeResult"/> objects:
            <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/>, <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/>, <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/>.</remarks>
            <example>The examples are available in <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/>, <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/>, <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> topics.</example>
        </member>
        <member name="P:MailBee.Security.SmimeResult.DecryptedMessage">
            <summary>
            Gets a reference to the decrypted message.
            </summary>
            <value>A reference to the decrypted message (or to the source message if it was not encrypted),
            or a null reference (<b>Nothing</b> in Visual Basic) if the current <see cref="T:MailBee.Security.SmimeResult"/> object
            was returned by <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> method call.</value>
            <remarks>You should use <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/> or <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> methods
            to get <see cref="T:MailBee.Security.SmimeResult"/> object with <see cref="P:MailBee.Security.SmimeResult.DecryptedMessage"/> property set.</remarks>
        </member>
        <member name="P:MailBee.Security.SmimeResult.DecryptionCertificate">
            <summary>
            Gets a reference to the certificate which was used to decrypt the message.
            </summary>
            <value>A reference to the certificate used to decrypt the message,
            or a null reference (<b>Nothing</b> in Visual Basic) if the source message was not encrypted or
            if the current <see cref="T:MailBee.Security.SmimeResult"/> object was returned by <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> method call.</value>
            <remarks>You should use <see cref="M:MailBee.Security.Smime.Decrypt(MailBee.Mime.MailMessage)"/> or <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> methods
            to get <see cref="T:MailBee.Security.SmimeResult"/> object with <see cref="P:MailBee.Security.SmimeResult.DecryptionCertificate"/> property set.</remarks>
        </member>
        <member name="P:MailBee.Security.SmimeResult.SignatureCertificate">
            <summary>
            Gets a reference to the certificate extracted from the message signature.
            </summary>
            <value>A reference to the certificate extracted from the message signature,
            or a null reference (<b>Nothing</b> in Visual Basic) if the source message was not signed or
            if the current <see cref="T:MailBee.Security.SmimeResult"/> object was returned by <see cref="M:MailBee.Security.Smime.Encrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateCollection)"/> method call.</value>
            <remarks>You should use <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> or <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> methods
            to get <see cref="T:MailBee.Security.SmimeResult"/> object with <see cref="P:MailBee.Security.SmimeResult.SignatureCertificate"/> property set.</remarks>
        </member>
        <member name="P:MailBee.Security.SmimeResult.VerificationResult">
            <summary>
            Gets a set of flags which indicate reasons to treat the message signature as invalid.
            </summary>
            <value>A set of flags which indicate reasons to treat the message signature as invalid,
            or <see cref="F:MailBee.Security.MessageVerificationFlags.None"/> if the source message was not signed or
            if the current <see cref="T:MailBee.Security.SmimeResult"/> object was returned by <see cref="M:MailBee.Security.Smime.Encrypt(MailBee.Mime.MailMessage,MailBee.Security.CertificateCollection)"/> method call.</value>
            <remarks>You should use <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> or <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> methods
            to get <see cref="T:MailBee.Security.SmimeResult"/> object with <see cref="P:MailBee.Security.SmimeResult.VerificationResult"/> property set.</remarks>
        </member>
        <member name="T:MailBee.Security.AlgorithmCategory">
            <summary>
            Defines purposes of cryptographic algorithms.
            <seealso cref="P:MailBee.Security.Algorithm.Category"/>
            </summary>
            <remarks>
            <para>In WinAPI, algorithm category is known as algorithm class.</para>
            <para>To determine the purpose of a certain algorithm represented by <see cref="T:MailBee.Security.Algorithm"/> object, examine its <see cref="P:MailBee.Security.Algorithm.Category"/> property.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Security.AlgorithmCategory.DataEncryption">
            <summary>
            The purpose is data encryption, corresponds to ALG_CLASS_DATA_ENCRYPT in WinAPI. Typical examples are RC2 and RC4.
            </summary>
        </member>
        <member name="F:MailBee.Security.AlgorithmCategory.Hash">
            <summary>
            The purpose is creating an irreversible hash of some data, corresponds to ALG_CLASS_HASH in WinAPI. Typical examples are MD2, MD5, SHA-1, and MAC.
            </summary>
        </member>
        <member name="F:MailBee.Security.AlgorithmCategory.KeyExchange">
            <summary>
            The purpose is key exchange, corresponds to ALG_CLASS_KEY_EXCHANGE in WinAPI. A typical example is RSA_KEYX.
            </summary>
        </member>
        <member name="F:MailBee.Security.AlgorithmCategory.Signature">
            <summary>
            The purpose is creating a signature of some data, corresponds to ALG_CLASS_SIGNATURE in WinAPI. A typical example is RSA_SIGN.
            </summary>
        </member>
        <member name="F:MailBee.Security.AlgorithmCategory.Unknown">
            <summary>
            The purpose is unknown.
            </summary>
        </member>
        <member name="T:MailBee.Security.CertStoreType">
            <summary>
            Defines certificate store types.
            </summary>
            <remarks>
            To open a certificate store of a certain type, create <see cref="T:MailBee.Security.CertificateStore"/> object
            using <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String)"/> constructor or its overloads.
            </remarks>
        </member>
        <member name="F:MailBee.Security.CertStoreType.PublicFile">
            <summary>
            A file in SST or PKCS #7 format which contains certificates with public keys only.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertStoreType.System">
            <summary>
            Standard system store (stored in Windows registry, examples are <see cref="F:MailBee.Security.CertificateStore.Personal"/>, <see cref="F:MailBee.Security.CertificateStore.OtherPeople"/>, etc).
            May contain certificates with public and private keys.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertStoreType.Memory">
            <summary>
            Temporary memory storage. Often used to create a new store which can then be saved into a file.
            May contain certificates with public and private keys.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertStoreType.Ldap">
            <summary>
            A storage populated with certificates, CRLs, and CTLs obtained from the results of the query specified by an LDAP URL. 
            To perform write operations for the store, the URL must specify a BASE query with no filter and a single attribute.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertStoreType.PfxFile">
            <summary>
            A file in PFX (Personal Information Exchange) format which may contain certificates with public and private keys.
            PFX files can be protected with a password.
            </summary>
        </member>
        <member name="T:MailBee.Security.CertStoreFileType">
            <summary>
            Defines types of certificate store files.
            </summary>
            <remarks>
            To save a certificate store into a file of a certain type, use <see cref="M:MailBee.Security.CertificateStore.SaveToFile(System.String,MailBee.Security.CertStoreFileType,System.String)"/> method.
            </remarks>
        </member>
        <member name="F:MailBee.Security.CertStoreFileType.Sst">
            <summary>
            Serialized storage (.SST file). May contain certificates with public keys only.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertStoreFileType.P7b">
            <summary>
            PKCS #7 signed message (.P7B file). May contain certificates with public keys only.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertStoreFileType.Pfx">
            <summary>
            Personal Information Exchange (.PFX file). May contain certificates with public and private keys and can be protected with a password.
            </summary>
        </member>
        <member name="T:MailBee.Security.RegistryStoreLocation">
            <summary>
            Defines branches of the Windows registry where the system certificate stores can reside.
            <seealso cref="M:MailBee.Security.CertificateStore.RegisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)"/>
            <seealso cref="M:MailBee.Security.CertificateStore.UnregisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)"/>
            </summary>
            <remarks>
            <para>By default, MailBee uses system stores which reside in <see cref="F:MailBee.Security.RegistryStoreLocation.CurrentUser"/> branch.</para>
            <para>To open an existing system certificate store which resides in another branch of the registry, create <see cref="T:MailBee.Security.CertificateStore"/> object
            using <see cref="M:MailBee.Security.CertificateStore.#ctor(System.String,MailBee.Security.CertStoreType,System.String,MailBee.Security.CryptoServiceProvider,MailBee.Security.RegistryStoreLocation)"/> constructor.
            To create a store in the registry, use <see cref="M:MailBee.Security.CertificateStore.RegisterSystemStore(System.String,MailBee.Security.RegistryStoreLocation)"/> method.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Security.RegistryStoreLocation.CurrentUser">
            <summary>
            The store resides in "HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates" branch.
            </summary>
        </member>
        <member name="F:MailBee.Security.RegistryStoreLocation.LocalMachine">
            <summary>
            The store resides in "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SystemCertificates" branch.
            </summary>
        </member>
        <member name="F:MailBee.Security.RegistryStoreLocation.Users">
            <summary>
            The store resides in "HKEY_USERS\.DEFAULT\Software\Microsoft\SystemCertificates" branch.
            </summary>
        </member>
        <member name="T:MailBee.Security.CertificateFields">
            <summary>
            Defines certificate fields available for search with <see cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)"/> method.
            <seealso cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)"/>
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.Name">
            <summary>
            Corresponds to <see cref="P:MailBee.Security.Certificate.Name"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.Subject">
            <summary>
            Corresponds to <see cref="P:MailBee.Security.Certificate.Subject"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.Issuer">
            <summary>
            Corresponds to <see cref="P:MailBee.Security.Certificate.IssuerDetails"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.SerialNumber">
            <summary>
            Corresponds to <see cref="P:MailBee.Security.Certificate.SerialNumberString"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.PublicKey">
            <summary>
            Corresponds to <see cref="P:MailBee.Security.Certificate.PublicKeyString"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.EmailAddress">
            <summary>
            Corresponds to <see cref="P:MailBee.Security.Certificate.EmailAddress"/> field.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateFields.All">
            <summary>
            All of the fields listed above.
            </summary>
        </member>
        <member name="T:MailBee.Security.MessageVerificationFlags">
            <summary>
            Defines criteria of verification of e-mail message signatures.
            <seealso cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/>
            </summary>
            <remarks>
            <para><see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> and <see cref="M:MailBee.Security.Smime.DecryptAndVerify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags)"/> methods of <see cref="T:MailBee.Security.Smime"/> class
            can be used to verify message signatures accordingly <see cref="T:MailBee.Security.MessageVerificationFlags"/> criteria.
            These methods take <see cref="T:MailBee.Security.MessageVerificationFlags"/> value as one of the input parameters and return another <see cref="T:MailBee.Security.MessageVerificationFlags"/>
            value as one of the output parameters. The flags which have been set in the input value and remained in the output
            value indicate the verification tests which have not passed successfully.</para>
            <para>Thus, if certain <see cref="T:MailBee.Security.MessageVerificationFlags"/> was set in the input parameter, the corresponding test will be made
            and the resulting value will have the same flag set if the corresponding test failed. This means each flag
            has two meanings: as input parameter "what to test" and as output parameter "whether the test failed or succeeded".</para>
            <note>Testing whether the signature is <see cref="F:MailBee.Security.MessageVerificationFlags.Untrusted"/> actually checks if the signature certificate
            is issued by an organization (certification authority, CA) whose certificate is listed in the store of certification authorities. By default, they are
            <see cref="F:MailBee.Security.CertificateStore.IntermediateCA"/> and <see cref="F:MailBee.Security.CertificateStore.RootCA"/>. If the valid certificate of the CA is not there,
            the certificate of the signature is considered not trusted. You can use <i>extraStore</i> parameter of <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> method to
            extend the list of CA stores if the CA certificate of the message signature resides in another location.</note>
            </remarks>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.None">
            <summary>
            No criteria (the message signature successfully passed all the tests).
            </summary>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.MessageTampered">
            <summary>
            The signature or content of the message was altered.
            </summary>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.SignatureExpired">
            <summary>
            The signature of the message is expired.
            </summary>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.SignerAndSenderDoNotMatch">
            <summary>
            The e-mail address of the sender (<see cref="P:MailBee.Mime.EmailAddress.Email"/> value of <see cref="P:MailBee.Mime.MailMessage.From">MailMessage.From</see> object)
            does not match the <see cref="P:MailBee.Security.Certificate.EmailAddress"/> of the certificate used to sign the message.
            </summary>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.CertificateRevoked">
            <summary>
            The certificate used to sign the message is not valid anymore.
            </summary>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.Untrusted">
            <summary>
            The certificate used to sign the message is not trusted. In other words, it was issued by an organization
            which is not trusted itself because its certificate was not found in the certification authorities stores such as
            <see cref="F:MailBee.Security.CertificateStore.IntermediateCA"/> or <see cref="F:MailBee.Security.CertificateStore.RootCA"/>.
            </summary>
        </member>
        <member name="F:MailBee.Security.MessageVerificationFlags.All">
            <summary>
            All the criteria listed above.
            </summary>
        </member>
        <member name="T:MailBee.Security.CertFileType">
            <summary>
            Defines types of certificate files and data.
            <seealso cref="M:MailBee.Security.Certificate.SaveToFile(System.String,MailBee.Security.CertFileType,System.String)"/>
            </summary>
            <remarks>To open a certificate file of a certain type, use
            <see cref="M:MailBee.Security.Certificate.#ctor(System.String,MailBee.Security.CertFileType,System.String)">Certificate(string, CertFileType, string)</see>
            constructor. To open a certificate from memory, use
            <see cref="M:MailBee.Security.Certificate.#ctor(System.Byte[],MailBee.Security.CertFileType,System.String)">Certificate(byte[], CertFileType, string)</see>
            constructor. To save an existing certificate into a file of a certain type, use
            <see cref="M:MailBee.Security.Certificate.SaveToFile(System.String,MailBee.Security.CertFileType,System.String)"/> method.</remarks>
        </member>
        <member name="F:MailBee.Security.CertFileType.Cer">
            <summary>
            The certificate file or data in X.509 format (.CER file). May contain public key only.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertFileType.P7b">
            <summary>
            The certificate file or data in PKCS #7 format (.P7B file). May contain public key only.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertFileType.Pfx">
            <summary>
            The certificate file or data in Personal Information Exchange format (.PFX file). May contain both public and private keys.
            </summary>
        </member>
        <member name="T:MailBee.Security.CertificateValidationFlags">
            <summary>
            Defines flags indicating errors of certificate validation.
            <seealso cref="M:MailBee.Security.Certificate.Validate"/>
            <see cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/>
            </summary>
            <remarks>
            <para><see cref="M:MailBee.Security.Certificate.Validate"/> method returns <see cref="T:MailBee.Security.CertificateValidationFlags"/> value
            for the given certificate.</para>
            <para>When checking S/MIME signatures of e-mail messages, you can use <see cref="M:MailBee.Security.Smime.Verify(MailBee.Mime.MailMessage,MailBee.Security.MessageVerificationFlags,MailBee.Security.CertificateStore)"/> method
            which can perform complex verification of the message signature including validating its certificate.</para>
            <para>When making SSL connections to mail servers, you can set <see cref="P:MailBee.Security.ClientServerCertificates.AutoValidation"/> property
            to tell MailBee to automatically validate the server certificate accordingly the specified criteria and throw
            <see cref="T:MailBee.Security.MailBeeCertificateValidationException"/> if the validation process fails for any of the criteria.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.None">
            <summary>
            No errors.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotTimeValid">
            <summary>
            This certificate or one of the certificates in the certificate chain is not time-valid.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotTimeNested">
            <summary>
            Certificates in the chain are not properly time-nested.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsRevoked">
            <summary>
            Trust for this certificate or one of the certificates in the chain has been revoked.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotSignatureValid">
            <summary>
            The certificate or one of the certificates in the chain does not have a valid signature.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotValidForUsage">
            <summary>
            The certificate or the chain is not valid in its proposed usage.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsUntrustedRoot">
            <summary>
            The certificate or the chain is based on an untrusted root.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.RevocationStatusUnknown">
            <summary>
            The revocation status of the certificate or one of the certificates in the chain is unknown.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsCyclic">
            <summary>
            One of the certificates in the chain was issued by a certification authority which had certified the original certificate.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsPartialChain">
            <summary>
            The certificate chain is not complete.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotTimeValidCtl">
            <summary>
            A CTL used to create this chain was not time-valid.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotSignatureValidCtl">
            <summary>
            A CTL used to create this chain did not have a valid signature.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.IsNotValidForUsageCtl">
            <summary>
            A CTL used to create this chain is not valid for this usage.
            </summary>
        </member>
        <member name="F:MailBee.Security.CertificateValidationFlags.All">
            <summary>
            All the flags listed above.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeNoIP4HostFoundException">
            <summary>
            The exception that is thrown if no IPv4-compatible IP address was found for the given
            <see cref="T:System.Net.IPHostEntry"/> during the connecting to the remote host.
            </summary>
        </member>
        <member name="P:MailBee.MailBeeNoIP4HostFoundException.HostEntry">
            <summary>
            Gets a reference to the resolved host data.
            </summary>
            <value>The resolved host data which does not contain any IPv4-compatible IP addresses.</value>
        </member>
        <member name="P:MailBee.MailBeeNoIP4HostFoundException.Port">
            <summary>
            Gets the port number to which the attempt to connect to the remote host was made. 
            </summary>
            <value>An integer value which contains the port number of the failed connection.</value>
        </member>
        <member name="T:MailBee.MailBeeGetHostNameException">
            <summary>
            An abstract parent for all exceptions that are thrown if an attempt to resolve a host name
            through the call of a method of <see cref="T:System.Net.Dns"/> class failed.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeGetRemoteHostNameException">
            <summary>
            The exception that is thrown if an attempt to resolve the remote host name through the call
            of <see cref="T:System.Net.Dns"/> class methods failed.
            </summary>
            <remarks>When this exception is thrown, <see cref="P:System.Exception.InnerException"/> property always
            contains the original exception thrown by <see cref="T:System.Net.Dns"/> class.</remarks>
        </member>
        <member name="P:MailBee.MailBeeGetRemoteHostNameException.HostName">
            <summary>
            Gets the host name which was not resolved.
            </summary>
            <value>A string containing the host name which was not resolved.</value>
        </member>
        <member name="P:MailBee.MailBeeGetRemoteHostNameException.HostProtocol">
            <summary>
            Gets the type of application-level protocol for which the connection with this host
            would be used if it was established. 
            </summary>
            <value>Application-level protocol which was planned to be used if the connection
            with the host was established.</value>
        </member>
        <member name="T:MailBee.MailBeeGetLocalHostNameException">
            <summary>
            The exception that is thrown if an attempt to get the local host name through the call
            of <see cref="T:System.Net.Dns"/> class methods failed.
            </summary>
            <remarks>When this exception is thrown, <see cref="P:System.Exception.InnerException"/> property always
            contains the original exception thrown by <see cref="T:System.Net.Dns"/> class.</remarks>
        </member>
        <member name="T:MailBee.MailBeeAbortedByRemoteHostException">
            <summary>
            The exception that is thrown when the remote host suddenly closes the connection.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeSocketObjectDisposedException">
            <summary>
            The exception that is thrown when underlying socket operation unexpectedly throws
            <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <remarks>
            <para><see cref="P:System.Exception.InnerException"/> property contains the original
            <see cref="T:System.ObjectDisposedException"/>.</para>
            <para>This exception corresponds to <see cref="F:MailBee.ErrorCodes.SocketDisposed"/> error code.</para>
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketException">
            <summary>
            The exception that is thrown when underlying socket operation throws
            <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks><see cref="P:System.Exception.InnerException"/> property contains the original
            <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketTimeoutException">
            <summary>
            The exception that is thrown when underlying socket operation encounters a timeout and throws
            <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>This error corresponds to WSAETIMEDOUT Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketResetException">
            <summary>
            The exception that is thrown when the connection was forcibly closed by the remote host so that underlying socket implementation
            throws <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>
            <para>
            This error corresponds to WSAECONNABORTED Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.
            </para>
            <para>
            Getting this exception during TLS/SSL negotiation often indicates the server does not support
            the selected security protocol (see <see cref="T:MailBee.Security.SecurityProtocol"/> topic for details).
            </para>
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketAbortedException">
            <summary>
            The exception that is thrown when underlying socket operation receives abort request from the software
            on the local machine and throws <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>This error corresponds to WSAECONNABORTED Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketRefusedException">
            <summary>
            The exception that is thrown when underlying socket operation detects the remote machine refused
            the connection (which usually means no server program is running on the remote host)
            and throws <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>This error corresponds to WSAECONNREFUSED Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketHostDownException">
            <summary>
            The exception that is thrown when underlying socket operation detects a dead host
            and throws <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>This error corresponds to WSAEHOSTDOWN Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketHostNotFoundException">
            <summary>
            The exception that is thrown when underlying socket operation detects an unknown host
            and throws <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>This error corresponds to WSAHOST_NOT_FOUND Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.MailBeeSocketHostUnreachableException">
            <summary>
            The exception that is thrown when underlying socket operation detects there is no known route
            to the host and throws <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <remarks>This error corresponds to WSAEHOSTUNREACH Win32 error. <see cref="P:System.Exception.InnerException"/> property
            contains the original <see cref="T:System.Net.Sockets.SocketException"/>.</remarks>
        </member>
        <member name="T:MailBee.Mime.TimeStamp">
            <summary>
            Provides properties and methods for examining a time stamp representing a moment when the message
            was received by a mail gateway or a mail server.
            <seealso cref="T:MailBee.Mime.TimeStampCollection"/>
            </summary>
            <remarks>
            <para>When a mail message gets sent, it passes through one or more mail servers (gateways) during the delivery.
            Each mail server usually alters the message by adding a new Received header which contains the information about this server
            and time stamp of the moment when the message passed through this server. <see cref="T:MailBee.Mime.TimeStamp"/>
            class represents the information extracted from a single Received header during parsing the message.</para>
            <para>All <see cref="T:MailBee.Mime.TimeStamp"/> objects are stored in <see cref="T:MailBee.Mime.TimeStampCollection"/> which represents
            all Received headers of the message. You can access this collection using <see cref="P:MailBee.Mime.MailMessage.TimeStamps"/> property.</para>
            <para>The last <see cref="T:MailBee.Mime.TimeStamp"/> object in the collection usually represents the moment when the message was received
            by the destination mail server. MailBee uses this <see cref="T:MailBee.Mime.TimeStamp"/> object to obtain <see cref="P:MailBee.Mime.MailMessage.DateReceived"/> value.</para>
            <note>Some mail servers do not add Received headers. Thus, no time stamps will be available to the application. In this case, the only way to
            obtain the date when the message was received is to get <see cref="T:MailBee.ImapMail.Envelope"/> of the message using IMAP and get the date from
            <see cref="P:MailBee.ImapMail.Envelope.DateReceived"/> property. Also, even if Received header itself is available, some of its fields may be missing.</note>
            </remarks>
            <example>This sample loads the message from .EML file and displays all the values extracted from the time stamps of this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (TimeStamp ts <span style="color: blue;">in</span> msg.TimeStamps)
            {
            	Console.WriteLine(<span style="color: blue;">string</span>.Format("Bias: {0}\r\nBy: {1}\r\nDate: {2}\r\nDateAsString: {3}\r\nFor: {4}\r\nFrom: {5}\r\nID: {6}\r\nWith: {7}",
            		ts.Bias, ts.By, ts.Date.ToString(), ts.DateAsString, ts.For, ts.From, ts.ID, ts.With));
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> ts <span style="color: blue;">As</span> TimeStamp <span style="color: blue;">In</span> msg.TimeStamps
            	Console.WriteLine(<span style="color: blue;">String</span>.Format("Bias: {0}\r\nBy: {1}\r\nDate: {2}\r\nDateAsString: {3}\r\nFor: {4}\r\nFrom: {5}\r\nID: {6}\r\nWith: {7}", _
            		ts.Bias, ts.By, ts.Date.ToString(), ts.DateAsString, ts.For, ts.From, ts.ID, ts.With))
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.Bias">
            <summary>
            Gets the time offset in hours.
            </summary>
            <value>
            An integer number representing the timezone offset in hours.
            </value>
            <remarks>
            <para>For instance, for <i>Sat, 25 Dec 2004 09:59:47 -0500</i> date,
            the time offset is <i>-0500</i> and this property will return <i>-5</i> value.</para>
            <para>If the timezone contains not only hours but minutes as well (such as <i>-0530</i>),
            this property will still return <i>-5</i>. You can get the original timezone value from
            <see cref="P:MailBee.Mime.TimeStamp.DateAsString"/> property if you need to precisely handle timezone offset values.
            Anyway, <see cref="P:MailBee.Mime.TimeStamp.Date"/> property will always return the correct date (if the <see cref="P:MailBee.Mime.TimeStamp.DateAsString"/>
            itself if correct).
            </para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.By">
            <summary>
            Gets the name of the domain which received the message and added the time stamp.
            </summary>
            <value>
            A string containing the domain name taken from <i>By</i> field of the Received header, or an empty string if not available.
            </value>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.Date">
            <summary>
            Gets the date and time when the message was received by the mail server.
            <seealso cref="P:MailBee.Mime.TimeStamp.DateAsString"/>
            </summary>
            <value>The date and time when the message was received by the mail server.</value>
            <exception cref="T:MailBee.MailBeeDateParsingException">A date parsing error occurred.</exception>
            <remarks>
            To get this date as a string, use <see cref="P:MailBee.Mime.TimeStamp.DateAsString"/> property. <see cref="P:MailBee.Mime.TimeStamp.Date"/> property
            simply parses <see cref="P:MailBee.Mime.TimeStamp.DateAsString"/> value and returns it as <see cref="T:System.DateTime"/>.
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> class overview.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.DateAsString">
            <summary>
            Gets the string containing the date and time when the message was received by the mail server.
            <seealso cref="P:MailBee.Mime.TimeStamp.Date"/>
            </summary>
            <value>A string containing the date and time when the message was received by the mail server.</value>
            <remarks>
            <para>This value is returned in the same format as it is specified in the Received header itself (e.g. <i>Sat, 4 Dec 2004 09:59:47 -0500</i>).</para>
            <para>You can use <see cref="P:MailBee.Mime.TimeStamp.Date"/> property to get this date as <see cref="T:System.DateTime"/>.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.For">
            <summary>
            Gets the e-mail address of the recipient as a string.
            </summary>
            <value>
            A string containing the e-mail address of the intended recipient of the message, or an empty string if the recipient is not
            specified in the Received header.
            </value>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.From">
            <summary>
            Gets the name and/or IP address of the source host from which the message was sent.
            </summary>
            <value>
            Contains the sender's mail server domain name and/or IP address as specified in the Received header, or an empty string
            if <i>from</i> field is missing in the Received header.
            </value>
            <remarks>
            <para>Typical examples of this property value: <i>mail.domain.com ([1.2.3.4])</i>,
            <i>MYSERVER (mail.domain.com [1.2.3.4])</i>, etc. There is no strict format for this value.</para>
            <para>This value does not necessarily denote the original host which sent this message. Instead, it contains the name
            of the host which delivered the message to the host which added this time stamp to the message. If the delivery chain
            consists of many servers, <see cref="P:MailBee.Mime.TimeStamp.From"/> server simply denotes the previous link in the chain.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.ID">
            <summary>
            Gets the unique message identifier assigned by the mail server.
            </summary>
            <value>
            A string containing the unique message identifier assigned by the mail server, or an empty string if <i>id</i>
            field is missing in the Received header.
            </value>
            <remarks>This value is neither <see cref="P:MailBee.Mime.MailMessage.MessageID"/> nor Unique-ID assigned by the destination mail server
            to the message when it gets added into the mailbox. Also, if the message contains multiple Received headers, their
            <see cref="P:MailBee.Mime.TimeStamp.ID"/> values are usually different.</remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStamp.With">
            <summary>
            Gets the name of the protocol or service which was used to transmit the message.
            </summary>
            <value>
            A string containing the name of the mail transmitting protocol or service, or an empty string if
            <i>with</i> field is missing in the Received header.
            </value>
            <remarks>Typical examples of this property value: <i>SMTP</i>, <i>HTTP</i>, <i>MyMailServer ESMTP</i>, etc.</remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.TimeStamp"/> topic.
            </example>
        </member>
        <member name="T:MailBee.Mime.MessageBuilderConfig">
            <summary>
            Provides properties and methods which affect how the mail message is being built from 
            the <see cref="T:MailBee.Mime.MailMessage"/> object properties and collections into the message raw data (in MIME format). 
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Builder"/>
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <remarks>
            <para>This class allows the developer to tune how a new mail message will be generated
            from <see cref="T:MailBee.Mime.MailMessage"/> properties and collections. This may include
            automatic creation of plain-text version of the HTML body, setting <see cref="P:MailBee.Mime.MailMessage.Date"/> and <see cref="P:MailBee.Mime.MailMessage.MessageID"/>
            values, and much more. A new mail message is a message created with MailBee.</para>
            <para>To tune how an existing mail message should be being parsed, use <see cref="P:MailBee.Mime.MailMessage.Parser">MailMessage.Parser</see> property.
            An existing mail message is a message received from another source (such as file, stream, mail server, etc).</para>
            <para>A message can be both existing and new. For instance, if you have received a message from the mail server (this makes this message existing),
            modified it and are re-sending it again. This will produce a new message (although it's based on another existing message).</para>
            <note><see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members,
            use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.</note>
            </remarks>
            <example>
            The sample creates a new message, enables automatic creation of the plain-text version of the HTML body,
            and saves the message to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Tell MailBee to create plain-text version of the HMTL body.</span>
            msg.Builder.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain;
            
            <span style="color: green;">// Set the HTML body contents.</span>
            msg.BodyHtmlText = @"&lt;html&gt;&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;World&lt;/i&gt;!&lt;/html&gt;";
            
            <span style="color: green;">// Save the message into a folder. The plain-text version will be</span>
            <span style="color: green;">// created at this point along with generating MIME source of the message.</span>
            msg.SaveMessage(@"C:\Temp\TestMail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Tell MailBee to create plain-text version of the HMTL body.</span>
            msg.Builder.HtmlToPlainMode = HtmlToPlainAutoConvert.IfNoPlain
            
            <span style="color: green;">' Set the HTML body contents.</span>
            msg.BodyHtmlText = "&lt;html&gt;&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;World&lt;/i&gt;!&lt;/html&gt;"
            
            <span style="color: green;">' Save the message into a folder. The plain-text version will be</span>
            <span style="color: green;">' created at this point along with generating MIME source of the message.</span>
            msg.SaveMessage("C:\Temp\TestMail.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MessageBuilderConfig.Apply">
            <summary>
            Rebuilds the message accordingly the current settings.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <remarks>
            <para>The <see cref="P:MailBee.Mime.MailMessage.Builder"/> properties which affect building the message should be set BEFORE
            using this method. Otherwise, these options won't take effect.</para>
            <para>Normally, there is no need to call this method since MailBee automatically applies the current
            <see cref="P:MailBee.Mime.MailMessage.Builder"/> settings when building the MIME source of the message from its properties and collections.
            You should, however, call this method if you need to get the results of buiding the message without saving it into a file, sending it, etc.
            For instance, if you configured MailBee to generate plain-text version of the HTML body during building the message
            (actually, this convesion is turned on by default), you may want to get this plain-text version for some reason
            (i.e. you are not going to send the message now, you need this plain-text version itself). In this case, it's enough to call
            <see cref="M:MailBee.Mime.MessageBuilderConfig.Apply"/> method.</para>
            <para>Internally, <see cref="M:MailBee.Mime.MessageBuilderConfig.Apply"/> method just calls <see cref="M:MailBee.Mime.MailMessage.GetMessageRawData"/> method of the parent <see cref="T:MailBee.Mime.MailMessage"/>
            object but does not return any value.</para>
            </remarks>
            <example>This sample creates a new message, loads HTML message body from HTML file,
            and generates plain-text body from the HTML body. The sample demonstrates that the plain-text body
            won't be generated until the message gets built (which occurs either when the MIME source of the message
            needs to be generated or when <see cref="M:MailBee.Mime.MessageBuilderConfig.Apply"/> method is called).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message body from HTML file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadBodyText(@"C:\Docs\index.htm", MessageBodyType.Html);
            
            <span style="color: green;">// Show the empty plain-text message body.</span>
            Console.WriteLine(msg.BodyPlainText);
            Console.WriteLine("---------------------------------------");
            
            <span style="color: green;">// Build the message. Plain-text version will be created at this moment.</span>
            msg.Builder.Apply();
            
            <span style="color: green;">// Show the generated plain-text message body.</span>
            Console.WriteLine(msg.BodyPlainText);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message body from HTML file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadBodyText("C:\Docs\index.htm", MessageBodyType.Html)
            
            <span style="color: green;">' Show the empty plain-text message body.</span>
            Console.WriteLine(msg.BodyPlainText)
            Console.WriteLine("---------------------------------------")
            
            <span style="color: green;">' Build the message. Plain-text version will be created at this moment.</span>
            msg.Builder.Apply()
            
            <span style="color: green;">' Show the generated plain-text message body.</span>
            Console.WriteLine(msg.BodyPlainText)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.AddressDelimeter">
            <summary>
            Gets or sets the character to be used as a delimiter for e-mail addresses.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>An <see cref="T:MailBee.Mime.AddressDelimeterChar"/> value representing the delimiter character.</value>
            <remarks>
            <para>This property allows the developer to select a comma (",") or semicolon (";") character to be used
            as a delimiter for e-mail addresses when composing e-mail address strings consisting of multiple e-mail addresses.
            The default value is <see cref="F:MailBee.Mime.AddressDelimeterChar.Comma"/>.</para>
            <para>This property has no effect on parsing e-mail address strings. During parsing, MailBee accepts both comma and semicolon
            as valid delimiters.</para>
            <note><see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members,
            the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.</note>
            </remarks>
            <example>
            The sample creates a new message, sets two recipient e-mail addresses, and demonstrates the effect of changing the delimiter character.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add message recipients.</span>
            msg.To.Add("jdoe@domain.com");
            msg.To.Add("bill@domain.com");
            
            <span style="color: green;">// Set semicolon as a delimiter character.</span>
            msg.Builder.AddressDelimeter = AddressDelimeterChar.Semicolon;
            
            Console.WriteLine(msg.To.AsString);
            
            <span style="color: green;">// Set comma as a delimiter character.</span>
            msg.Builder.AddressDelimeter = AddressDelimeterChar.Comma;
            
            Console.WriteLine(msg.To.AsString);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add message recipients.</span>
            msg.To.Add("jdoe@domain.com")
            msg.To.Add("bill@domain.com")
            
            <span style="color: green;">' Set semicolon as a delimiter character.</span>
            msg.Builder.AddressDelimeter = AddressDelimeterChar.Semicolon
            
            Console.WriteLine(msg.To.AsString)
            
            <span style="color: green;">' Set comma as a delimiter character.</span>
            msg.Builder.AddressDelimeter = AddressDelimeterChar.Comma
            
            Console.WriteLine(msg.To.AsString)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainMode">
            <summary>
            Gets or sets the condition which triggers automatic conversion of the HTML body of the message into plain-text.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <value>
            An <see cref="T:MailBee.Mime.HtmlToPlainAutoConvert"/> value which specifies when the HTML body of the message should be
            automatically converted into the plain-text body. The default value is <see cref="F:MailBee.Mime.HtmlToPlainAutoConvert.IfNoPlain"/>.
            </value>
            <remarks>
            This property controls the condition of automatic converting of the HTML body of the message into plain-text. The original HTML version
            will not be removed anyway, the plain-text version will be added as alternative body.
            <note><see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members, 
            the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.</note>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.Mime.MessageBuilderConfig"/> topic.
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainOptions">
            <summary>
            Gets or sets the options which affect automatic conversion of the HTML body into plain-text.
            <seealso cref="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainMode"/>
            </summary>
            <value>
            A set of flags affecting how the HTML body of the message is
            converted into plain-text. The default value is <see cref="F:MailBee.Mime.HtmlToPlainConvertOptions.None"/>.
            </value>
            <remarks>
            This property is usually used in conjunction with <see cref="P:MailBee.Mime.MessageBuilderConfig.HtmlToPlainMode"/> property.
            <note><see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members,
            the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.RelatedFilesFolder">
            <summary>
            Gets or sets the path to the folder from which to take the files related to the message.
            <seealso cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/>
            <seealso cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/>
            </summary>
            <value>
            A string containing the path to the folder containing the files related to the message.
            The default value is an empty string which means the files will be searched in the
            current folder or in the folder where the HTML file being imported resides.
            </value>
            <remarks>
            <para>MailBee uses this property value when importing files denoted by relative paths only.
            For absolute paths, this property is NOT used. For instance,
            if certain &lt;IMG&gt; tag looks like <i>&lt;IMG SRC="C:\Pictures\1.jpg"&gt;</i>, <i>&lt;IMG SRC="file:///C:/Docs/picture.gif"&gt;</i> or
            <i>&lt;IMG SRC="http://www.company.com/logo.png"&gt;</i>, it contains absolute path, not relative. Examples of relative paths are
            <i>&lt;IMG SRC="logo.png"&gt;</i>, <i>&lt;IMG SRC="/picture.gif"&gt;</i>, <i>&lt;IMG SRC="subfolder\logo.png"&gt;</i>. In other words, a relative path
            does not contain the entire path. To constuct the entire path, the relative path needs to be prepended with certain base path.
            If this base path is not the current folder in your case, you need to specify it in this property.</para>
            <para><see cref="P:MailBee.Mime.MessageBuilderConfig.RelatedFilesFolder"/> may contain an URI (URL) as well as a local filesystem path.
            In this case, MailBee will assume that relative paths lead to the resources located on the web.</para>
            <para><see cref="P:MailBee.Mime.MessageBuilderConfig.RelatedFilesFolder"/> property will have effect only if it is set BEFORE related files get imported. The methods which may import them are
            <see cref="M:MailBee.Mime.MailMessage.LoadBodyText(System.String,MailBee.Mime.MessageBodyType,System.Text.Encoding,MailBee.Mime.ImportBodyOptions)"/> and <see cref="M:MailBee.Mime.MailMessage.ImportRelatedFiles(MailBee.Mime.ImportRelatedFilesOptions)"/>.</para>
            <note><see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members, 
            the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.</note>
            </remarks>
            <example>
            This sample creates a new mail message and loads the message body from HTML file.
            The body charset is set to <i>Windows-1252</i> and it's allowed to import related files from the local filesystem and from the web.
            For relative paths, <i>C:\Temp</i> location on the local filesystem will be used as a base path.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.Text;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            MailMessage newMsg = <span style="color: blue;">new</span> MailMessage();
            newMsg.Builder.RelatedFilesFolder = @"C:\Temp";
            newMsg.LoadBodyText(@"C:\Docs\TestMail.htm",
            	MessageBodyType.Html,
            	Encoding.GetEncoding("Windows-1252"),
            	ImportBodyOptions.ImportRelatedFiles | 
            	ImportBodyOptions.ImportRelatedFilesFromUris);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.Text
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Dim</span> newMsg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            newMsg.Builder.RelatedFilesFolder = "C:\Temp"
            newMsg.LoadBodyText("C:\Docs\TestMail.htm", _
            	MessageBodyType.Html, _
            	Encoding.GetEncoding("Windows-1252"), _
            	ImportBodyOptions.ImportRelatedFiles <span style="color: blue;">Or</span> _
            	ImportBodyOptions.ImportRelatedFilesFromUris)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.RemoveBccOnSend">
            <summary>
            Indicates whether BCC header should be removed from the message when it gets sent or submitted to the pickup folder.
            <seealso cref="P:MailBee.Mime.MailMessage.Bcc"/>
            </summary>
            <value>
            <b>true</b> if BCC header should be removed before sending the message; otherwise, <b>false</b>.
            The default value is <b>true</b>.
            </value>
            <remarks>
            The message will be delivered to BCC recipients in any case (regardless of <see cref="P:MailBee.Mime.MessageBuilderConfig.RemoveBccOnSend"/> value).
            <note><see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members,
            the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.SetDateOnSend">
            <summary>
            Indicates whether the current date and time should be added to the message at the moment of sending or submitting to the pickup folder.
            <seealso cref="P:MailBee.Mime.MailMessage.Date"/>
            </summary>
            <value>
            <b>true</b> if the current date and time should be put into Date header of the message
            at the very moment of sending or submitting to the pickup folder;
            otherwise, <b>false</b>. The default value is <b>true</b>.
            </value>
            <remarks>
            <see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own. To access its members, 
            the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.
            </remarks>
        </member>
        <member name="P:MailBee.Mime.MessageBuilderConfig.SetMessageIDOnSend">
            <summary>
            Indicates if Message-ID header should be set to a new unique value and added to the message at the moment of sending or submitting to the pickup folder.
            <seealso cref="P:MailBee.Mime.MailMessage.MessageID"/>
            </summary>
            <value>
            <b>true</b> if a new unique Message-ID should be added to the message at the moment of sending or submitting to the pickup folder;
            otherwise, <b>false</b>. The default value is <b>true</b>.
            </value>
            <remarks>
            <see cref="T:MailBee.Mime.MessageBuilderConfig"/> object cannot be used on its own.
            To access its members, the developer should use <see cref="P:MailBee.Mime.MailMessage.Builder">MailMessage.Builder</see> property.
            </remarks>
        </member>
        <member name="T:MailBee.Mime.AttachmentCollection">
            <summary>
            Provides properties and methods for managing and examining the collection of <see cref="T:MailBee.Mime.Attachment"/> objects.
            </summary>
            <remarks>
            This collection represents all attachments of the mail message.
            It's available through <see cref="P:MailBee.Mime.MailMessage.Attachments"/> property of <see cref="T:MailBee.Mime.MailMessage"/> object.
            <see cref="M:MailBee.Mime.Attachment.GetAttachmentsFromTnef"/> method can also return <see cref="T:MailBee.Mime.AttachmentCollection"/>.
            </remarks>
            <example>
            This sample loads the message from .EML file and saves all attachments to the disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// For every attachment from the attachments collection...</span>
            <span style="color: blue;">foreach</span> (Attachment attach <span style="color: blue;">in</span> msg.Attachments)
            {
            	<span style="color: green;">// Save the attachment to the file.</span>
            	attach.Save(@"C:\Temp\" + attach.Name, <span style="color: blue;">true</span>);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' For every attachment from the attachments collection...</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> attach <span style="color: blue;">As</span> Attachment <span style="color: blue;">In</span> msg.Attachments
            	<span style="color: green;">' Save the attachment to the file.</span>
            	attach.Save("C:\Temp\" &amp; attach.Name, <span style="color: blue;">True</span>)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(MailBee.Mime.Attachment)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the specified <see cref="T:MailBee.Mime.Attachment"/> object to the collection.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="attach">The <see cref="T:MailBee.Mime.Attachment"/> object which should be added.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="attach"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample loads two messages from .EML files, adds all attachments of the second message
            to the first message, and saves the first message (which now includes all the original plus added attachments) to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            MailMessage msg1 = <span style="color: blue;">new</span> MailMessage();
            msg1.LoadMessage(@"C:\Docs\TestMail1.eml");
            
            MailMessage msg2 = <span style="color: blue;">new</span> MailMessage();
            msg2.LoadMessage(@"C:\Docs\TestMail2.eml");
            
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; msg2.Attachments.Count; i++)
            {
            	msg1.Attachments.Add(msg2.Attachments[i]);
            }
            msg1.SaveMessage(@"C:\Temp\TestMail1.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> msg1 <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg1.LoadMessage("C:\Docs\TestMail1.eml")
            
            <span style="color: blue;">Dim</span> msg2 <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg2.LoadMessage("C:\Docs\TestMail2.eml")
            
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            <span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> msg2.Attachments.Count - 1
            	msg1.Attachments.Add(msg2.Attachments(i))
            <span style="color: blue;">Next</span>
            msg1.SaveMessage("C:\Temp\TestMail1.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(System.String)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the attachment from a file.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="filename">The absolute or relative path to the file which should be attached.</param>
            <returns><b>true</b> if the attachment was successfully added to the collection; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <example>This sample loads the message from .EML file and adds an attachment to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Add the attachment to the message.</span>
            msg.Attachments.Add(@"C:\Temp\my_photo.jpg");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Add the attachment to the message.</span>
            msg.Attachments.Add("C:\Temp\my_photo.jpg")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(System.String,System.String)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the attachment from a file.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="filename">The absolute or relative path to the file which should be attached.</param>
            <param name="targetFilename">The filename of the attachment as it should appear in the mail message.
            If a null reference (<b>Nothing</b> in Visual Basic), MailBee will take it from <paramref name="filename"/> parameter value.
            If an empty string, the attachment will have no name.</param>
            <returns><b>true</b> if the attachment was successfully added; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The <paramref name="targetFilename"/> parameter allows the developer to override the filename under which the attachment will be added to the collection.
            This is useful when the developer wants to add the attachment from a temporary file such as <i>ETQB4914.TMP</i> under meaningful name
            such as <i>report.doc</i>.
            </remarks>
            <example>This sample loads the message from .EML file and adds an attachment to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Add the attachment to the message.</span>
            msg.Attachments.Add(@"C:\Docs\pict1.tmp","map.jpg");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Add the attachment to the message.</span>
            msg.Attachments.Add("C:\Docs\pict1.tmp", "map.jpg")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(System.String,System.String,System.String)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the attachment from a file.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="filename">The absolute or relative path to the file which should be attached.</param>
            <param name="targetFilename">The filename of the attachment as it should appear in the mail message.
            If a null reference (<b>Nothing</b> in Visual Basic), MailBee will take it from <paramref name="filename"/> parameter value.
            If an empty string, the attachment will have no name.</param>
            <param name="contentID">The content identifier (CID) of the attachment (for inline attachments), or empty string
            if the attachment is not inline.</param>
            <returns><b>true</b> if the attachment was successfully added; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The <paramref name="targetFilename"/> parameter allows the developer to override the filename under which the attachment will be added to the collection.
            This is useful when the developer wants to add the attachment from a temporary file such as <i>ETQB4914.TMP</i> under meaningful name
            such as <i>report.doc</i>.
            </remarks>
            <example>This sample creates a new message and adds an attachment to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add the attachment to the message.</span>
            msg.Attachments.Add(@"C:\Temp\mypic.gif", "my.gif","&lt;00s4a8m8918c$5664i1b1$iw671781@tlffmdqjobxj&gt;");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add the attachment to the message.</span>
            msg.Attachments.Add("C:\Temp\mypic.gif", "my.gif", "&lt;00s4a8m8918c$5664i1b1$iw671781@tlffmdqjobxj&gt;")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(System.Byte[],System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the attachment from a byte array.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="data">The binary content of the attachment represented as a byte array.</param>
            <param name="targetFilename">The filename under which to add the attachment into the collection. If an empty string, the attachment will have no name.</param>
            <param name="contentID">The content identifier (CID) of the attachment (for inline attachments), or empty string
            if the attachment is not inline.</param>
            <param name="contentType">The content type of the attachment, or a null reference (<b>Nothing</b> in Visual Basic) to let MailBee
            detect the content type automatically.</param>
            <param name="customHeaders">The collection of the headers which should be included into the header section in additon to the standard attachment headers.
            If a null reference (<b>Nothing</b> in Visual Basic), no custom headers will be added.</param>
            <param name="options">The options which affect how the attachment is added.</param>
            <param name="mailEnc">The mail encoding to use when placing the attachment data into the message.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="data"/> or <paramref name="targetFilename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>This sample reads a file into memory buffer and adds it as attachment to the message.
            <note>In real-world apps, it's easier to use <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String)"/> overload to add an attachment from a file.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// Create new data buffer as binary array.</span>
            <span style="color: blue;">byte</span>[] fileData = <span style="color: blue;">null</span>;
            
            <span style="color: green;">// Open a file for reading.</span>
            <span style="color: blue;">using</span> (FileStream fs = <span style="color: blue;">new</span> FileStream(@"C:\Temp\1.gif", FileMode.Open))
            {
            	<span style="color: green;">// Set the size of the buffer.</span>
            	fileData = <span style="color: blue;">new</span> <span style="color: blue;">byte</span>[fs.Length];
            
            	<span style="color: green;">// Create new BinaryReader object.</span>
            	BinaryReader br = <span style="color: blue;">new</span> BinaryReader(fs);
            
            	<span style="color: green;">// Read binary data from file to buffer.</span>
            	br.Read(fileData, 0, fileData.Length);
            }
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add an attachment to the message.</span>
            msg.Attachments.Add(fileData, "my.gif", "&lt;12s4a8a8778c$5664i1b1$ir671781@tlffmdqjobxj&gt;", "image/gif", <span style="color: blue;">null</span>, NewAttachmentOptions.None, MailTransferEncoding.Base64);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' Create new data buffer as binary array.</span>
            <span style="color: blue;">Dim</span> fileData <span style="color: blue;">As</span> <span style="color: blue;">Byte</span>() = <span style="color: blue;">Nothing</span>
            
            <span style="color: green;">' Open file for read.</span>
            <span style="color: blue;">Dim</span> fs <span style="color: blue;">As</span> FileStream
            <span style="color: blue;">Try</span>
            	fs = <span style="color: blue;">New</span> FileStream("C:\Temp\1.gif", System.IO.FileMode.Open)
            
            	<span style="color: green;">' Set the size of the buffer.</span>
            	<span style="color: blue;">ReDim</span> fileData(fs.Length)
            
            	<span style="color: green;">' Create new BinaryReader object.</span>
            	<span style="color: blue;">Dim</span> br <span style="color: blue;">As</span> <span style="color: blue;">New</span> BinaryReader(fs)
            
            	<span style="color: green;">' Read binary data from file to buffer.</span>
            	br.Read(fileData, 0, fileData.Length)
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> fs <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span> fs.Close()
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            
            <span style="color: green;">' Create new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add an attachment to the message.</span>
            msg.Attachments.Add(fileData, "my.gif", "&lt;12s4a8a8778c$5664i1b1$ir671781@tlffmdqjobxj&gt;", "image/gif", <span style="color: blue;">Nothing</span>, NewAttachmentOptions.None, MailTransferEncoding.Base64)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(System.String,System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the attachment from a file.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="filename">The absolute or relative path to the file which should be attached.</param>
            <param name="targetFilename">The filename of the attachment as it should appear in the mail message.
            If a null reference (<b>Nothing</b> in Visual Basic), MailBee will take it from <paramref name="filename"/> parameter value.
            If an empty string, the attachment will have no name.</param>
            <param name="contentID">The content identifier (CID) of the attachment (for inline attachments), or empty string
            if the attachment is not inline.</param>
            <param name="contentType">The content type of the attachment, or a null reference (<b>Nothing</b> in Visual Basic) to let MailBee
            detect the content type automatically.</param>
            <param name="customHeaders">The collection of the headers which should be included into the header section in additon to the standard attachment headers.
            If a null reference (<b>Nothing</b> in Visual Basic), no custom headers will be added.</param>
            <param name="options">The options which affect how the attachment is added.</param>
            <param name="mailEnc">The mail encoding to use when placing the attachment data into the message.</param>
            <returns><b>true</b> if the attachment was successfully added to the collection; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The <paramref name="targetFilename"/> parameter allows the developer to override the filename under which the attachment will be added to the collection.
            This is useful when the developer wants to add the attachment from a temporary file such as <i>ETQB4914.TMP</i> under meaningful name
            such as <i>report.doc</i>.
            </remarks>
            <example>This sample creates a new message and adds an attachment to this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Create a new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Add the attachment to the message.</span>
            msg.Attachments.Add(@"C:\Docs\mypic.gif", "my.gif", "&lt;00s4a8m8918c$5664i1b1$iw671781@tlffmdqjobxj&gt;", "image/gif", <span style="color: blue;">null</span>, NewAttachmentOptions.None, MailTransferEncoding.Base64);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Create a new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Add the attachment to the message.</span>
            msg.Attachments.Add("C:\Docs\mypic.gif", "my.gif", "&lt;00s4a8m8918c$5664i1b1$iw671781@tlffmdqjobxj&gt;", "image/gif", <span style="color: blue;">Nothing</span>, NewAttachmentOptions.None, MailTransferEncoding.Base64)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(MailBee.Mime.MailMessage,System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the specified the <see cref="T:MailBee.Mime.MailMessage"/> as attachment (i.e. forwards that message as attachment).
            <seealso cref="T:MailBee.Mime.Attachment"/>
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="message">The mail message to be added as attachment.</param>
            <param name="targetFilename">The filename under which to add the attachment into the collection.
            If a null reference (<b>Nothing</b> in Visual Basic), MailBee will take it from the <see cref="P:MailBee.Mime.MailMessage.Subject"/>
            of the message being attached. If an empty string, the attachment will have no name.</param>
            <param name="contentID">The content identifier (CID) of the attachment (for inline attachments), or empty string
            if the attachment is not inline.</param>
            <param name="contentType">The content type of the attachment. If a null reference (<b>Nothing</b> in Visual Basic), <i>message/rfc822</i> value is used.</param>
            <param name="customHeaders">The collection of the headers which should be included into the header section in additon to the standard attachment headers.
            If a null reference (<b>Nothing</b> in Visual Basic), no custom headers will be added.</param>
            <param name="options">The options which affect how the attachment is added.</param>
            <param name="mailEnc">The mail encoding to use when placing the attachment data into the message.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            This method can be used to forward mail messages with another mail message. To forward a single message,
            it's easier to use <see cref="M:MailBee.Mime.MailMessage.ForwardAsAttachment"/> method.
            </remarks>
            <example>The following example demonstrates how a mail message can be attached to another mail message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage messageToAttach = <span style="color: blue;">new</span> MailMessage();
            messageToAttach.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Create new MailMessage object.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            <span style="color: green;">// Set plain text body of the message.</span>
            msg.BodyPlainText = "Hello, World!";
            
            <span style="color: green;">// Add the attachment to the message.</span>
            msg.Attachments.Add(messageToAttach, "1.eml", "", "message/rfc822", <span style="color: blue;">null</span>, NewAttachmentOptions.None, MailTransferEncoding.None);
            
            <span style="color: green;">// Save message to disk.</span>
            msg.SaveMessage(@"C:\Temp\TestEmail.eml");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> messageToAttach <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            messageToAttach.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Create new MailMessage object.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            <span style="color: green;">' Set plain text body of the message.</span>
            msg.BodyPlainText = "Hello, World!"
            
            <span style="color: green;">' Add the attachment to the message.</span>
            msg.Attachments.Add(messageToAttach, "1.eml", "", "message/rfc822", <span style="color: blue;">Nothing</span>, NewAttachmentOptions.None, MailTransferEncoding.None)
            
            <span style="color: green;">' Save message to disk.</span>
            msg.SaveMessage("C:\Temp\TestEmail.eml")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Add(System.IO.Stream,System.String,System.String,System.String,MailBee.Mime.HeaderCollection,MailBee.Mime.NewAttachmentOptions,MailBee.Mime.MailTransferEncoding)">
            <overloads>Adds an attachment to the collection.</overloads>
            <summary>
            Adds the attachment from a stream.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="stream">The data stream from which to read the binary content of the attachment.</param>
            <param name="targetFilename">The filename under which to add the attachment into the collection.</param>
            <param name="contentID">The content identifier (CID) of the attachment (for inline attachments), or empty string
            if the attachment is not inline.</param>
            <param name="contentType">The content type of the attachment, or a null reference (<b>Nothing</b> in Visual Basic) to let MailBee
            detect the content type automatically.</param>
            <param name="customHeaders">The collection of the headers which should be included into the header section in additon to the standard attachment headers.
            If a null reference (<b>Nothing</b> in Visual Basic), no custom headers will be added.</param>
            <param name="options">The options which affect how the attachment is added.</param>
            <param name="mailEnc">The mail encoding to use when placing the attachment data into the message.</param>
            <returns><b>true</b> if the attachment was successfully added to the collection; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="stream"/> or <paramref name="targetFilename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:MailBee.MailBeeStreamException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            The <paramref name="targetFilename"/> parameter allows the developer to override the filename under which the attachment will be added to the collection.
            This is useful if the attachment is being added from a temporary file such as <i>ETQB4914.TMP</i> under meaningful name
            such as <i>report.doc</i>.
            </remarks>
            <example>This sample opens a file stream, reads the file into the stream, adds the attachment from the stream, and saves the message to disk.
            <note>In real-world apps, it's easier to use <see cref="M:MailBee.Mime.AttachmentCollection.Add(System.String)"/> overload to add an attachment from a file.</note>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Open the file as stream for reading.</span>
            <span style="color: blue;">using</span> (FileStream fs = <span style="color: blue;">new</span> FileStream(@"C:\Docs\1.gif", FileMode.Open))
            {
            	<span style="color: green;">// Create new MailMessage object.</span>
            	MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            	<span style="color: green;">// Set plain text body of the message.</span>
            	msg.BodyPlainText = "Hello, World!";
            
            	<span style="color: green;">// Add the attachment to the message.</span>
            	msg.Attachments.Add(fs, "pic1.gif", "&lt;12s4a8a8778c$5664i1b1$ir671781@tlffmdqjobxj&gt;", "image/gif", <span style="color: blue;">null</span>, NewAttachmentOptions.None, MailTransferEncoding.Base64);
            
            	<span style="color: green;">// Save message to disk.</span>
            	msg.SaveMessage(@"C:\SavedMessage.eml");
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Open the file as stream for reading.</span>
            <span style="color: blue;">Dim</span> fs <span style="color: blue;">As</span> FileStream
            fs = <span style="color: blue;">Nothing</span>
            <span style="color: blue;">Try</span>
            	fs = <span style="color: blue;">New</span> FileStream("C:\Docs\1.gif", FileMode.Open)
            
            	<span style="color: green;">' Create new MailMessage object.</span>
            	<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            
            	<span style="color: green;">' Set plain text body of the message.</span>
            	msg.BodyPlainText = "Hello, World!"
            
            	<span style="color: green;">' Add the attachment to the message.</span>
            	msg.Attachments.Add(fs, "pic1.gif", "&lt;12s4a8a8778c$5664i1b1$ir671781@tlffmdqjobxj&gt;", "image/gif", <span style="color: blue;">Nothing</span>, NewAttachmentOptions.None, MailTransferEncoding.None)
            
            	<span style="color: green;">' Save message to disk.</span>
            	msg.SaveMessage("C:\SavedMessage.eml")
            <span style="color: blue;">Finally</span>
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> fs <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span> fs.Close()
            <span style="color: blue;">End</span> <span style="color: blue;">Try</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the attachment with the specified index from the collection.
            <seealso cref="M:MailBee.Mime.AttachmentCollection.Remove(System.String)"/>
            </summary>
            <param name="index">The zero-based index of the attachment to be removed.</param>
            <returns>
            <b>true</b> if the specified attachment was successfully removed from the collection; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
            <example>This sample loads the message from .EML file and removes the first attachment from the message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove the first attachment from the collection.</span>
            msg.Attachments.RemoveAt(0);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove the first attachment from the collection.</span>
            msg.Attachments.RemoveAt(0)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Clear">
            <summary>
            Clears the attachments collection.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <remarks>
            All <see cref="T:MailBee.Mime.Attachment"/> objects contained in the collection will be removed from the mail message.
            </remarks>
            <example>This sample loads the message from .EML file and clears the attachment collection.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove all the attachments from the message.</span>
            msg.Attachments.Clear();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove all the attachments from the message.</span>
            msg.Attachments.Clear()
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.Remove(System.String)">
            <summary>
            Removes the attachment having the specified unique name from the collection.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="filename">The unique name of the attachment (as returned by <see cref="P:MailBee.Mime.Attachment.Filename"/> property) to be removed.</param>
            <returns><b>true</b> if the specified attachment was successfully removed; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            The developer can also use <see cref="M:MailBee.Mime.AttachmentCollection.RemoveAt(System.Int32)"/> method to remove the attachment by its integer zero-based index in the collection.
            </remarks>
            <example>This sample loads the message from .EML file and removes the attachment with <i>me.jpg</i> filename.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Remove the specified attachment from the collection.</span>
            msg.Attachments.Remove("me.jpg");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Remove the specified attachment from the collection.</span>
            msg.Attachments.Remove("me.jpg")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.SaveAll(System.String)">
            <summary>
            Saves all attachments of the message to the specified folder.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="folderName">The absolute or relative path to the folder where to save the attachments.</param>
            <returns><b>true</b> if all attachments were successfully saved; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="folderName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>If the specified folder does not exist, MailBee will try to create it first.</para>
            <para>
            Attachments having duplicate filenames will be renamed and then saved.
            For instance, if there are three attachments with <i>my_cat.jpg</i> file name, they will be saved to
            disk under the following filenames:
            <list type="bullet">
            <item><description>my_cat.jpg</description></item>
            <item><description>my_cat[1].jpg</description></item>
            <item><description>my_cat[2].jpg</description></item>
            </list>
            For each attachment, <see cref="P:MailBee.Mime.Attachment.SavedAs"/> property can be examined to get the actual file path
            each file was saved under.
            </para>
            </remarks>
            <example>This sample loads the message from .EML file and saves all attachments into the specified folder.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Save all attachments into the folder.</span>
            msg.Attachments.SaveAll(@"C:\Temp");
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Save all attachments into the folder.</span>
            msg.Attachments.SaveAll("C:\Temp")
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.AttachmentCollection.SaveAll(System.String,System.Boolean)">
            <summary>
            Saves real (and, optionally, inline) attachments.
            <seealso cref="T:MailBee.Mime.Attachment"/>
            </summary>
            <param name="folderName">The absolute or relative path to the folder where to save the attachments.</param>
            <param name="ignoreInlineAttachments">If <b>true</b>, only real attachments (not inline) will be saved;
            otherwise, both inline and not inline attachments will be saved.</param>
            <returns><b>true</b> if all attachments were successfully saved; otherwise, <b>false</b>.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="folderName"/> is a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</exception>
            <exception cref="T:MailBee.MailBeeIOException">An error occurred and <see cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/> is <b>true</b>.</exception>
            <remarks>
            <para>If the specified folder does not exist, MailBee will try to create it first.</para>
            <para>
            Attachments having duplicate filenames will be renamed and then saved.
            For instance, if there are three attachments with <i>my_cat.jpg</i> filename, they will be saved to
            disk under the following filenames:
            <list type="bullet">
            <item><description>my_cat.jpg</description></item>
            <item><description>my_cat[1].jpg</description></item>
            <item><description>my_cat[2].jpg</description></item>
            </list>
            For each attachment, <see cref="P:MailBee.Mime.Attachment.SavedAs"/> property can be examined to get the actual file path
            each file was saved under.
            </para>
            <note>
            Inline attachments are usually used in the process of rendering the HTML body of the message. Thus,
            they are usually saved to disk by methods like <see cref="M:MailBee.Mime.MailMessage.GetHtmlAndSaveRelatedFiles"/>.
            The current method, on other hand, is useful when the developer wants to
            save only real attachments (files which were explicitly attached to the message by the sender) and skip
            any files which have already been rendered with the message body.
            </note>
            </remarks>
            <example>This sample loads the message from .EML file and saves all attachments to the specified folder.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Save all attachments to folder.</span>
            msg.Attachments.SaveAll(@"C:\Temp", <span style="color: blue;">false</span>);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Save all attachments to folder.</span>
            msg.Attachments.SaveAll("C:\Temp", <span style="color: blue;">False</span>)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.AttachmentCollection.LastResult">
            <summary>
            Gets a numeric code of the last error.
            <seealso cref="T:MailBee.ErrorCodes"/>
            <seealso cref="P:MailBee.Mime.AttachmentCollection.ThrowExceptions"/>
            </summary>
            <value>
            A code number of the last occurred error.
            </value>
            <value>An integer value containing a numeric code of the last error. The default value is 0.</value>
            <example>The example is available in <see cref="P:MailBee.Mime.MailMessage.ThrowExceptions"/> property documentation.
            </example>
        </member>
        <member name="P:MailBee.Mime.AttachmentCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Mime.Attachment"/> object at the specified zero-based index in the collection.
            <seealso cref="P:MailBee.Mime.AttachmentCollection.Item(System.String)"/>
            </summary>
            <param name="index">The zero-based index number of the attachment in the collection.</param>
            <value>
            An <see cref="T:MailBee.Mime.Attachment"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index does not exist.
            </exception>
            <example>This sample loads the message from .EML file and saves the first attachment to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// When there are any attachments...</span>
            <span style="color: blue;">if</span> (msg.Attachments.Count &gt; 0)
            {
            	<span style="color: green;">// Get the attachment by its index.</span>
            	Attachment attach = msg.Attachments[0];
            
            	<span style="color: green;">// Save the attachment to folder.</span>
            	attach.SaveToFolder(@"C:\Temp", <span style="color: blue;">true</span>);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' When there are any attachments...</span>
            <span style="color: blue;">If</span> msg.Attachments.Count &gt; 0 <span style="color: blue;">Then</span>
            	<span style="color: green;">' Get the attachment by its index.</span>
            	<span style="color: blue;">Dim</span> attach <span style="color: blue;">As</span> Attachment = msg.Attachments(0)
            
            	<span style="color: green;">' Save the attachment to the folder.</span>
            	attach.SaveToFolder("C:\Temp", <span style="color: blue;">True</span>)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.AttachmentCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MailBee.Mime.Attachment"/> object in the collection by the specified filename.
            <seealso cref="P:MailBee.Mime.AttachmentCollection.Item(System.Int32)"/>
            </summary>
            <param name="filename">The unique filename of the attachment in the collection (as returned by the <see cref="P:MailBee.Mime.Attachment.Filename"/> property).</param>
            <value>
            An <see cref="T:MailBee.Mime.Attachment"/> object having the specified unique filename, or a null reference (<b>Nothing</b> in Visual Basic)
            if the attachment with the specified unique filename does not exist in the collection.
            </value>
            <example>This sample loads the message from .EML file and saves the specified attachment to disk.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">// Load the message from file.</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            
            <span style="color: green;">// Access the attachment in the collection by the unique name.</span>
            Attachment attach = msg.Attachments["my_photo.jpg"];
            
            <span style="color: green;">// When there is an attachment...</span>
            <span style="color: blue;">if</span> (attach != <span style="color: blue;">null</span>)
            {
            	<span style="color: green;">// Save the attachment to folder.</span>
            	attach.SaveToFolder(@"C:\Temp", <span style="color: blue;">true</span>);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: green;">' Load the message from file.</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            
            <span style="color: green;">' Access the attachment in the collection by the unique name.</span>
            <span style="color: blue;">Dim</span> attach <span style="color: blue;">As</span> Attachment = msg.Attachments("my_photo.jpg")
            
            <span style="color: green;">' When there is an attachment...</span>
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> attach <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            	<span style="color: green;">' Save the attachment to the folder.</span>
            	attach.SaveToFolder("C:\Temp", <span style="color: blue;">True</span>)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.AttachmentCollection.ThrowExceptions">
            <summary>
            Gets or sets whether the object will throw exceptions on errors.
            <seealso cref="P:MailBee.Mime.AttachmentCollection.LastResult"/>
            </summary>
            <value>
            <b>true</b> if the <see cref="T:MailBee.Mime.Attachment"/> object will throw exceptions on errors; otherwise, <b>false</b>.
            The default value is <i>true</i>.
            </value>
            <remarks>
            If this property is set to <b>true</b> and an error occurs, an exception derived from <see cref="T:MailBee.MailBeeException"/> is thrown.
            Otherwise, the last occurred error is contained in the <see cref="P:MailBee.Mime.AttachmentCollection.LastResult"/> property. The list of
            all error codes is available in the <see cref="T:MailBee.ErrorCodes"/> class overview.
            </remarks>
            <example><see cref="P:MailBee.Mime.MailMessage.ThrowExceptions">MailMessage.ThrowExceptions</see> topic.</example>
        </member>
        <member name="T:MailBee.BounceMail.Result">
            <summary>
            Represents the result checking an e-mail message for delivery status notification (DSN) entries.
            <seealso cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/>
            </summary>
            <remarks>
            <para>Use <see cref="M:MailBee.BounceMail.DeliveryStatusParser.Process(MailBee.Mime.MailMessage)"/> method to get <see cref="T:MailBee.BounceMail.Result"/> object
            for a DSN message.</para>
            <para><see cref="T:MailBee.BounceMail.Result"/> object provides access to the <see cref="P:MailBee.BounceMail.Result.Recipients"/> collection of <see cref="T:MailBee.BounceMail.RecipientStatus"/> objects
            which represent all recipients listed in the DSN message. Iterate through this collection to examine
            the delivery status for every recipient's e-mail address.</para>
            <para>You can also use <see cref="P:MailBee.BounceMail.Result.OriginalMessage"/> property to get the e-mail message (usually, only its header)
            for which this DSN message was sent (i.e. you sent a message, it was not delivered to certain recipients and you got
            a DSN telling you that; the header of the original message you sent may be available in <see cref="P:MailBee.BounceMail.Result.OriginalMessage"/> property).</para>
            <para>Use <see cref="P:MailBee.BounceMail.Result.DsnStructure"/> property to examine the DSN attachment (if available). This is alternative approach
            to examining <see cref="P:MailBee.BounceMail.Result.Recipients"/> collection, it should only be used in special cases when you need to extract
            specific information from the DSN attachment (for instance, you can use <see cref="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID"/> property
            of <see cref="P:MailBee.BounceMail.Result.DsnStructure"/> object to match it to <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">Smtp.DeliveryNotification.TrackingID</see>
            of the e-mails you sent earlier).</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> topic.
            </example>
        </member>
        <member name="M:MailBee.BounceMail.Result.IsNotificationHeader">
            Check <link>MailMessage</link> header for meeting notification metabase keywords.
        </member>
        <member name="P:MailBee.BounceMail.Result.OriginalMessage">
            <summary>
            A reference to the original mail message for which this DSN message was sent.
            </summary>
            <value>A <see cref="T:MailBee.Mime.MailMessage"/> object containing the part of the original e-mail message which was attached to the DSN message,
            or a null reference (<b>Nothing</b> in Visual Basic) if the original e-mail message was not attached.</value>
            <remarks>
            <para>Some mail servers may attach the original message (usually, only the header) to the DSN, others don't.
            The default behavior is not defined.
            During sending the original message, you may request the mail server (to which you're sending your message)
            to include the entire message or its header in the bounce in case of non-delivery. You can use properties of
            <see cref="P:MailBee.SmtpMail.Smtp.DeliveryNotification"/> object to tune this behavior prior to sending the original message.</para>
            </remarks>
            <example>
            The example is available in <see cref="P:MailBee.BounceMail.Result.DsnStructure"/> topic.
            </example>
        </member>
        <member name="P:MailBee.BounceMail.Result.Recipients">
            <summary>
            The list of delivery status information objects representing each recipient in the DSN message.
            </summary>
            <value>
            The collection of the delivery status details for every recipient's e-mail address listed ih
            the DSN message. Never a null reference and never empty.
            </value>
            <example>
            The example is available in <see cref="T:MailBee.BounceMail.DeliveryStatusParser"/> topic.
            </example>
        </member>
        <member name="P:MailBee.BounceMail.Result.DsnStructure">
            <summary>
            <see cref="T:MailBee.BounceMail.DsnAttachment"/> object representing
            RFC 1894 DSN attachment to this DSN message.
            </summary>
            <value>A reference to the <see cref="T:MailBee.BounceMail.DsnAttachment"/> object containing the DSN attachment for the given
            DSN message, or a null reference (<b>Nothing</b> in Visual Basic) if the DSN attachment is missing in the DSN message.</value>
            <remarks>
            Most frequently used property of <see cref="T:MailBee.BounceMail.DsnAttachment"/> object is <see cref="P:MailBee.BounceMail.DsnAttachment.OriginalEnvelopeID"/> which
            allows you to get the tracking ID of the original e-mail message. You can assign tracking ID to outgoing messages
            using <see cref="P:MailBee.SmtpMail.DeliveryNotificationOptions.TrackingID">Smtp.DeliveryNotification.TrackingID</see> property.
            Then, when a bounce message arrives, you can easily match it to the original message you sent earlier using tracking ID
            provided that you create unique tracking ID for every message sent.
            </remarks>
            <example>
            <para>This sample displays the DSN attachment and the original message part of the message.
            </para>
            <para>
            It's assumed the e-mail samples are .EML files located in C:\Temp\IncomingMail folder.
            The template database is stored in C:\Temp\BounceDatabase\all.xml file.
            </para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.BounceMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		<span style="color: green;">// Load the templates database from file(s).</span>
            		DeliveryStatusParser parser = <span style="color: blue;">new</span> DeliveryStatusParser (@"C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">true</span>);
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\Temp\IncomingMail", "*.eml");
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Iterate through all messages in the folder.</span>
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			Result result = parser.Process(msg);
            
            			Console.WriteLine("\r\nProcessing of message with filename: " + file);
            
            			<span style="color: blue;">if</span> (result == <span style="color: blue;">null</span> || (result.OriginalMessage == <span style="color: blue;">null</span> &amp;&amp; result.DsnStructure == <span style="color: blue;">null</span>))
            			{
            				Console.WriteLine("------------------------------------------------------");
            				Console.WriteLine("This message doesn't have DSN &amp; original message part.");
            				Console.WriteLine("------------------------------------------------------");
            			}
            			<span style="color: blue;">else</span>
            			{
            				<span style="color: green;">// Get original e-mail message part.</span>
            				<span style="color: blue;">if</span> (result.OriginalMessage != <span style="color: blue;">null</span>)
            				{
            					Console.WriteLine("----------------- Original message part --------------");
            					Console.WriteLine(result.OriginalMessage.RawHeader);
            					Console.WriteLine(result.OriginalMessage.BodyPlainText);
            					Console.WriteLine("------------------------------------------------------");
            				}
            
            				<span style="color: green;">// Get DSN attachment part.</span>
            				<span style="color: blue;">if</span> (result.DsnStructure != <span style="color: blue;">null</span>)
            				{
            					Console.WriteLine("---------------------- DSN part ----------------------");
            					Console.WriteLine(result.DsnStructure.ToString());
            					Console.WriteLine("------------------------------------------------------");
            				}
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> Microsoft.VisualBasic
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.BounceMail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: green;">' Load the templates database from file(s).</span>
            		<span style="color: blue;">Dim</span> parser <span style="color: blue;">As</span> DeliveryStatusParser = <span style="color: blue;">New</span> DeliveryStatusParser("C:\Temp\BounceDatabase\all.xml", <span style="color: blue;">True</span>)
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\Temp\IncomingMail", "*.eml")
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage
            
            		<span style="color: green;">' Iterate through all messages in the folder.</span>
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			<span style="color: blue;">Dim</span> result <span style="color: blue;">As</span> Result = parser.Process(msg)
            
            			Console.WriteLine(ControlChars.CrLf &amp; "Processing of message with filename: " &amp; file)
            
            			<span style="color: blue;">If</span> result <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Or</span> (result.OriginalMessage <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">And</span> result.DsnStructure <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span>) <span style="color: blue;">Then</span>
            				Console.WriteLine("------------------------------------------------------")
            				Console.WriteLine("This message doesn't have DSN &amp; original message part.")
            				Console.WriteLine("------------------------------------------------------")
            			<span style="color: blue;">Else</span>
            				<span style="color: green;">' Get original e-mail message part.</span>
            				<span style="color: blue;">If</span> <span style="color: blue;">Not</span> result.OriginalMessage <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            					Console.WriteLine("----------------- Original message part --------------")
            					Console.WriteLine(result.OriginalMessage.RawHeader)
            					Console.WriteLine(result.OriginalMessage.BodyPlainText)
            					Console.WriteLine("------------------------------------------------------")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            				<span style="color: green;">' Get DSN attachment part.</span>
            				<span style="color: blue;">If</span> <span style="color: blue;">Not</span> result.DsnStructure <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            					Console.WriteLine("---------------------- DSN part ----------------------")
            					Console.WriteLine(result.DsnStructure.ToString())
            					Console.WriteLine("------------------------------------------------------")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageDirectSendDone"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.MailMessage">
            <summary>
            Gets the mail message which was sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.MailMessage"/> object representing the message which was sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.IntendedRecipients">
            <summary>
            Gets the list of recipients the message is addressed to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients to the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.SuccessfulRecipients">
            <summary>
            Gets the list of recipients the message was successfully delivered to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients which received the message.</value>
            <remarks>The list of recipients returned by this property indicates which
            recipients have been accepted by SMTP servers the message was submitted to.
            <note>Although a particular domain's SMTP server may successfully accept the message for delivery
            (and the recipients of this domain will be added into <see cref="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.SuccessfulRecipients"/>)
            list), it still does not guarantee the server itself will deliver the message to the
            recipients. Many servers accept non-existent recipient e-mail addresses when
            the message is being submitted, and then send bounced message back to the sender
            if certain e-mail address is invalid.</note></remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.FailedRecipients">
            <summary>
            Gets the list of recipients the message was not delivered to.
            </summary>
            <value>A reference to the <see cref="T:MailBee.Mime.EmailAddressCollection"/> object
            which contains the list of all recipients which did not receive the message.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.ActualSenderEmail">
            <summary>
            Gets the e-mail address of the actual sender of the message.
            </summary>
            <value>A string value containing the e-mail address of the actual sender of the message.</value>
            <remarks>Since <see cref="M:MailBee.SmtpMail.Smtp.Send"/> method can be used to send messages from an e-mail address different
            from the address specified by <see cref="P:MailBee.Mime.MailMessage.From"/> property,
            the developer can use <see cref="P:MailBee.SmtpMail.SmtpMessageDirectSendDoneEventArgs.ActualSenderEmail"/> property to obtain
            the actual address the message was sent from.</remarks>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone"/> event.
            </summary>
        </member>
        <member name="T:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.SmtpMail.Smtp.MessageMXLookupDone"/> event.
            </summary>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.MailMessage">
            <summary>
            Gets the mail message which is being sent.
            </summary>
            <value>A reference to the <see cref="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.MailMessage"/> object representing the message which is being sent.</value>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.IntendedDomains">
            <summary>
            Gets the list of domains of the message recipients.
            </summary>
            <value>A reference to the <see cref="T:System.Collections.Specialized.StringCollection"/> object
            which contains the list of all domains the message recipients e-mail addresses belong to.</value>
            <remarks>For instance, if the message is addressed to
            <i>jdoe@domain1.com, bill@domain2.com, kathy@domain2.com, sales@domain2.com, joe@subdomain.domain2.com</i>,
            the list of domains would be <i>domain1.com, domain2.com, subdomain.domain2.com</i>.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.SuccessfulDomains">
            <summary>
            Gets the list of domains MX lookup succeeded for.
            </summary>
            <value>A reference to the <see cref="T:System.Collections.Specialized.StringCollection"/> object
            which contains the list of all recipients domains, for which MX or A records have been found.</value>
            <remarks>If at least one MX or A record has been reported by the DNS server for the given domain,
            it means this domain probably has SMTP service running on the host specified by MX/A record,
            and can accept mail for delivery. Such domain will be placed into <see cref="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.SuccessfulDomains"/>
            list.</remarks>
        </member>
        <member name="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.FailedDomains">
            <summary>
            Gets the list of domains MX lookup failed for.
            </summary>
            <value>A reference to the <see cref="T:System.Collections.Specialized.StringCollection"/> object
            which contains the list of all recipients domains, for which SMTP servers have been found.</value>
            <remarks>If no MX or A records have been reported by the DNS server for the given domain,
            it means this domain cannot accept mail for delivery. Such domain will be placed into
             <see cref="P:MailBee.SmtpMail.SmtpMessageMXLookupDoneEventArgs.FailedDomains"/> list.
            </remarks>
        </member>
        <member name="T:MailBee.Security.Powerup">
            <summary>
            Provides access to <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property which unlocks advanced features of MailBee.Security namespace.
            </summary>
            <remarks>
            Some features of MailBee.Security namespace become available for use only if MailBee.NET Security Powerup is licensed
            (the license key is set in <see cref="P:MailBee.Security.Powerup.LicenseKey"/> property or in the .config file or in the registry).
            With Security Powerup unlocked, the developer can:
            <list type="bullet">
            <item><description>Assign client certificate when connecting to SSL-enabled mail server</description></item>
            <item><description>Examine the certificate of the SSL-enabled mail server</description></item>
            <item><description>Use S/MIME facilities, access certificates and certificate stores</description></item>
            <item><description>Impersonate another user account</description></item>
            </list>
            The only MailBee.Security feature which works even if Security Powerup is not licensed is the ability to
            connect to SSL-enabled mail servers. The application, however, will be unable to set or examine certificates
            involved in SSL handshake procedure.
            </remarks>
        </member>
        <member name="P:MailBee.Security.Powerup.LicenseKey">
            <summary>
            Assigns the license key.
            </summary>
            <value>A string value which contains the license key which unlocks Security Powerup.
            This property is write-only.</value>
            <exception cref="T:MailBee.MailBeeLicenseException">The license key is invalid.</exception>
            <remarks>
            <para>You can unlock Security Powerup by either setting this property to the valid
            permanent or trial license key or by adding MailBee.Security.Powerup.LicenseKey key
            in app.config, web.config, or machine.config file.</para>
            <para>This property is static (<b>Shared</b> in Visual Basic). If not set in the
            config file, this property must be set before any method or property or constructor
            which may check it gets called.</para>
            </remarks>
            <example>Setting this property and creating an instance of <see cref="T:MailBee.Security.Smime"/> class.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Powerup.LicenseKey = "Permanent or trial license key here";
            Smime sm = <span style="color: blue;">new</span> Smime();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            Powerup.LicenseKey = "Permanent or trial license key here"
            <span style="color: blue;">Dim</span> sm <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smime
            </code>
            </example>
            <example>Setting the license key in the config file and creating an instance of <see cref="T:MailBee.Security.Smime"/> class.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Smime sm = <span style="color: blue;">new</span> Smime();
            
            <span style="color: green;">// XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.Security.Powerup.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">// In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> sm <span style="color: blue;">As</span> <span style="color: blue;">New</span> Smime
            
            <span style="color: green;">' XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.Security.Powerup.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">' In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.Security.CertificateCollection">
            <summary>
            Provides methods and properties for accessing collections of <see cref="T:MailBee.Security.Certificate"/> objects.
            <seealso cref="T:MailBee.Security.CertificateStore"/>
            <seealso cref="T:MailBee.Security.Certificate"/>
            </summary>
            <remarks>
            <para><see cref="T:MailBee.Security.CertificateCollection"/> class represents a group of <see cref="T:MailBee.Security.Certificate"/> objects in MailBee.</para>
            <para>On other hand, <see cref="T:MailBee.Security.CertificateStore"/> class represents a group of certificates which exists on operating
            system level (for instance, certain certificate stores can be used by S/MIME functions to validate certificates)
            and has certain physical location: file store, system (Windows registry) store, memory store, etc. A certificate store,
            being an operating system level object, can be persistent and available to other applications while <see cref="T:MailBee.Security.CertificateCollection"/>
            is only used by those functions of MailBee which can accept or return values containing multiple <see cref="T:MailBee.Security.Certificate"/> objects.</para>
            <para>The contents of a certificate store can be represented as <see cref="T:MailBee.Security.CertificateCollection"/> though. You can use
            <see cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)">CertificateStore.FindCertificates</see> or
            <see cref="M:MailBee.Security.CertificateStore.GetAllCertificates">CertificateStore.GetAllCertificates</see> methods for this.</para>
            </remarks>
            <example>
            This sample opens "CA" system certificate store, finds all the certificates issued by Microsoft, creates a new certificate store,
            adds all the found certificates to this store and saves the store to disk as a file. The sample demonstrates using
            both <see cref="T:MailBee.Security.CertificateCollection"/> and <see cref="T:MailBee.Security.CertificateStore"/> classes.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(CertificateStore.IntermediateCA, CertStoreType.System, <span style="color: blue;">null</span>);
            CertificateCollection coll = store.FindCertificates("Microsoft", CertificateFields.Issuer);
            store = <span style="color: blue;">new</span> CertificateStore(<span style="color: blue;">null</span>, CertStoreType.Memory, <span style="color: blue;">null</span>);
            store.AddCertificates(coll, <span style="color: blue;">true</span>);
            store.SaveToFile(@"C:\Temp\microsoft_certificates.sst", CertStoreFileType.Sst, <span style="color: blue;">null</span>);
            </code>
            <code lang="VB">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("CA", CertStoreType.System, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> coll <span style="color: blue;">As</span> CertificateCollection = store.FindCertificates("microsoft", CertificateFields.Issuer)
            store = <span style="color: blue;">New</span> CertificateStore(<span style="color: blue;">Nothing</span>, CertStoreType.Memory, <span style="color: blue;">Nothing</span>)
            store.AddCertificates(coll, <span style="color: blue;">True</span>)
            store.SaveToFile("C:\Temp\microsoft_certificates.sst", CertStoreFileType.Sst, <span style="color: blue;">Nothing</span>)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CertificateCollection.Add(MailBee.Security.Certificate)">
            <summary>
            Adds the specified certificate to the collection.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="M:MailBee.Security.CertificateStore.AddCertificate(MailBee.Security.Certificate,System.Boolean)"/>
            </summary>
            <param name="cert">The certificate that should be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Security.CertificateCollection.Remove(MailBee.Security.Certificate)">
            <overloads>Removes the specified certificate from the collection.</overloads>
            <summary>
            Removes the specified <see cref="T:MailBee.Security.Certificate"/> from the collection.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="M:MailBee.Security.CertificateStore.DeleteCertificate(MailBee.Security.Certificate)"/>
            </summary>
            <param name="cert">The certificate that should be removed from the collection.</param>
            <returns><b>true</b> if the certificate was removed from the collection; <b>false</b> if the certificate is not contained in the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>The sample removes all the certificates without private key from the collection.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(@"C:\Temp\certificate.pfx", CertStoreType.PfxFile, "password");
            CertificateCollection col = store.GetAllCertificates();
            
            <span style="color: green;">// Remove all certificates which don't have any private key</span>
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = col.Count - 1; i &gt;= 0 ; i--)
            {
            	<span style="color: blue;">if</span> (!col[i].HasPrivateKey)
            	{
            		col.Remove(col[i]);
            	}
            }
            <span style="color: green;">// Save changes to disk</span>
            <span style="color: blue;">if</span> (col.Count &gt; 0)
            {
            	CertificateStore newStore = <span style="color: blue;">new</span> CertificateStore();
            	newStore.AddCertificates(col, <span style="color: blue;">true</span>);
            	newStore.SaveToFile(@"C:\Temp\private.sst", CertStoreFileType.Sst, <span style="color: blue;">null</span>);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("C:\Temp\certificate.pfx", CertStoreType.PfxFile, "password")
            <span style="color: blue;">Dim</span> col <span style="color: blue;">As</span> CertificateCollection = store.GetAllCertificates()
            
            <span style="color: green;">' Remove all certificates that do not have any private key</span>
            <span style="color: blue;">For</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span> = col.Count - 1 <span style="color: blue;">To</span> 0 <span style="color: blue;">Step</span> -1
            	<span style="color: blue;">If</span> <span style="color: blue;">Not</span> col(i).HasPrivateKey <span style="color: blue;">Then</span>
            		col.Remove(col(i))
            	<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            <span style="color: blue;">Next</span>
            
            <span style="color: green;">' Save changes to disk</span>
            <span style="color: blue;">If</span> col.Count &gt; 0 <span style="color: blue;">Then</span>
            	<span style="color: blue;">Dim</span> newStore <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore
            	newStore.AddCertificates(col, <span style="color: blue;">True</span>)
            	newStore.SaveToFile("C:\Temp\private.sst", CertStoreFileType.Sst, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.Security.CertificateCollection.Remove(System.String)">
            <summary>
            Removes the certificate with the specified name of the entity this certificate was issued to.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="M:MailBee.Security.CertificateStore.DeleteCertificate(MailBee.Security.Certificate)"/>
            </summary>
            <param name="issuedTo">The name of the person/organization this certificate was issued to.</param>
            <returns><b>true</b> if at least one item was removed from the collection;
            <b>false</b> if the collection does not contain any certificates with the given principal name.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="issuedTo"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>All the certificates having <see cref="P:MailBee.Security.Certificate.IssuedTo"/> equal to <paramref name="issuedTo"/>
            will be removed from the collection. The string comparison is case-insensitive (no difference between
            <i>abc</i> and <i>ABC</i>).</remarks>
        </member>
        <member name="M:MailBee.Security.CertificateCollection.Contains(MailBee.Security.Certificate)">
            <summary>
            Checks whether the specified certificate is contained in the collection or not.
            <seealso cref="T:MailBee.Security.Certificate"/>
            <seealso cref="M:MailBee.Security.CertificateStore.FindCertificates(System.String,MailBee.Security.CertificateFields)"/>
            </summary>
            <param name="cert">The certificate that should be checked.</param>
            <returns><b>true</b> if the certificate was found in the collection; otherwise, <b>false</b>.</returns>
            <example>This sample adds the certificate to the collection if it's not already present there.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">using</span> MailBee.Security;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            Certificate cert = <span style="color: blue;">new</span> Certificate(@"C:\Temp\certificate.cer", CertFileType.Cer, <span style="color: blue;">null</span>);
            CertificateStore store = <span style="color: blue;">new</span> CertificateStore(@"C:\Temp\my_store.p7b", CertStoreType.PublicFile, <span style="color: blue;">null</span>);
            CertificateCollection collection = store.GetAllCertificates();
            
            <span style="color: green;">// Add certificate to the collection if it doesn't contain such certificate</span>
            <span style="color: blue;">if</span> (!collection.Contains(cert))
            {
            	store.AddCertificate(cert, <span style="color: blue;">false</span>);
            }
            store.SaveToFile(@"C:\Temp\my_store.p7b", CertStoreFileType.P7b, <span style="color: blue;">null</span>);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespace at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee.Security
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> cert <span style="color: blue;">As</span> Certificate = <span style="color: blue;">New</span> Certificate("C:\Temp\certificate.cer", CertFileType.Cer, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> store <span style="color: blue;">As</span> CertificateStore = <span style="color: blue;">New</span> CertificateStore("C:\Temp\my_store.p7b", CertStoreType.PublicFile, <span style="color: blue;">Nothing</span>)
            <span style="color: blue;">Dim</span> Collection <span style="color: blue;">As</span> CertificateCollection = store.GetAllCertificates()
            
            <span style="color: green;">' Add certificate to the collection if it doesn't contain such certificate</span>
            <span style="color: blue;">If</span> <span style="color: blue;">Not</span> Collection.Contains(cert) <span style="color: blue;">Then</span>
            	store.AddCertificate(cert, <span style="color: blue;">False</span>)
            <span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            store.SaveToFile("C:\Temp\my_store.p7b", CertStoreFileType.P7b, <span style="color: blue;">Nothing</span>)
            </code>
            </example>
        </member>
        <member name="P:MailBee.Security.CertificateCollection.Item(System.Int32)">
            <summary>
            Gets the certificate at the specified zero-based index.
            <seealso cref="T:MailBee.Security.Certificate"/>
            </summary>
            <param name="index">The zero-based index of the certificate in the collection.</param>
            <value>A <see cref="T:MailBee.Security.Certificate"/> object having the specified zero-based index in the collection.</value>
            <example>The example is available in <see cref="M:MailBee.Security.CertificateCollection.Remove(MailBee.Security.Certificate)"/> method documentation.</example>
        </member>
        <member name="P:MailBee.Security.CertificateCollection.Item(System.String)">
            <summary>
            Gets the certificate by the name of the principal to which this certificate was issued.
            <seealso cref="T:MailBee.Security.Certificate"/>
            </summary>
            <param name="issuedTo">The name of the entity the certificate was issued to.</param>
            <value>A <see cref="T:MailBee.Security.Certificate"/> object corresponding to the given principal name,
            or a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate was found.</value>
            <remarks>
            <para>
            This method compares <paramfer name="issuedTo"/> value with <see cref="P:MailBee.Security.Certificate.IssuedTo"/> values
            of the certificates in the collection. The string comparison is case-insensitive (no difference between
            <i>abc</i> and <i>ABC</i>).</para>
            <para>If there are more than one certificate having the specified principal name,
            only the first certificate found will be returned.</para>
            </remarks>
        </member>
        <member name="T:MailBee.TopLevelProtocolType">
            <summary>
            Defines types of MailBee main protocols.
            </summary>
            <remarks>
            <para>This enumeration is mainly used as the type of <b>Protocol</b> property
            of many network-specific exceptions and events
            (such as <see cref="P:MailBee.ConnectedEventArgs.Protocol">ConnectedEventArgs.Protocol</see>).</para>
            <para>The value of such a property indicates the context in which
            the corresponding exception or event has occurred. This provides the developer with
            additional information on the exception or event.</para>
            <para>For instance, the developer implementing sending mail via <see cref="T:MailBee.SmtpMail.Smtp"/>
            component can read this property in the exception handler in order to determine whether
            the exception was caused by SMTP connection error or by DNS/MX error (or even by POP3 error
            during POP-before-SMTP authentication).</para>
            </remarks>
        </member>
        <member name="F:MailBee.TopLevelProtocolType.Unknown">
            <summary>
            The current context is unknown.
            </summary>
        </member>
        <member name="F:MailBee.TopLevelProtocolType.Dns">
            <summary>
            The current context is DNS.
            </summary>
        </member>
        <member name="F:MailBee.TopLevelProtocolType.Smtp">
            <summary>
            The current context is SMTP.
            </summary>
        </member>
        <member name="F:MailBee.TopLevelProtocolType.Pop3">
            <summary>
            The current context is POP3.
            </summary>
        </member>
        <member name="F:MailBee.TopLevelProtocolType.Imap">
            <summary>
            The current context is IMAP.
            </summary>
        </member>
        <member name="T:MailBee.Mime.MailMessageCollection">
            <summary>
            Provides properties and methods for managing and examining the collection of <see cref="T:MailBee.Mime.MailMessage"/> objects.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <remarks>This collection is not read-only. You can add messages to this collection using <see cref="M:MailBee.Mime.MailMessageCollection.Add(MailBee.Mime.MailMessage)"/> method
            and reverse the collection using <see cref="M:MailBee.Mime.MailMessageCollection.Reverse"/> method. <see cref="M:MailBee.Mime.MailMessageCollection.Reverse"/> method is useful if you have received a list
            of messages from the mail server (for instance, using <see cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/> method) and new messages
            appear last in this list. To make newer messages be listed first, call <see cref="M:MailBee.Mime.MailMessageCollection.Reverse"/> on the returned collection.</remarks>
            <example> This sample loads the message from .EML file and adds this message to a new collection.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            MailMessageCollection msgColl = <span style="color: blue;">new</span> MailMessageCollection();
            msgColl.Add(msg);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">Dim</span> msgColl = <span style="color: blue;">New</span> MailMessageCollection
            msgColl.Add(msg)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Mime.MailMessageCollection.Add(MailBee.Mime.MailMessage)">
            <overloads>Adds the specified <see cref="T:MailBee.Mime.MailMessage"/> or <see cref="T:MailBee.Mime.MailMessageCollection"/> object to the collection.</overloads>
            <summary>
            Adds the specified <see cref="T:MailBee.Mime.MailMessage"/> object to the collection.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="message">The <see cref="T:MailBee.Mime.MailMessage"/> object to be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>The example is available in <see cref="T:MailBee.Mime.MailMessageCollection"/> topic.</example>
        </member>
        <member name="M:MailBee.Mime.MailMessageCollection.Add(MailBee.Mime.MailMessageCollection)">
            <summary>
            Adds the contents of the specified <see cref="T:MailBee.Mime.MailMessageCollection"/> the current collection.
            </summary>
            <param name="messages">The <see cref="T:MailBee.Mime.MailMessageCollection"/> object whose items should be added to the collection.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="messages"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:MailBee.Mime.MailMessageCollection.Reverse">
            <summary>
            Reverses the order of the list of the messages that are stored in the collection.
            <seealso cref="M:MailBee.Pop3Mail.Pop3.DownloadMessageHeaders(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <remarks>For instance, this method can be used to display the list of message received from mail server
            in descending order (from new to old ones). By default, mail server returns messages in ascending order (from old to new ones).
            This method allows the developer to have this collection re-sorted in descending order.</remarks>
            <example> The sample creates new collection, loads 4 messages from .EML files,
            adds these messages to the collection, and displays the subjects of these messages. Then, the collection is
            reversed and the subjects of the messages are shown again (in reverse order).
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessageCollection msgColl = <span style="color: blue;">new</span> MailMessageCollection();
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 1; i &lt; 5; i++)
            {
            	msg.LoadMessage(<span style="color: blue;">string</span>.Format(@"C:\Docs\TestMail{0}.eml", i));
            	msgColl.Add(msg);
            }
            <span style="color: blue;">foreach</span> (MailMessage m <span style="color: blue;">in</span> msgColl)
            {
            	Console.WriteLine(m.Subject);
            }
            msgColl.Reverse();
            <span style="color: blue;">foreach</span> (MailMessage m <span style="color: blue;">in</span> msgColl)
            {
            	Console.WriteLine(m.Subject);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msgColl <span style="color: blue;">As</span> MailMessageCollection = <span style="color: blue;">New</span> MailMessageCollection
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            <span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            <span style="color: blue;">For</span> i = 1 <span style="color: blue;">To</span> 4
            	msg.LoadMessage(<span style="color: blue;">String</span>.Format("C:\Docs\TestMail{0}.eml", i))
            	msgColl.Add(msg)
            <span style="color: blue;">Next</span>
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> m <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgColl
            	Console.WriteLine(m.Subject)
            <span style="color: blue;">Next</span>
            msgColl.Reverse()
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> m <span style="color: blue;">As</span> MailMessage <span style="color: blue;">In</span> msgColl
            	Console.WriteLine(m.Subject)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.MailMessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MailBee.Mime.MailMessage"/> object at the specified zero-based index in the collection.
            <seealso cref="T:MailBee.Mime.MailMessage"/>
            </summary>
            <param name="index">The zero-based index of the <see cref="T:MailBee.Mime.MailMessage"/> object in the collection.</param>
            <value>
            A <see cref="T:MailBee.Mime.MailMessage"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.ImapMail.FolderFlags">
            <summary>
            Defines the standard flags which can be set or examined for IMAP4 folders (mailboxes).
            <seealso cref="P:MailBee.ImapMail.Folder.Flags"/>
            </summary>
            <remarks>To examine folder flags, the developer can use <see cref="M:MailBee.ImapMail.Imap.DownloadFolders(System.Boolean,System.String,System.String)"/>
            method to obtain the collection of folders, and then iterate through returned collection and
            examine <see cref="P:MailBee.ImapMail.Folder.Flags"/> property value for each <see cref="T:MailBee.ImapMail.Folder"/> object in
            the collection.</remarks>
        </member>
        <member name="F:MailBee.ImapMail.FolderFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.FolderFlags.Noinferiors">
            <summary>
            It is not possible for any child levels of hierarchy to exist under this name;
            no child levels exist now and none can be created in the future.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.FolderFlags.Noselect">
            <summary>
             It is not possible to use this name as a selectable folder.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.FolderFlags.Marked">
            <summary>
            The folder has been marked "interesting" by the server; the folder probably
            contains messages that have been added since the last time the folder was selected.
            Note: marked folder is not the same as subscribed folder. It's up to the client to
            subscribe/unsubscribe folders; it's up to the server to mark/unmark folders.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.FolderFlags.Unmarked">
            <summary>
            The folder does not contain any additional messages since the last time the folder was selected.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.SystemMessageFlags">
            <summary>
            Defines the standard (system) flags which can be set or examined for mail messages in the folder.
            <seealso cref="T:MailBee.ImapMail.MessageFlagSet"/>
            </summary>
            <remarks>
            <para>To examine flags of an existing message (or messages), the developer can use
            <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32)"/> method setting
            <see cref="F:MailBee.ImapMail.EnvelopeParts.Flags"/> bit in <i>parts</i> parameter value. Then, the developer
            should iterate through the returned <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> and examine <see cref="P:MailBee.ImapMail.Envelope.Flags">Envelope.Flags</see>
            property value. This property returns <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object which represents
            all flags of the message including both system flags and non-standard flags.</para>
            <para>System flags can be examined via <see cref="P:MailBee.ImapMail.MessageFlagSet.SystemFlags"/> property of <see cref="T:MailBee.ImapMail.MessageFlagSet"/>
            object.</para>
            <para>To set specific system flags for messages, the developer can use
            <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,MailBee.ImapMail.SystemMessageFlags,MailBee.ImapMail.MessageFlagAction)"/> method.</para>
            <para>See <see cref="T:MailBee.ImapMail.MessageFlagSet"/> topic on more information regarding message flags.</para>
            </remarks>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Seen">
            <summary>
            Message has been read.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Answered">
            <summary>
            Message has been answered.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Flagged">
            <summary>
            Message is "flagged" for urgent/special attention.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Deleted">
            <summary>
            Message is "deleted" for removal by later <see cref="M:MailBee.ImapMail.Imap.Expunge"/> or <see cref="M:MailBee.ImapMail.Imap.Close"/>.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Draft">
            <summary>
            Message has not completed composition (marked as a draft).
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Recent">
            <summary>
            Message is "recently" arrived in this folder.  This session is the first session
            to have been notified about this message; if the session is read-write (the folder was selected with <see cref="M:MailBee.ImapMail.Imap.SelectFolder(System.String)"/>
            method), subsequent sessions will not see "\Recent" set for this message. If the folder was selected in read-only mode
            (using <see cref="M:MailBee.ImapMail.Imap.ExamineFolder(System.String)"/> method), "\Recent" flag will not be removed from the message.
            This flag can not be altered by the client.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.CanCreate">
            <summary>
            "\*" flag. This special flag may appear only in <see cref="P:MailBee.ImapMail.MessageFlagSet.SystemFlags">Imap.PermanentFlags.SystemFlags</see> value.
            If it's present, it indicates it's possible to create new flags in this folder by attempting to set those flags for messages.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.SystemMessageFlags.Other">
            <summary>
            There are some other (non-system) flags set. The developer may examine <see cref="P:MailBee.ImapMail.MessageFlagSet.AllFlags"/> property of
            <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object to get the list of all flags set.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.MessageFlagAction">
            <summary>
            Defines actions to be performed with the message flags.
            <seealso cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/>
            </summary>
            <remarks>
            <para>It's not error to attempt to remove flags which are not set or add flags which are already
            set. The server will simply do nothing in this case. For instance, if the application sets "\Deleted" flag
            for two messages and the first message already has this flag set, the first message flags will remain
            intact while the second message will acquire the "\Deleted" flag.
            </para>
            <para>To remove all flags from the message (including both system and server-specific flags),
            the developer should call <see cref="M:MailBee.ImapMail.Imap.SetMessageFlags(System.String,System.Boolean,System.String,MailBee.ImapMail.MessageFlagAction,System.Boolean)"/> method passing empty flags and specifying
            <see cref="F:MailBee.ImapMail.MessageFlagAction.Replace"/> as <i>action</i> parameter value.</para>
            </remarks>
        </member>
        <member name="F:MailBee.ImapMail.MessageFlagAction.Replace">
            <summary>
            The specified flags will replace the existing flags of the message.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.MessageFlagAction.Add">
            <summary>
            The specified flags will be added to the list of existing flags of the message.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.MessageFlagAction.Remove">
            <summary>
            The specified flags will be removed from the list existing flags of the message.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.EnvelopeParts">
            <summary>
            Defines the message elements available for download using <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            <seealso cref="T:MailBee.ImapMail.Envelope"/>
            </summary>
            <remarks>
            <para>In the IMAP4 protocol, all message related information is downloaded using FETCH command.
            <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method issues FETCH command, processes its responses, and represents
            it to the application as the <see cref="T:MailBee.ImapMail.EnvelopeCollection"/> of <see cref="T:MailBee.ImapMail.Envelope"/> objects where
            each object represents a single FETCH response (one response corresponds to a single message).</para>
            <para>With FETCH commands, it's possible to download any parts or attributes of mail messages. The most common
            attribute is ENVELOPE (that's why MailBee's object which encapsulates FETCH response is called
            <see cref="T:MailBee.ImapMail.Envelope"/>). However, with FETCH response, it's also possible to download any other elements
            of mail messages (and it's even not necessary to download ENVELOPE element itself).</para>
            <para>Depending on which elements of FETCH response were requested during <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            method call, certain properties of the <see cref="T:MailBee.ImapMail.Envelope"/> objects within the returned collection may
            contain empty values or useful information. For instance, if only <see cref="F:MailBee.ImapMail.EnvelopeParts.Uid"/> was requested,
            the only property values which will be set in the <see cref="T:MailBee.ImapMail.Envelope"/> object are <see cref="P:MailBee.ImapMail.Envelope.Uid"/> and
            <see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/>.</para>
            <para><see cref="P:MailBee.ImapMail.Envelope.Uid"/> and <see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/> property values are always available. To obtain
            other message-related information, the developer should request the corresponding items from the server
            when calling <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method. The items to be downloaded need to be specified in <i>parts</i>
            parameter of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.</para>
            <para>The following list shows relationships beetween <see cref="T:MailBee.ImapMail.EnvelopeParts"/> elements and <see cref="T:MailBee.ImapMail.Envelope"/>
            object properties which are set when the corresponding elements have been requested during <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            method call:
            <list type="table">
            <listheader><term><see cref="T:MailBee.ImapMail.EnvelopeParts"/> element</term><term><see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/> property</term></listheader>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.Flags"/></description><description><see cref="P:MailBee.ImapMail.Envelope.Flags"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.InternalDate"/></description><description><see cref="P:MailBee.ImapMail.Envelope.DateReceived"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.Rfc822Size"/></description><description><see cref="P:MailBee.ImapMail.Envelope.Size"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/></description><description><see cref="P:MailBee.ImapMail.Envelope.Bcc"/>, <see cref="P:MailBee.ImapMail.Envelope.Cc"/>, <see cref="P:MailBee.ImapMail.Envelope.Date"/>, <see cref="P:MailBee.ImapMail.Envelope.From"/>, <see cref="P:MailBee.ImapMail.Envelope.InReplyTo"/>, <see cref="P:MailBee.ImapMail.Envelope.MessageID"/>, <see cref="P:MailBee.ImapMail.Envelope.ReplyTo"/>, <see cref="P:MailBee.ImapMail.Envelope.Sender"/>, <see cref="P:MailBee.ImapMail.Envelope.Subject"/>, <see cref="P:MailBee.ImapMail.Envelope.To"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.BodyStructure"/></description><description><see cref="P:MailBee.ImapMail.Envelope.BodyStructure"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/></description><description><see cref="P:MailBee.ImapMail.Envelope.MessagePreview"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.MailBeeEnvelope"/></description><description>Combination of effects of <see cref="F:MailBee.ImapMail.EnvelopeParts.Flags"/>, <see cref="F:MailBee.ImapMail.EnvelopeParts.InternalDate"/>, <see cref="F:MailBee.ImapMail.EnvelopeParts.Rfc822Size"/>, and <see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/></description></item>
            <item><description><see cref="F:MailBee.ImapMail.EnvelopeParts.All"/></description><description>Combination of effects of <see cref="F:MailBee.ImapMail.EnvelopeParts.MailBeeEnvelope"/>, <see cref="F:MailBee.ImapMail.EnvelopeParts.BodyStructure"/>, and <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/></description></item>
            </list>
            </para>
            <note><see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method also allows the application to download FETCH items by their names. The developer
            can use this to download the specific MIME parts of the message, the specific headers, or if the particular server
            supports non-standard FETCH elements the developer interested in.</note>
            </remarks>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.Uid">
            <summary>
            Request UID of the message. Since this value is 0, the UID is always requested. Also,
            the server always returns the ordinal number of the message in the folder (<see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/>).
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.Flags">
            <summary>
            Request the message flags.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.InternalDate">
            <summary>
            Request the datetime value assigned by the server to message (usually, it's the date
            when the message was received by the server).
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.Rfc822Size">
            <summary>
            Request the length of the entire message in bytes.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.Envelope">
            <summary>
            Request the ENVELOPE information of the message.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.BodyStructure">
            <summary>
            Request the body structure of the message.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.MessagePreview">
            <summary>
            Request the message header or the entire message. This item can be used
            in conjunction with <i>bodyPreviewSize</i> parameter of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.MailBeeEnvelope">
            <summary>
            The combination of <see cref="F:MailBee.ImapMail.EnvelopeParts.Flags"/>, <see cref="F:MailBee.ImapMail.EnvelopeParts.InternalDate"/>, <see cref="F:MailBee.ImapMail.EnvelopeParts.Rfc822Size"/>, and <see cref="F:MailBee.ImapMail.EnvelopeParts.Envelope"/>.
            </summary>
        </member>
        <member name="F:MailBee.ImapMail.EnvelopeParts.All">
            <summary>
            The combination of <see cref="F:MailBee.ImapMail.EnvelopeParts.MailBeeEnvelope"/>, <see cref="F:MailBee.ImapMail.EnvelopeParts.BodyStructure"/>, and <see cref="F:MailBee.ImapMail.EnvelopeParts.MessagePreview"/>.
            </summary>
        </member>
        <member name="T:MailBee.ImapMail.Envelope">
            <summary>
            Represents an IMAP4 envelope of a mail message (including any other related information
            such as body structure, message flags, the mail message itself, etc).
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            </summary>
            <remarks>
            <para>An instance of this class represents the information about the mail message returned by the IMAP4 server
            in a single FETCH response. This may contain information about an IMAP4 envelope (which is a collection
            of common properties of a mail message such as "Subject:", "From:", "To:", etc), a body structure of the mail
            message, the mail message itself, its flags, ordinal message number, UID, and size, the date when the message was received by the IMAP4 server,
            and other message attributes including user-specified ones.</para>
            <para>MailBee allows the developer to specify which attributes/parts of mail messages must be downloaded resulting in a greater
            flexibility and smaller network traffic (unnecessary items are not downloaded).</para>
            <para>All methods of <see cref="T:MailBee.ImapMail.Imap"/> object which return <see cref="T:MailBee.Mime.MailMessage"/> or
            <see cref="T:MailBee.Mime.MailMessageCollection"/> objects actually download envelopes and then extract mail messages from <see cref="P:MailBee.ImapMail.Envelope.MessagePreview"/>
            property of <see cref="T:MailBee.ImapMail.Envelope"/> object.</para>
            <note>Due to complexity of the IMAP4 protocol, many IMAP4 server implementations cannot always produce
            correct FETCH responses. If MailBee detects the particular FETCH response cannot be parsed,
            it raises <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event for this response, and sets <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> property
            for the corresponding response to <b>false</b>. No exception is thrown, however.</note>
            Most fields of the envelope may be missing (if they were not requested from the server or they are missing in the message itself).
            For instance, if the message has no subject,
            <see cref="P:MailBee.ImapMail.Envelope.Subject"/> property may return a null reference (<b>Nothing</b> in Visual Basic). To make using
            <see cref="T:MailBee.ImapMail.Envelope"/> object easier, MailBee returns empty values instead of null references by default.
            To force MailBee return a null reference for a missing field, the developer should set <see cref="P:MailBee.ImapMail.Envelope.SafeMode"/> to <b>false</b>.
            </remarks>
            <example>
            This sample downloads essential information about the messages in the inbox (such as IMAP4 envelope,
            date of receiving by the server, flags, and size), and its body structure. The messages themselves are not downloaded.
            The body structure information is used to count attachments of the message (this approach is more reliable than downloading
            message header and relying on <see cref="P:MailBee.Mime.MailMessage.HasAttachments"/> property which might not be 100% correct).
            To notify user about particular envelopes which cannot be parsed, <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event handler is used.
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// ErrorOccurred event handler</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnErrorOccurred(<span style="color: blue;">object</span> sender, ErrorEventArgs e)
            	{
            		<span style="color: green;">// Filter only those errors which correspond to envelopes which cannot be parsed.</span>
            		MailBeeImapInvalidEnvelopeException ex =
            			e.Reason <span style="color: blue;">as</span> MailBeeImapInvalidEnvelopeException;
            
            		<span style="color: blue;">if</span> (ex != <span style="color: blue;">null</span>)
            		{
            			Console.WriteLine("WARNING: IMAP response for message #" +
            				ex.InvalidEnvelope.MessageNumber + " is incorrect.");
            		}
            }
            
            	<span style="color: green;">// The actual code</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Attach ErrorOccurred event handler.</span>
            		imp.ErrorOccurred += <span style="color: blue;">new</span> ErrorEventHandler(OnErrorOccurred);
            
            		<span style="color: green;">// Get to inbox.</span>
            		imp.Connect("imap.domain.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("Inbox");
            
            		<span style="color: green;">// Get envelopes, body structures, message flags, etc for all messages in the inbox.</span>
            		EnvelopeCollection envelopes = imp.DownloadEnvelopes(
            			Imap.AllMessages, <span style="color: blue;">false</span>, EnvelopeParts.MailBeeEnvelope | EnvelopeParts.BodyStructure, 0);
            
            		<span style="color: green;">// Demonstrate that we can work with downloaded envelopes even in offline mode.</span>
            		imp.Disconnect();
            
            		<span style="color: blue;">foreach</span> (Envelope envelope <span style="color: blue;">in</span> envelopes)
            		{
            			<span style="color: blue;">if</span> (envelope.IsValid)
            			{
            				Console.WriteLine("Message #" + envelope.MessageNumber +
            					", Received at: " + envelope.DateReceived + ", Created at: " + envelope.Date);
            				Console.WriteLine("  Flags: " + envelope.Flags.ToString());
            				Console.WriteLine("  From: " + envelope.From.ToString());
            				Console.WriteLine("  To: " + envelope.To.ToString());
            				Console.WriteLine("  Subject: " + envelope.Subject);
            				System.Text.StringBuilder strBuffer = <span style="color: blue;">new</span> System.Text.StringBuilder();
            				ImapBodyStructureCollection parts = envelope.BodyStructure.GetAllParts();
            				<span style="color: blue;">foreach</span> (ImapBodyStructure part <span style="color: blue;">in</span> parts)
            				{
            					<span style="color: green;">// Detect if this part is attachment.</span>
            					<span style="color: blue;">if</span> ((part.Disposition != <span style="color: blue;">null</span> &amp;&amp; part.Disposition.ToLower() == "attachment") ||
            						(part.Filename != <span style="color: blue;">null</span> &amp;&amp; part.Filename != <span style="color: blue;">string</span>.Empty) ||
            						(part.ContentType != <span style="color: blue;">null</span> &amp;&amp; part.ContentType.ToLower() == "message/rfc822"))
            					{
            						<span style="color: blue;">string</span> filename;
            						<span style="color: blue;">if</span> (part.Filename != <span style="color: blue;">null</span> &amp;&amp; part.Filename.Length &gt; 0)
            						{
            							filename = part.Filename;
            						}
            						<span style="color: blue;">else</span>
            						{
            							filename = "untitled";
            						}
            
            						<span style="color: green;">// Important: Size property returns the length of part data in encoded form</span>
            						<span style="color: green;">// (such as base64). There is no way to learn the exact length unless to</span>
            						<span style="color: green;">// download the entire message. However, you may improve precision by examining</span>
            						<span style="color: green;">// MailEncodingName property value. If it's "base64", decoded data is about 70%</span>
            						<span style="color: green;">// in size of mail-encoded data. However, it's hard to estimate if it's</span>
            						<span style="color: green;">// "quoted-printable" because decoded size/encoded size ratio highly depends on</span>
            						<span style="color: green;">// the actual data contents in this case. Fortunately, "quoted-printable" is</span>
            						<span style="color: green;">// quite rarely used for attachments. If MailEncodingName is "", "binary", "7bit",</span>
            						<span style="color: green;">// or "8bit", then the data is not encoded, and Size property strictly matches</span>
            						<span style="color: green;">// the actual data length.</span>
            						strBuffer.Append("[" + filename + " of approx. " + part.Size + " bytes]");
            					}
            				}
            				<span style="color: blue;">if</span> (strBuffer.Length &gt; 0)
            				{
            					Console.WriteLine("  Attachments: " + strBuffer.ToString());
            				}
            				<span style="color: blue;">else</span>
            				{
            					Console.WriteLine("  Attachments: none");
            				}
            			}
            			<span style="color: blue;">else</span>
            			{
            				Console.WriteLine("Could not parse envelope for message #" + envelope.MessageNumber);
            			}
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: green;">' ErrorOccurred event handler</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Sub</span> OnErrorOccurred(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> ErrorEventArgs)
            		<span style="color: green;">' Filter only those errors which correspond to envelopes which cannot be parsed.</span>
            		<span style="color: blue;">Dim</span> ex <span style="color: blue;">As</span> MailBeeImapInvalidEnvelopeException = e.Reason
            
            		<span style="color: blue;">If</span> <span style="color: blue;">Not</span> ex <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">Then</span>
            			Console.WriteLine("WARNING: IMAP response for message #" &amp; _
            				ex.InvalidEnvelope.MessageNumber &amp; " is incorrect.")
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Attach ErrorOccurred event handler.</span>
            		<span style="color: blue;">AddHandler</span> imp.ErrorOccurred, <span style="color: blue;">AddressOf</span> OnErrorOccurred
            
            		<span style="color: green;">' Get to inbox.</span>
            		imp.Connect("imap.domain.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("Inbox")
            
            		<span style="color: green;">' Get envelopes, body structures, message flags, etc for all messages in the inbox.</span>
            		<span style="color: blue;">Dim</span> envelopes <span style="color: blue;">As</span> EnvelopeCollection
            
            		envelopes = imp.DownloadEnvelopes(Imap.AllMessages, <span style="color: blue;">False</span>, EnvelopeParts.MailBeeEnvelope _
            			<span style="color: blue;">Or</span> EnvelopeParts.BodyStructure, 0)
            
            		<span style="color: green;">' Demonstrate that we can work with downloaded envelopes even in offline mode.</span>
            		imp.Disconnect()
            
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envelopes
            			<span style="color: blue;">If</span> env.IsValid <span style="color: blue;">Then</span>
            				Console.WriteLine("Message #" &amp; env.MessageNumber &amp; ", Received at: " &amp; _
            					env.DateReceived &amp; ", Created at: " &amp; env.Date)
            				Console.WriteLine(" Flags: " &amp; env.Flags.ToString())
            				Console.WriteLine(" From: " &amp; env.From.ToString())
            				Console.WriteLine(" To: " &amp; env.To.ToString())
            				Console.WriteLine(" Subject: " &amp; env.Subject)
            
            				<span style="color: blue;">Dim</span> strBuffer <span style="color: blue;">As</span> <span style="color: blue;">New</span> System.Text.StringBuilder
            				<span style="color: blue;">Dim</span> parts <span style="color: blue;">As</span> ImapBodyStructureCollection = env.BodyStructure.GetAllParts()
            
            				<span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> ImapBodyStructure <span style="color: blue;">In</span> parts
            					<span style="color: green;">' Detect if this part is attachment.</span>
            					<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> part.Disposition <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> part.Disposition.ToLower() = "attachment") <span style="color: blue;">OrElse</span> _
            						(<span style="color: blue;">Not</span> part.Filename <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> part.Filename &lt;&gt; <span style="color: blue;">String</span>.Empty) <span style="color: blue;">OrElse</span> _
            						(<span style="color: blue;">Not</span> part.ContentType <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span> <span style="color: blue;">AndAlso</span> part.ContentType.ToLower() = "message/rfc822") <span style="color: blue;">Then</span>
            
            						<span style="color: blue;">Dim</span> filename <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            
            						<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> part.Filename <span style="color: blue;">Is</span> <span style="color: blue;">Nothing</span>) <span style="color: blue;">And</span> (part.Filename.Length &gt; 0) <span style="color: blue;">Then</span>
            							filename = part.Filename
            						<span style="color: blue;">Else</span>
            							filename = "untitled"
            						<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            						<span style="color: green;">' Important: Size property returns the length of part data in encoded form</span>
            						<span style="color: green;">' (such as base64). There is no way to learn the exact length unless to</span>
            						<span style="color: green;">' download the entire message. However, you may improve precision by examining</span>
            						<span style="color: green;">' MailEncodingName property value. If it's "base64", decoded data is about 70%</span>
            						<span style="color: green;">' in size of mail-encoded data. However, it's hard to estimate if it's</span>
            						<span style="color: green;">' "quoted-printable" because decoded size/encoded size ratio highly depends on</span>
            						<span style="color: green;">' the actual data contents in this case. Fortunately, "quoted-printable" is</span>
            						<span style="color: green;">' quite rarely used for attachments. If MailEncodingName is "", "binary", "7bit",</span>
            						<span style="color: green;">' or "8bit", then the data is not encoded, and Size property strictly matches</span>
            						<span style="color: green;">' the actual data length.</span>
            						strBuffer.Append("[" &amp; filename &amp; " of approx. " &amp; part.Size &amp; " bytes]")
            					<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            				<span style="color: blue;">Next</span>
            
            				<span style="color: blue;">If</span> strBuffer.Length &gt; 0 <span style="color: blue;">Then</span>
            					Console.WriteLine(" Attachments: " &amp; strBuffer.ToString())
            				<span style="color: blue;">Else</span>
            					Console.WriteLine(" Attachments: none")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">Else</span>
            				Console.WriteLine("Could not parse envelope for message #" &amp; env.MessageNumber)
            			<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)">
            <summary>
            Returns a reference to the specified item of the FETCH response.
            <seealso cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/>
            </summary>
            <param name="name">The name of the specified element of the response.</param>
            <param name="stringsAsBytes">If <b>true</b> and the specified item was not recognized
            by MailBee as predefined object, all strings within the item data will be returned as byte
            arrays; if <b>false</b>, all strings in a non-predefined object will be returned as <see cref="T:System.String"/>.</param>
            <returns>If the specified item was found in the response data, the method returns
            a reference to the object representing this item; otherwise, the method returns a null reference (<b>Nothing</b> in Visual Basic).</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="name"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>
            This method can return objects of many different types depending on whether the specified item
            is predefined and whether it's a list of sub-items or a single item. In particular, if certain
            item is predefined (such as <i>BODYSTRUCTURE</i>, <i>UID</i>, <i>FLAGS</i>, <i>RFC822.SIZE</i>, etc) the corresponding
            object or value type will be returned (such as <see cref="T:MailBee.ImapMail.ImapBodyStructure"/>, <see cref="T:System.Int64"/>,
            <see cref="T:MailBee.ImapMail.MessageFlagSet"/>, <see cref="T:System.Int32"/>, etc).
            </para>
            <para>
            If <paramref name="name"/> is not recognized, the method returns <see cref="T:System.Collections.ArrayList"/>
            object if the item is a list of sub-items, or byte[]/string depending on <paramref name="stringsAsBytes"/> value.
            In the case if <see cref="T:System.Collections.ArrayList"/> is returned, its sub-items will conform the same rule:
            if sub-item is a list, it will be returned as <see cref="T:System.Collections.ArrayList"/>, otherwise, byte[] or string.
            Thus, <see cref="M:MailBee.ImapMail.Envelope.GetEnvelopeItem(System.String,System.Boolean)"/> method allows the developer to examine both simple FETCH items and complex
            nested structures with unlimited depth of hierarchy.
            </para>
            <para>
            The common use of setting <paramref name="stringsAsBytes"/> to <b>true</b> is when the application
            needs the item data as byte array. Otherwise, the developer should set <paramref name="stringsAsBytes"/> to <b>false</b>.
            </para>
            <para>The developer can use this method to obtain user-specified items of the FETCH response
            (for instance, the common use is getting certain MIME part of the message). To have the particular
            item listed in the FETCH response, the developer should first specify its key in <i>extraItems</i>
            parameter of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method.</para>
            <note>Keys to be specified in <i>extraItems</i> parameters of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method
            can be different from their corresponding item names in FETCH responses. For instance,
            if <i>BODY.PEEK[1]</i> was requested, its name in the FETCH response would be <i>BODY[1]</i>.
            See IMAP4 protocol specification (RFC3501) for more information regarding FETCH requests and responses.</note>
            </remarks>
            <example>
            <para>
            This sample completely downloads all image files attached or embedded into the last message in the inbox,
            and saves them into C:\Temp folder. The IMAP4 server is queried twice: first, we download the body structure
            of the message to learn which parts as images, and then we download these parts. The entire message itself
            is not downloaded.
            </para>
            <para>To demonstrate that key names in FETCH requests and FETCH responses can be different,
            this sample downloads images in read-only mode (BODY.PEEK is used instead of BODY). Thus, running
            this sample won't cause the server to set "\Seen" flag for the message.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.ImapMail;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Imap imp = <span style="color: blue;">new</span> Imap();
            
            		<span style="color: green;">// Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.company.com");
            		imp.Login("jdoe", "secret");
            		imp.SelectFolder("INBOX");
            
            		<span style="color: green;">// Download body structure.</span>
            		EnvelopeCollection envs = imp.DownloadEnvelopes(imp.MessageCount.ToString(), <span style="color: blue;">false</span>,
            			EnvelopeParts.BodyStructure, 0);
            
            		<span style="color: green;">// The list of FETCH keys to request from the server.</span>
            		System.Collections.ArrayList fetchRequestKeys = <span style="color: blue;">new</span> System.Collections.ArrayList();
            
            		<span style="color: green;">// The list of FETCH keys to expect from the server in return to the request of</span>
            		<span style="color: green;">// items listed in fetchRequestKeys.</span>
            		System.Collections.ArrayList fetchResponseKeys = <span style="color: blue;">new</span> System.Collections.ArrayList();
            
            		<span style="color: green;">// UID of the message for which we received the body structure.</span>
            		<span style="color: blue;">long</span> uid = 0;
            
            		<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            		{
            			<span style="color: green;">// Get body structures of all MIME parts as flat list.</span>
            			ImapBodyStructureCollection parts = env.BodyStructure.GetAllParts();
            			<span style="color: blue;">foreach</span> (ImapBodyStructure part <span style="color: blue;">in</span> parts)
            			{
            				<span style="color: blue;">if</span> (part.ContentType.ToLower().IndexOf("image/") &gt; -1)
            				{
            					<span style="color: green;">// For each image, we request its MIME part header and body</span>
            					<span style="color: green;">// (the IMAP4 protocol does not support getting the entire MIME</span>
            					<span style="color: green;">// part as a single block of data).</span>
            					fetchRequestKeys.Add("BODY.PEEK[" + part.PartID + ".HEADER]");
            					fetchRequestKeys.Add("BODY.PEEK[" + part.PartID + "]");
            
            					<span style="color: green;">// For BODY.PEEK[...] request the server will return BODY[...] response.</span>
            					fetchResponseKeys.Add("BODY[" + part.PartID + ".HEADER]");
            					fetchResponseKeys.Add("BODY[" + part.PartID + "]");
            				}
            			}
            
            			<span style="color: green;">// Second time, we'll get message by its UID. This will avoid the situation</span>
            			<span style="color: green;">// when new message arrives between two queries (and thus it could be possible</span>
            			<span style="color: green;">// to download wrong message second time).</span>
            			uid = env.Uid;
            		}
            
            		<span style="color: blue;">if</span> (uid &gt; 0)
            		{
            			<span style="color: green;">// Download images.</span>
            			envs = imp.DownloadEnvelopes(uid.ToString(), <span style="color: blue;">true</span>,
            				EnvelopeParts.Uid, 0, <span style="color: blue;">null</span>,
            				(<span style="color: blue;">string</span>[])fetchRequestKeys.ToArray(<span style="color: blue;">typeof</span>(<span style="color: blue;">string</span>)));
            
            			<span style="color: blue;">foreach</span> (Envelope env <span style="color: blue;">in</span> envs)
            			{
            				<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; fetchRequestKeys.Count; i += 2)
            				{
            					<span style="color: green;">// Get MIME part header data.</span>
            					<span style="color: blue;">byte</span>[] mimePartHeader = (<span style="color: blue;">byte</span>[])env.GetEnvelopeItem(
            						(<span style="color: blue;">string</span>)fetchResponseKeys[i], <span style="color: blue;">true</span>);
            
            					<span style="color: green;">// Get MIME part body data.</span>
            					<span style="color: blue;">byte</span>[] mimePartBody = (<span style="color: blue;">byte</span>[])env.GetEnvelopeItem(
            						(<span style="color: blue;">string</span>)fetchResponseKeys[i + 1], <span style="color: blue;">true</span>);
            
            					<span style="color: green;">// Build MIME part data from header data and body data.</span>
            					<span style="color: blue;">byte</span>[] mimePartData = <span style="color: blue;">new</span> <span style="color: blue;">byte</span>[mimePartHeader.Length + mimePartBody.Length];
            					Buffer.BlockCopy(mimePartHeader, 0, mimePartData, 0, mimePartHeader.Length);
            					Buffer.BlockCopy(mimePartBody, 0, mimePartData,
            						mimePartHeader.Length, mimePartBody.Length);
            					mimePartHeader = <span style="color: blue;">null</span>;
            					mimePartBody = <span style="color: blue;">null</span>;
            
            					<span style="color: green;">// Build Attachment object from the MIME part data.</span>
            					MimePart part = MimePart.Parse(mimePartData);
            					Attachment picture = <span style="color: blue;">new</span> Attachment(part);
            
            					<span style="color: green;">// Save the image into C:\Temp folder.</span>
            					picture.SaveToFolder(@"C:\Temp", <span style="color: blue;">false</span>);
            				}
            			}
            		}
            
            		imp.Disconnect();
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.ImapMail
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> imp <span style="color: blue;">As</span> <span style="color: blue;">New</span> Imap
            
            		<span style="color: green;">' Connect to the server, login and select inbox.</span>
            		imp.Connect("imap.company.com")
            		imp.Login("jdoe", "secret")
            		imp.SelectFolder("INBOX")
            
            		<span style="color: green;">' Download body structure.</span>
            		<span style="color: blue;">Dim</span> envs <span style="color: blue;">As</span> EnvelopeCollection = imp.DownloadEnvelopes(imp.MessageCount.ToString(), _
            			<span style="color: blue;">False</span>, EnvelopeParts.BodyStructure, 0)
            
            		<span style="color: green;">' The list of FETCH keys to request from the server.</span>
            		<span style="color: blue;">Dim</span> fetchRequestKeys <span style="color: blue;">As</span> <span style="color: blue;">New</span> System.Collections.ArrayList
            
            		<span style="color: green;">' The list of FETCH keys to expect from the server in return to the request of</span>
            		<span style="color: green;">' items listed in fetchRequestKeys.</span>
            		<span style="color: blue;">Dim</span> fetchResponseKeys <span style="color: blue;">As</span> <span style="color: blue;">New</span> System.Collections.ArrayList
            
            		<span style="color: green;">' UID of the message for which we received the body structure.</span>
            		<span style="color: blue;">Dim</span> uid <span style="color: blue;">As</span> <span style="color: blue;">Long</span> = 0
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            			<span style="color: green;">' Get body structures of all MIME parts as flat list.</span>
            			<span style="color: blue;">Dim</span> parts <span style="color: blue;">As</span> ImapBodyStructureCollection = env.BodyStructure.GetAllParts()
            			<span style="color: blue;">For</span> <span style="color: blue;">Each</span> part <span style="color: blue;">As</span> ImapBodyStructure <span style="color: blue;">In</span> parts
            				<span style="color: blue;">If</span> part.ContentType.ToLower().IndexOf("image/") &gt; -1 <span style="color: blue;">Then</span>
            					<span style="color: green;">' For each image, we request its MIME part header and body</span>
            					<span style="color: green;">' (the IMAP4 protocol does not support getting the entire MIME</span>
            					<span style="color: green;">' part as a single block of data).</span>
            					fetchRequestKeys.Add("BODY.PEEK[" &amp; part.PartID &amp; ".HEADER]")
            					fetchRequestKeys.Add("BODY.PEEK[" &amp; part.PartID &amp; "]")
            
            					<span style="color: green;">' For BODY.PEEK[...] request the server will return BODY[...] response.</span>
            					fetchResponseKeys.Add("BODY[" &amp; part.PartID &amp; ".HEADER]")
            					fetchResponseKeys.Add("BODY[" &amp; part.PartID &amp; "]")
            				<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            			<span style="color: blue;">Next</span>
            
            			<span style="color: green;">' Second time, we'll get message by its UID. This will avoid the situation</span>
            			<span style="color: green;">' when new message arrives between two queries (and thus it could be possible</span>
            			<span style="color: green;">' to download wrong message second time).</span>
            			uid = env.Uid
            		<span style="color: blue;">Next</span>
            
            		<span style="color: blue;">If</span> uid &gt; 0 <span style="color: blue;">Then</span>
            			<span style="color: green;">' Download images.</span>
            			envs = imp.DownloadEnvelopes(uid.ToString(), <span style="color: blue;">True</span>, EnvelopeParts.Uid, 0, _
            				<span style="color: blue;">Nothing</span>, <span style="color: blue;">CType</span>(fetchRequestKeys.ToArray(<span style="color: blue;">GetType</span>(<span style="color: blue;">String</span>)), <span style="color: blue;">String</span>()))
            
            			<span style="color: blue;">For</span> <span style="color: blue;">Each</span> env <span style="color: blue;">As</span> Envelope <span style="color: blue;">In</span> envs
            				<span style="color: blue;">Dim</span> i <span style="color: blue;">As</span> <span style="color: blue;">Integer</span>
            				<span style="color: blue;">For</span> i = 0 <span style="color: blue;">To</span> fetchRequestKeys.Count - 1 <span style="color: blue;">Step</span> 2
            					<span style="color: green;">' Get MIME part header data.</span>
            					<span style="color: blue;">Dim</span> mimePartHeader, mimePartBody <span style="color: blue;">As</span> <span style="color: blue;">Byte</span>()
            					mimePartHeader = env.GetEnvelopeItem(<span style="color: blue;">CType</span>(fetchResponseKeys(i), <span style="color: blue;">String</span>), <span style="color: blue;">True</span>)
            
            					<span style="color: green;">' Get MIME part body data.</span>
            					mimePartBody = env.GetEnvelopeItem(<span style="color: blue;">CType</span>(fetchResponseKeys(i + 1), <span style="color: blue;">String</span>), <span style="color: blue;">True</span>)
            
            					<span style="color: green;">' Build MIME part data from header data and body data.</span>
            					<span style="color: blue;">Dim</span> mimePartData <span style="color: blue;">As</span> <span style="color: blue;">Byte</span>()
            					<span style="color: blue;">ReDim</span> mimePartData(mimePartHeader.Length + mimePartBody.Length)
            					Buffer.BlockCopy(mimePartHeader, 0, mimePartData, 0, mimePartHeader.Length)
            					Buffer.BlockCopy(mimePartBody, 0, mimePartData, mimePartHeader.Length, mimePartBody.Length)
            					mimePartHeader = <span style="color: blue;">Nothing</span>
            					mimePartBody = <span style="color: blue;">Nothing</span>
            
            					<span style="color: green;">' Build Attachment object from the MIME part data.</span>
            					<span style="color: blue;">Dim</span> part <span style="color: blue;">As</span> MimePart = MimePart.Parse(mimePartData)
            					<span style="color: blue;">Dim</span> picture <span style="color: blue;">As</span> <span style="color: blue;">New</span> Attachment(part)
            
            					<span style="color: green;">' Save the image into C:\Temp folder.</span>
            					picture.SaveToFolder("C:\Temp", <span style="color: blue;">False</span>)
            				<span style="color: blue;">Next</span>
            			<span style="color: blue;">Next</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            
            		imp.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.ImapMail.Envelope.GetAllRecipients">
            <summary>
            Returns the list of all recipients of the mail message.
            </summary>
            <returns>A reference to <see cref="T:MailBee.Mime.EmailAddressCollection"/> object containing
            all of the recipients of the mail message.</returns>
            <remarks>This method never returns a null reference (<b>Nothing</b> in Visual Basic), even
            if <see cref="P:MailBee.ImapMail.Envelope.SafeMode"/> is <b>false</b> and <see cref="P:MailBee.ImapMail.Envelope.To"/>, <see cref="P:MailBee.ImapMail.Envelope.Cc"/>, and <see cref="P:MailBee.ImapMail.Envelope.Bcc"/>
            return a null reference.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.SafeMode">
            <summary>
            Gets or sets whether empty values instead of a null reference (<b>Nothing</b> in Visual Basic) should be
            returned when the corresponding fields are not available in the data received from the server.
            </summary>
            <value>If <b>true</b>, string properties of <see cref="T:MailBee.ImapMail.Envelope"/> object will return empty string
            and e-mail address and flags related properties will return
            empty objects when the corresponding information is not available in the envelope data; otherwise,
            a null reference will be returned in such cases. The default value is <b>true</b>.</value>
            <remarks>
            <para>The developer may set this property to <b>false</b> if the application needs to
            distinguish empty values from missing values.</para>
            <para>This property may affect return values of the following properties:
            <list type="bullet">
            <item><description><see cref="P:MailBee.ImapMail.Envelope.Bcc"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.Cc"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.Flags"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.From"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.InReplyTo"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.MessageID"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.ReplyTo"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.Sender"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.Subject"/></description></item>
            <item><description><see cref="P:MailBee.ImapMail.Envelope.To"/></description></item>
            </list>
            </para>
            <note>This property is not connected with <see cref="P:MailBee.Global.SafeMode">Global.SafeMode</see> property in any way.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.MessageNumber">
            <summary>
            Gets the ordinal number of the message in the folder.
            </summary>
            <value>A positive integer value representing the ordinal index of the message in the IMAP4 folder.</value>
            <remarks>Unlike <see cref="P:MailBee.ImapMail.Envelope.Uid"/> values, ordinal message numbers can change due to deleting and expunging
            messages from the folder.
            <note><see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/> value is guaranteed to be correct even if the envelope
            could not be parsed (<see cref="P:MailBee.ImapMail.Envelope.IsValid"/> is <b>true</b>). Thus, the developer can always
            locate the message whose envelope could not be parsed and which needs to be examined in some other way.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Flags">
            <summary>
            Gets <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object containing system and custom flags of the message.
            </summary>
            <value>A reference to the <see cref="T:MailBee.ImapMail.MessageFlagSet"/> object containing system and custom flags of the message.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.DatesAsUtc">
            <summary>
            Indicates if MailBee should return date and time according to UTC standard.
            </summary>
            <value>If <b>true</b>, <see cref="P:MailBee.ImapMail.Envelope.Date"/> and <see cref="P:MailBee.ImapMail.Envelope.DateReceived"/> properties
            will return date and time according to UTC (GMT) standard;
            otherwise, the returned dated timezone-corrected to match local time of the computer running MailBee.
            The default value is <b>false</b>.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.DateReceived">
            <summary>
            Gets the date and time when the message was received by the mail server.
            </summary>
            <value>A <see cref="T:System.DateTime"/> value indicating when the message was received by the mail server, or <see cref="F:System.DateTime.MinValue"/>
            if this information is not available.</value>
            <remarks>
            This value is obtained from INTERNALDATE field of IMAP4 FETCH response. This differs from
            behavior of <see cref="P:MailBee.Mime.MailMessage.DateReceived"/> property which determines this date from
            timestamps of the message (this allows <see cref="T:MailBee.Mime.MailMessage"/> object to determine
            receipt date even if the message was received from other source than IMAP4 server).
            <note><see cref="P:MailBee.ImapMail.Envelope.DatesAsUtc"/> property can be set to force this property return UTC (GMT) date.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Size">
            <summary>
            Gets the length of the entire message (in bytes) on the mail server.
            </summary>
            <value>The length of the entire message contents (in bytes) on the mail server, or -1 if this information is not available.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Uid">
            <summary>
            Gets UID (Unique-ID) assigned to the message in the folder on the mail server.
            </summary>
            <value>A positive 32-bit numeric value indicating UID of the message, or -1 if this information is not available.</value>
            <remarks>Unlike ordinal message numbers (<see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/> property), UIDs persist
            between operations which re-order messages in a folder (such as deleting and expunging messages).
            Also, UIDs should persist between different IMAP sessions (some old IMAP4 implementations, however, may violate
            this rule, see <see cref="P:MailBee.ImapMail.Imap.UidValidity"/> topic for details).</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.BodyStructure">
            <summary>
            Gets the information about structure of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.ImapMail.ImapBodyStructure"/> object containing the information about
            the message structure if it was requested, or a null reference (<b>Nothing</b> in Visual Basic) if this information is not available
            or was not requested.</value>
            <remarks>The common use of body structures is obtaining attachment names without downloading
            entire messages (see the code sample in <see cref="T:MailBee.ImapMail.Envelope"/> topic). Also, the body structure contains charset information of the message
            which is needed for correct parsing of envelopes of international messages.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.ExtraHeaders">
            <summary>
            Gets a collection of additional message headers which have been explicitly requested from the server.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.HeaderCollection"/> object containing extra headers of the message
            if they were requested, or a null reference (<b>Nothing</b> in Visual Basic) if this information is not available
            or was not requested.</value>
            <remarks>See <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> topic on how to obtain non-standard message headers within the envelope.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.MessagePreview">
            <summary>
            Gets the entire or partial mail message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.MailMessage"/> object containing the entire message or its initial part (preview),
            or a null reference (<b>Nothing</b> in Visual Basic) if this information is not available
            or was not requested.
            </value>
            <remarks>
            Depending on parameter values of <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method, this property may return
            the entire message, its header section, its header section + part of the body section, or a null reference.  
            See <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> topic on how to obtain the mail message within the envelope.
            <note>To obtain just mail messages or message headers (without flags, etc), it's convenient to use methods such as <see cref="M:MailBee.ImapMail.Imap.DownloadEntireMessage(System.Int64,System.Boolean)"/>
            and <see cref="M:MailBee.ImapMail.Imap.DownloadMessageHeaders(System.String,System.Boolean)"/>, which call <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> inside, filter
            the results, and return <see cref="T:MailBee.Mime.MailMessage"/> and <see cref="T:MailBee.Mime.MailMessageCollection"/>
            objects.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Date">
            <summary>
            Gets the date and time when the message was composed.
            </summary>
            <value>A <see cref="T:System.DateTime"/> value indicating when the message was created, or <see cref="F:System.DateTime.MinValue"/>
            if this information is not available.</value>
            <remarks>
            The server obtains this value from "Date:" header of the mail message.
            <note><see cref="P:MailBee.ImapMail.Envelope.DatesAsUtc"/> property can be set to force this property return UTC (GMT) date.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Subject">
            <summary>
            Gets the subject line of the message.
            </summary>
            <value>The string containing the message subject.</value>
            <remarks>If the subject line is encoded, MailBee decodes it in human-readable form.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.From">
            <summary>
            Gets <see cref="T:MailBee.Mime.EmailAddress"/> object representing "From:" field of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.EmailAddress"/> object representing "From:" field of the message.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Sender">
            <summary>
            Gets <see cref="T:MailBee.Mime.EmailAddress"/> object representing the information about the actual sender of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.EmailAddress"/> object representing the information about the actual sender of the message.</value>
            <remarks>Usually, this property will return the same information as <see cref="P:MailBee.ImapMail.Envelope.From"/> property. However,
            if the message was sent from the address other than "From:", these properties will return different results.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.ReplyTo">
            <summary>
            Gets <see cref="T:MailBee.Mime.EmailAddress"/> object representing "Reply-To:" field of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.EmailAddress"/> object representing "Reply-To:" field of the message.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.To">
            <summary>
            Gets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing "To:" recipients of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing "To:" recipients of the message.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Cc">
            <summary>
            Gets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing "CC:" recipients of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing "CC:" recipients of the message.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.Bcc">
            <summary>
            Gets <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing "BCC:" recipients of the message.
            </summary>
            <value>A reference to <see cref="T:MailBee.Mime.EmailAddressCollection"/> object representing "BCC:" recipients of the message.</value>
            <remarks>In most cases, this property will return empty <see cref="T:MailBee.Mime.EmailAddressCollection"/> object (or a null reference
            if <see cref="P:MailBee.ImapMail.Envelope.SafeMode"/> is <b>false</b>) because BCC information is usually stripped away from mail messages when they are sent.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.InReplyTo">
            <summary>
            Gets the value of "In-Reply-To" header of the message.
            </summary>
            <value>The string containing the value of "In-Reply-To" header of the message.</value>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.MessageID">
            <summary>
            Gets the value of "Message-ID" header of the message.
            </summary>
            <value>The string containing the value of "Message-ID" header of the message.</value>
            <remarks>
            <para>The server obtains this value from the header section of the message. This is
            not Unique-ID value (<see cref="P:MailBee.ImapMail.Envelope.Uid"/>) assigned by the server to each message in the folder.
            For instance, if the message is moved between folders, its UID changes while Message-ID does not.
            </para>
            <para>Usually, Message-ID is assigned to the message when it's composed. Thus, Message-ID identifies
            the message content. For instance, if the same message is placed into the IMAP4 folder twice, both
            copies will have the same Message-ID (while their <see cref="P:MailBee.ImapMail.Envelope.Uid"/> values will be different).</para>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.Envelope.IsValid">
            <summary>
            Indicates if the envelope data has been successfully parsed.
            </summary>
            <value><b>true</b> if the envelope data requested from the server has been successfully parsed; otherwise, <b>false</b>.</value>
            <remarks>
            <para>This property exists for compatibility with not fully IMAP4-compliant servers. Due to complexity
            of IMAP4 responses, some implementation still fail to produce syntactically correct IMAP4 responses
            in some cases.
            </para>
            <para>The developer can use this property (or subscribe to <see cref="E:MailBee.ImapMail.Imap.ErrorOccurred"/> event,
            see code sample in <see cref="T:MailBee.ImapMail.Envelope"/> topic) to determine if all the data is correct. 
            </para>
            <note>This property (if <b>true</b>) does not indicate all properties of <see cref="T:MailBee.ImapMail.Envelope"/> object return
            actual values. It only relates to the properties for which the data was requested from the server.
            For instance, if <see cref="M:MailBee.ImapMail.Imap.DownloadEnvelopes(System.String,System.Boolean,MailBee.ImapMail.EnvelopeParts,System.Int32,System.String[],System.String[])"/> method was called with <i>parts</i>
            parameter set to <see cref="F:MailBee.ImapMail.EnvelopeParts.Uid"/>, only <see cref="P:MailBee.ImapMail.Envelope.Uid"/> (and <see cref="P:MailBee.ImapMail.Envelope.MessageNumber"/>,
            which is always available) properties will be set and <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> will still return <b>true</b>.
            However, if UID value could not be parsed in the last case, <see cref="P:MailBee.ImapMail.Envelope.IsValid"/> would return <b>false</b>.
            </note>
            </remarks>
        </member>
        <member name="T:MailBee.Html.TagAttributeReadOnlyCollection">
            <summary>
            Provides properties and methods for examining the collection of <see cref="T:MailBee.Html.TagAttribute"/> objects.
            </summary>
        </member>
        <member name="P:MailBee.Html.TagAttributeReadOnlyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.Html.TagAttribute"/> object at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index number of the attribute in the collection.</param>
            <value>
            A <see cref="T:MailBee.Html.TagAttribute"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index does not exist.
            </exception>
        </member>
        <member name="T:MailBee.Resources">
            <summary>
            Provides localization and text customization framework for MailBee library.
            </summary>
            <remarks>The developer can derive a class from <see cref="T:MailBee.Resources"/> class
            and override some or all properties for the purposes of localization or
            other tasks which require modification of any messages returned by MailBee
            (this includes log file messages, error messages, etc).
            <note type="caution">For this class, it's not guaranteed to preserve compatibility with future
            versions of MailBee library. In particular, properties returning error message strings may be replaced. 
            </note>
            </remarks>
            <example>
            <para>This sample changes the standard log message
            "Messages (startIndex={0}, count={1}) marked as deleted." (defined by
            <see cref="P:MailBee.Resources.Log_Pop3DeletedMessagesStartIndex0Count1"/> property) to
            "{1} message(s) starting at {0} flagged as deleted.".
            <see cref="P:MailBee.Resources.Log_Pop3WillDeleteMessagesStartIndex0Count1"/> property is overridden
            as well.</para>
            <para>To show the effect of this change, the logging is on, and messages
            in the POP3 mailbox are flagged as deleted twice (so the log messages are
            added using the standard resources and then using the modified resources).
            However, no message is actually deleted since <see cref="M:MailBee.Pop3Mail.Pop3.ResetDeletes"/>
            method is called each time.</para>
            <para>To improve readability of the log, all log messages which are not
            necessary for understanding this sample are filtered out in <see cref="E:MailBee.Pop3Mail.Pop3.LogNewEntry"/>
            event handler.</para>
            <code lang="C#">
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Pop3Mail;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: green;">// We set it to true only for the time while DeleteMessages is executing.</span>
            	<span style="color: green;">// Alternatively, we could just enable logging only for the time of </span>
            	<span style="color: green;">// DeleteMessages execution and have it disabled at other times.</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">bool</span>	m_addEntry;
            
            	<span style="color: green;">// LogNewEntry event handler</span>
            	<span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnLogNewEntry(<span style="color: blue;">object</span> sender, LogNewEntryEventArgs e)
            	{
            		<span style="color: green;">// Do not add log records which either do not apply to </span>
            		<span style="color: green;">// DeleteMessages or contain data transferred between the client </span>
            		<span style="color: green;">// and the server. This way, we filter all log messages which do </span>
            		<span style="color: green;">// not directly relate to this sample.</span>
            		<span style="color: blue;">if</span> (!m_addEntry || e.NewEntry.MessageType != LogMessageType.Info)
            		{
            			e.NewEntry.AddThisEntry = <span style="color: blue;">false</span>;
            		}
            	}
            
            	<span style="color: green;">// The actual code</span>
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		Pop3 pop = <span style="color: blue;">new</span> Pop3();
            
            		<span style="color: green;">// Subscribe to the LogNewEntry to filter out unnecessary log records.</span>
            		pop.LogNewEntry += <span style="color: blue;">new</span> LogNewEntryEventHandler(OnLogNewEntry);
            
            		<span style="color: green;">// Connect to the POP3 server and log in the user account.</span>
            		pop.Connect("mail.domain.com");
            		pop.Login("jdoe", "secret");
            
            		<span style="color: green;">// Enable logging after already connected to the server.</span>
            		<span style="color: green;">// Alternatively, we could move this code above pop.Connect </span>
            		<span style="color: green;">// and set m_addEntry=false there.</span>
            		pop.Log.Enabled = <span style="color: blue;">true</span>;
            		pop.Log.Filename = @"C:\pop3_log.txt";
            		pop.Log.Clear();
            
            		<span style="color: green;">// Will add the records produced by DeleteMessages, to the log.</span>
            		m_addEntry = <span style="color: blue;">true</span>;
            
            		<span style="color: green;">// Flag the messages as deleted using Resources class.</span>
            		pop.Log.WriteLine("The following 2 log records are added using standard resources");
            		pop.DeleteMessages(1, 3);
            
            		<span style="color: green;">// We do not want to overburden the log with ResetDeletes results.</span>
            		m_addEntry = <span style="color: blue;">false</span>;
            		pop.ResetDeletes();
            
            		<span style="color: green;">// Flag the messages as deleted using MyResources class.</span>
            		Resources.Instance = <span style="color: blue;">new</span> MyResources();
            		m_addEntry = <span style="color: blue;">true</span>;
            		pop.Log.WriteLine(<span style="color: blue;">null</span>);
            		pop.Log.WriteLine("The following 2 log records are added using MyResources");
            		pop.DeleteMessages(1, 3);
            
            		<span style="color: green;">// We do not want to overburden the log with ResetDeletes and Disconnect results.</span>
            		m_addEntry = <span style="color: blue;">false</span>;
            		pop.ResetDeletes();
            
            		pop.Disconnect();
            	}
            }
            
            <span style="color: green;">// Derive our resources class from Resource and override the properties </span>
            <span style="color: green;">// which return the string values used to log DeleteMessages method progress.</span>
            <span style="color: blue;">class</span> MyResources : Resources
            {
            	<span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">string</span> Log_Pop3DeletedMessagesStartIndex0Count1
            	{
            		<span style="color: blue;">get</span> { <span style="color: blue;">return</span> "{1} message(s) starting at {0} flagged as deleted."; }
            	}
            
            	<span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">string</span> Log_Pop3WillDeleteMessagesStartIndex0Count1
            	{
            		<span style="color: blue;">get</span> { <span style="color: blue;">return</span> "Will flag {1} message(s) starting at {0} as deleted."; }
            	}
            }
            
            <span style="color: green;">// After running this code, C:\pop3_log.txt file should look like below.</span>
            [00:41:02.54] [USER] The following 2 log records are added using standard resources
            [00:41:02.55] [INFO] Will mark messages (startIndex=1, count=3) as deleted.
            [00:41:02.56] [INFO] Messages (startIndex=1, count=3) marked as deleted.
            [00:41:02.56] [USER] 
            [00:41:02.57] [USER] The following 2 log records are added using MyResources
            [00:41:02.57] [INFO] Will flag 3 message(s) starting at 1 as deleted.
            [00:41:02.57] [INFO] 3 message(s) starting at 1 flagged as deleted.
            </code> 
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> System
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Pop3Mail
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: green;">' We set it to true only for the time while DeleteMessages is executing.</span>
            	<span style="color: green;">' Alternatively, we could just enable logging only for the time of </span>
            	<span style="color: green;">' DeleteMessages execution and have it disabled at other times.</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> m_addEntry <span style="color: blue;">As</span> <span style="color: blue;">Boolean</span>
            
            	<span style="color: green;">' LogNewEntry event handler</span>
            	<span style="color: blue;">Private</span> <span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> OnLogNewEntry(<span style="color: blue;">ByVal</span> sender <span style="color: blue;">As</span> <span style="color: blue;">Object</span>, <span style="color: blue;">ByVal</span> e <span style="color: blue;">As</span> LogNewEntryEventArgs)
            
            		<span style="color: green;">' Do not add log records which either do not apply to </span>
            		<span style="color: green;">' DeleteMessages or contain data transferred between the client </span>
            		<span style="color: green;">' and the server. This way, we filter all log messages which do </span>
            		<span style="color: green;">' not directly relate to this sample.</span>
            		<span style="color: blue;">If</span> (<span style="color: blue;">Not</span> m_addEntry) <span style="color: blue;">Or</span> (e.NewEntry.MessageType &lt;&gt; LogMessageType.Info) <span style="color: blue;">Then</span>
            			e.NewEntry.AddThisEntry = <span style="color: blue;">False</span>
            		<span style="color: blue;">End</span> <span style="color: blue;">If</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            
            	<span style="color: green;">' The actual code</span>
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args <span style="color: blue;">As</span> <span style="color: blue;">String</span>())
            		<span style="color: blue;">Dim</span> pop <span style="color: blue;">As</span> <span style="color: blue;">New</span> Pop3
            
            		<span style="color: green;">' Subscribe to the LogNewEntry to filter out unnecessary log records.</span>
            		<span style="color: blue;">AddHandler</span> pop.LogNewEntry, <span style="color: blue;">AddressOf</span> OnLogNewEntry
            
            		<span style="color: green;">' Connect to the POP3 server and log in the user account.</span>
            		pop.Connect("mail.domain.com")
            		pop.Login("jdoe", "secret")
            
            		<span style="color: green;">' Enable logging after already connected to the server.</span>
            		<span style="color: green;">' Alternatively, we could move this code above pop.Connect </span>
            		<span style="color: green;">' and set m_addEntry=false there.</span>
            		pop.Log.Enabled = <span style="color: blue;">True</span>
            		pop.Log.Filename = "C:\pop3_log.txt"
            		pop.Log.Clear()
            
            		<span style="color: green;">' Will add the records produced by DeleteMessages, to the log.</span>
            		m_addEntry = <span style="color: blue;">True</span>
            
            		<span style="color: green;">' Flag the messages as deleted using Resources class.</span>
            		pop.Log.WriteLine("The following 2 log records are added using standard resources")
            		pop.DeleteMessages(1, 3)
            
            		<span style="color: green;">' We do not want to overburden the log with ResetDeletes results.</span>
            		m_addEntry = <span style="color: blue;">False</span>
            		pop.ResetDeletes()
            
            		<span style="color: green;">' Flag the messages as deleted using MyResources class.</span>
            		MailBee.Resources.Instance = <span style="color: blue;">New</span> MyResources
            		m_addEntry = <span style="color: blue;">True</span>
            		pop.Log.WriteLine(<span style="color: blue;">Nothing</span>)
            		pop.Log.WriteLine("The following 2 log records are added using MyResources")
            		pop.DeleteMessages(1, 3)
            
            		<span style="color: green;">' We do not want to overburden the log with ResetDeletes and Disconnect results.</span>
            		m_addEntry = <span style="color: blue;">False</span>
            		pop.ResetDeletes()
            
            		pop.Disconnect()
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            
            <span style="color: green;">' Derive our resources class from Resource and override the properties </span>
            <span style="color: green;">' which return the string values used to log DeleteMessages method progress.</span>
            <span style="color: blue;">Class</span> MyResources
            	<span style="color: blue;">Inherits</span> MailBee.Resources
            	<span style="color: blue;">Public</span> <span style="color: blue;">Overrides</span> <span style="color: blue;">ReadOnly</span> <span style="color: blue;">Property</span> Log_Pop3DeletedMessagesStartIndex0Count1() <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		<span style="color: blue;">Get</span>
            			<span style="color: blue;">Return</span> "{1} message(s) starting at {0} flagged as deleted."
            		<span style="color: blue;">End</span> <span style="color: blue;">Get</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Property</span>
            
            	<span style="color: blue;">Public</span> <span style="color: blue;">Overrides</span> <span style="color: blue;">ReadOnly</span> <span style="color: blue;">Property</span> Log_Pop3WillDeleteMessagesStartIndex0Count1() <span style="color: blue;">As</span> <span style="color: blue;">String</span>
            		<span style="color: blue;">Get</span>
            			<span style="color: blue;">Return</span> "Will flag {1} message(s) starting at {0} as deleted."
            		<span style="color: blue;">End</span> <span style="color: blue;">Get</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Property</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            
            <span style="color: green;">' After running this code, C:\pop3_log.txt file should look like below.</span>
            [00:41:02.54] [USER] The following 2 log records are added using standard resources
            [00:41:02.55] [INFO] Will mark messages (startIndex=1, count=3) as deleted.
            [00:41:02.56] [INFO] Messages (startIndex=1, count=3) marked as deleted.
            [00:41:02.56] [USER] 
            [00:41:02.57] [USER] The following 2 log records are added using MyResources
            [00:41:02.57] [INFO] Will flag 3 message(s) starting at 1 as deleted.
            [00:41:02.57] [INFO] 3 message(s) starting at 1 flagged as deleted.
            </code>
            </example>
        </member>
        <member name="F:MailBee.Resources.TnefRtfUnknownCompressionType">
            <summary>
            Unknown compression type
            </summary>
        </member>
        <member name="P:MailBee.Resources.Instance">
            <summary>
            Gets or sets the object of either <see cref="T:MailBee.Resources"/> class or any derived
            class, which defines string resources used by MailBee.
            </summary>
            <value>The object of either <see cref="T:MailBee.Resources"/> class or any derived
            class, which defines (for <see cref="T:MailBee.Resources"/> class) or overrides (for the
            derived class) string properties which are used by MailBee to provide
            textual information (such as log or error messages) to the application.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference
            (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>If custom resources object should be used for a limited period of time, the developer can
            save the original value of <see cref="P:MailBee.Resources.Instance"/> property into the variable, then assign the new value
            (a reference to the instance of the class derived from <see cref="T:MailBee.Resources"/>), and
            finally set <see cref="P:MailBee.Resources.Instance"/> property back to the saved reference to the original
            <see cref="T:MailBee.Resources"/> object when custom resources are no longer needed.</remarks>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_InnerException0">
            <summary>
            Gets " InnerException message follows: {0}" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_ServerResponded0">
            <summary>
            Gets " The server responded: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_ResponseString0">
            <summary>
            Gets " The server responded: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_Win32ErrorCode0Desc1">
            <summary>
            Gets " The Win32 error code is: {0}. The Win32 description is: {1}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.LicenseKeyIsWriteOnlyWarning">
            <summary>
            Gets "Warning: LicenseKey property is write-only." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.LicenseKeyInvalid">
            <summary>
            Gets "LicenseKey is invalid. See documentation on LicenseKey property of the component for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.LicenseKeyTrialExpired">
            <summary>
            Gets "Trial LicenseKey is expired." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_OK">
            <summary>
            Gets "No error." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_0ComponentNotLicensed">
            <summary>
            Gets "{0} component not licensed." string.
            </summary>
            <remarks>{0} is a placeholder fot the component name, such as Pop3, Powerup, etc.</remarks>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_Unknown">
            <summary>
            Gets "Unknown error." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_Busy">
            <summary>
            Gets "There is already an operation in progress." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoOperationToEnd">
            <summary>
            Gets "There is no such operation in progress." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_AbortedByUser">
            <summary>
            Gets "Processing is aborted by user." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InternalError">
            <summary>
            Gets "Internal error occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ExternalError">
            <summary>
            Gets "User code has thrown an exception." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_IllegalInMultiThreadMode">
            <summary>
            Gets "This operation is allowed in single-thread mode only." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_IllegalContext">
            <summary>
            Gets "This operation is not allowed in the current context." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_IllegalRaiseEventsMode">
            <summary>
            Gets "Wait is not allowed unless RaiseEventsViaMessageLoop=false." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_IllegalInCurrentState">
            <summary>
            Gets "An attempt to call a method of an object in the inappropriate state." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ObjectReadOnly">
            <summary>
            Gets "An attempt to modify the object state has been made while IsReadOnly is set to true." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_JobInBatchFailed">
            <summary>
            Gets "At least one job failed in the batch. Further processing is stopped. Enable/see log file for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ArgumentInvalid">
            <summary>
            Gets "Argument value is invalid." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ArgumentNull">
            <summary>
            Gets "Null argument value is not allowed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ArgumentEmpty">
            <summary>
            Gets "Empty or null argument value is not allowed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ArgumentOutOfRange">
            <summary>
            Gets "Argument value is out of range." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_IOException">
            <summary>
            Gets "IOException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_FileNotFoundException">
            <summary>
            Gets "IOException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_UnauthorizedAccessException">
            <summary>
            Gets "IOException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_XmlException">
            <summary>
            Gets "IOException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_WebException">
            <summary>
            Gets "IOException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CryptographicException">
            <summary>
            Gets "CryptographicException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_StreamCannotRead">
            <summary>
            Gets "The specified stream is closed or write-only." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_StreamCannotWrite">
            <summary>
            Gets "The specified stream is closed or read-only." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_EncodingError">
            <summary>
            Gets "Error occurred during string encoding conversion." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidDateFormat">
            <summary>
            Gets "Supplied string date format is invalid." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidDataFormat">
            <summary>
            Gets "Supplied data has invalid format." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_SocketException">
            <summary>
            Gets "SocketException occurred." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoIP4AddressesFound">
            <summary>
            Gets "No IPv4-compatible end point found." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_SocketTimeout">
            <summary>
            Gets "Socket connection has timed out." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_AbortedByLocalHost">
            <summary>
            Gets "Socket connection has been aborted by local machine." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ConnectionRefused">
            <summary>
            Gets "Socket connection has been refused by remote host." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_AbortedByServer">
            <summary>
            Gets "Socket connection was aborted by remote host." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_HostNotFound">
            <summary>
            Gets "Remote host not found." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_HostDown">
            <summary>
            Gets "Remote host is down." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_HostUnreachable">
            <summary>
            Gets "Remote host is unreachable." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ConnectionReset">
            <summary>
            Gets "An existing connection was forcibly closed by the remote host." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_SocketDisposed">
            <summary>
            Gets "The socket object used by MailBee was unexpectedly closed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ProxyConnectionDeclined">
            <summary>
            Gets "The proxy server declined to act as a proxy gateway for the given client." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ProxyAuthMethodsNotAccepted">
            <summary>
            Gets "None of the methods listed by the client to the proxy server are acceptable." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ProxyUserPassAuthFailed">
            <summary>
            Gets "Proxy Username/Password authentication failed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ProxyGssApiAuthFailed">
            <summary>
            Gets "Proxy GSSAPI authentication Failed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NotConnected">
            <summary>
            Gets "Not yet connected to the server. Call Connect first." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_AlreadyConnected">
            <summary>
            Gets "Already connected to the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_AlreadySsl">
            <summary>
            Gets "TLS/SSL connection already established." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NotLoggedIn">
            <summary>
            Gets "Not yet logged in. Call Login first." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_AlreadyLoggedIn">
            <summary>
            Gets "Already logged in." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoCredentials">
            <summary>
            Gets "No credentials have been supplied for login." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_BadCredentials">
            <summary>
            Gets "Wrong account name and/or password." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_UnsupportedLoginMethod">
            <summary>
            Gets "The specified authentication method is not supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoSupportedLoginMethods">
            <summary>
            Gets "None of the specified authentication methods is supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_SaslAnswerRejected">
            <summary>
            Gets "The server has rejected authentication data sent by the client." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_LoginWin32Error">
            <summary>
            Gets "The server has rejected authentication data sent by the client." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NegativeResponse">
            <summary>
            Gets "The server has responded with negative reply." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidResponse">
            <summary>
            Gets "The response received from the server could not be parsed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_EmptyResponseLine">
            <summary>
            Gets "Status line of the server response contains no status code." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidBinaryResponse">
            <summary>
            Gets "The binary response received from the server cannot be parsed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InconsistentResponse">
            <summary>
            Gets "The response received from the server refers to non-existent data." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidResponseItem">
            <summary>
            Gets "The particular item of the response data cannot be parsed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidBase64DataInResponse">
            <summary>
            Gets "Base64 data received from the server cannot be decoded." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_StartTlsNotAvailable">
            <summary>
            Gets "The server does not support STARTTLS (STLS for POP3) command." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_SslWin32Error">
            <summary>
            Gets "SSL-related Win32 function returned an error. See NativeErrorCode property value for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_DnsResponseCode0HostName1Base64EncodedData2">
            <summary>
            Gets " DnsResponseCode: {0}, HostName DNS server was queried about: \"{1}\", Base64 encoded response data: {2}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_BadDnsResponseHeader">
            <summary>
            Gets "The header of DNS query response is incorrect." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsInvalidQName">
            <summary>
            Gets "The length of the item name being queried to DNS server exceeds allowed limit." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsQueryMismatch">
            <summary>
            Gets "The response from DNS server does not correspond to the given query." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsRecursionRequired">
            <summary>
            Gets "DNS server must support recursion in order to execute the query." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoDnsServersSpecified">
            <summary>
            Gets "At least one DNS server must be specified in order to perform direct send or MX query." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoDnsAttemptsLeft">
            <summary>
            Gets "DNS server has failed too many times and is now considered down." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoDnsServersAvailable">
            <summary>
            Gets "At least one DNS server must be registered in the system in order to perform direct send." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsFormatErrorReply">
            <summary>
            Gets "DNS server replied with Format Error status." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsFailureReply">
            <summary>
            Gets "DNS server replied with Server Failure status." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsNameErrorReply">
            <summary>
            Gets "DNS server replied queried host name was unknown." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsNotSupportedReply">
            <summary>
            Gets "DNS server replied with Not Implemented status" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsQueryRefusedReply">
            <summary>
            Gets "DNS server refused the query. You should try another DNS server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DnsUnknownReply">
            <summary>
            Gets "DNS server replied with unknown status." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoSmtpServersSpecified">
            <summary>
            Gets "At least one SMTP server must be specified in order to send to relay server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NotHelloed">
            <summary>
            Gets "SMTP Hello (HELO or EHLO) has not yet been sent. Call Hello first." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_EhloNotSupported">
            <summary>
            Gets "EHLO command is not supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoSender">
            <summary>
            Gets "No sender specified for the mail message." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_BadSender">
            <summary>
            Gets "The server rejected the specified sender email address." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoRecipients">
            <summary>
            Gets "At least one recipient must be specified." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_BadRecipient">
            <summary>
            Gets "The server rejected the given recipient." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoAllowedRecipients">
            <summary>
            Gets "The server rejected all the recipients of the mail message." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DataNotAllowed">
            <summary>
            Gets "The server rejected DATA command." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_BadMessageData">
            <summary>
            Gets "The mail message data has been rejected by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_BdatRejected">
            <summary>
            Gets "BDAT command has been rejected by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_MessageDataTooLarge">
            <summary>
            Gets "The length of message data exceeds maximum allowed limit for the given server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_Conversion8bitTo7Bit">
            <summary>
            Gets "The message data will be converted to 7bit format because the given server cannot transmit 8bit data. Some data will be lost." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoSmtpOrDnsServersSpecified">
            <summary>
            Gets "At least one DNS or SMTP server must be specified in order to send mail." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoDomainsToSendFor">
            <summary>
            Gets "At least one recipient domain must be specified in order to send mail to domains MXes." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoDomainsForMXLookup">
            <summary>
            Gets "At least one recipient domain must be specified in order to perform MX lookup." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_EmptyHostNameForDnsQuery">
            <summary>
            Gets "Cannot make DNS query for empty host name." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidDomain0InCache">
            <summary>
            Gets "DNS cache states the domain \"{0}\" does not exist." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_DeadDomain0SmtpMXesInCache">
            <summary>
            Gets "DNS cache states all SMTP MXes for the domain \"{0}\" are not available or broken." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_Pop3AuthCommandUnknown">
            <summary>
            Gets "The server does not support AUTH command. SASL authentication will not be available." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_Pop3CapaCommandUnknown">
            <summary>
            Gets "The server does not support CAPA command. POP3 pipelining will not be available." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapFolderNotSelected">
            <summary>
            Gets "A folder must be selected on the server. Call SelectFolder or ExamineFolder first." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_ImapInvalidEnvelopeMessageNumber0">
            <summary>
            Gets " The invalid envelope message number is: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_ImapNonExistentMessageNumber0">
            <summary>
            Gets " Non-existent message number is: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDescSuffix_ImapNonExistentUid0">
            <summary>
            Gets " Non-existent UID is: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapResponseNotFound">
            <summary>
            Gets "No required data found in the server response." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapMessageIndexNotFound">
            <summary>
            Gets "The message with the specified index does not exist on the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NoMessageInImapResponse">
            <summary>
            Gets "No required mail message data found in the server response." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_InvalidImapEnvelope">
            <summary>
            Gets The envelope data is corrupted or incorrect. Envelope.IsValid will be false." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapUidPlusNotSupported">
            <summary>
            Gets "The IMAP4 server does not support UIDPLUS capability required for the current operation to complete." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapQuotaNotSupported">
            <summary>
            Gets "The IMAP4 server does not support QUOTA capability required to obtain account and folder quotas." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapIdleNotSupported">
            <summary>
            Gets "The IMAP4 server does not support IDLE capability required to go into IDLE mode." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImapSortNotSupported">
            <summary>
            Gets "The IMAP4 server does not support SORT capability required to perform sorted search." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefSignature0Invalid">
            <summary>
            Gets "Invalid TNEF signature 0x{0} (not a valid TNEF stream)." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefUnexpectedEndOfStream">
            <summary>
            Gets "Unexpected end of TNEF stream." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefLevelTypeInvalid0">
            <summary>
            Gets "Invalid TNEF level type: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefAttributeChecksumInvalid">
            <summary>
            Gets "Invalid checksum of TNEF attribute." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefAttributeLevelInvalid0">
            <summary>
            Gets "Invalid TNEF attribute level: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefMapiTypeUnknown0">
            <summary>
            Gets "Unknown TNEF MAPI type: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefGuidInvalid0">
            <summary>
            Gets "Invalid TNEF Guid: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefCompressedRtfHeaderInvalid">
            <summary>
            Gets "Invalid TNEF compressed-RTF header." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefCompressedRtfDataSizeMismatch">
            <summary>
            Gets "TNEF compressed-RTF data size mismatch." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefCompressedRtfCrc32Failed">
            <summary>
            Gets "TNEF compressed-RTF CRC32 failed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_TnefUnknownRtfCompressionType0">
            <summary>
            Gets "TNEF Unknown RTF compression type (magic number {0})." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CryptoProviderWin32Error">
            <summary>
            Gets "Win32 function related to a crypto provider API returned an error. See NativeErrorCode property value for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CertificateStoreWin32Error">
            <summary>
            Gets "Win32 function related to certificate store API returned an error. See NativeErrorCode property value for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CertificateWin32Error">
            <summary>
            Gets "Certificate-related Win32 function returned an error. See NativeErrorCode property value for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_SmimeWin32Error">
            <summary>
            Gets "S/MIME-related Win32 function returned an error. See NativeErrorCode property value for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CertificateValidationError">
            <summary>
            Gets "Certificate validation failed: the certificate is invalid or expired." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CertificateDataInvalid">
            <summary>
            Gets "Certificate data is either invalid or of unknown format." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_NotImpersonated">
            <summary>
            Gets "Not impersonated yet. Call LogonAs first." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_ImpersonationWin32Error">
            <summary>
            Gets "Impersonation-related Win32 function returned an error. See NativeErrorCode property value for more information." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.ErrorDesc_CryptoPrivateKeyInvalid">
            <summary>
            Gets "Invalid cryptographic private key format." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MessageTypeInfo">
            <summary>
            Gets "INFO" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MessageTypeRecv">
            <summary>
            Gets "RECV" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MessageTypeSend">
            <summary>
            Gets "SEND" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MessageTypeUser">
            <summary>
            Gets "USER" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_AssemblyVersion0">
            <summary>
            Gets "Assembly version: {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Base64Banner">
            <summary>
            Gets "Binary data is Base64-encoded" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_AbortRequested">
            <summary>
            Gets "User code called Abort." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillResolveHost0">
            <summary>
            Gets "Will resolve host \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Host0ResolvedToIP1">
            <summary>
            Gets "Host \"{0}\" resolved to IP address(es) {1}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillConnectToHost0OnPort1">
            <summary>
            Gets "Will connect to host \"{0}\" on port {1}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillConnectVia0ProxyAtHost1OnPort2">
            <summary>
            Gets "Will actually connect via {0} proxy server at host \"{1}\" on port {2}." string.
            </summary>
            <remarks>Parameter {0} is a placeholder for the proxy type: SOCKS4, SOCKS5, or HTTP.</remarks>
        </member>
        <member name="P:MailBee.Resources.Log_SocketConnectedToIPAddress0OnPort1">
            <summary>
            Gets "Socket connected to IP address {0} on port {1}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ConnectedToServerAtHost0OnPort1">
            <summary>
            Gets "Connected to mail service at host \"{0}\" on port {1} and ready." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillDisconnectFromHost0">
            <summary>
            Gets "Will disconnect from host \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DisconnectedFromHost0">
            <summary>
            Gets "Disconnected from host \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_StartTls">
            <summary>
            Gets "Request server to begin TLS/SSL negotiation." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillCreateSslCredentials">
            <summary>
            Gets "Will create TLS/SSL credentials." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SslCredentialsCreated">
            <summary>
            Gets "TLS/SSL credentials created." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillPerformSslHandshake">
            <summary>
            Gets "Will start TLS/SSL negotiation sequence." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SslHandshakeDone">
            <summary>
            Gets "TLS/SSL negotiation completed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillValidateServerCert">
            <summary>
            Gets "Will check if server certificate complies with the specified auto-validation flags." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ServerCertRetrieved">
            <summary>
            Gets "Server certificate successfully created from the handle. Can verify it now." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ServerCertAutoValidationSucceeded">
            <summary>
            Gets "Server certificate validation passed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillLoginAs0">
            <summary>
            Gets "Will login as \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_LoggedInAs0">
            <summary>
            Gets "Logged in as \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_WillTrySasl0Auth">
            <summary>
            Gets "Will try SASL {0} authentication method." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Sasl0AuthUnsupported">
            <summary>
            Gets "SASL {0} authentication method is not supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Error0">
            <summary>
            Gets "Error: {0}" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Warning0">
            <summary>
            Gets "Warning: {0}" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_0BytesReceived">
            <summary>
            Gets "Total {0} bytes received." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_0BytesSent">
            <summary>
            Gets "Data chunk of {0} bytes sent." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpWillHello">
            <summary>
            Gets "Will send Hello command (HELO or EHLO)." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.SmtpHelloed">
            <summary>
            Gets "SMTP Hello completed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpLoginFailed">
            <summary>
            Gets "Warning: Authentication failed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpWillResetSmtpSession">
            <summary>
            Gets "Will reset SMTP session." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpSessionReset">
            <summary>
            Gets "SMTP session was reset." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpWillPerformAuthPopBeforeSmtp">
            <summary>
            Gets "Will perform POP-before-SMTP authentication." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpAuthPopBeforeSmtpSucceeded">
            <summary>
            Gets "POP-before-SMTP authentication succeeded." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpAuthPopBeforeSmtpFailed">
            <summary>
            Gets "Warning: POP-before-SMTP authentication failed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpWillSendMailMessageToServer0">
            <summary>
            Gets "Will send mail message to SMTP server \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpSubmittingSenderAndRecipients">
            <summary>
            Gets "Will submit sender and recipients." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpTestSendDone">
            <summary>
            Gets "Test send succeeded." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpSenderAndRecipientsAccepted">
            <summary>
            Gets "Sender and recipients accepted by SMTP server. Will send message data now." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SmtpSendDone">
            <summary>
            Gets "Message successfully submitted to SMTP server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillGetMXLists">
            <summary>
            Gets "Will retrieve MX records for every recipient domain." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillMakeDnsQueryToDnsAt0RegardingHost1">
            <summary>
            Gets "Will make DNS query to DNS server at {0} regarding host \"{1}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailMadeDnsQueryToDnsAt0RegardingHost1">
            <summary>
            Gets "Made DNS query to DNS server at {0} regarding host \"{1}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailGotDnsInfoRegardingHost0FromCache">
            <summary>
            Gets "Got DNS info regarding \"{0}\" from cache." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailProcessedDnsQueryToDnsAt0RegardingHost1">
            <summary>
            Gets "Processed results of DNS query to DNS server at {0} regarding host \"{1}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailGotMXListsFor0DomainsOf1Total">
            <summary>
            Gets "Retrieved MX records for {0} recipient domain(s) of {1} total." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillSendToRecipientDomains">
            <summary>
            Gets "Will send mail message to SMTP MX server(s) for every domain." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillSendToMXesOfDomain0">
            <summary>
            Gets "Will send mail message to SMTP MX server(s) of domain \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailSentToMXesOfDomain0">
            <summary>
            Gets "Sent mail message to SMTP MX server(s) of domain \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailSentToRecipientDomains">
            <summary>
            Gets "Sent mail message to SMTP MX server(s) for every domain." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillSendViaMXLookup">
            <summary>
            Gets "Will send mail message using MX lookup." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailFailedRecipientsAllowed">
            <summary>
            Gets "Failed recipients allowed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailFailedRecipientsNotAllowed">
            <summary>
            Gets "Failed recipients not allowed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillTestSendViaMXLookup">
            <summary>
            Gets "Will test sending mail message using MX lookup." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailSentViaMXLookup">
            <summary>
            Gets "Mail message sent using MX Lookup." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailTestViaMXLookupDone">
            <summary>
            Gets "Test send of mail message using MX Lookup completed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillSend">
            <summary>
            Gets "Will send mail message." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillTestSend">
            <summary>
            Gets "Will test sending mail message." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailDone">
            <summary>
            Gets "Mail message sent." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailTestDone">
            <summary>
            Gets "Test send of mail message done." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailWillSubmitMessageToPickupFolder">
            <summary>
            Gets "Will submit mail message using to pickup folder." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_SendMailMessageSubmittedToPickupFolderAs0">
            <summary>
            Gets "Mail message submitted to pickup folder as \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.LogSuffix_Tag0Rows1">
            <summary>
            Gets " Tag=\"{0}\", Rows=\"{1}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.LogParam_MailingSucceeded">
            <summary>
            Gets "succeeded" string.
            </summary>
            <remarks>Can be used as a parameter #0 in <see cref="P:MailBee.Resources.Log_MailingJob0"/> pattern.</remarks>
        </member>
        <member name="P:MailBee.Resources.LogParam_MailingFailedOrCancelled">
            <summary>
            Gets "failed or cancelled" string.
            </summary>
            <remarks>Can be used as a parameter #0 in <see cref="P:MailBee.Resources.Log_MailingJob0"/> pattern.</remarks>
        </member>
        <member name="P:MailBee.Resources.Log_MailingJob0">
            <summary>
            Gets "Job {0}." string.
            </summary>
            <remarks>Parameter #0 can take values of <see cref="P:MailBee.Resources.LogParam_MailingSucceeded"/>
            or <see cref="P:MailBee.Resources.LogParam_MailingFailedOrCancelled"/>.</remarks>
        </member>
        <member name="P:MailBee.Resources.Log_MailingProcessingJobsStarted">
            <summary>
            Gets "Processing of pending jobs started." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MailingProcessingJobsFinished">
            <summary>
            Gets "All jobs have been processed." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MailingPendingJobEnqueued">
            <summary>
            Gets "New pending job to send e-mail(s)." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MailingFailedJobReEnqueued">
            <summary>
            Gets "Failed job put back into pending list." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MailingFailedJobsEnqueued">
            <summary>
            Gets "All failed jobs moved back into pending list." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MailingPendingJobWentToProcessing">
            <summary>
            Gets "Processing of a pending job started." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_MailingNoPendingJobsLeft">
            <summary>
            Gets "All pending jobs have been put into processing." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsCreatingQueryAboutHost0">
            <summary>
            Gets "Creating DNS query about host \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsSendingQueryToEndPoint0">
            <summary>
            Gets "Sending query to DNS server at \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsParsingReceivedResponse">
            <summary>
            Gets "Parsing a response that was received from DNS server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecursionIsSupported">
            <summary>
            Gets "Recursion is supported by DNS server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecursionIsNotSupported">
            <summary>
            Gets "Recursion is not supported by DNS server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecursionStatusUnknown">
            <summary>
            Gets "Recursion status is unknown for the given DNS server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Dns0RecordsFoundForHost1">
            <summary>
            Gets "{0} DNS record(s) found for host \"{1}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecordOfUnknownType">
            <summary>
            Gets "DNS record of unknown type detected." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecordOfATypeHasIP0">
            <summary>
            Gets "DNS record of A type. IP={0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecordOfCNameTypeIsAliasFor0">
            <summary>
            Gets "DNS record of CNAME type. Alias for \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecordOfTxtTypeHas0Strings">
            <summary>
            Gets "DNS record of TXT type. Has {0} strings." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecordOfPtrTypeDenotesDomain0">
            <summary>
            Gets "DNS record of PTR type. Denotes domain \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsRecordOfMXTypeHasSmtpHost0OfPreference1">
            <summary>
            Gets DNS record of MX type. SmtpHost=\"{0}\", Preference={1}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_DnsQueryDone">
            <summary>
            Gets "DNS query done." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3WillTryApopAuth">
            <summary>
            Gets "Will try APOP authentication." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3ApopAuthNotSupported">
            <summary>
            Gets "APOP authentication is not supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3WillTryRegularAuth">
            <summary>
            Gets "Will try regular USER/PASS authentication." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3GetAdvertizedSaslMethodsViaAuth">
            <summary>
            Gets "Get the list of advertized SASL authentication methods via AUTH command." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Pop3AuthCommandUnknown">
            <summary>
            Gets "AUTH command is not supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3GetCapabilitiesViaCapa">
            <summary>
            Gets "Get the list of POP3 capabilities via CAPA command." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Pop3CapaCommandUnknown">
            <summary>
            Gets "CAPA command is not supported by the server." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3DownloadStat">
            <summary>
            Gets "Download inbox statistics." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3DownloadList">
            <summary>
            Gets "Download the list of lengths of all messages in inbox." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3DownloadUidl">
            <summary>
            Gets "Download the list of Unique-IDs of all messages in inbox." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3ResetDeletes">
            <summary>
            Gets "Cancel deletion of all messages marked as deleted." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3WillDeleteMessageIndex0">
            <summary>
            Gets "Will mark message (index={0}) as deleted." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3DeletedMessageIndex0">
            <summary>
            Gets "Message (index={0}) marked as deleted." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3NothingToDelete">
            <summary>
            Gets "No messages could be deleted from empty inbox." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3WillDeleteMessagesStartIndex0Count1">
            <summary>
            Gets "Will mark messages (startIndex={0}, count={1}) as deleted." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3DeletedMessagesStartIndex0Count1">
            <summary>
            Gets "Messages (startIndex={0}, count={1}) marked as deleted." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3EntireMessage">
            <summary>
            Gets "entire message" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3MessageHeader">
            <summary>
            Gets "message header" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3MessageHeaderAnd0BodyLines">
            <summary>
            Gets "partial (header + {0} body lines) message" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3EntireMessages">
            <summary>
            Gets "entire messages" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3MessageHeaders">
            <summary>
            Gets "message headers" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3MessageHeadersAnd0BodyLines">
            <summary>
            Gets "partial (header + {0} body lines) messages" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3WillDownload0Index1">
            <summary>
            Gets "Will download {0} (index={1})." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3Downloaded0Index1">
            <summary>
            Gets "Downloaded {0} (index={1})." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3ZeroMessagesDownloadedFromEmptyInbox">
            <summary>
            Gets "Inbox was empty. Zero messages downloaded." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3WillDownload0StartIndex1Count2">
            <summary>
            Gets "Will download {0} (startIndex={1}, count={2})." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_Pop3Downloaded0StartIndex1Count2">
            <summary>
            Gets "Downloaded {0} (startIndex={1}, count={2})." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapLiteralOfLength0">
            <summary>
            Gets "Literal of length {0}." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapPreauthenticatedUser">
            <summary>
            Gets "Preauthenticated user" string.
            </summary>
            <remarks>This string is used in conjunction with <see cref="P:MailBee.Resources.Log_LoggedInAs0"/> when
            the user was pre-authenticated by external means. MailBee detects this when PREAUTH
            response is received from the IMAP4 server.</remarks>
        </member>
        <member name="P:MailBee.Resources.Log_ImapGetCapabilitiesViaCapability">
            <summary>
            Gets "Get the list of IMAP4 capabilities via CAPABILITY command." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillTryRegularAuth">
            <summary>
            Gets "Will try regular LOGIN authentication." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapManageFolder0">
            <summary>
            Gets "Manage folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapRenameFolder0To1">
            <summary>
            Gets "Rename folder \"{0}\" to \"{1}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapSelectFolder0">
            <summary>
            Gets "Select folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapCloseFolder">
            <summary>
            Gets "Close folder." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapExpunge">
            <summary>
            Gets "Expunge all deleted messages from the folder." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapExpunge0">
            <summary>
            Gets "Expunge messages with UIDs \"{0}\" from the folder." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapFolderStatus0">
            <summary>
            Gets "Get statistics for folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapFolderQuota0">
            <summary>
            Gets "Obtain quota limits and usage for folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapGettingQuotaFromList">
            <summary>
            Gets "Processing a single quota from quota list." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapMatchingQuotaFound">
            <summary>
            Gets "Matching quota found." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillDownloadFoldersOf0Matching1">
            <summary>
            Gets "Will download list of sub-folders of \"{0}\" folder matching \"{1}\" condition." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapDownloadFoldersDone">
            <summary>
            Gets "Folder list downloaded." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillSearch">
            <summary>
            Gets "Will perform search in the folder." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapSearchDone">
            <summary>
            Gets "Search done." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillSort">
            <summary>
            Gets "Will perform sorted search in the folder." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapSortDone">
            <summary>
            Gets "Sorted search done." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillDownloadEnvelopes">
            <summary>
            Gets "Will download envelopes." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapDownloadEnvelopesDone">
            <summary>
            Gets "Envelopes downloaded" string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapSetMessageFlags">
            <summary>
            Gets "Setting flags for messages." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillUploadMessageTo0">
            <summary>
            Gets "Will upload message to folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapUploadMessageDone">
            <summary>
            Gets "Message uploaded." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillCopyMessagesTo0">
            <summary>
            Gets "Will copy messages to folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapCopyMessagesDone">
            <summary>
            Gets "Messages copied." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillMoveMessagesTo0">
            <summary>
            Gets "Will move messages to folder \"{0}\"." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapMoveMessagesDone">
            <summary>
            Gets "Messages moved." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillIdle">
            <summary>
            Gets "Will go idle." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapWillFinishIdling">
            <summary>
            Gets "Will finish idling." string.
            </summary>
        </member>
        <member name="P:MailBee.Resources.Log_ImapIdleDone">
            <summary>
            Gets "Idle done." string.
            </summary>
        </member>
        <member name="T:MailBee.Html.Element">
            <summary>
            Represents an HTML element or a piece of text in the HTML document and
            provides properties and methods for examining or altering the contents of this element.
            </summary>
            <remarks>
            <para>Objects of this class are building blocks of DOM (document object model) of the HTML document.
            MailBee represents the HTML document as a tree of <see cref="T:MailBee.Html.Element"/> objects which can be nested within
            each other accordingly the HTML markup of the document. The document itself is also represented
            as <see cref="T:MailBee.Html.Element"/> object.</para>
            <para>Each <see cref="T:MailBee.Html.Element"/> object has <see cref="P:MailBee.Html.Element.InnerElements"/> collection of HTML elements nested in the parent one.
            Alternatively, you can get the list of all elements located inside the parent element, regardless of their nesting level (not important if they are nested
            directly in the parent element or into any of its child elements). You can use <see cref="M:MailBee.Html.Element.GetAllElements"/>, <see cref="M:MailBee.Html.Element.GetInnerElementsByName(System.String)"/> and other methods for this.</para>
            <para>You can also access various parts of the contents of the HTML element as a string using <see cref="P:MailBee.Html.Element.InnerHtml"/>, <see cref="P:MailBee.Html.Element.OuterHtml"/>, <see cref="P:MailBee.Html.Element.TagDefinition"/> and <see cref="P:MailBee.Html.Element.TagName"/> properties.
            For instance, you can set <see cref="P:MailBee.Html.Element.TagDefinition"/> to a certain tag definition string and then use <see cref="P:MailBee.Html.Element.Attributes"/> collection to examine the attibutes of this tag.</para>
            <para>Use <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> or <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> methods for advanced processing of HTML documents. These methods
            allow the developer to apply a set of content-processing rules to the HTML document. These rules can be both user-defined and predefined
            (such as <see cref="M:MailBee.Html.RuleSet.GetSafeHtmlRules"/> which defines the rules for making HTML document contents safe and free from any potentially dangerous items
            such as scripts).</para>
            <para>To get the list of links or images in the document represented by <see cref="T:MailBee.Html.Element"/> object,
            create <see cref="T:MailBee.Html.Processor"/> object and set <see cref="P:MailBee.Html.Processor.Dom"/> property to the given <see cref="T:MailBee.Html.Element"/> object reference,
            and examine <see cref="P:MailBee.Html.Processor.AHRefs"/> and <see cref="P:MailBee.Html.Processor.Images"/> property values. You can also use
            <see cref="T:MailBee.Html.Processor"/> class to read/write HTML markup from/into a stream.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagReplacementRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.Element)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.Element.#ctor">
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagReplacementRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.Element)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.Element.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MailBee.Html.Element"/> object with the specified HTML markup.
            </summary>
            <param name="htmlText">The actual HTML markup of the <see cref="T:MailBee.Html.Element"/>.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="htmlText"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <paramref name="htmlText"/> can contain any string including HTML with broken markup, plain text, etc.
            MailBee will attempt to parse it even if not all tags are closed, or some tags are closed incorrectly, etc.
            </remarks>
            <example>
            This samples initializes <see cref="T:MailBee.Html.Element"/> object with certain HTML markup and then
            displays the name of the root tag and the inner HTML contents of the specified markup.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> MailBee.Html;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            Element richText = <span style="color: blue;">new</span> Element("&lt;html&gt;&lt;head&gt;&lt;title&gt;Sample header&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Short sample&lt;body&gt;&lt;/html&gt;");
            Console.WriteLine("The root tag name is : " + richText.TagName);
            Console.WriteLine("The inner HTML source is : " + richText.InnerHtml);
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee.Html
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> richText <span style="color: blue;">As</span> <span style="color: blue;">New</span> Element("&lt;html&gt;&lt;head&gt;&lt;title&gt;Sample header&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Short sample&lt;body&gt;&lt;/html&gt;")
            Console.WriteLine("The root tag name is : " &amp; richText.TagName)
            Console.WriteLine("The inner HTML source is : " &amp; richText.InnerHtml)
            </code>
            </example>
        </member>
        <member name="M:MailBee.Html.Element.GetAllElements">
            <summary>
            Returns the current HTML element and all its child elements as a flat list.
            </summary>
            <returns>A reference to the collection containing the current HTML element
            and all its child elements (including their own sub-children, etc).</returns>
            <remarks>The returned collection is never empty (it contains at least the current element itself).</remarks>
        </member>
        <member name="M:MailBee.Html.Element.GetAllElementsByName(System.String)">
            <summary>
            Returns the current HTML element and all its child elements
            having the specified tag name as a flat list.
            </summary>
            <param name="tagName">The HTML tag name. <paramref name="tagName"/> is case-insensitive.</param>
            <returns>A reference to the collection containing the current HTML element
            and all its child elements (including their own sub-children, etc) having the specified tag name.</returns>
            <remarks>
            <para>If <paramref name="tagName"/> is a null reference, the returned collection will contain only those child elements which are not tags
            (i.e. plain-text blocks).</para>
            <para>The returned collection is never empty (it contains at least the current element itself).</para>
            </remarks>
        </member>
        <member name="M:MailBee.Html.Element.GetAttributeByName(System.String)">
            <summary>
            Returns the HTML attribute with the specified name.
            </summary>
            <param name="attrName">The name of HTML attribute. <paramref name="attrName"/> is case-insensitive.</param>
            <returns>A <see cref="T:MailBee.Html.TagAttribute"/> object representing the specified attribute, or a null reference
            (<b>Nothing</b> in Visual Basic) if the tag definition does not contain the specified attribute.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="attrName"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>This method returns the first occurrence of the specified attribute. If you need to examine tags
            which may contain multiple occurrences of the same attribute, use <see cref="M:MailBee.Html.Element.GetAttributesByName(System.String)"/> method.</remarks>
        </member>
        <member name="M:MailBee.Html.Element.GetAttributesByName(System.String)">
            <summary>
            Returns all attributes with the specified name and contained in the current HTML element.
            </summary>
            <param name="attrName">The name of HTML attribute. <paramref name="attrName"/> is case-insensitive.</param>
            <returns>A reference to the collection
            of <paramref name="attrName"/> attributes of the current HTML element.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="attrName"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Usually the returned collection will contain 1 or 0 attributes. It's uncommon for an HTML tag to
            contain multiple attributes with the same name.</remarks>
        </member>
        <member name="M:MailBee.Html.Element.GetInnerElementsByName(System.String)">
            <summary>
            Returns the flat list containing elements with the specified tag name and contained in the current HTML element.
            </summary>
            <param name="tagName">The HTML tag name. <paramref name="tagName"/> is case-insensitive.</param>
            <returns>A reference to the collection containing those child elements 
            of the current HTML element (including their own sub-children, etc)
            which have the specified tag name.</returns>
            <remarks>
            If <paramref name="tagName"/> is a null reference, the returned collection will contain only those child elements which are not tags
            (i.e. plain-text blocks).
            </remarks>
        </member>
        <member name="M:MailBee.Html.Element.Remove">
            <summary>
            Removes this HTML element from <see cref="P:MailBee.Html.Element.InnerElements"/> collection of its parent.
            </summary>
            <remarks>If this element is not contained in another <see cref="T:MailBee.Html.Element"/> (i.e. does not have a parent),
            this method does nothing.</remarks>
        </member>
        <member name="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)">
            <summary>
            Applies the specified tag processing rules to the current element and any its child elements, calling a delegate
            for every tag which matches the specified rules.
            <seealso cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/>
            </summary>
            <param name="rules">A set of rules to be applied during processing the element.</param>
            <param name="del">The delegate to be called for every HTML element which satisfies conditions of any rule in <paramref name="rules"/>, or
            a null reference (<b>Nothing</b> in Visual Basic) if no delegate should be called.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="rules"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>This method alters the element during processing. To return the modified version while
            leaving the element contents intact, use <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method.</para>
            <para>If you specified <paramref name="del"/> delegate, <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method will execute it whenever
            any rule matches. It's also possible to define a rule which does nothing except calling the delegate.
            You can add such a rule using <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)">
            <summary>
            Applies the specified tag processing rules to the copy of the current element and any its child elements, calling a delegate
            for every tag which matches the specified rules, and returns the resulting <see cref="P:MailBee.Html.Element.OuterHtml"/> as a string.
            <seealso cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/>
            </summary>
            <param name="rules">A set of rules to be applied during processing the element.</param>
            <param name="del">The delegate to be called for every HTML element which satisfies conditions of any rule in <paramref name="rules"/>, or
            a null reference (<b>Nothing</b> in Visual Basic) if no delegate should be called.</param>
            <returns>A string containing <see cref="P:MailBee.Html.Element.OuterHtml"/> of the current <see cref="T:MailBee.Html.Element"/> copy which was modified
            accordingly the specified rules.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="rules"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>This method does not alter the element during processing (all operations take place on its temporary copy).</para>
            <para>If you specified <paramref name="del"/> delegate, <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method will execute it whenever
            any rule matches. It's also possible to define a rule which does nothing except calling the delegate.
            You can add such a rule using <see cref="M:MailBee.Html.RuleSet.AddTagProcessingCondition(System.String,MailBee.Html.TagAttributeCollection)"/> method.</para>
            </remarks>
            <example>The example is available in <see cref="M:MailBee.Html.RuleSet.AddTagProcessingRule(System.String,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,MailBee.Html.TagAttributeCollection,System.Boolean)"/> topic.</example>
        </member>
        <member name="M:MailBee.Html.Element.Stop">
            <summary>
            Stops execution of <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> and <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> methods.
            </summary>
            <remarks>
            <para>You can call this method in <see cref="T:MailBee.Html.ProcessElementDelegate"/> method if want to stop
            processing of the document.</para>
            <para>If <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> or <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method is not being running,
            this method does nothing.</para>
            <note>You should call <see cref="M:MailBee.Html.Element.Stop"/> method for the same object you earlier called <see cref="M:MailBee.Html.Element.Process(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> or <see cref="M:MailBee.Html.Element.ProcessToString(MailBee.Html.RuleSet,MailBee.Html.ProcessElementDelegate)"/> method for.
            If you call it for another object (such as the object which was passed as <i>elem</i> parameter to your delegate method),
            this will not have any effect.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Html.Element.Attributes">
            <summary>
            Gets the list of all attributes of the HTML tag.
            </summary>
            <value>
            A reference to the collection of attributes of the HTML tag or a null reference (<b>Nothing</b> in Visual Basic)
            if <see cref="P:MailBee.Html.Element.TagName"/> is a null reference (i.e. the current HTML element does not denote a tag).
            </value>
        </member>
        <member name="P:MailBee.Html.Element.InnerHtml">
            <summary>
            Gets or sets the inner HTML contents of the current HTML element.
            <seealso cref="P:MailBee.Html.Element.OuterHtml"/>
            </summary>
            <value>A string containing the inner HTML data enclosed between
            opening and closing tags of the current element,
            or an empty string if there is no content in the current HTML element. It's never a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>If the current element is not an HTML tag but rather a block of plain text, <see cref="P:MailBee.Html.Element.InnerHtml"/>
            and <see cref="P:MailBee.Html.Element.OuterHtml"/> properties will return the same value (the plain text contents).</remarks>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <example>The example is available in <see cref="M:MailBee.Html.Element.#ctor(System.String)"/> topic.</example>
        </member>
        <member name="P:MailBee.Html.Element.InnerElements">
            <summary>
            Gets the list of HTML elements directly contained in the current HTML element.
            </summary>
            <value>A reference to the collection of sub-elements of the current <see cref="T:MailBee.Html.Element"/> object.
            It's never a null reference (<b>Nothing</b> in Visual Basic).</value>
            <remarks>
            The returned collection contains only immediate children of the current element. Elements which are nested into child elements
            (sub-sub-elements, etc) are not included into the returned collection. Also, the collection can be empty if no children exist. To get the list of all contained elements (regardless of their nesting level),
            use <see cref="M:MailBee.Html.Element.GetAllElements"/> method (it will return all the contained elements including the current element itself and thus will never be empty).
            </remarks>
        </member>
        <member name="P:MailBee.Html.Element.OuterHtml">
            <summary>
            Gets or sets the text representation of the current HTML element.
            <seealso cref="P:MailBee.Html.Element.InnerHtml"/>
            </summary>
            <value>A string containing the current HTML element with its inner content and opening and closing tags if any.
            It's never a null reference (<b>Nothing</b> in Visual Basic).</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Html.Element.TagDefinition">
            <summary>
            Gets or sets the tag definition of the current HTML element.
            </summary>
            <value>A string definition of the current HTML tag or
            a null reference (<b>Nothing</b> in Visual Basic) if this <see cref="T:MailBee.Html.Element"/> object represents
            a plain-text block rather than a tag.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is an empty string.</exception>
            <remarks>The tag definition is a string inside angle brackets of the opening tag. For instance,
            if the entire tag is <i>&lt;script src="file.js"&gt;&lt;/script&gt;</i>, the tag definition is
            <i>script src="file.js"</i>.
            </remarks>
        </member>
        <member name="P:MailBee.Html.Element.TagName">
            <summary>
            Gets or sets the tag name of the current HTML element.
            </summary>
            <value>A string name of the current HTML tag or
            a null reference (<b>Nothing</b> in Visual Basic) if the current <see cref="T:MailBee.Html.Element"/> object represents
            a plain-text block rather than a tag.</value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is an empty string.</exception>
            <remarks>Tag names are case-insensitive.</remarks>
            <example>The example is available in <see cref="M:MailBee.Html.Element.#ctor(System.String)"/> topic.</example>
        </member>
        <member name="T:MailBee.AuthenticationMethods">
            <summary>
            Provides authentication methods to be used for logging in the user account on the server.
            <seealso cref="T:MailBee.AuthenticationOptions"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/>
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AuthPopBeforeSmtp"/>
            </summary>
            <remarks>
            When the application is a web application which operates under context of anonymous user,
            Windows Integrated Authentication will use the context of this anonymous user (which most likely doesn't have an account
            on the mail server). Thus, using Windows Integrated Authentication does not make sense for web apps operating under anonymous
            user account (Internet Guest User).
            <note><see cref="F:MailBee.AuthenticationMethods.SaslNtlm"/> and <see cref="F:MailBee.AuthenticationMethods.SaslKerberosGssApi"/> in Windows Integrated Authentication mode 
            authentication can only be used if the application has permissions to access Windows API (<b>UnmanagedCode</b>
            permission required).</note>
            </remarks>
        </member>
        <member name="F:MailBee.AuthenticationMethods.None">
            <summary>
            No authentication. Often used with <see cref="T:MailBee.SmtpMail.Smtp"/>.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.Regular">
            <summary>
            Standard authentication. Passwords are transmitted as clear-text. Not supported by SMTP servers.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.Apop">
            <summary>
            Secure APOP authentication. Supported by most POP3 servers but cannot be used
            with other servers like SMTP because APOP is not a SASL method.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslUserDefined">
            <summary>
            A custom SASL authentication method implemented by the developer.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslLogin">
            <summary>
            SASL LOGIN authentication. Not secure but widely supported. Passwords are transmitted as Base64 strings.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslPlain">
            <summary>
            SASL PLAIN authentication. Not secure but widely supported. Passwords are transmitted as Base64 strings.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslCramMD5">
            <summary>
            Secure SASL CRAM-MD5 authentication. Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslDigestMD5">
            <summary>
            Secure SASL DIGEST-MD5 authentication. Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslNtlm">
            <summary>
            Secure SASL NTLM authentication (also known as Secure Password Authentication - SPA). In Windows domain environment such as Active Directory, can also be used to authenticate the current Windows user
            (in this case, the developer should pass a null reference (<b>Nothing</b> in Visual Basic) as
            <i>accountName</i> and <i>password</i> values). Might not be supported by particular server implementations.
            See remarks section for futher details regarding Windows Integrated Authentication.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslMsn">
            <summary>
            Secure SASL MSN authentication (equivalent to NTLM). Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.SaslKerberosGssApi">
            <summary>
            Secure SASL GSSAPI authentication (Kerberos). Used to authenticate the current Windows user
            in Windows domain environment such as Active Directory. <i>accountName</i> and <i>password</i> values
            will be ignored and can be left blank or a null reference (<b>Nothing</b> in Visual Basic).
            Might not be supported by particular server implementations.
            See remarks section for futher details regarding Windows Integrated Authentication.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationMethods.Auto">
            <summary>
            Tells MailBee to automatically select the best supported authentication method and downgrade
            to insecure methods if secure methods are not supported by the server.
            </summary>
        </member>
        <member name="T:MailBee.AuthenticationOptions">
            <summary>
            Provides flags for tuning the authentication process.
            <seealso cref="T:MailBee.AuthenticationMethods"/>
            <seealso cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)"/>
            <seealso cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods"/>
            </summary>
            <remarks>
            <para>These flags affect how MailBee selects authentication methods for login process.</para>
            <para>By default, MailBee takes the list of the desired authentication methods (specified by
            <i>authMethods</i> parameter of <see cref="M:MailBee.Pop3Mail.Pop3.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)">Pop3.Login</see> method for <b>Pop3</b>,
            <i>authMethods</i> parameter of <see cref="M:MailBee.ImapMail.Imap.Login(System.String,System.String,MailBee.AuthenticationMethods,MailBee.AuthenticationOptions,MailBee.SaslMethod)">Imap.Login</see> method for <b>Imap</b>,
            or by <see cref="P:MailBee.SmtpMail.SmtpServer.AuthMethods">SmtpServer.AuthMethods</see> property for <b>Smtp</b>),
            filters out the methods not advertized by the server in its capabilities, and then
            tries the remained methods until compatible method is found. If such method was found, it's
            used for the authentication process. If not, an exception is thrown if exceptions are enabled.</para>
            <para>The flags in this enumeration allow the developer to change the default behavior of MailBee.
            </para></remarks>
        </member>
        <member name="F:MailBee.AuthenticationOptions.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationOptions.TryUnsupportedMethods">
            <summary>
            Force MailBee to try authentication methods regardless whether they are advertized by the server in its capabilities or not.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationOptions.UseSingleMethodOnly">
            <summary>
            Force MailBee not to switch to other authentication methods if the best (most secure) method
            is not supported by the server.
            </summary>
        </member>
        <member name="F:MailBee.AuthenticationOptions.PreferSimpleMethods">
            <summary>
            Force MailBee to try simple (i.e. non-secure) authentication methods before secure ones.
            In other words, MailBee will iterate through the list of desired methods in reverse order.
            This option is useful for communicating with mail servers which have errors
            in their secure authentication implementations.
            This flag is also set by default if <see cref="P:MailBee.Global.SafeMode"/> was <b>true</b>.
            </summary>
        </member>
        <member name="T:MailBee.AntiSpam.BayesAlgorithm">
            <summary>
            Defines the available values for
            <see cref="P:MailBee.AntiSpam.BayesFilter.Algorithm">BayesFilter.Algorithm</see>
            property to specify the algorithm which should be used to calculate spam
            score of e-mail messages.
            </summary>
        </member>
        <member name="F:MailBee.AntiSpam.BayesAlgorithm.GrahamAlgorithm">
            <summary>
            Use Graham algorithm (faster).
            </summary>
        </member>
        <member name="F:MailBee.AntiSpam.BayesAlgorithm.ChiSquareAlgorithm">
            <summary>
            Use Chi-Square algorithm (more accurate).
            </summary>
        </member>
        <member name="T:MailBee.AntiSpam.BayesFilter">
            <summary>
            Provides properties and methods for checking e-mails messages for spam
            probability and learning the filter from proven spam and non-spam messages.
            </summary>
            <remarks>
            <para>The filter uses the existing database of spam and non-spam messages to score
            new messages in the range of 0-100%. 0% corresponds to absolutely non-spam message,
            100% corresponds to absolutely spam message.</para>
            <para>The key point is learning the filter: telling the filter which messages
            are spam or non-spam. This is called training the filter.</para>
            <para>Initially, while the database is empty, the filter has no existing
            messages which to compare with the message in question.</para>
            <para>Thus, the first task is to train the filter with several hundreds of typical spam and
            non-spam messages you usually get. This will increase the filter efficiency from zero
            to the suitable value. The training should, however, continue in the future to further
            improve the quality of spam recognition. The larger database is, the better spam/non-spam
            recognition is.</para>
            <para>The filter will operate correctly ONLY if it was trained with a good number of spam
            AND non-spam messages.</para>
            <para>You can train the filter using <see cref="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)"/> method.</para>
            <para>To score a message (determine if it's spam or not), use <see cref="M:MailBee.AntiSpam.BayesFilter.ScoreMessage(MailBee.Mime.MailMessage)"/> method.</para>
            <note>MailBee also supports other technologies which can be used as a sort of antispam check. They include
            full support of <see cref="T:MailBee.Security.DomainKeys"/> (signing and verification of e-mails using DomainKeys
            signatures) and DNX MX/Reverse DNS checks (see <see cref="M:MailBee.SmtpMail.Smtp.GetMXHosts(System.String)"/> and
            <see cref="M:MailBee.SmtpMail.Smtp.GetPtrData(System.String)"/> methods).</note>
            </remarks>
            <example>
            <para>This sample trains the Bayesian filter for spam and for non-spam messages;
            saves resulting database and scores sample e-mails for spam probability using
            this database.</para>
            <para>It's assumed the spam and non-spam samples are .EML files located in
            C:\AntiSpam\Spam and C:\AntiSpam\NonSpam folders respectively. The database
            itself (spam.dat and nonspam.dat) will be saved in C:\AntiSpam folder.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.AntiSpam;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		BayesFilter filter = <span style="color: blue;">new</span> BayesFilter();
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: green;">// Train Bayesian filter for spam messages.</span>
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\AntiSpam\Spam", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			filter.TrainFilter(msg, <span style="color: blue;">true</span>); <span style="color: green;">// Mark as spam.</span>
            		}
            
            		<span style="color: green;">// Train Bayesian filter for non-spam messages.</span>
            		files = Directory.GetFiles(@"C:\AntiSpam\NonSpam", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			filter.TrainFilter(msg, <span style="color: blue;">false</span>); <span style="color: green;">// Mark as non-spam.</span>
            		}
            
            		<span style="color: green;">// Save Bayesian database to disk.</span>
            		filter.SaveDatabase(@"C:\AntiSpam\spam.dat", @"C:\AntiSpam\nonspam.dat");
            
            		<span style="color: green;">// Test our emails for spam.</span>
            		files = Directory.GetFiles(@"C:\AntiSpam\Emails", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			Console.WriteLine("Spam probability is: {0}%", filter.ScoreMessage(msg));
            		}
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.AntiSpam
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> filter <span style="color: blue;">As</span> BayesFilter = <span style="color: blue;">New</span> BayesFilter()
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage()
            
            		<span style="color: green;">' Train Bayesian filter for spam messages.</span>
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\AntiSpam\Spam", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			filter.TrainFilter(msg, <span style="color: blue;">True</span>) <span style="color: green;">' Mark as spam.</span>
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Train Bayesian filter for non-spam messages.</span>
            		files = Directory.GetFiles("C:\AntiSpam\NonSpam", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			filter.TrainFilter(msg, <span style="color: blue;">False</span>) <span style="color: green;">' Mark as non-spam.</span>
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Save Bayesian database to disk.</span>
            		filter.SaveDatabase("C:\AntiSpam\spam.dat", "C:\AntiSpam\nonspam.dat")
            
            		<span style="color: green;">' Test our emails for spam.</span>
            		files = Directory.GetFiles("C:\AntiSpam\Emails", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			Console.WriteLine("Spam probability is: {0}%", filter.ScoreMessage(msg))
            		<span style="color: blue;">Next</span>
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.AntiSpam.BayesFilter.LoadDatabase(System.String,System.String)">
            <summary>
            Loads Bayesian database from disk.
            <seealso cref="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)"/>
            <seealso cref="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String)"/>
            </summary>
            <example>
            The example is available in <see cref="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)"/> topic.
            </example>
            <param name="spamFilename">The full or relative path to the file containing spam samples.</param>
            <param name="nonSpamFilename">The full or relative path to the file containing non-spam samples.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="spamFilename"/> or <paramref name="nonSpamFilename"/> is an empty string or
            a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred.</exception>
            <remarks>
            If you do not already have a database of spam/non-spam samples, you should
            first train the filter and populate the database by calling
            <see cref="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)"/> method for a significant number of spam and
            non-spam messages. You can save the resulting database using
            <see cref="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String)">
            <summary>
            Saves the Bayesian database to disk.
            <seealso cref="M:MailBee.AntiSpam.BayesFilter.LoadDatabase(System.String,System.String)"/>
            </summary>
            <example>
            The example is available in <see cref="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)"/> topic.
            </example>
            <param name="spamFilename">The full or relative path to the file containing spam samples.</param>
            <param name="nonSpamFilename">The full or relative path to the file containing non-spam samples.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="spamFilename"/> or <paramref name="nonSpamFilename"/> is an empty string or
            a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred.</exception>
            <remarks>
            <para>This method always saves the database from memory to disk even if
            it has not been changed since it had been loaded with
            <see cref="M:MailBee.AntiSpam.BayesFilter.LoadDatabase(System.String,System.String)"/> method. If you want to save the database only
            if it had been changed, use another <see cref="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String,System.Int32,System.Boolean)"/> overload.</para>
            <para>If you do not have a database yet, you should not call 
            <see cref="M:MailBee.AntiSpam.BayesFilter.LoadDatabase(System.String,System.String)"/>. In this case, it's assumed the default empty
            database is loaded. You can then train it with <see cref="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)"/>
            method and then save the produced database to disk.</para>
            <para>Make sure your application has read/write access to the specified database file locations.</para>
            </remarks>
        </member>
        <member name="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Compacts the database by removing non-significant data and saves
            the database to disk.
            </summary>
            <param name="spamFilename">The full or relative path to the file containing spam samples.</param>
            <param name="nonSpamFilename">The full or relative path to the file containing non-spam samples.</param>
            <param name="threshold">Specifies how many times (at least) the word should
            appear in the database to keep it from removal during compacting the
            database. If the word appears less times then specified, it will be
            considered non-significant and thus will be removed. If zero, no words
            will be removed from the database.</param>
            <param name="saveAlways">If <b>true</b>, the method will save the database
            even if has not been modified since it had been loaded to memory;
            if <b>false</b>, the method will save it only if it has been modified.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="spamFilename"/> or <paramref name="nonSpamFilename"/> is an empty string or
            a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:MailBee.MailBeeIOException">An I/O error occurred.</exception>
            <remarks>
            <para>Compacting the database will decrease the file size but will decrease
            accuracy of spam recognition as well. It makes sense for very large
            databases populated from many thousands of e-mails. In this case, using
            a value of 3-5 will significantly decrease the database size but won't
            have big impact on accuracy. In general, the larger database size is,
            the larger threshold value can be.</para>
            <para>If you save the database to the same location where you already
            have it, specify <paramref name="saveAlways"/> as <b>false</b>.
            If you save to a new location, specify <paramref name="saveAlways"/>
            as <b>true</b>.</para>
            <para>Make sure your application has read/write access to the specified database file locations.</para>
            </remarks>
            <example>
            <para>This sample removes all words that appear less than 3 times from
            the Bayesian database.</para>
            <para>It's assumed the spam and non-spam samples are .EML files located in
            C:\AntiSpam\Spam and C:\AntiSpam\NonSpam folders respectively. The database
            itself (spam.dat and nonspam.dat) will be saved in C:\AntiSpam folder.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System;
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.AntiSpam;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		BayesFilter filter = <span style="color: blue;">new</span> BayesFilter();
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		<span style="color: blue;">string</span> spamDatabasePath = @"C:\AntiSpam\spam.dat";
            		<span style="color: blue;">string</span> nonSpamDatabasePath = @"C:\AntiSpam\nonspam.dat";
            		filter.LoadDatabase(spamDatabasePath, nonSpamDatabasePath);
            
            		<span style="color: green;">// Train Bayesian filter for spam messages.</span>
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\AntiSpam\Spam", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			filter.TrainFilter(msg, <span style="color: blue;">true</span>); <span style="color: green;">// Mark as spam.</span>
            		}
            
            		<span style="color: green;">// Train Bayesian filter for non-spam messages.</span>
            		files = Directory.GetFiles(@"C:\AntiSpam\NonSpam", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			filter.TrainFilter(msg, <span style="color: blue;">false</span>); <span style="color: green;">// Mark as non-spam.</span>
            		}
            
            		<span style="color: green;">// Save Bayesian database to disk without compression.</span>
            		filter.SaveDatabase(spamDatabasePath, nonSpamDatabasePath);
            
            		FileInfo fis = <span style="color: blue;">new</span> FileInfo(spamDatabasePath);
            		FileInfo fins = <span style="color: blue;">new</span> FileInfo(nonSpamDatabasePath);
            		Console.WriteLine("Size of database before compacting is: {0}", fis.Length + fins.Length);
            
            		<span style="color: green;">// Compress Bayesian database and save it to disk.</span>
            		filter.SaveDatabase(spamDatabasePath, nonSpamDatabasePath, 3, <span style="color: blue;">false</span>);
            
            		fis = <span style="color: blue;">new</span> FileInfo(spamDatabasePath);
            		fins = <span style="color: blue;">new</span> FileInfo(nonSpamDatabasePath);
            		Console.WriteLine("Size of database after compacting is: {0}", fis.Length + fins.Length);
            	}
            }
            
            <span style="color: green;">// Outputs:</span>
            <span style="color: green;">// Size of database before compacting is: 21164</span>
            <span style="color: green;">// Size of database after compacting is: 11364 (may differ in your case)</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.AntiSpam
            
            <span style="color: blue;">Class</span> Sample
            	<span style="color: blue;">Shared</span> <span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> filter <span style="color: blue;">As</span> BayesFilter = <span style="color: blue;">New</span> BayesFilter()
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage()
            
            		<span style="color: blue;">Dim</span> spamDatabasePath <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "C:\AntiSpam\spam.dat"
            		<span style="color: blue;">Dim</span> nonSpamDatabasePath <span style="color: blue;">As</span> <span style="color: blue;">String</span> = "C:\AntiSpam\nonspam.dat"
            		filter.LoadDatabase(spamDatabasePath, nonSpamDatabasePath)
            
            		<span style="color: green;">' Train Bayesian filter for spam messages.</span>
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\AntiSpam\Spam", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			filter.TrainFilter(msg, <span style="color: blue;">True</span>) <span style="color: green;">' Mark as spam.</span>
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Train Bayesian filter for non-spam messages.</span>
            		files = Directory.GetFiles("C:\AntiSpam\NonSpam", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			filter.TrainFilter(msg, <span style="color: blue;">False</span>) <span style="color: green;">' Mark as non-spam.</span>
            		<span style="color: blue;">Next</span>
            
            		<span style="color: green;">' Save Bayesian database to disk.</span>
            		filter.SaveDatabase(spamDatabasePath, nonSpamDatabasePath)
            
            		<span style="color: blue;">Dim</span> fis <span style="color: blue;">As</span> FileInfo = <span style="color: blue;">New</span> FileInfo(spamDatabasePath)
            		<span style="color: blue;">Dim</span> fins <span style="color: blue;">As</span> FileInfo = <span style="color: blue;">New</span> FileInfo(nonSpamDatabasePath)
            		Console.WriteLine("Size of database before compacting is: {0}", fis.Length + fins.Length)
            
            		<span style="color: green;">' Save Bayesian database to disk and compress it.</span>
            		filter.SaveDatabase(spamDatabasePath, nonSpamDatabasePath, 3, <span style="color: blue;">False</span>)
            
            		fis = <span style="color: blue;">New</span> FileInfo(spamDatabasePath)
            		fins = <span style="color: blue;">New</span> FileInfo(nonSpamDatabasePath)
            		Console.WriteLine("Size of database after compacting is: {0}", fis.Length + fins.Length)
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Class</span>
            
            <span style="color: green;">' Outputs:</span>
            <span style="color: green;">' Size of database before compacting is: 21164</span>
            <span style="color: green;">' Size of database after compacting is: 11364 (may differ in your case)</span>
            </code>
            </example>
        </member>
        <member name="M:MailBee.AntiSpam.BayesFilter.ScoreMessage(MailBee.Mime.MailMessage)">
            <summary>
            Analyses the message and returns the probability of the message being spam.
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/>
            </summary>
            <param name="message">
            A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to be scored.
            </param>
            <returns>
            An integer value in 0-100 range, where 0 corresponds to "definitely non-spam"
            (0% spam probability) and 100 corresponds to "definitely spam" (100% spam probability).
            </returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            <para><see cref="M:MailBee.AntiSpam.BayesFilter.ScoreMessage(MailBee.Mime.MailMessage)"/> method will always show 50% result if the database is an empty or absent at all.
            So, there is no sense to use this method preparatory to the moment when the database has any data
            (the more the better).</para>
            <para>In case of multy-threading <see cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/> property
            should be set to <b>false</b>.</para>
            <para>When the <see cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/> property is set to <b>true</b>,
            Bayesian database may update itself in memory. It may need to update database on disk.
            To store database to disk please use <see cref="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String)"/> method.</para>
            </remarks>
            <example>
            The example is available in <see cref="T:MailBee.AntiSpam.BayesFilter"/> topic.
            </example>
        </member>
        <member name="M:MailBee.AntiSpam.BayesFilter.TrainFilter(MailBee.Mime.MailMessage,System.Boolean)">
            <summary>
            Learns from the specified message as from spam or non-spam source.
            </summary>
            <param name="message">
            A reference to the <see cref="T:MailBee.Mime.MailMessage"/> object representing the message to
            train the Bayesian filter.
            </param>
            <param name="isSpam"><b>true</b> if the message is a spam; <b>false</b>
            if it's a legitimate message.</param>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException">
            <paramref name="message"/> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            <para>Prior to starting using the Bayesian filter to detect spam messages
            you should learn it with a number of spam and non-spam messages. The
            filter becomes effective if the database contains at least hundreds of
            different spam and non-spam messages.</para>
            <para>This method updates the database only in memory. To store the
            database to disk, use <see cref="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String)"/> method.</para>
            </remarks>
            <example>
            <para>This sample trains Bayesian database with spam and non-spam messages and
            saves it to disk.</para>
            <para>It's assumed the spam and non-spam samples are .EML files located in
            C:\AntiSpam\Spam and C:\AntiSpam\NonSpam folders respectively. The database
            itself (spam.dat and nonspam.dat) will be saved in C:\AntiSpam folder.</para>
            <code lang="C#">
            <span style="color: green;">// To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> System.IO;
            <span style="color: blue;">using</span> MailBee.Mime;
            <span style="color: blue;">using</span> MailBee.AntiSpam;
            
            <span style="color: blue;">class</span> Sample
            {
            	<span style="color: blue;">static</span> <span style="color: blue;">void</span> Main(<span style="color: blue;">string</span>[] args)
            	{
            		BayesFilter filter = <span style="color: blue;">new</span> BayesFilter();
            		MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            
            		filter.LoadDatabase(@"C:\AntiSpam\spam.dat", @"C:\AntiSpam\nonspam.dat");
            
            		<span style="color: green;">// Train Bayesian filter for spam messages.</span>
            		<span style="color: blue;">string</span>[] files = Directory.GetFiles(@"C:\AntiSpam\Spam", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			filter.TrainFilter(msg, <span style="color: blue;">true</span>); <span style="color: green;">// Mark as spam.</span>
            		}
            		
            		<span style="color: green;">// Train Bayesian filter for non-spam messages.</span>
            		files = Directory.GetFiles(@"C:\AntiSpam\NonSpam", "*.eml");
            		<span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> file <span style="color: blue;">in</span> files)
            		{
            			msg.LoadMessage(file);
            			filter.TrainFilter(msg, <span style="color: blue;">false</span>); <span style="color: green;">// Mark as non-spam.</span>
            		}
            		
            		<span style="color: green;">// Save Bayesian database to disk.</span>
            		filter.SaveDatabase(@"C:\AntiSpam\spam.dat", @"C:\AntiSpam\nonspam.dat");
            	}
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import these namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> System.IO
            <span style="color: blue;">Imports</span> MailBee.Mime
            <span style="color: blue;">Imports</span> MailBee.AntiSpam
            
            <span style="color: blue;">Module</span> Sample
            	<span style="color: blue;">Sub</span> Main(<span style="color: blue;">ByVal</span> args() <span style="color: blue;">As</span> <span style="color: blue;">String</span>)
            		<span style="color: blue;">Dim</span> filter <span style="color: blue;">As</span> BayesFilter = <span style="color: blue;">New</span> BayesFilter()
            		<span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> MailMessage = <span style="color: blue;">New</span> MailMessage()
            
            		filter.LoadDatabase("C:\AntiSpam\spam.dat", "C:\AntiSpam\nonspam.dat")
            
            		<span style="color: green;">' Train Bayesian filter for spam messages.</span>
            		<span style="color: blue;">Dim</span> files() <span style="color: blue;">As</span> <span style="color: blue;">String</span> = Directory.GetFiles("C:\AntiSpam\Spam", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			filter.TrainFilter(msg, <span style="color: blue;">True</span>) <span style="color: green;">' Mark as spam.</span>
            		<span style="color: blue;">Next</span>
            		
            		<span style="color: green;">' Train Bayesian filter for non-spam messages.</span>
            		files = Directory.GetFiles("C:\AntiSpam\NonSpam", "*.eml")
            		<span style="color: blue;">For</span> <span style="color: blue;">Each</span> file <span style="color: blue;">As</span> <span style="color: blue;">String</span> <span style="color: blue;">In</span> files
            			msg.LoadMessage(file)
            			filter.TrainFilter(msg, <span style="color: blue;">False</span>) <span style="color: green;">' Mark as non-spam.</span>
            		<span style="color: blue;">Next</span>
            		
            		<span style="color: green;">' Save Bayesian database to disk.</span>
            		filter.SaveDatabase("C:\AntiSpam\spam.dat", "C:\AntiSpam\nonspam.dat")
            	<span style="color: blue;">End</span> <span style="color: blue;">Sub</span>
            <span style="color: blue;">End</span> <span style="color: blue;">Module</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.AntiSpam.BayesFilter.AutoLearning">
            <summary>
            Gets or sets if the filter should automatically learn during scoring
            messages on the words with the sufficient spam/non-spam weight.
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearningGradeAbove"/>
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearningGradeBelow"/>
            </summary>
            <value>
            <b>true</b> if all the words with the sufficient spam/non-spam weight
            detected during scoring the message should be added to the Bayesian
            database; <b>false</b> if no change of the database should take place.<br/>
            The default value is <b>false</b>.
            </value>
            <remarks>
            If <see cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/> is <b>true</b>, <see cref="M:MailBee.AntiSpam.BayesFilter.ScoreMessage(MailBee.Mime.MailMessage)"/> method
            will be able to update the database during its execution.
            To save changes, call <see cref="M:MailBee.AntiSpam.BayesFilter.SaveDatabase(System.String,System.String)"/> method prior your
            application finishes execution.
            <note>
            If you score multiple messages simultaneously in multi-threaded application,
            be aware that <see cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/> option makes <see cref="M:MailBee.AntiSpam.BayesFilter.ScoreMessage(MailBee.Mime.MailMessage)"/>
            method thread-unsafe.
            </note>
            </remarks>
        </member>
        <member name="P:MailBee.AntiSpam.BayesFilter.AutoLearningGradeAbove">
            <summary>
            Gets or sets the minimum score the message should get so that the filter will treat
            it as spam and automatically learn this.
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearningGradeBelow"/>
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/>
            </summary>
            <value>
            The integer value in 0-100 range specifying the minimum score the message should
            get so that the filter will automatically learn from it as from spam sample.<br/>
            The default value is 90.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is out of 0-100 range.
            </exception>
            <remarks>This property has no effect if <see cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/> is <b>false</b>.</remarks>
        </member>
        <member name="P:MailBee.AntiSpam.BayesFilter.AutoLearningGradeBelow">
            <summary>
            Gets or sets the maximum score the message should get so that the filter will treat
            it as non-spam and automatically learn this.
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearningGradeAbove"/>
            <seealso cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/>
            </summary>
            <value>
            The integer value in 0-100 range specifying the maximum score the message should
            get so that the filter will automatically learn from it as from non-spam sample.<br/>
            The default value is 5.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is out of 0-100 range.
            </exception>
            <remarks>This property has no effect if <see cref="P:MailBee.AntiSpam.BayesFilter.AutoLearning"/> is <b>false</b>.</remarks>
        </member>
        <member name="P:MailBee.AntiSpam.BayesFilter.Algorithm">
            <summary>
            Gets or sets the algorithm to be used for scoring messages.
            </summary>
            <value>
            The algorithm to be used for scoring messages.<br/>
            The default value is <see cref="F:MailBee.AntiSpam.BayesAlgorithm.ChiSquareAlgorithm"/>.
            </value>
            <remarks>
            Use <see cref="F:MailBee.AntiSpam.BayesAlgorithm.GrahamAlgorithm"/> for better speed;
            use <see cref="F:MailBee.AntiSpam.BayesAlgorithm.ChiSquareAlgorithm"/> for better accuracy.
            </remarks>
        </member>
        <member name="P:MailBee.AntiSpam.BayesFilter.LicenseKey">
            <summary>
            Assigns the license key.
            </summary>
            <value>A string value which contains the license key which unlocks the component.
            This property is write-only.</value>
            <exception cref="T:MailBee.MailBeeLicenseException">The license key is invalid.</exception>
            <remarks>
            <para>You can unlock AntiSpam BayesFilter by either setting this property to the valid
            permanent or trial license key or by adding MailBee.AntiSpam.BayesFilter.LicenseKey key
            in app.config, web.config, or machine.config file.</para>
            <para>This property is static (<b>Shared</b> in Visual Basic). If not set in the
            config file, this property must be set before creating any instances of
            <see cref="T:MailBee.AntiSpam.BayesFilter"/> class.</para>
            </remarks>
            <example>Setting this property and creating an instance of <see cref="T:MailBee.AntiSpam.BayesFilter"/> class.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.AntiSpam;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            BayesFilter.LicenseKey = "Permanent or trial license key here";
            BayesFilter filter = <span style="color: blue;">new</span> BayesFilter();
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.AntiSpam
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            BayesFilter.LicenseKey = "Permanent or trial license key here"
            <span style="color: blue;">Dim</span> filter <span style="color: blue;">As</span> <span style="color: blue;">New</span> BayesFilter
            </code>
            </example>
            <example>Setting the license key in the config file and creating an instance of <see cref="T:MailBee.AntiSpam.BayesFilter"/> class.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.AntiSpam;
            
            <span style="color: green;">// The actual code (put it into a method of your class)</span>
            BayesFilter filter = <span style="color: blue;">new</span> BayesFilter();
            
            <span style="color: green;">// XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.AntiSpam.BayesFilter.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">// In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            <code lang="Visual Basic">
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.AntiSpam
            
            <span style="color: green;">' The actual code (put it into a method of your class)</span>
            <span style="color: blue;">Dim</span> filter <span style="color: blue;">As</span> <span style="color: blue;">New</span> BayesFilter
            
            <span style="color: green;">' XML config file (app.config, web.config, or machine.config):</span>
            
            <span style="color: green;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
            <span style="color: green;">&lt;configuration&gt;</span>
            <span style="color: green;">&lt;appSettings&gt;</span>
            <span style="color: green;">&lt;add key="MailBee.AntiSpam.BayesFilter.LicenseKey" value="Permanent or trial license key here"/&gt;</span>
            <span style="color: green;">&lt;/appSettings&gt;</span>
            <span style="color: green;">&lt;/configuration&gt;</span>
            
            <span style="color: green;">' In .NET 2.0, it can be &lt;applicationSettings&gt; instead of &lt;appSettings&gt;.</span>
            </code>
            </example>
        </member>
        <member name="T:MailBee.Pop3Mail.Pop3MessageDownloadedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.Pop3Mail.Pop3.MessageDownloaded"/> event.
            </summary>
        </member>
        <member name="T:MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.Pop3Mail.Pop3.MessageDownloaded"/> event.
            </summary>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs.MessageNumber">
            <summary>
            Gets the message number (ordinal position in the mailbox) of the downloaded message.
            </summary>
            <value>An integer value in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>,
            representing the message number of the downloaded message.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs.DataLength">
            <summary>
            Gets the length (in bytes) of the server response containing the downloaded message data.
            </summary>
            <value>The length (in bytes) of the server response containing the downloaded message data.</value>
            <remarks>The length of the server response containing the downloaded message data is always
            greater than the length of the message data itself (usually by 1-2%). This is due to presence
            some additional information in the response, which is then stripped away.</remarks>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs.DownloadedMessage">
            <summary>
            Gets or sets the mail message which had been downloaded.
            </summary>
            <value>A reference to the mail message which had been just downloaded, or a null reference
            (<b>Nothing</b> in Visual Basic) if there had been no message data in the server response.</value>
            <remarks>
            <para>When this property value is a null reference, this usually means the mail server replied with
            a negative response instead of a message data. For instance, this may happen on attempt to download a messsage
            which had already been marked as deleted during the current POP3 session. In this case, the corresponding method
            of <see cref="T:MailBee.Pop3Mail.Pop3"/> class which had been used to download message(s) will throw an exception after the method has
            finished receiving data from the POP3 server.</para>
            <para>The developer can also manually set this property value to a null reference to avoid
            inclusion of this message into the resulting <see cref="T:MailBee.Mime.MailMessageCollection"/>. For methods returning a single message
            (such as <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/>), the result will be a null reference.</para>
            <para>Setting this property to a null reference is also useful for downloading very large number of messages at once
            (when they won't fit in memory). In this case, the developer can save each message to database/disk in <see cref="E:MailBee.Pop3Mail.Pop3.MessageDownloaded"/>
            event handler and then set <see cref="P:MailBee.Pop3Mail.Pop3MessageDownloadedEventArgs.DownloadedMessage"/> to a null reference to free the resources. This is efficient
            and memory conservative appoach.</para>
            </remarks>
        </member>
        <member name="T:MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event.
            </summary>
        </member>
        <member name="T:MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs">
            <summary>
            Contains the event data for <see cref="E:MailBee.Pop3Mail.Pop3.MessageDataChunkReceived"/> event.
            </summary>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs.MessageNumber">
            <summary>
            Gets the message number (ordinal position in the mailbox) of the downloaded message.
            </summary>
            <value>An integer value in the range 1 to <see cref="P:MailBee.Pop3Mail.Pop3.InboxMessageCount"/>,
            representing the message number of the downloaded message.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs.BytesJustReceived">
            <summary>
            Gets the number of bytes received from the server during the operation which raised the
            current event.
            </summary>
            <value>The number of bytes received from the server during the operation which raised the
            current event.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs.TotalBytesReceived">
            <summary>
            Gets the total length (in bytes) of the already received data of the message currently
            being downloaded. 
            </summary>
            <value>The total length (in bytes) of the already received data of the message currently
            being downloaded, including the bytes just received.</value>
        </member>
        <member name="P:MailBee.Pop3Mail.Pop3MessageDataChunkReceivedEventArgs.EstimatedDataLength">
            <summary>
            Gets the expected length (in bytes) of the source data of the message being downloaded.
            </summary>
            <value>The expected length (in bytes) of the source data of the message being downloaded,
            or -1 if no estimation can be made.</value>
            <remarks>This property can be used to evaluate download progress of the current message
            being downloaded. However, its value is not 100% accurate because it's taken
            from the message size as reported by the server while actual length of the server
            response containing the message data is always greater (by 1-2%) due to presence
            some additional information in the response.
            <note>If partial messages are downloaded (such as message headers), this property
            returns -1, since the POP3 protocol has no feature to learn the length of a message header
            without downloading it. Only lengths of entire messages can be obtained. However,
            usually it's not a problem - since a message header is usually short, it is, anyway, received
            in a single network operation (which usually delivers 4-8 Kbytes of data).</note></remarks>
        </member>
        <member name="T:MailBee.HostResolvedEventHandler">
            <summary>
            Represents the method that will handle <b>HostResolved</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.HostResolved">Smtp.HostResolved</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.HostResolved">Pop3.HostResolved</see> or
            <see cref="E:MailBee.ImapMail.Imap.HostResolved">Imap.HostResolved</see>).
            </summary>
        </member>
        <member name="T:MailBee.HostResolvedEventArgs">
            <summary>
            Contains the event data for <b>HostResolved</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.HostResolved">Smtp.HostResolved</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.HostResolved">Pop3.HostResolved</see> or
            <see cref="E:MailBee.ImapMail.Imap.HostResolved">Imap.HostResolved</see>).
            </summary>
        </member>
        <member name="P:MailBee.HostResolvedEventArgs.RemoteHost">
            <summary>
            Gets a reference to the resolved host data.
            </summary>
            <value>The resolved host data.</value>
        </member>
        <member name="T:MailBee.SocketConnectedEventHandler">
            <summary>
            Represents the method that will handle <b>SocketConnected</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.SocketConnected">Smtp.SocketConnected</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.SocketConnected">Pop3.SocketConnected</see> or
            <see cref="E:MailBee.ImapMail.Imap.SocketConnected">Imap.SocketConnected</see>).
            </summary>
        </member>
        <member name="T:MailBee.SocketConnectedEventArgs">
            <summary>
            Contains the event data for <b>SocketConnected</b> events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.SocketConnected">Smtp.SocketConnected</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.SocketConnected">Pop3.SocketConnected</see> or
            <see cref="E:MailBee.ImapMail.Imap.SocketConnected">Imap.SocketConnected</see>).
            </summary>
        </member>
        <member name="P:MailBee.SocketConnectedEventArgs.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the remote host to which
            the connection was just established.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection with the remote host.</value>
        </member>
        <member name="P:MailBee.SocketConnectedEventArgs.RemoteHostName">
            <summary>
            Gets the name of the remote host to which the connection was just established.
            </summary>
            <value>A string indicating the name of the remote host.</value>
        </member>
        <member name="P:MailBee.SocketConnectedEventArgs.Protocol">
            <summary>
            Gets application-level protocol of the established connection.
            </summary>
            <value>The protocol of the established connection, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection will be used for.</remarks>
        </member>
        <member name="T:MailBee.DataTransferEventHandler">
            <summary>
            Represents the method that will handle events which occur on sending or receiving data
            to/from the server (such as
            <see cref="E:MailBee.SmtpMail.Smtp.DataSent">Smtp.DataSent</see>,
            <see cref="E:MailBee.SmtpMail.Smtp.DataReceived">Smtp.DataReceived</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.DataSent">Pop3.DataSent</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived">Pop3.DataReceived</see>,
            <see cref="E:MailBee.ImapMail.Imap.DataSent">Imap.DataSent</see>,
            <see cref="E:MailBee.ImapMail.Imap.DataReceived">Imap.DataReceived</see>).
            </summary>
        </member>
        <member name="T:MailBee.DataTransferEventArgs">
            <summary>
            Contains the event data for data sending/receiving events (such as
            <see cref="E:MailBee.SmtpMail.Smtp.DataSent">Smtp.DataSent</see>,
            <see cref="E:MailBee.SmtpMail.Smtp.DataReceived">Smtp.DataReceived</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.DataSent">Pop3.DataSent</see>,
            <see cref="E:MailBee.Pop3Mail.Pop3.DataReceived">Pop3.DataReceived</see>,
            <see cref="E:MailBee.ImapMail.Imap.DataSent">Imap.DataSent</see>,
            <see cref="E:MailBee.ImapMail.Imap.DataReceived">Imap.DataReceived</see>).
            </summary>
        </member>
        <member name="P:MailBee.DataTransferEventArgs.Data">
            <summary>
            Gets a reference to the data block (chunk) sent or received.
            </summary>
            <value>The data chunk which was sent or received.</value>
        </member>
        <member name="P:MailBee.DataTransferEventArgs.RemoteEndPoint">
            <summary>
            Gets a reference to the end point of the server host.
            </summary>
            <value>The end point which provides information about IP address and port of the
            connection with the server.</value>
        </member>
        <member name="P:MailBee.DataTransferEventArgs.RemoteHostName">
            <summary>
            Gets the host name of the server.
            </summary>
            <value>A string indicating the host name of the server.</value>
        </member>
        <member name="P:MailBee.DataTransferEventArgs.Protocol">
            <summary>
            Gets application-level protocol of the current connection.
            </summary>
            <value>The protocol of the current connection, or <see cref="F:MailBee.TopLevelProtocolType.Unknown"/>
            if the protocol is unknown.</value>
            <remarks>This value indicates the protocol this connection is used for.</remarks>
        </member>
        <member name="T:MailBee.Mime.TimeStampCollection">
            <summary>
            Provides properties and methods for examining the collection of <see cref="T:MailBee.Mime.TimeStamp"/> objects.
            <seealso cref="P:MailBee.Mime.MailMessage.TimeStamps"/>
            <seealso cref="T:MailBee.Mime.TimeStamp"/>
            </summary>
            <remarks>
            <para>When a mail message gets sent, it passes through one or more mail servers (gateways) during the delivery.
            Each mail server usually alters the message by adding a new Received header which contains the information about this server
            and time stamp of the moment when the message passed through this server. <see cref="T:MailBee.Mime.TimeStamp"/>
            class represents the information extracted from a single Received header during parsing the message.</para>
            <para>All <see cref="T:MailBee.Mime.TimeStamp"/> objects are stored in <see cref="T:MailBee.Mime.TimeStampCollection"/> which represents
            all Received headers of the message. You can access this collection using <see cref="P:MailBee.Mime.MailMessage.TimeStamps"/> property.</para>
            <para>The last <see cref="T:MailBee.Mime.TimeStamp"/> object in the collection usually represents the moment when the message was received
            by the destination mail server. MailBee uses this <see cref="T:MailBee.Mime.TimeStamp"/> object to obtain <see cref="P:MailBee.Mime.MailMessage.DateReceived"/> value.</para>
            <note>Some mail servers do not add Received headers. Thus, no time stamps will be available to the application. In this case, the only way to
            obtain the date when the message was received is to get <see cref="T:MailBee.ImapMail.Envelope"/> of the message using IMAP and get the date from
            <see cref="P:MailBee.ImapMail.Envelope.DateReceived"/> property. Also, even if Received header itself is available, some of its fields may be missing.</note>
            <para>Because <see cref="T:MailBee.Mime.TimeStampCollection"/> object contains all the time stamps associated with the message,
            you can easily find out the full route of the message from its sender to its recipient, determine
            if there had been any delays during the delivery, etc.</para>
            </remarks>
            <example>This sample loads the message from .EML file and, for each of the time stamps, displays the information (if available)
            about the host which sent or relayed this message.
            <code lang="C#">
            <span style="color: green;">// To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">using</span> MailBee;
            <span style="color: blue;">using</span> MailBee.Mime;
            
            <span style="color: green;">// The actual code (put it into a method of your class).</span>
            MailMessage msg = <span style="color: blue;">new</span> MailMessage();
            msg.LoadMessage(@"C:\Docs\TestMail.eml");
            <span style="color: blue;">foreach</span> (TimeStamp ts <span style="color: blue;">in</span> msg.TimeStamps)
            {
            	Console.WriteLine(ts.From);
            }
            </code>
            <code lang="Visual Basic">
            <span style="color: green;">' To use the code below, import MailBee namespaces at the top of your code.</span>
            <span style="color: blue;">Imports</span> MailBee
            <span style="color: blue;">Imports</span> MailBee.Mime
            
            <span style="color: green;">' The actual code (put it into a method of your class).</span>
            <span style="color: blue;">Dim</span> msg <span style="color: blue;">As</span> <span style="color: blue;">New</span> MailMessage
            msg.LoadMessage("C:\Docs\TestMail.eml")
            <span style="color: blue;">For</span> <span style="color: blue;">Each</span> ts <span style="color: blue;">As</span> TimeStamp <span style="color: blue;">In</span> msg.TimeStamps
            	Console.WriteLine(ts.From)
            <span style="color: blue;">Next</span>
            </code>
            </example>
        </member>
        <member name="P:MailBee.Mime.TimeStampCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailBee.Mime.TimeStamp"/> object at the specified zero-based index in the collection.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:MailBee.Mime.TimeStamp"/> object in the collection.</param>
            <value>
            A <see cref="T:MailBee.Mime.TimeStamp"/> object having the specified zero-based index in the collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index does not exist.</exception>
        </member>
        <member name="T:MailBee.Mime.StringConversionMode">
            <summary>
            Defines the modes which specify if (and how) the values of string properties of <see cref="T:MailBee.Mime.MailMessage"/> and
            dependent objects should be charset-converted when being returned to the application.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.CharsetConverter"/>
            </summary>
            <remarks>
            <para>By default, all string properties of <see cref="T:MailBee.Mime.MailMessage"/> and dependent objects (such as <see cref="T:MailBee.Mime.Attachment"/>,
            <see cref="T:MailBee.Mime.MimePart"/>, etc) return string values in Unicode. Most applications live fine with that.</para>
            <para>However, if you are developing non-Unicode web application (i.e. it can use the charset different from UTF-8), you can use
            <see cref="P:MailBee.Mime.StringConversionConfig.ConversionMode">MailMessage.Parser.CharsetConverter.ConversionMode</see> property
            to tell MailBee to return strings in another charset encoding.</para>
            <para>The modes defined in this enumeration control if the message data will be returned as Unicode
            or will retain the same encoding it has in the message or will be converted using another encoding.</para>
            </remarks>
        </member>
        <member name="F:MailBee.Mime.StringConversionMode.NoConversion">
            <summary>
            The strings will be returned as Unicode. This is normal behavior suitable for most applications.
            </summary>
        </member>
        <member name="F:MailBee.Mime.StringConversionMode.KeepOriginalByteEncoding">
            <summary>
            The original encoding of the string data should be kept.
            </summary>
        </member>
        <member name="F:MailBee.Mime.StringConversionMode.ConvertToWinByteEncoding">
            <summary>
            Convert the string data into Windows version of the original encoding.
            </summary>
        </member>
        <member name="F:MailBee.Mime.StringConversionMode.ConvertToDestinationEncoding">
            <summary>
            Convert the string data into the specified <see cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/>.
            </summary>
        </member>
        <member name="T:MailBee.Mime.StringConversionConfig">
            <summary>
            Provides properties the developer can use to affect how the values of string properties of <see cref="T:MailBee.Mime.MailMessage"/> and
            dependent objects should be charset-converted when being returned to the application.
            <seealso cref="P:MailBee.Mime.MailMessage.Parser"/>
            </summary>
            <remarks>
            <para>This class is for advanced use. Use it only if have web application which is non-Unicode (not UTF-8) and you need
            to avoid conversion of the mail message data into the response charset. This may happen when ASP.NET
            produces the page output (which consits of 8-bit bytes, not 16-bit Unicode chars) and thus converts the data
            from strings into bytes. The default conversion into the response charset may cause loss of characters
            which are not defined in this charset.</para>
            <para>To avoid this, MailBee can simulate that the message data belong to the system charset
            while this is actually not so. The details of "string to byte and back to string" approach are:
            <list type="number">
            <item><description>Convert a string into bytes accordingly the appropriate character encoding (this encoding can be
            taken from the charset information of the message or hardcoded using <see cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/> property).</description></item>
            <item><description>Convert the bytes into a string accordingly <see cref="P:MailBee.Mime.StringConversionConfig.CustomByteEncoding"/> (prior to that,
            the application should set <see cref="P:MailBee.Mime.StringConversionConfig.CustomByteEncoding"/> to the value of <i>responseEncoding</i> setting
            of web.config file) and return the resulting string to the application.</description></item>
            <item><description>Then, ASP.NET takes the string generated at the previous step and puts it into the response buffer (which is a byte stream) by
            converting it from the string into bytes (i.e. opposite action). Since ASP.NET uses the same <i>responseEncoding</i> for that, the resulting byte array will be exactly the same as
            the one generated at the first step (the second and the third steps compensated each other). This way, the client will receive the same bytes which have been generated by MailBee
            (these bytes hold the message data encoded in the original message charset or in <see cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/> charset). Thus, no characters
            will be lost when ASP.NET produces the page response and thus converts the string data into <i>responseEncoding</i> even if
            the string data contain characters which are not defined in <i>responseEncoding</i> charset.</description></item>
            </list>
            Because the client will receive the message data in the charset specified in the message (or in
            <see cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/> charset), you should also properly set META tag of the HTML data received by the client.
            You can use <see cref="P:MailBee.Mime.MessageParserConfig.CharsetMetaTagMode">MailMessage.Parser.CharsetMetaTagMode</see> property for this.
            However, if you have not hard-coded the desired charset with <see cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/> property
            and send the message data in its original charset, you should also take care of any other non-ASCII data
            you may be sending in the server response. For instance, if the HTML data you're sending to the client
            browser also contain any labels with international characters (such as localized UI elements),
            they may render incorrectly if they belong to another charset (not the one used the message was composed in).
            The typical workaround is to HTML encode any international characters so they would become charset independent.
            </para>
            <para>In short, the main purpose of this class is to transfer the given byte data (as it appears in the message) to the client provided that this
            data will pass through ASP.NET response generator which accepts only strings. This means the byte data should be wrapped
            into strings using the same encoding used by ASP.NET to convert them from strings back to bytes. You should set this encoding via
            <see cref="P:MailBee.Mime.StringConversionConfig.CustomByteEncoding"/> property.</para>
            <para>With this class it's also possible to modify the encoding of the byte data itself (<see cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/> property).
            It affects the charset of the data the client will receive. Or, you can tell MailBee to retain the original charset encoding of the data as
            it appears in the message.</para>
            <para>To set a particular mode of the charset conversion, use <see cref="P:MailBee.Mime.StringConversionConfig.ConversionMode"/> property.</para>
            <note>This class cannot be used on its own. To access its members, use
            <see cref="P:MailBee.Mime.MessageParserConfig.CharsetConverter">MailMessage.Parser.CharsetConverter</see> property.</note>
            </remarks>
        </member>
        <member name="P:MailBee.Mime.StringConversionConfig.ConversionMode">
            <summary>
            Gets or sets the mode of charset conversion of the values of string properties of
            <see cref="T:MailBee.Mime.MailMessage"/> object.
            <seealso cref="P:MailBee.Mime.MessageParserConfig.CharsetConverter"/>
            </summary>
            <value>
            The mode which specifies how to convert the charset of the values of string properties of <see cref="T:MailBee.Mime.MailMessage"/>
            and dependent objects when returning these values to the application.
            The default value is <see cref="F:MailBee.Mime.StringConversionMode.NoConversion"/>.
            </value>
        </member>
        <member name="P:MailBee.Mime.StringConversionConfig.DestinationEncoding">
            <summary>
            Gets or sets the charset of the returned values of string properties of <see cref="T:MailBee.Mime.MailMessage"/> object.
            <seealso cref="P:MailBee.Mime.StringConversionConfig.ConversionMode"/>
            </summary>
            <value>
            A character <see cref="T:System.Text.Encoding"/> into which to convert the string values when returning them from
            string properties of <see cref="T:MailBee.Mime.MailMessage"/> and dependent objects to the application.
            The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.
            </value>
            <remarks>This property has no effect unless <see cref="P:MailBee.Mime.StringConversionConfig.ConversionMode"/> is set to
            <see cref="F:MailBee.Mime.StringConversionMode.ConvertToDestinationEncoding"/>.</remarks>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:MailBee.Mime.StringConversionConfig.CustomByteEncoding">
            <summary>
            Gets or sets the base encoding of the returned values of string properties of <see cref="T:MailBee.Mime.MailMessage"/> object.
            <seealso cref="P:MailBee.Mime.StringConversionConfig.DestinationEncoding"/>
            </summary>
            <value>
            An <see cref="T:System.Text.Encoding"/> to use as base encoding of the returned values
            of string properties of <see cref="T:MailBee.Mime.MailMessage"/> and dependent objects.
            The default value is <see cref="P:MailBee.Global.DefaultEncoding"/>.
            </value>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>You should set this property to the value of <i>responseEncoding</i> of the ASP.NET application (it's usually set
            in web.config file).</para>
            <para>This encoding specifies the encoding to be used on the second step of "string to byte and back to string" conversion when converting bytes into strings.</para>
            </remarks>
        </member>
        <member name="T:MailBee.ImapMail.FolderQuota">
            <summary>
            Represents a resource usage and quota indicator for the entire account or
            a single folder of this account.
            <seealso cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/>
            <seealso cref="M:MailBee.ImapMail.Imap.GetFolderQuota(System.String)"/>
            <seealso cref="M:MailBee.ImapMail.Imap.GetExtension(System.String)"/>
            </summary>
            <remarks>
            <para>
            Quotas provide the convenient way of determining the maximum and used size of account/folder storage.
            To obtain quotas, the developer can use <see cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/> or <see cref="M:MailBee.ImapMail.Imap.GetFolderQuota(System.String)"/> methods.
            </para>
            <para>
            However, the IMAP4 server must support QUOTA capability in order to take advantage of quotas.
            The developer may check if the server supports QUOTA using <see cref="M:MailBee.ImapMail.Imap.GetExtension(System.String)"/> method
            passing "QUOTA" as <i>name</i> parameter value. See <see cref="M:MailBee.ImapMail.Imap.GetAccountQuota"/> topic for
            the sample code.
            </para>
            <note>Even if the servers supports QUOTA capability, there is no guarantee all the properties
            of <see cref="T:MailBee.ImapMail.FolderQuota"/> object will be set. This is not error, it just means the account
            or folder has no restrictions on the particular resource usage. For instance, <see cref="P:MailBee.ImapMail.FolderQuota.MaxMessageCount"/>
            and <see cref="P:MailBee.ImapMail.FolderQuota.CurrentMessageCount"/> may return -1 which means the mail server does not care
            about number of messages in the account.</note>
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderQuota.QuotaName">
            <summary>
            Gets the name of the quota.
            </summary>
            <value>The string containing the name assigned by the mail server to the quota.</value>
            <remarks>Since the account can have multiple quotas assigned (for instance, one quota per folder),
            it's possible to distinguish between individual quota objects using the quota name.
            Most applications, however, can safely ignore this property value.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderQuota.CurrentStorageSize">
            <summary>
            Gets the size (in bytes) of the currently used space in the account or folder the quota applies to. 
            </summary>
            <value>The non-negative <see cref="T:System.Int64"/> value containing the size (in bytes) of the currently used space in the account or folder the quota applies to,
            or -1 if this information is not available.</value>
            <remarks>This value, if non-negative, is a multiple of 1024 (this is because the mail server actually
            returns this value in kilobytes). Thus, the developer can divide it by 1024 to get the value returned by the server.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderQuota.MaxStorageSize">
            <summary>
            Gets the storage limit (in bytes) for the account or folder the quota applies to. 
            </summary>
            <value>The non-negative <see cref="T:System.Int64"/> value containing the storage limit (in bytes) for the account or folder the quota applies to,
            or -1 if this information is not available.</value>
            <remarks>This value, if non-negative, is a multiple of 1024 (this is because the mail server actually
            returns this value in kilobytes). Thus, the developer can divide it by 1024 to get the value returned by the server.</remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderQuota.CurrentMessageCount">
            <summary>
            Gets the number of messages currently existing in the account or folder the quota applies to. 
            </summary>
            <value>The non-negative <see cref="T:System.Int32"/> value containing the number of messages currently existing in the account or folder the quota applies to,
            or -1 if this information is not available.</value>
            <remarks>
            Nowdays, most servers limit maximum storage size only (maximum number of messages is not limited).
            Due to this, <see cref="P:MailBee.ImapMail.FolderQuota.CurrentMessageCount"/> and <see cref="P:MailBee.ImapMail.FolderQuota.MaxMessageCount"/> properties usually
            return -1.
            </remarks>
        </member>
        <member name="P:MailBee.ImapMail.FolderQuota.MaxMessageCount">
            <summary>
            Gets the maximum message number limit for the account or folder the quota applies to. 
            </summary>
            <value>The non-negative <see cref="T:System.Int32"/> value containing the maximum message number limit for the account or folder the quota applies to,
            or -1 if this information is not available.</value>
            <remarks>
            Nowdays, most servers limit maximum storage size only (maximum number of messages is not limited).
            Due to this, <see cref="P:MailBee.ImapMail.FolderQuota.CurrentMessageCount"/> and <see cref="P:MailBee.ImapMail.FolderQuota.MaxMessageCount"/> properties usually
            return -1.
            </remarks>
        </member>
        <member name="T:MailBee.IMailBeeFatalException">
            <summary>
            When implemented by an exception class, indicates the exception is fatal and the component
            is no longer usable in the current state, so that any active tasks must be finished as soon as possible.
            </summary>
            <value>Typical examples of fatal errors are: the operation is aborted by the user,
            no valid license is assigned to the component, etc.</value>
        </member>
        <member name="T:MailBee.MailBeeUserAbortException">
            <summary>
            The exception that is thrown after <b>Abort</b> method of MailBee component has been called.
            </summary>
            <remarks>For instance, if the <see cref="T:MailBee.Pop3Mail.Pop3"/> component is downloading
            mail (<see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/> method is in progress),
            and <see cref="M:MailBee.Pop3Mail.Pop3.Abort"/> is called, <see cref="M:MailBee.Pop3Mail.Pop3.DownloadEntireMessage(System.Int32)"/> method
            will throw this exception.</remarks>
        </member>
        <member name="T:MailBee.MailBeeLicenseException">
            <summary>
            The exception that is thrown during instantiation of a MailBee component or calling a
            static (<b>Shared</b> in Visual Basic) method of a component in the case when no valid license has been assigned to
            the component.
            </summary>
            <remarks>
            <para>Make sure <b>LicenseKey</b> static property of the component is already assigned
            to the correct license key to the moment of creating an instance or calling static method of the licensed class.</para>
            <para>Currently, the licensed classes in MailBee are: <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, and <see cref="T:MailBee.ImapMail.Imap"/>.</para>
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeInternalException">
            <summary>
            The exception that is thrown when an unexpected error occurs in MailBee code.
            </summary>
            <remarks>Please contact AfterLogic support team if you've got this exception.</remarks>
        </member>
        <member name="T:MailBee.MailBeeExternalException">
            <summary>
            The exception that is thrown when an error occurs in the code outside MailBee.
            </summary>
            <remarks>Usually, this exception is thrown in the following scenario. Let's say
            the application is subscribed to a certain MailBee event. Now MailBee raises this event
            and starts executing the event handler supplied by the developer.
            If the event handler code (external code to MailBee) throws an exception, MailBee's
            event raiser catches this exception and throws <see cref="T:MailBee.MailBeeExternalException"/>
            specifying the original exception in <see cref="P:System.Exception.InnerException"/> property value.
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeInvalidStateException">
            <summary>
            The exception that is thrown when the requested operation cannot be performed in the current state.
            </summary>
            <remarks>
            <para>This exception is thrown even if <b>ThrowExceptions</b> property value of MailBee
            component (such as <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, and <see cref="T:MailBee.ImapMail.Imap"/>) is set to
            <b>false</b> because it indicates there is an error in the application code (for instance,
            <b>Connect</b> method is called when already connected).</para>
            <para><see cref="T:MailBee.MailBeeInvalidStateException"/> should never occur if the application is written
            correctly.</para>
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeInvalidArgumentException">
            <summary>
            The exception that is thrown when an invalid argument value is passed to a method or property.
            </summary>
            <remarks>
            <para>This exception can be thrown even if <b>ThrowExceptions</b> property value of MailBee
            component (such as <see cref="T:MailBee.SmtpMail.Smtp"/>, <see cref="T:MailBee.Pop3Mail.Pop3"/>, and <see cref="T:MailBee.ImapMail.Imap"/>) is set to
            <b>false</b> because it may indicate there is an error in the application code (for instance,
            network port to connect to cannot be a negative value).</para>
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeBatchException">
            <summary>
            The exception that is thrown when certain job in a batch of scheduled jobs fails and the component
            is configured to cancel processing in this case.
            </summary>
            <remarks>
            This exception typically occurs when <see cref="T:MailBee.SmtpMail.Smtp"/> component performs sending out
            multiple messages (bulk mail merge) and sending of certain mail message fails. This exception
            won't occur, however, if the component is allowed to skip failed messages and proceed
            (<see cref="P:MailBee.SmtpMail.Smtp.StopJobsOnError"/> is <b>false</b>).
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeSystemSettingsException">
            <summary>
            The exception that is thrown when an attempt to request certain information from the system failed.
            </summary>
            <remarks>
            For instance, this exception can be thrown on direct send attempt using <see cref="M:MailBee.SmtpMail.Smtp.QuickSend(MailBee.Mime.MailMessage)"/> method when
            there are no DNS servers registered in the system.
            </remarks>
        </member>
        <member name="T:MailBee.MailBeeStreamException">
            <summary>
            The exception that is thrown when the operation with data stream throws <see cref="T:System.IO.IOException"/>.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeIOException">
            <summary>
            The exception that is thrown when the IO operation with file or folder throws one of the following exceptions:
            <see cref="T:System.IO.IOException"/>, <see cref="T:System.UnauthorizedAccessException"/>,
            <see cref="T:System.IO.FileNotFoundException"/>, or <see cref="T:System.Xml.XmlException"/>.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeWebException">
            <summary>
            The exception that is thrown when underlying network operation throws the <see cref="T:System.Net.WebException"/>.
            </summary>
        </member>
        <member name="T:MailBee.MailBeeDataParsingException">
            <summary>
            The exception that is thrown when an unexpected error occurs during converting a string into the required format (such as integer).
            </summary>
            <remarks>For instance, this exception may occur during reading Bayesian database.</remarks>
        </member>
        <member name="T:MailBee.MailBeeDateParsingException">
            <summary>
            The exception that is thrown when an unexpected error occurs during converting a string into <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>For instance, this exception may occur during reading <see cref="P:MailBee.Mime.MailMessage.Date"/> property value.</remarks>
        </member>
        <member name="T:MailBee.DnsMX.DnsServerCollection">
            <summary>
            Represents a sorted collection of <see cref="T:MailBee.DnsMX.DnsServer"/> objects.
            </summary>
            <remarks>When <see cref="P:MailBee.SmtpMail.Smtp.DnsServers"/> collection is populated
            with at least one DNS server of higher priority than the top priority SMTP server in
            <see cref="P:MailBee.SmtpMail.Smtp.SmtpServers"/> collection (or if SMTP collection is empty),
            <see cref="T:MailBee.SmtpMail.Smtp"/> component will by default send e-mails in direct send mode
            (via MX lookup).</remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsServerCollection.Add(MailBee.DnsMX.DnsServer)">
            <summary>
            Adds a <see cref="T:MailBee.DnsMX.DnsServer"/> to the collection and sorts the collection
            according to the elements priorities.
            </summary>
            <param name="server">A <see cref="T:MailBee.DnsMX.DnsServer"/> to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>It's recommended to add elements from higher priority to lower priority.
            Thus, the elements will stay in the same order as they were added.</remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsServerCollection.Add(System.String)">
            <summary>
            Adds a top (0) priority DNS server under the specified IP address to the collection
            and sorts the collection according to the elements priorities.
            </summary>
            <param name="host">IP address of the DNS server to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>A reference to <see cref="T:MailBee.DnsMX.DnsServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="host"/> is not a valid IP address string.</exception>
        </member>
        <member name="M:MailBee.DnsMX.DnsServerCollection.Add(System.String,System.Int32)">
            <summary>
            Adds a DNS server under the specified IP address and with a particular priority to the collection
            and sorts the collection according to the elements priorities.
            </summary>
            <param name="host">IP address of the DNS server to be added to the collection.
            The value cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <param name="priority">A preference of the DNS server. Lower values are preferred.</param>
            <returns>A reference to <see cref="T:MailBee.DnsMX.DnsServer"/> object which was created
            based on the given parameter values and then added to the collection.</returns>
            <exception cref="T:MailBee.MailBeeInvalidArgumentException"><paramref name="host"/> is not a valid IP address string.</exception>
            <remarks>It's recommended to add elements from higher priority to lower priority.
            Thus, the elements will stay in the same order as they were added.</remarks>
        </member>
        <member name="M:MailBee.DnsMX.DnsServerCollection.Remove(MailBee.DnsMX.DnsServer)">
            <summary>
            Removes the specified <see cref="T:MailBee.DnsMX.DnsServer"/> object from the collection.
            </summary>
            <param name="server">A reference to the <see cref="T:MailBee.DnsMX.DnsServer"/> object to be removed.</param>
        </member>
        <member name="M:MailBee.DnsMX.DnsServerCollection.Autodetect">
            <summary>
            Clears and then populates the collection with <see cref="T:MailBee.DnsMX.DnsServer"/> objects by
            looking up the following sources:
            <list type="number">
            <item><description>"MailBee.DnsMX.DnsServerCollection" key in the config file.</description></item>
            <item><description>Windows registry.</description></item>
            <item><description>WMI database.</description></item>
            </list>
            <seealso cref="T:MailBee.DnsMX.DnsAutodetectOptions"/>
            </summary>
            <remarks>
            <para>
            Once at least one DNS server definition is found, these definitions are added to the collection
            as <see cref="T:MailBee.DnsMX.DnsServer"/> objects, and the method returns.</para>
            <para>You can find more information and code samples on MailBee DNS server autodetection
            mechanism in <see cref="T:MailBee.DnsMX.DnsAutodetectOptions"/> enumeration documentation.</para>
            <note>WMI database search requires Full trust for MailBee assembly. If the current security setting is
            lower than Full trust, WMI database search won't find any DNS server definitions.</note>
            </remarks>
            <returns><b>true</b> if at least one DNS server was found; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:MailBee.DnsMX.DnsServerCollection.Autodetect(MailBee.DnsMX.DnsAutodetectOptions)">
            <summary>
            Clears and then populates the collection with <see cref="T:MailBee.DnsMX.DnsServer"/> objects by
            looking up the specified sources.
            <seealso cref="T:MailBee.DnsMX.DnsAutodetectOptions"/>
            </summary>
            <param name="options">The sources to look DNS server definitons for.</param>
            <remarks>
            Once at least one DNS server definition is found, these definitions are added to the collection
            as <see cref="T:MailBee.DnsMX.DnsServer"/> objects, and the method returns.
            <note>WMI database search requires Full trust for MailBee assembly. If the current security setting is
            lower than Full trust, WMI database search won't find any DNS server definitions.</note>
            </remarks>
            <returns><b>true</b> if at least one DNS server was found; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:MailBee.DnsMX.DnsServerCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the entry to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
    </members>
</doc>
